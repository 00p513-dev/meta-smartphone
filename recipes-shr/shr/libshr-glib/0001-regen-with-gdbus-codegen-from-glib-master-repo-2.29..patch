From f3b9d6813e4cfbf8ea2acbdd94e594a50b715532 Mon Sep 17 00:00:00 2001
From: Martin Jansa <Martin.Jansa@gmail.com>
Date: Wed, 4 May 2011 14:21:27 +0200
Subject: [PATCH 1/2] regen with gdbus-codegen from glib master repo (2.29.3)

Signed-off-by: Martin Jansa <Martin.Jansa@gmail.com>
---
 src/Makefile.am                 |   14 +-
 src/shr-bindings-sections.txt   |  462 -----
 src/shr-bindings.h              |   23 -
 src/shr-bindings.stamp          |   30 -
 src/shr-bindings.types          |   28 -
 src/shr-bindingsprivate.c       |    8 -
 src/shr-bindingsprivate.h       |   13 -
 src/shr-marshallers.c           |  431 -----
 src/shr-marshallers.h           |   84 -
 src/shr-marshallers.list        |    9 -
 src/shr-phonefsousage.c         | 3537 +++++++++++++++++----------------------
 src/shr-phonefsousage.h         |  528 +++----
 src/shr-phoneuicallmanagement.c | 2869 ++++++++++++++------------------
 src/shr-phoneuicallmanagement.h |  460 +++---
 src/shr-phoneuicontacts.c       | 2775 +++++++++++++-----------------
 src/shr-phoneuicontacts.h       |  442 ++---
 src/shr-phoneuidialer.c         | 1751 ++++++++-----------
 src/shr-phoneuidialer.h         |  310 ++---
 src/shr-phoneuiidlescreen.c     | 2809 +++++++++++++------------------
 src/shr-phoneuiidlescreen.h     |  444 ++---
 src/shr-phoneuimessages.c       | 2408 ++++++++++++---------------
 src/shr-phoneuimessages.h       |  398 ++---
 src/shr-phoneuinotification.c   | 3098 +++++++++++++++-------------------
 src/shr-phoneuinotification.h   |  486 +++---
 src/shr-phoneuiphonelog.c       | 1751 ++++++++-----------
 src/shr-phoneuiphonelog.h       |  310 ++---
 src/shr-phoneuisettings.c       | 2654 +++++++++++++-----------------
 src/shr-phoneuisettings.h       |  424 ++---
 src/shr-proxymanager.c          |  273 ---
 src/shr-proxymanager.h          |   99 --
 src/shr-types.h                 |   12 -
 31 files changed, 11739 insertions(+), 17201 deletions(-)
 delete mode 100644 src/shr-bindings-sections.txt
 delete mode 100644 src/shr-bindings.h
 delete mode 100644 src/shr-bindings.stamp
 delete mode 100644 src/shr-bindings.types
 delete mode 100644 src/shr-bindingsprivate.c
 delete mode 100644 src/shr-bindingsprivate.h
 delete mode 100644 src/shr-marshallers.c
 delete mode 100644 src/shr-marshallers.h
 delete mode 100644 src/shr-marshallers.list
 delete mode 100644 src/shr-proxymanager.c
 delete mode 100644 src/shr-proxymanager.h
 delete mode 100644 src/shr-types.h

diff --git a/src/Makefile.am b/src/Makefile.am
index 33e3af7..5a2b6cf 100644
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -12,9 +12,6 @@ GDBUSCODEGENFLAGS = \
 BUILT_SOURCES = libshr_glib_la.bindings.stamp
 
 SHRHEADERS = \
-	shr-bindings.h \
-	shr-bindingsprivate.h \
-	shr-marshallers.h \
 	shr-phonefsousage.h \
 	shr-phoneuicallmanagement.h \
 	shr-phoneuicontacts.h \
@@ -23,13 +20,9 @@ SHRHEADERS = \
 	shr-phoneuimessages.h \
 	shr-phoneuinotification.h \
 	shr-phoneuiphonelog.h \
-	shr-phoneuisettings.h \
-	shr-proxymanager.h \
-	shr-types.h
+	shr-phoneuisettings.h 
 
 SHRSOURCES = \
-	shr-bindingsprivate.c \
-	shr-marshallers.c \
 	shr-phonefsousage.c \
 	shr-phoneuicallmanagement.c \
 	shr-phoneuicontacts.c \
@@ -38,8 +31,7 @@ SHRSOURCES = \
 	shr-phoneuimessages.c \
 	shr-phoneuinotification.c \
 	shr-phoneuiphonelog.c \
-	shr-phoneuisettings.c \
-	shr-proxymanager.c
+	shr-phoneuisettings.c 
 
 lib_LTLIBRARIES = libshr-glib.la
 
@@ -56,7 +48,7 @@ libshr_glib_la.bindings.stamp: gen-bindings $(libshr_glib_la_SOURCES)
 	touch $@
 
 gen-bindings:
-	gdbus-codegen --strip-prefix=org.shr --output-prefix=shr $(SHR_SPECS_DIR)/*.xml
+	for f in $(SHR_SPECS_DIR)/*.xml; do gdbus-codegen --interface-prefix org.shr --generate-c-code `echo $$f | sed 's/.*\///g; s/^org\.shr\./shr-/g; s/.xml//g; s/\.//g;' | awk  '{ printf tolower($$1)}'` $$f; done
 
 libshr_glib_la_LIBADD = \
 	$(DEPS_LIBS)
diff --git a/src/shr-bindings-sections.txt b/src/shr-bindings-sections.txt
deleted file mode 100644
index b3ef555..0000000
--- a/src/shr-bindings-sections.txt
+++ /dev/null
@@ -1,462 +0,0 @@
-<SECTION>
-<FILE>shr-phonefsousage</FILE>
-<TITLE>PhonefsoUsage</TITLE>
-PhonefsoUsage
-PhonefsoUsageIface
-phonefso_usage_interface_info
-GET_PHONEFSO_USAGE
-PEEK_PHONEFSO_USAGE
-PhonefsoUsageProxy
-PhonefsoUsageProxyClass
-phonefso_usage_proxy_new
-phonefso_usage_proxy_new_finish
-phonefso_usage_proxy_new_sync
-phonefso_usage_proxy_new_for_bus
-phonefso_usage_proxy_new_for_bus_finish
-phonefso_usage_proxy_new_for_bus_sync
-PhonefsoUsageStub
-PhonefsoUsageStubClass
-phonefso_usage_stub_new
-phonefso_usage_call_set_offline_mode
-phonefso_usage_call_set_offline_mode_finish
-phonefso_usage_call_set_offline_mode_sync
-phonefso_usage_call_get_offline_mode
-phonefso_usage_call_get_offline_mode_finish
-phonefso_usage_call_get_offline_mode_sync
-phonefso_usage_call_set_default_brightness
-phonefso_usage_call_set_default_brightness_finish
-phonefso_usage_call_set_default_brightness_sync
-phonefso_usage_call_get_default_brightness
-phonefso_usage_call_get_default_brightness_finish
-phonefso_usage_call_get_default_brightness_sync
-phonefso_usage_call_set_pdp_credentials
-phonefso_usage_call_set_pdp_credentials_finish
-phonefso_usage_call_set_pdp_credentials_sync
-phonefso_usage_call_set_pin
-phonefso_usage_call_set_pin_finish
-phonefso_usage_call_set_pin_sync
-phonefso_usage_complete_set_offline_mode
-phonefso_usage_complete_get_offline_mode
-phonefso_usage_complete_set_default_brightness
-phonefso_usage_complete_get_default_brightness
-phonefso_usage_complete_set_pdp_credentials
-phonefso_usage_complete_set_pin
-<SUBSECTION Standard>
-PHONEFSO_USAGE
-PHONEFSO_USAGE_GET_IFACE
-IS_PHONEFSO_USAGE
-TYPE_PHONEFSO_USAGE
-TYPE_PHONEFSO_USAGE_PROXY
-TYPE_PHONEFSO_USAGE_STUB
-<SUBSECTION Private>
-PhonefsoUsageProxyPrivate
-PhonefsoUsageStubPrivate
-phonefso_usage_get_gtype
-phonefso_usage_proxy_get_type
-phonefso_usage_stub_get_type
-</SECTION>
-
-<SECTION>
-<FILE>shr-phoneuicallmanagement</FILE>
-<TITLE>PhoneuiCallManagement</TITLE>
-PhoneuiCallManagement
-PhoneuiCallManagementIface
-phoneui_call_management_interface_info
-GET_PHONEUI_CALL_MANAGEMENT
-PEEK_PHONEUI_CALL_MANAGEMENT
-PhoneuiCallManagementProxy
-PhoneuiCallManagementProxyClass
-phoneui_call_management_proxy_new
-phoneui_call_management_proxy_new_finish
-phoneui_call_management_proxy_new_sync
-phoneui_call_management_proxy_new_for_bus
-phoneui_call_management_proxy_new_for_bus_finish
-phoneui_call_management_proxy_new_for_bus_sync
-PhoneuiCallManagementStub
-PhoneuiCallManagementStubClass
-phoneui_call_management_stub_new
-phoneui_call_management_call_display_incoming
-phoneui_call_management_call_display_incoming_finish
-phoneui_call_management_call_display_incoming_sync
-phoneui_call_management_call_hide_incoming
-phoneui_call_management_call_hide_incoming_finish
-phoneui_call_management_call_hide_incoming_sync
-phoneui_call_management_call_display_outgoing
-phoneui_call_management_call_display_outgoing_finish
-phoneui_call_management_call_display_outgoing_sync
-phoneui_call_management_call_hide_outgoing
-phoneui_call_management_call_hide_outgoing_finish
-phoneui_call_management_call_hide_outgoing_sync
-phoneui_call_management_complete_display_incoming
-phoneui_call_management_complete_hide_incoming
-phoneui_call_management_complete_display_outgoing
-phoneui_call_management_complete_hide_outgoing
-<SUBSECTION Standard>
-PHONEUI_CALL_MANAGEMENT
-PHONEUI_CALL_MANAGEMENT_GET_IFACE
-IS_PHONEUI_CALL_MANAGEMENT
-TYPE_PHONEUI_CALL_MANAGEMENT
-TYPE_PHONEUI_CALL_MANAGEMENT_PROXY
-TYPE_PHONEUI_CALL_MANAGEMENT_STUB
-<SUBSECTION Private>
-PhoneuiCallManagementProxyPrivate
-PhoneuiCallManagementStubPrivate
-phoneui_call_management_get_gtype
-phoneui_call_management_proxy_get_type
-phoneui_call_management_stub_get_type
-</SECTION>
-
-<SECTION>
-<FILE>shr-phoneuicontacts</FILE>
-<TITLE>PhoneuiContacts</TITLE>
-PhoneuiContacts
-PhoneuiContactsIface
-phoneui_contacts_interface_info
-GET_PHONEUI_CONTACTS
-PEEK_PHONEUI_CONTACTS
-PhoneuiContactsProxy
-PhoneuiContactsProxyClass
-phoneui_contacts_proxy_new
-phoneui_contacts_proxy_new_finish
-phoneui_contacts_proxy_new_sync
-phoneui_contacts_proxy_new_for_bus
-phoneui_contacts_proxy_new_for_bus_finish
-phoneui_contacts_proxy_new_for_bus_sync
-PhoneuiContactsStub
-PhoneuiContactsStubClass
-phoneui_contacts_stub_new
-phoneui_contacts_call_display_list
-phoneui_contacts_call_display_list_finish
-phoneui_contacts_call_display_list_sync
-phoneui_contacts_call_display_contact
-phoneui_contacts_call_display_contact_finish
-phoneui_contacts_call_display_contact_sync
-phoneui_contacts_call_create_contact
-phoneui_contacts_call_create_contact_finish
-phoneui_contacts_call_create_contact_sync
-phoneui_contacts_call_edit_contact
-phoneui_contacts_call_edit_contact_finish
-phoneui_contacts_call_edit_contact_sync
-phoneui_contacts_complete_display_list
-phoneui_contacts_complete_display_contact
-phoneui_contacts_complete_create_contact
-phoneui_contacts_complete_edit_contact
-<SUBSECTION Standard>
-PHONEUI_CONTACTS
-PHONEUI_CONTACTS_GET_IFACE
-IS_PHONEUI_CONTACTS
-TYPE_PHONEUI_CONTACTS
-TYPE_PHONEUI_CONTACTS_PROXY
-TYPE_PHONEUI_CONTACTS_STUB
-<SUBSECTION Private>
-PhoneuiContactsProxyPrivate
-PhoneuiContactsStubPrivate
-phoneui_contacts_get_gtype
-phoneui_contacts_proxy_get_type
-phoneui_contacts_stub_get_type
-</SECTION>
-
-<SECTION>
-<FILE>shr-phoneuidialer</FILE>
-<TITLE>PhoneuiDialer</TITLE>
-PhoneuiDialer
-PhoneuiDialerIface
-phoneui_dialer_interface_info
-GET_PHONEUI_DIALER
-PEEK_PHONEUI_DIALER
-PhoneuiDialerProxy
-PhoneuiDialerProxyClass
-phoneui_dialer_proxy_new
-phoneui_dialer_proxy_new_finish
-phoneui_dialer_proxy_new_sync
-phoneui_dialer_proxy_new_for_bus
-phoneui_dialer_proxy_new_for_bus_finish
-phoneui_dialer_proxy_new_for_bus_sync
-PhoneuiDialerStub
-PhoneuiDialerStubClass
-phoneui_dialer_stub_new
-phoneui_dialer_call_display
-phoneui_dialer_call_display_finish
-phoneui_dialer_call_display_sync
-phoneui_dialer_complete_display
-<SUBSECTION Standard>
-PHONEUI_DIALER
-PHONEUI_DIALER_GET_IFACE
-IS_PHONEUI_DIALER
-TYPE_PHONEUI_DIALER
-TYPE_PHONEUI_DIALER_PROXY
-TYPE_PHONEUI_DIALER_STUB
-<SUBSECTION Private>
-PhoneuiDialerProxyPrivate
-PhoneuiDialerStubPrivate
-phoneui_dialer_get_gtype
-phoneui_dialer_proxy_get_type
-phoneui_dialer_stub_get_type
-</SECTION>
-
-<SECTION>
-<FILE>shr-phoneuiidlescreen</FILE>
-<TITLE>PhoneuiIdleScreen</TITLE>
-PhoneuiIdleScreen
-PhoneuiIdleScreenIface
-phoneui_idle_screen_interface_info
-GET_PHONEUI_IDLE_SCREEN
-PEEK_PHONEUI_IDLE_SCREEN
-PhoneuiIdleScreenProxy
-PhoneuiIdleScreenProxyClass
-phoneui_idle_screen_proxy_new
-phoneui_idle_screen_proxy_new_finish
-phoneui_idle_screen_proxy_new_sync
-phoneui_idle_screen_proxy_new_for_bus
-phoneui_idle_screen_proxy_new_for_bus_finish
-phoneui_idle_screen_proxy_new_for_bus_sync
-PhoneuiIdleScreenStub
-PhoneuiIdleScreenStubClass
-phoneui_idle_screen_stub_new
-phoneui_idle_screen_call_display
-phoneui_idle_screen_call_display_finish
-phoneui_idle_screen_call_display_sync
-phoneui_idle_screen_call_hide
-phoneui_idle_screen_call_hide_finish
-phoneui_idle_screen_call_hide_sync
-phoneui_idle_screen_call_toggle
-phoneui_idle_screen_call_toggle_finish
-phoneui_idle_screen_call_toggle_sync
-phoneui_idle_screen_call_activate_screensaver
-phoneui_idle_screen_call_activate_screensaver_finish
-phoneui_idle_screen_call_activate_screensaver_sync
-phoneui_idle_screen_call_deactivate_screensaver
-phoneui_idle_screen_call_deactivate_screensaver_finish
-phoneui_idle_screen_call_deactivate_screensaver_sync
-phoneui_idle_screen_complete_display
-phoneui_idle_screen_complete_hide
-phoneui_idle_screen_complete_toggle
-phoneui_idle_screen_complete_activate_screensaver
-phoneui_idle_screen_complete_deactivate_screensaver
-<SUBSECTION Standard>
-PHONEUI_IDLE_SCREEN
-PHONEUI_IDLE_SCREEN_GET_IFACE
-IS_PHONEUI_IDLE_SCREEN
-TYPE_PHONEUI_IDLE_SCREEN
-TYPE_PHONEUI_IDLE_SCREEN_PROXY
-TYPE_PHONEUI_IDLE_SCREEN_STUB
-<SUBSECTION Private>
-PhoneuiIdleScreenProxyPrivate
-PhoneuiIdleScreenStubPrivate
-phoneui_idle_screen_get_gtype
-phoneui_idle_screen_proxy_get_type
-phoneui_idle_screen_stub_get_type
-</SECTION>
-
-<SECTION>
-<FILE>shr-phoneuimessages</FILE>
-<TITLE>PhoneuiMessages</TITLE>
-PhoneuiMessages
-PhoneuiMessagesIface
-phoneui_messages_interface_info
-GET_PHONEUI_MESSAGES
-PEEK_PHONEUI_MESSAGES
-PhoneuiMessagesProxy
-PhoneuiMessagesProxyClass
-phoneui_messages_proxy_new
-phoneui_messages_proxy_new_finish
-phoneui_messages_proxy_new_sync
-phoneui_messages_proxy_new_for_bus
-phoneui_messages_proxy_new_for_bus_finish
-phoneui_messages_proxy_new_for_bus_sync
-PhoneuiMessagesStub
-PhoneuiMessagesStubClass
-phoneui_messages_stub_new
-phoneui_messages_call_display_list
-phoneui_messages_call_display_list_finish
-phoneui_messages_call_display_list_sync
-phoneui_messages_call_display_message
-phoneui_messages_call_display_message_finish
-phoneui_messages_call_display_message_sync
-phoneui_messages_call_create_message
-phoneui_messages_call_create_message_finish
-phoneui_messages_call_create_message_sync
-phoneui_messages_complete_display_list
-phoneui_messages_complete_display_message
-phoneui_messages_complete_create_message
-<SUBSECTION Standard>
-PHONEUI_MESSAGES
-PHONEUI_MESSAGES_GET_IFACE
-IS_PHONEUI_MESSAGES
-TYPE_PHONEUI_MESSAGES
-TYPE_PHONEUI_MESSAGES_PROXY
-TYPE_PHONEUI_MESSAGES_STUB
-<SUBSECTION Private>
-PhoneuiMessagesProxyPrivate
-PhoneuiMessagesStubPrivate
-phoneui_messages_get_gtype
-phoneui_messages_proxy_get_type
-phoneui_messages_stub_get_type
-</SECTION>
-
-<SECTION>
-<FILE>shr-phoneuinotification</FILE>
-<TITLE>PhoneuiNotification</TITLE>
-PhoneuiNotification
-PhoneuiNotificationIface
-phoneui_notification_interface_info
-GET_PHONEUI_NOTIFICATION
-PEEK_PHONEUI_NOTIFICATION
-PhoneuiNotificationProxy
-PhoneuiNotificationProxyClass
-phoneui_notification_proxy_new
-phoneui_notification_proxy_new_finish
-phoneui_notification_proxy_new_sync
-phoneui_notification_proxy_new_for_bus
-phoneui_notification_proxy_new_for_bus_finish
-phoneui_notification_proxy_new_for_bus_sync
-PhoneuiNotificationStub
-PhoneuiNotificationStubClass
-phoneui_notification_stub_new
-phoneui_notification_call_display_sim_auth
-phoneui_notification_call_display_sim_auth_finish
-phoneui_notification_call_display_sim_auth_sync
-phoneui_notification_call_hide_sim_auth
-phoneui_notification_call_hide_sim_auth_finish
-phoneui_notification_call_hide_sim_auth_sync
-phoneui_notification_call_display_ussd
-phoneui_notification_call_display_ussd_finish
-phoneui_notification_call_display_ussd_sync
-phoneui_notification_call_display_dialog
-phoneui_notification_call_display_dialog_finish
-phoneui_notification_call_display_dialog_sync
-phoneui_notification_call_feedback_action
-phoneui_notification_call_feedback_action_finish
-phoneui_notification_call_feedback_action_sync
-phoneui_notification_complete_display_sim_auth
-phoneui_notification_complete_hide_sim_auth
-phoneui_notification_complete_display_ussd
-phoneui_notification_complete_display_dialog
-phoneui_notification_complete_feedback_action
-<SUBSECTION Standard>
-PHONEUI_NOTIFICATION
-PHONEUI_NOTIFICATION_GET_IFACE
-IS_PHONEUI_NOTIFICATION
-TYPE_PHONEUI_NOTIFICATION
-TYPE_PHONEUI_NOTIFICATION_PROXY
-TYPE_PHONEUI_NOTIFICATION_STUB
-<SUBSECTION Private>
-PhoneuiNotificationProxyPrivate
-PhoneuiNotificationStubPrivate
-phoneui_notification_get_gtype
-phoneui_notification_proxy_get_type
-phoneui_notification_stub_get_type
-</SECTION>
-
-<SECTION>
-<FILE>shr-phoneuiphonelog</FILE>
-<TITLE>PhoneuiPhoneLog</TITLE>
-PhoneuiPhoneLog
-PhoneuiPhoneLogIface
-phoneui_phone_log_interface_info
-GET_PHONEUI_PHONE_LOG
-PEEK_PHONEUI_PHONE_LOG
-PhoneuiPhoneLogProxy
-PhoneuiPhoneLogProxyClass
-phoneui_phone_log_proxy_new
-phoneui_phone_log_proxy_new_finish
-phoneui_phone_log_proxy_new_sync
-phoneui_phone_log_proxy_new_for_bus
-phoneui_phone_log_proxy_new_for_bus_finish
-phoneui_phone_log_proxy_new_for_bus_sync
-PhoneuiPhoneLogStub
-PhoneuiPhoneLogStubClass
-phoneui_phone_log_stub_new
-phoneui_phone_log_call_display_list
-phoneui_phone_log_call_display_list_finish
-phoneui_phone_log_call_display_list_sync
-phoneui_phone_log_complete_display_list
-<SUBSECTION Standard>
-PHONEUI_PHONE_LOG
-PHONEUI_PHONE_LOG_GET_IFACE
-IS_PHONEUI_PHONE_LOG
-TYPE_PHONEUI_PHONE_LOG
-TYPE_PHONEUI_PHONE_LOG_PROXY
-TYPE_PHONEUI_PHONE_LOG_STUB
-<SUBSECTION Private>
-PhoneuiPhoneLogProxyPrivate
-PhoneuiPhoneLogStubPrivate
-phoneui_phone_log_get_gtype
-phoneui_phone_log_proxy_get_type
-phoneui_phone_log_stub_get_type
-</SECTION>
-
-<SECTION>
-<FILE>shr-phoneuisettings</FILE>
-<TITLE>PhoneuiSettings</TITLE>
-PhoneuiSettings
-PhoneuiSettingsIface
-phoneui_settings_interface_info
-GET_PHONEUI_SETTINGS
-PEEK_PHONEUI_SETTINGS
-PhoneuiSettingsProxy
-PhoneuiSettingsProxyClass
-phoneui_settings_proxy_new
-phoneui_settings_proxy_new_finish
-phoneui_settings_proxy_new_sync
-phoneui_settings_proxy_new_for_bus
-phoneui_settings_proxy_new_for_bus_finish
-phoneui_settings_proxy_new_for_bus_sync
-PhoneuiSettingsStub
-PhoneuiSettingsStubClass
-phoneui_settings_stub_new
-phoneui_settings_call_display_quick_settings
-phoneui_settings_call_display_quick_settings_finish
-phoneui_settings_call_display_quick_settings_sync
-phoneui_settings_call_display_sim_manager
-phoneui_settings_call_display_sim_manager_finish
-phoneui_settings_call_display_sim_manager_sync
-phoneui_settings_call_set_message_receipt
-phoneui_settings_call_set_message_receipt_finish
-phoneui_settings_call_set_message_receipt_sync
-phoneui_settings_call_get_message_receipt
-phoneui_settings_call_get_message_receipt_finish
-phoneui_settings_call_get_message_receipt_sync
-phoneui_settings_complete_display_quick_settings
-phoneui_settings_complete_display_sim_manager
-phoneui_settings_complete_set_message_receipt
-phoneui_settings_complete_get_message_receipt
-<SUBSECTION Standard>
-PHONEUI_SETTINGS
-PHONEUI_SETTINGS_GET_IFACE
-IS_PHONEUI_SETTINGS
-TYPE_PHONEUI_SETTINGS
-TYPE_PHONEUI_SETTINGS_PROXY
-TYPE_PHONEUI_SETTINGS_STUB
-<SUBSECTION Private>
-PhoneuiSettingsProxyPrivate
-PhoneuiSettingsStubPrivate
-phoneui_settings_get_gtype
-phoneui_settings_proxy_get_type
-phoneui_settings_stub_get_type
-</SECTION>
-
-<SECTION>
-<FILE>shr-proxymanager</FILE>
-<TITLE>ProxyManager</TITLE>
-ProxyManager
-ProxyManagerClass
-proxy_manager_get_type_func
-proxy_manager_new
-proxy_manager_new_finish
-proxy_manager_new_sync
-proxy_manager_new_for_bus
-proxy_manager_new_for_bus_finish
-proxy_manager_new_for_bus_sync
-<SUBSECTION Standard>
-TYPE_PROXY_MANAGER
-PROXY_MANAGER
-PROXY_MANAGER_CLASS
-PROXY_MANAGER_GET_CLASS
-IS_PROXY_MANAGER
-IS_PROXY_MANAGER_CLASS
-<SUBSECTION Private>
-ProxyManagerPrivate
-proxy_manager_get_type
-</SECTION>
-
diff --git a/src/shr-bindings.h b/src/shr-bindings.h
deleted file mode 100644
index 3f294a0..0000000
--- a/src/shr-bindings.h
+++ /dev/null
@@ -1,23 +0,0 @@
-/* File:       shr-bindings.h
- *
- * Generated by GDBus Binding Tool 0.1. DO NOT EDIT.
- */
-
-#ifndef __SHR_BINDINGS_H__
-#define __SHR_BINDINGS_H__
-
-#include <gio/gio.h>
-
-#include <shr-phonefsousage.h>
-#include <shr-phoneuicallmanagement.h>
-#include <shr-phoneuicontacts.h>
-#include <shr-phoneuidialer.h>
-#include <shr-phoneuiidlescreen.h>
-#include <shr-phoneuimessages.h>
-#include <shr-phoneuinotification.h>
-#include <shr-phoneuiphonelog.h>
-#include <shr-phoneuisettings.h>
-#include <shr-proxymanager.h>
-#include <shr-types.h>
-
-#endif /* __SHR_BINDINGS_H__ */
diff --git a/src/shr-bindings.stamp b/src/shr-bindings.stamp
deleted file mode 100644
index 014c8e9..0000000
--- a/src/shr-bindings.stamp
+++ /dev/null
@@ -1,30 +0,0 @@
-shr-phonefsousage.h
-shr-phonefsousage.c
-shr-phoneuicallmanagement.h
-shr-phoneuicallmanagement.c
-shr-phoneuicontacts.h
-shr-phoneuicontacts.c
-shr-phoneuidialer.h
-shr-phoneuidialer.c
-shr-phoneuiidlescreen.h
-shr-phoneuiidlescreen.c
-shr-phoneuimessages.h
-shr-phoneuimessages.c
-shr-phoneuinotification.h
-shr-phoneuinotification.c
-shr-phoneuiphonelog.h
-shr-phoneuiphonelog.c
-shr-phoneuisettings.h
-shr-phoneuisettings.c
-shr-proxymanager.h
-shr-proxymanager.c
-shr-marshallers.list
-shr-marshallers.h
-shr-marshallers.c
-shr-types.h
-shr-bindingsprivate.h
-shr-bindingsprivate.c
-shr-bindings.h
-shr-bindings.types
-shr-bindings-sections.txt
-shr-bindings.stamp
diff --git a/src/shr-bindings.types b/src/shr-bindings.types
deleted file mode 100644
index a6a1932..0000000
--- a/src/shr-bindings.types
+++ /dev/null
@@ -1,28 +0,0 @@
-phonefso_usage_proxy_get_type
-phonefso_usage_stub_get_type
-phonefso_usage_get_gtype
-phoneui_call_management_proxy_get_type
-phoneui_call_management_stub_get_type
-phoneui_call_management_get_gtype
-phoneui_contacts_proxy_get_type
-phoneui_contacts_stub_get_type
-phoneui_contacts_get_gtype
-phoneui_dialer_proxy_get_type
-phoneui_dialer_stub_get_type
-phoneui_dialer_get_gtype
-phoneui_idle_screen_proxy_get_type
-phoneui_idle_screen_stub_get_type
-phoneui_idle_screen_get_gtype
-phoneui_messages_proxy_get_type
-phoneui_messages_stub_get_type
-phoneui_messages_get_gtype
-phoneui_notification_proxy_get_type
-phoneui_notification_stub_get_type
-phoneui_notification_get_gtype
-phoneui_phone_log_proxy_get_type
-phoneui_phone_log_stub_get_type
-phoneui_phone_log_get_gtype
-phoneui_settings_proxy_get_type
-phoneui_settings_stub_get_type
-phoneui_settings_get_gtype
-proxy_manager_get_type
diff --git a/src/shr-bindingsprivate.c b/src/shr-bindingsprivate.c
deleted file mode 100644
index 147dfc4..0000000
--- a/src/shr-bindingsprivate.c
+++ /dev/null
@@ -1,8 +0,0 @@
-/* File:       shr-bindingsprivate.c
- *
- * Generated by GDBus Binding Tool 0.1. DO NOT EDIT.
- */
-
-#include <shr-bindingsprivate.h>
-
-
diff --git a/src/shr-bindingsprivate.h b/src/shr-bindingsprivate.h
deleted file mode 100644
index 148ade2..0000000
--- a/src/shr-bindingsprivate.h
+++ /dev/null
@@ -1,13 +0,0 @@
-/* File:       shr-bindingsprivate.h
- *
- * Generated by GDBus Binding Tool 0.1. DO NOT EDIT.
- */
-
-#ifndef __SHR_BINDINGSPRIVATE_H__
-#define __SHR_BINDINGSPRIVATE_H__
-
-#include <gio/gio.h>
-#include <shr-types.h>
-
-
-#endif /* __SHR_BINDINGSPRIVATE_H__ */
diff --git a/src/shr-marshallers.c b/src/shr-marshallers.c
deleted file mode 100644
index 0c46cf1..0000000
--- a/src/shr-marshallers.c
+++ /dev/null
@@ -1,431 +0,0 @@
-#include <shr-marshallers.h>
-
-#include	<glib-object.h>
-
-
-#ifdef G_ENABLE_DEBUG
-#define g_marshal_value_peek_boolean(v)  g_value_get_boolean (v)
-#define g_marshal_value_peek_char(v)     g_value_get_char (v)
-#define g_marshal_value_peek_uchar(v)    g_value_get_uchar (v)
-#define g_marshal_value_peek_int(v)      g_value_get_int (v)
-#define g_marshal_value_peek_uint(v)     g_value_get_uint (v)
-#define g_marshal_value_peek_long(v)     g_value_get_long (v)
-#define g_marshal_value_peek_ulong(v)    g_value_get_ulong (v)
-#define g_marshal_value_peek_int64(v)    g_value_get_int64 (v)
-#define g_marshal_value_peek_uint64(v)   g_value_get_uint64 (v)
-#define g_marshal_value_peek_enum(v)     g_value_get_enum (v)
-#define g_marshal_value_peek_flags(v)    g_value_get_flags (v)
-#define g_marshal_value_peek_float(v)    g_value_get_float (v)
-#define g_marshal_value_peek_double(v)   g_value_get_double (v)
-#define g_marshal_value_peek_string(v)   (char*) g_value_get_string (v)
-#define g_marshal_value_peek_param(v)    g_value_get_param (v)
-#define g_marshal_value_peek_boxed(v)    g_value_get_boxed (v)
-#define g_marshal_value_peek_pointer(v)  g_value_get_pointer (v)
-#define g_marshal_value_peek_object(v)   g_value_get_object (v)
-#define g_marshal_value_peek_variant(v)  g_value_get_variant (v)
-#else /* !G_ENABLE_DEBUG */
-/* WARNING: This code accesses GValues directly, which is UNSUPPORTED API.
- *          Do not access GValues directly in your code. Instead, use the
- *          g_value_get_*() functions
- */
-#define g_marshal_value_peek_boolean(v)  (v)->data[0].v_int
-#define g_marshal_value_peek_char(v)     (v)->data[0].v_int
-#define g_marshal_value_peek_uchar(v)    (v)->data[0].v_uint
-#define g_marshal_value_peek_int(v)      (v)->data[0].v_int
-#define g_marshal_value_peek_uint(v)     (v)->data[0].v_uint
-#define g_marshal_value_peek_long(v)     (v)->data[0].v_long
-#define g_marshal_value_peek_ulong(v)    (v)->data[0].v_ulong
-#define g_marshal_value_peek_int64(v)    (v)->data[0].v_int64
-#define g_marshal_value_peek_uint64(v)   (v)->data[0].v_uint64
-#define g_marshal_value_peek_enum(v)     (v)->data[0].v_long
-#define g_marshal_value_peek_flags(v)    (v)->data[0].v_ulong
-#define g_marshal_value_peek_float(v)    (v)->data[0].v_float
-#define g_marshal_value_peek_double(v)   (v)->data[0].v_double
-#define g_marshal_value_peek_string(v)   (v)->data[0].v_pointer
-#define g_marshal_value_peek_param(v)    (v)->data[0].v_pointer
-#define g_marshal_value_peek_boxed(v)    (v)->data[0].v_pointer
-#define g_marshal_value_peek_pointer(v)  (v)->data[0].v_pointer
-#define g_marshal_value_peek_object(v)   (v)->data[0].v_pointer
-#define g_marshal_value_peek_variant(v)  (v)->data[0].v_pointer
-#endif /* !G_ENABLE_DEBUG */
-
-
-/* BOOLEAN:OBJECT,BOOLEAN (shr-marshallers.list:1) */
-void
-_shr_gdbus_cclosure_marshaller_BOOLEAN__OBJECT_BOOLEAN (GClosure     *closure,
-                                                        GValue       *return_value G_GNUC_UNUSED,
-                                                        guint         n_param_values,
-                                                        const GValue *param_values,
-                                                        gpointer      invocation_hint G_GNUC_UNUSED,
-                                                        gpointer      marshal_data)
-{
-  typedef gboolean (*GMarshalFunc_BOOLEAN__OBJECT_BOOLEAN) (gpointer     data1,
-                                                            gpointer     arg_1,
-                                                            gboolean     arg_2,
-                                                            gpointer     data2);
-  register GMarshalFunc_BOOLEAN__OBJECT_BOOLEAN callback;
-  register GCClosure *cc = (GCClosure*) closure;
-  register gpointer data1, data2;
-  gboolean v_return;
-
-  g_return_if_fail (return_value != NULL);
-  g_return_if_fail (n_param_values == 3);
-
-  if (G_CCLOSURE_SWAP_DATA (closure))
-    {
-      data1 = closure->data;
-      data2 = g_value_peek_pointer (param_values + 0);
-    }
-  else
-    {
-      data1 = g_value_peek_pointer (param_values + 0);
-      data2 = closure->data;
-    }
-  callback = (GMarshalFunc_BOOLEAN__OBJECT_BOOLEAN) (marshal_data ? marshal_data : cc->callback);
-
-  v_return = callback (data1,
-                       g_marshal_value_peek_object (param_values + 1),
-                       g_marshal_value_peek_boolean (param_values + 2),
-                       data2);
-
-  g_value_set_boolean (return_value, v_return);
-}
-
-/* BOOLEAN:OBJECT (shr-marshallers.list:2) */
-void
-_shr_gdbus_cclosure_marshaller_BOOLEAN__OBJECT (GClosure     *closure,
-                                                GValue       *return_value G_GNUC_UNUSED,
-                                                guint         n_param_values,
-                                                const GValue *param_values,
-                                                gpointer      invocation_hint G_GNUC_UNUSED,
-                                                gpointer      marshal_data)
-{
-  typedef gboolean (*GMarshalFunc_BOOLEAN__OBJECT) (gpointer     data1,
-                                                    gpointer     arg_1,
-                                                    gpointer     data2);
-  register GMarshalFunc_BOOLEAN__OBJECT callback;
-  register GCClosure *cc = (GCClosure*) closure;
-  register gpointer data1, data2;
-  gboolean v_return;
-
-  g_return_if_fail (return_value != NULL);
-  g_return_if_fail (n_param_values == 2);
-
-  if (G_CCLOSURE_SWAP_DATA (closure))
-    {
-      data1 = closure->data;
-      data2 = g_value_peek_pointer (param_values + 0);
-    }
-  else
-    {
-      data1 = g_value_peek_pointer (param_values + 0);
-      data2 = closure->data;
-    }
-  callback = (GMarshalFunc_BOOLEAN__OBJECT) (marshal_data ? marshal_data : cc->callback);
-
-  v_return = callback (data1,
-                       g_marshal_value_peek_object (param_values + 1),
-                       data2);
-
-  g_value_set_boolean (return_value, v_return);
-}
-
-/* BOOLEAN:OBJECT,INT (shr-marshallers.list:3) */
-void
-_shr_gdbus_cclosure_marshaller_BOOLEAN__OBJECT_INT (GClosure     *closure,
-                                                    GValue       *return_value G_GNUC_UNUSED,
-                                                    guint         n_param_values,
-                                                    const GValue *param_values,
-                                                    gpointer      invocation_hint G_GNUC_UNUSED,
-                                                    gpointer      marshal_data)
-{
-  typedef gboolean (*GMarshalFunc_BOOLEAN__OBJECT_INT) (gpointer     data1,
-                                                        gpointer     arg_1,
-                                                        gint         arg_2,
-                                                        gpointer     data2);
-  register GMarshalFunc_BOOLEAN__OBJECT_INT callback;
-  register GCClosure *cc = (GCClosure*) closure;
-  register gpointer data1, data2;
-  gboolean v_return;
-
-  g_return_if_fail (return_value != NULL);
-  g_return_if_fail (n_param_values == 3);
-
-  if (G_CCLOSURE_SWAP_DATA (closure))
-    {
-      data1 = closure->data;
-      data2 = g_value_peek_pointer (param_values + 0);
-    }
-  else
-    {
-      data1 = g_value_peek_pointer (param_values + 0);
-      data2 = closure->data;
-    }
-  callback = (GMarshalFunc_BOOLEAN__OBJECT_INT) (marshal_data ? marshal_data : cc->callback);
-
-  v_return = callback (data1,
-                       g_marshal_value_peek_object (param_values + 1),
-                       g_marshal_value_peek_int (param_values + 2),
-                       data2);
-
-  g_value_set_boolean (return_value, v_return);
-}
-
-/* BOOLEAN:OBJECT,STRING,STRING,STRING (shr-marshallers.list:4) */
-void
-_shr_gdbus_cclosure_marshaller_BOOLEAN__OBJECT_STRING_STRING_STRING (GClosure     *closure,
-                                                                     GValue       *return_value G_GNUC_UNUSED,
-                                                                     guint         n_param_values,
-                                                                     const GValue *param_values,
-                                                                     gpointer      invocation_hint G_GNUC_UNUSED,
-                                                                     gpointer      marshal_data)
-{
-  typedef gboolean (*GMarshalFunc_BOOLEAN__OBJECT_STRING_STRING_STRING) (gpointer     data1,
-                                                                         gpointer     arg_1,
-                                                                         gpointer     arg_2,
-                                                                         gpointer     arg_3,
-                                                                         gpointer     arg_4,
-                                                                         gpointer     data2);
-  register GMarshalFunc_BOOLEAN__OBJECT_STRING_STRING_STRING callback;
-  register GCClosure *cc = (GCClosure*) closure;
-  register gpointer data1, data2;
-  gboolean v_return;
-
-  g_return_if_fail (return_value != NULL);
-  g_return_if_fail (n_param_values == 5);
-
-  if (G_CCLOSURE_SWAP_DATA (closure))
-    {
-      data1 = closure->data;
-      data2 = g_value_peek_pointer (param_values + 0);
-    }
-  else
-    {
-      data1 = g_value_peek_pointer (param_values + 0);
-      data2 = closure->data;
-    }
-  callback = (GMarshalFunc_BOOLEAN__OBJECT_STRING_STRING_STRING) (marshal_data ? marshal_data : cc->callback);
-
-  v_return = callback (data1,
-                       g_marshal_value_peek_object (param_values + 1),
-                       g_marshal_value_peek_string (param_values + 2),
-                       g_marshal_value_peek_string (param_values + 3),
-                       g_marshal_value_peek_string (param_values + 4),
-                       data2);
-
-  g_value_set_boolean (return_value, v_return);
-}
-
-/* BOOLEAN:OBJECT,STRING (shr-marshallers.list:5) */
-void
-_shr_gdbus_cclosure_marshaller_BOOLEAN__OBJECT_STRING (GClosure     *closure,
-                                                       GValue       *return_value G_GNUC_UNUSED,
-                                                       guint         n_param_values,
-                                                       const GValue *param_values,
-                                                       gpointer      invocation_hint G_GNUC_UNUSED,
-                                                       gpointer      marshal_data)
-{
-  typedef gboolean (*GMarshalFunc_BOOLEAN__OBJECT_STRING) (gpointer     data1,
-                                                           gpointer     arg_1,
-                                                           gpointer     arg_2,
-                                                           gpointer     data2);
-  register GMarshalFunc_BOOLEAN__OBJECT_STRING callback;
-  register GCClosure *cc = (GCClosure*) closure;
-  register gpointer data1, data2;
-  gboolean v_return;
-
-  g_return_if_fail (return_value != NULL);
-  g_return_if_fail (n_param_values == 3);
-
-  if (G_CCLOSURE_SWAP_DATA (closure))
-    {
-      data1 = closure->data;
-      data2 = g_value_peek_pointer (param_values + 0);
-    }
-  else
-    {
-      data1 = g_value_peek_pointer (param_values + 0);
-      data2 = closure->data;
-    }
-  callback = (GMarshalFunc_BOOLEAN__OBJECT_STRING) (marshal_data ? marshal_data : cc->callback);
-
-  v_return = callback (data1,
-                       g_marshal_value_peek_object (param_values + 1),
-                       g_marshal_value_peek_string (param_values + 2),
-                       data2);
-
-  g_value_set_boolean (return_value, v_return);
-}
-
-/* BOOLEAN:OBJECT,INT,INT,STRING (shr-marshallers.list:6) */
-void
-_shr_gdbus_cclosure_marshaller_BOOLEAN__OBJECT_INT_INT_STRING (GClosure     *closure,
-                                                               GValue       *return_value G_GNUC_UNUSED,
-                                                               guint         n_param_values,
-                                                               const GValue *param_values,
-                                                               gpointer      invocation_hint G_GNUC_UNUSED,
-                                                               gpointer      marshal_data)
-{
-  typedef gboolean (*GMarshalFunc_BOOLEAN__OBJECT_INT_INT_STRING) (gpointer     data1,
-                                                                   gpointer     arg_1,
-                                                                   gint         arg_2,
-                                                                   gint         arg_3,
-                                                                   gpointer     arg_4,
-                                                                   gpointer     data2);
-  register GMarshalFunc_BOOLEAN__OBJECT_INT_INT_STRING callback;
-  register GCClosure *cc = (GCClosure*) closure;
-  register gpointer data1, data2;
-  gboolean v_return;
-
-  g_return_if_fail (return_value != NULL);
-  g_return_if_fail (n_param_values == 5);
-
-  if (G_CCLOSURE_SWAP_DATA (closure))
-    {
-      data1 = closure->data;
-      data2 = g_value_peek_pointer (param_values + 0);
-    }
-  else
-    {
-      data1 = g_value_peek_pointer (param_values + 0);
-      data2 = closure->data;
-    }
-  callback = (GMarshalFunc_BOOLEAN__OBJECT_INT_INT_STRING) (marshal_data ? marshal_data : cc->callback);
-
-  v_return = callback (data1,
-                       g_marshal_value_peek_object (param_values + 1),
-                       g_marshal_value_peek_int (param_values + 2),
-                       g_marshal_value_peek_int (param_values + 3),
-                       g_marshal_value_peek_string (param_values + 4),
-                       data2);
-
-  g_value_set_boolean (return_value, v_return);
-}
-
-/* BOOLEAN:OBJECT,VARIANT (shr-marshallers.list:7) */
-void
-_shr_gdbus_cclosure_marshaller_BOOLEAN__OBJECT_VARIANT (GClosure     *closure,
-                                                        GValue       *return_value G_GNUC_UNUSED,
-                                                        guint         n_param_values,
-                                                        const GValue *param_values,
-                                                        gpointer      invocation_hint G_GNUC_UNUSED,
-                                                        gpointer      marshal_data)
-{
-  typedef gboolean (*GMarshalFunc_BOOLEAN__OBJECT_VARIANT) (gpointer     data1,
-                                                            gpointer     arg_1,
-                                                            gpointer     arg_2,
-                                                            gpointer     data2);
-  register GMarshalFunc_BOOLEAN__OBJECT_VARIANT callback;
-  register GCClosure *cc = (GCClosure*) closure;
-  register gpointer data1, data2;
-  gboolean v_return;
-
-  g_return_if_fail (return_value != NULL);
-  g_return_if_fail (n_param_values == 3);
-
-  if (G_CCLOSURE_SWAP_DATA (closure))
-    {
-      data1 = closure->data;
-      data2 = g_value_peek_pointer (param_values + 0);
-    }
-  else
-    {
-      data1 = g_value_peek_pointer (param_values + 0);
-      data2 = closure->data;
-    }
-  callback = (GMarshalFunc_BOOLEAN__OBJECT_VARIANT) (marshal_data ? marshal_data : cc->callback);
-
-  v_return = callback (data1,
-                       g_marshal_value_peek_object (param_values + 1),
-                       g_marshal_value_peek_variant (param_values + 2),
-                       data2);
-
-  g_value_set_boolean (return_value, v_return);
-}
-
-/* BOOLEAN:OBJECT,INT,STRING (shr-marshallers.list:8) */
-void
-_shr_gdbus_cclosure_marshaller_BOOLEAN__OBJECT_INT_STRING (GClosure     *closure,
-                                                           GValue       *return_value G_GNUC_UNUSED,
-                                                           guint         n_param_values,
-                                                           const GValue *param_values,
-                                                           gpointer      invocation_hint G_GNUC_UNUSED,
-                                                           gpointer      marshal_data)
-{
-  typedef gboolean (*GMarshalFunc_BOOLEAN__OBJECT_INT_STRING) (gpointer     data1,
-                                                               gpointer     arg_1,
-                                                               gint         arg_2,
-                                                               gpointer     arg_3,
-                                                               gpointer     data2);
-  register GMarshalFunc_BOOLEAN__OBJECT_INT_STRING callback;
-  register GCClosure *cc = (GCClosure*) closure;
-  register gpointer data1, data2;
-  gboolean v_return;
-
-  g_return_if_fail (return_value != NULL);
-  g_return_if_fail (n_param_values == 4);
-
-  if (G_CCLOSURE_SWAP_DATA (closure))
-    {
-      data1 = closure->data;
-      data2 = g_value_peek_pointer (param_values + 0);
-    }
-  else
-    {
-      data1 = g_value_peek_pointer (param_values + 0);
-      data2 = closure->data;
-    }
-  callback = (GMarshalFunc_BOOLEAN__OBJECT_INT_STRING) (marshal_data ? marshal_data : cc->callback);
-
-  v_return = callback (data1,
-                       g_marshal_value_peek_object (param_values + 1),
-                       g_marshal_value_peek_int (param_values + 2),
-                       g_marshal_value_peek_string (param_values + 3),
-                       data2);
-
-  g_value_set_boolean (return_value, v_return);
-}
-
-/* BOOLEAN:OBJECT,STRING,STRING (shr-marshallers.list:9) */
-void
-_shr_gdbus_cclosure_marshaller_BOOLEAN__OBJECT_STRING_STRING (GClosure     *closure,
-                                                              GValue       *return_value G_GNUC_UNUSED,
-                                                              guint         n_param_values,
-                                                              const GValue *param_values,
-                                                              gpointer      invocation_hint G_GNUC_UNUSED,
-                                                              gpointer      marshal_data)
-{
-  typedef gboolean (*GMarshalFunc_BOOLEAN__OBJECT_STRING_STRING) (gpointer     data1,
-                                                                  gpointer     arg_1,
-                                                                  gpointer     arg_2,
-                                                                  gpointer     arg_3,
-                                                                  gpointer     data2);
-  register GMarshalFunc_BOOLEAN__OBJECT_STRING_STRING callback;
-  register GCClosure *cc = (GCClosure*) closure;
-  register gpointer data1, data2;
-  gboolean v_return;
-
-  g_return_if_fail (return_value != NULL);
-  g_return_if_fail (n_param_values == 4);
-
-  if (G_CCLOSURE_SWAP_DATA (closure))
-    {
-      data1 = closure->data;
-      data2 = g_value_peek_pointer (param_values + 0);
-    }
-  else
-    {
-      data1 = g_value_peek_pointer (param_values + 0);
-      data2 = closure->data;
-    }
-  callback = (GMarshalFunc_BOOLEAN__OBJECT_STRING_STRING) (marshal_data ? marshal_data : cc->callback);
-
-  v_return = callback (data1,
-                       g_marshal_value_peek_object (param_values + 1),
-                       g_marshal_value_peek_string (param_values + 2),
-                       g_marshal_value_peek_string (param_values + 3),
-                       data2);
-
-  g_value_set_boolean (return_value, v_return);
-}
-
diff --git a/src/shr-marshallers.h b/src/shr-marshallers.h
deleted file mode 100644
index e016301..0000000
--- a/src/shr-marshallers.h
+++ /dev/null
@@ -1,84 +0,0 @@
-
-#ifndef ___shr_gdbus_cclosure_marshaller_MARSHAL_H__
-#define ___shr_gdbus_cclosure_marshaller_MARSHAL_H__
-
-#include	<glib-object.h>
-
-G_BEGIN_DECLS
-
-/* BOOLEAN:OBJECT,BOOLEAN (shr-marshallers.list:1) */
-extern void _shr_gdbus_cclosure_marshaller_BOOLEAN__OBJECT_BOOLEAN (GClosure     *closure,
-                                                                    GValue       *return_value,
-                                                                    guint         n_param_values,
-                                                                    const GValue *param_values,
-                                                                    gpointer      invocation_hint,
-                                                                    gpointer      marshal_data);
-
-/* BOOLEAN:OBJECT (shr-marshallers.list:2) */
-extern void _shr_gdbus_cclosure_marshaller_BOOLEAN__OBJECT (GClosure     *closure,
-                                                            GValue       *return_value,
-                                                            guint         n_param_values,
-                                                            const GValue *param_values,
-                                                            gpointer      invocation_hint,
-                                                            gpointer      marshal_data);
-
-/* BOOLEAN:OBJECT,INT (shr-marshallers.list:3) */
-extern void _shr_gdbus_cclosure_marshaller_BOOLEAN__OBJECT_INT (GClosure     *closure,
-                                                                GValue       *return_value,
-                                                                guint         n_param_values,
-                                                                const GValue *param_values,
-                                                                gpointer      invocation_hint,
-                                                                gpointer      marshal_data);
-
-/* BOOLEAN:OBJECT,STRING,STRING,STRING (shr-marshallers.list:4) */
-extern void _shr_gdbus_cclosure_marshaller_BOOLEAN__OBJECT_STRING_STRING_STRING (GClosure     *closure,
-                                                                                 GValue       *return_value,
-                                                                                 guint         n_param_values,
-                                                                                 const GValue *param_values,
-                                                                                 gpointer      invocation_hint,
-                                                                                 gpointer      marshal_data);
-
-/* BOOLEAN:OBJECT,STRING (shr-marshallers.list:5) */
-extern void _shr_gdbus_cclosure_marshaller_BOOLEAN__OBJECT_STRING (GClosure     *closure,
-                                                                   GValue       *return_value,
-                                                                   guint         n_param_values,
-                                                                   const GValue *param_values,
-                                                                   gpointer      invocation_hint,
-                                                                   gpointer      marshal_data);
-
-/* BOOLEAN:OBJECT,INT,INT,STRING (shr-marshallers.list:6) */
-extern void _shr_gdbus_cclosure_marshaller_BOOLEAN__OBJECT_INT_INT_STRING (GClosure     *closure,
-                                                                           GValue       *return_value,
-                                                                           guint         n_param_values,
-                                                                           const GValue *param_values,
-                                                                           gpointer      invocation_hint,
-                                                                           gpointer      marshal_data);
-
-/* BOOLEAN:OBJECT,VARIANT (shr-marshallers.list:7) */
-extern void _shr_gdbus_cclosure_marshaller_BOOLEAN__OBJECT_VARIANT (GClosure     *closure,
-                                                                    GValue       *return_value,
-                                                                    guint         n_param_values,
-                                                                    const GValue *param_values,
-                                                                    gpointer      invocation_hint,
-                                                                    gpointer      marshal_data);
-
-/* BOOLEAN:OBJECT,INT,STRING (shr-marshallers.list:8) */
-extern void _shr_gdbus_cclosure_marshaller_BOOLEAN__OBJECT_INT_STRING (GClosure     *closure,
-                                                                       GValue       *return_value,
-                                                                       guint         n_param_values,
-                                                                       const GValue *param_values,
-                                                                       gpointer      invocation_hint,
-                                                                       gpointer      marshal_data);
-
-/* BOOLEAN:OBJECT,STRING,STRING (shr-marshallers.list:9) */
-extern void _shr_gdbus_cclosure_marshaller_BOOLEAN__OBJECT_STRING_STRING (GClosure     *closure,
-                                                                          GValue       *return_value,
-                                                                          guint         n_param_values,
-                                                                          const GValue *param_values,
-                                                                          gpointer      invocation_hint,
-                                                                          gpointer      marshal_data);
-
-G_END_DECLS
-
-#endif /* ___shr_gdbus_cclosure_marshaller_MARSHAL_H__ */
-
diff --git a/src/shr-marshallers.list b/src/shr-marshallers.list
deleted file mode 100644
index f25f30a..0000000
--- a/src/shr-marshallers.list
+++ /dev/null
@@ -1,9 +0,0 @@
-BOOLEAN:OBJECT,BOOLEAN
-BOOLEAN:OBJECT
-BOOLEAN:OBJECT,INT
-BOOLEAN:OBJECT,STRING,STRING,STRING
-BOOLEAN:OBJECT,STRING
-BOOLEAN:OBJECT,INT,INT,STRING
-BOOLEAN:OBJECT,VARIANT
-BOOLEAN:OBJECT,INT,STRING
-BOOLEAN:OBJECT,STRING,STRING
diff --git a/src/shr-phonefsousage.c b/src/shr-phonefsousage.c
index 841bbed..99fa468 100644
--- a/src/shr-phonefsousage.c
+++ b/src/shr-phonefsousage.c
@@ -1,2056 +1,1471 @@
-/* File:       shr-phonefsousage.c
+/*
+ * Generated by gdbus-codegen 2.29.3. DO NOT EDIT.
  *
- * GType name: PhonefsoUsage
- * D-Bus name: org.shr.phonefso.Usage
- *
- * Generated by GDBus Binding Tool 0.1. DO NOT EDIT.
+ * The license of this code is the same as for the source it was derived from.
+ */
+
+#ifdef HAVE_CONFIG_H
+#  include "config.h"
+#endif
+
+#include "shr-phonefsousage.h"
+
+typedef struct
+{
+  GDBusArgInfo parent_struct;
+  gboolean use_gvariant;
+} _ExtendedGDBusArgInfo;
+
+typedef struct
+{
+  GDBusMethodInfo parent_struct;
+  const gchar *signal_name;
+} _ExtendedGDBusMethodInfo;
+
+typedef struct
+{
+  GDBusSignalInfo parent_struct;
+  const gchar *signal_name;
+} _ExtendedGDBusSignalInfo;
+
+typedef struct
+{
+  GDBusPropertyInfo parent_struct;
+  const gchar *hyphen_name;
+  gboolean use_gvariant;
+} _ExtendedGDBusPropertyInfo;
+
+typedef struct
+{
+  GDBusInterfaceInfo parent_struct;
+  const gchar *hyphen_name;
+} _ExtendedGDBusInterfaceInfo;
+
+typedef struct
+{
+  const _ExtendedGDBusPropertyInfo *info;
+  guint prop_id;
+  GValue orig_value; /* the value before the change */
+} ChangedProperty;
+
+static void
+_changed_property_free (ChangedProperty *data)
+{
+  g_value_unset (&data->orig_value);
+  g_free (data);
+}
+
+static gboolean
+_g_strv_equal0 (gchar **a, gchar **b)
+{
+  gboolean ret = FALSE;
+  guint n;
+  if (a == NULL && b == NULL)
+    {
+      ret = TRUE;
+      goto out;
+    }
+  if (a == NULL || b == NULL)
+    goto out;
+  if (g_strv_length (a) != g_strv_length (b))
+    goto out;
+  for (n = 0; a[n] != NULL; n++)
+    if (g_strcmp0 (a[n], b[n]) != 0)
+      goto out;
+  ret = TRUE;
+out:
+  return ret;
+}
+
+static gboolean
+_g_variant_equal0 (GVariant *a, GVariant *b)
+{
+  gboolean ret = FALSE;
+  if (a == NULL && b == NULL)
+    {
+      ret = TRUE;
+      goto out;
+    }
+  if (a == NULL || b == NULL)
+    goto out;
+  ret = g_variant_equal (a, b);
+out:
+  return ret;
+}
+
+G_GNUC_UNUSED static gboolean
+_g_value_equal (const GValue *a, const GValue *b)
+{
+  gboolean ret = FALSE;
+  g_assert (G_VALUE_TYPE (a) == G_VALUE_TYPE (b));
+  switch (G_VALUE_TYPE (a))
+    {
+      case G_TYPE_BOOLEAN:
+        ret = (g_value_get_boolean (a) == g_value_get_boolean (b));
+        break;
+      case G_TYPE_UCHAR:
+        ret = (g_value_get_uchar (a) == g_value_get_uchar (b));
+        break;
+      case G_TYPE_INT:
+        ret = (g_value_get_int (a) == g_value_get_int (b));
+        break;
+      case G_TYPE_UINT:
+        ret = (g_value_get_uint (a) == g_value_get_uint (b));
+        break;
+      case G_TYPE_INT64:
+        ret = (g_value_get_int64 (a) == g_value_get_int64 (b));
+        break;
+      case G_TYPE_UINT64:
+        ret = (g_value_get_uint64 (a) == g_value_get_uint64 (b));
+        break;
+      case G_TYPE_DOUBLE:
+        ret = (g_value_get_double (a) == g_value_get_double (b));
+        break;
+      case G_TYPE_STRING:
+        ret = (g_strcmp0 (g_value_get_string (a), g_value_get_string (b)) == 0);
+        break;
+      case G_TYPE_VARIANT:
+        ret = _g_variant_equal0 (g_value_get_variant (a), g_value_get_variant (b));
+        break;
+      default:
+        if (G_VALUE_TYPE (a) == G_TYPE_STRV)
+          ret = _g_strv_equal0 (g_value_get_boxed (a), g_value_get_boxed (b));
+        else
+          g_critical ("_g_value_equal() does not handle type %s", g_type_name (G_VALUE_TYPE (a)));
+        break;
+    }
+  return ret;
+}
+
+/* ------------------------------------------------------------------------
+ * Code for interface org.shr.phonefso.Usage
+ * ------------------------------------------------------------------------
  */
 
 /**
- * SECTION:shr-phonefsousage
+ * SECTION:PhonefsoUsage
  * @title: PhonefsoUsage
- * @short_description: Wraps the org.shr.phonefso.Usage D-Bus interface
- * @include: gio/gio.h
- *
- * The abstract #PhonefsoUsage interface type wraps the <literal>org.shr.phonefso.Usage</literal> D-Bus interface. Two concrete implementations exists: #PhonefsoUsageProxy (for client-side usage) and #PhonefsoUsageStub (for service-side usage).
- *
- * This code was generated from the following D-Bus introspection XML:
- * <programlisting><![CDATA[
- * <interface name="org.shr.phonefso.Usage">
- *   <method name="SetOfflineMode">
- *     <annotation name="org.freedesktop.DBus.GLib.Async" value="true">
- *     </annotation>
- *     <arg type="b" name="state" direction="in">
- *     </arg>
- *   </method>
- *   <method name="GetOfflineMode">
- *     <annotation name="org.freedesktop.DBus.GLib.Async" value="true">
- *     </annotation>
- *     <arg type="b" name="state" direction="out">
- *     </arg>
- *   </method>
- *   <method name="SetDefaultBrightness">
- *     <annotation name="org.freedesktop.DBus.GLib.Async" value="true">
- *     </annotation>
- *     <arg type="i" name="brightness" direction="in">
- *     </arg>
- *   </method>
- *   <method name="GetDefaultBrightness">
- *     <annotation name="org.freedesktop.DBus.GLib.Async" value="true">
- *     </annotation>
- *     <arg type="i" name="brightness" direction="out">
- *     </arg>
- *   </method>
- *   <method name="SetPdpCredentials">
- *     <annotation name="org.freedesktop.DBus.GLib.Async" value="true">
- *     </annotation>
- *     <arg type="s" name="apn" direction="in">
- *     </arg>
- *     <arg type="s" name="user" direction="in">
- *     </arg>
- *     <arg type="s" name="password" direction="in">
- *     </arg>
- *   </method>
- *   <method name="SetPin">
- *     <annotation name="org.freedesktop.DBus.GLib.Async" value="true">
- *     </annotation>
- *     <arg type="s" name="pin" direction="in">
- *     </arg>
- *   </method>
- * </interface>
- * ]]></programlisting>
+ * @short_description: Generated C code for the org.shr.phonefso.Usage D-Bus interface
  *
+ * This section contains code for working with the <link linkend="gdbus-interface-org-shr-phonefso-Usage.top_of_page">org.shr.phonefso.Usage</link> D-Bus interface in C.
  */
 
-#include <shr-phonefsousage.h>
-#include <shr-types.h>
-#include <shr-bindingsprivate.h>
-#include <shr-marshallers.h>
-
-static guint phonefso_usage_register_object (GDBusInterface *object,
-                    GDBusConnection *connection,
-                    const gchar *object_path,
-                    GError **error);
-static void phonefso_usage_flush (GDBusInterface *object);
-static GVariant *phonefso_usage_get_properties (GDBusInterface *object);
-static GDBusInterfaceInfo *phonefso_usage_g_dbus_interface_interface_info (GDBusInterface *object);
-static GDBusObject *phonefso_usage_g_dbus_interface_get_object (GDBusInterface *interface);
-static void phonefso_usage_g_dbus_interface_set_object (GDBusInterface *interface, GDBusObject *object);
-static GDBusInterfaceFlags phonefso_usage_g_dbus_interface_get_flags (GDBusInterface *interface);
-static void phonefso_usage_g_dbus_interface_set_flags (GDBusInterface *interface, GDBusInterfaceFlags flags);
+/* ---- Introspection data for org.shr.phonefso.Usage ---- */
 
-typedef PhonefsoUsageIface PhonefsoUsageInterface;
-#define phonefso_usage_get_type phonefso_usage_get_gtype
-G_DEFINE_INTERFACE (PhonefsoUsage, phonefso_usage, G_TYPE_OBJECT);
-#undef phonefso_usage_get_type
+static const _ExtendedGDBusArgInfo _phonefso_usage_method_info_set_offline_mode_IN_ARG_state =
+{
+  {
+    -1,
+    "state",
+    "b",
+    NULL
+  },
+  FALSE
+};
+
+static const _ExtendedGDBusArgInfo * const _phonefso_usage_method_info_set_offline_mode_IN_ARG_pointers[] =
+{
+  &_phonefso_usage_method_info_set_offline_mode_IN_ARG_state,
+  NULL
+};
 
+static const GDBusAnnotationInfo _phonefso_usage_method_set_offline_mode_annotation_info_0 =
+{
+  -1,
+  "org.freedesktop.DBus.GLib.Async",
+  "true",
+  NULL
+};
 
-enum
+static const GDBusAnnotationInfo * const _phonefso_usage_method_set_offline_mode_annotation_info_pointers[] =
 {
-  _0_SIGNAL,
-  __SET_OFFLINE_MODE_METHOD,
-  __GET_OFFLINE_MODE_METHOD,
-  __SET_DEFAULT_BRIGHTNESS_METHOD,
-  __GET_DEFAULT_BRIGHTNESS_METHOD,
-  __SET_PDP_CREDENTIALS_METHOD,
-  __SET_PIN_METHOD,
-  __LAST_SIGNAL
+  &_phonefso_usage_method_set_offline_mode_annotation_info_0,
+  NULL
 };
 
-static guint signals[__LAST_SIGNAL] = {0};
+static const _ExtendedGDBusMethodInfo _phonefso_usage_method_info_set_offline_mode =
+{
+  {
+    -1,
+    "SetOfflineMode",
+    (GDBusArgInfo **) &_phonefso_usage_method_info_set_offline_mode_IN_ARG_pointers,
+    NULL,
+    (GDBusAnnotationInfo **) &_phonefso_usage_method_set_offline_mode_annotation_info_pointers
+  },
+  "handle-set-offline-mode"
+};
 
+static const _ExtendedGDBusArgInfo _phonefso_usage_method_info_get_offline_mode_OUT_ARG_state =
+{
+  {
+    -1,
+    "state",
+    "b",
+    NULL
+  },
+  FALSE
+};
 
-enum
+static const _ExtendedGDBusArgInfo * const _phonefso_usage_method_info_get_offline_mode_OUT_ARG_pointers[] =
 {
-  PROP_0,
+  &_phonefso_usage_method_info_get_offline_mode_OUT_ARG_state,
+  NULL
 };
 
-/* ------------------------------------------------------------------------- */
+static const GDBusAnnotationInfo _phonefso_usage_method_get_offline_mode_annotation_info_0 =
+{
+  -1,
+  "org.freedesktop.DBus.GLib.Async",
+  "true",
+  NULL
+};
 
-/* Various lookup tables */
+static const GDBusAnnotationInfo * const _phonefso_usage_method_get_offline_mode_annotation_info_pointers[] =
+{
+  &_phonefso_usage_method_get_offline_mode_annotation_info_0,
+  NULL
+};
 
-static GHashTable *_method_name_to_id = NULL;
-static GHashTable *_signal_name_to_id = NULL;
-static GHashTable *_property_name_to_id = NULL;
-static GHashTable *_property_gname_to_name = NULL;
-static GHashTable *_property_name_to_gname = NULL;
+static const _ExtendedGDBusMethodInfo _phonefso_usage_method_info_get_offline_mode =
+{
+  {
+    -1,
+    "GetOfflineMode",
+    NULL,
+    (GDBusArgInfo **) &_phonefso_usage_method_info_get_offline_mode_OUT_ARG_pointers,
+    (GDBusAnnotationInfo **) &_phonefso_usage_method_get_offline_mode_annotation_info_pointers
+  },
+  "handle-get-offline-mode"
+};
 
+static const _ExtendedGDBusArgInfo _phonefso_usage_method_info_set_default_brightness_IN_ARG_brightness =
+{
+  {
+    -1,
+    "brightness",
+    "i",
+    NULL
+  },
+  FALSE
+};
 
-static guint
-lookup_method_id_from_method_name (const gchar *method_name)
+static const _ExtendedGDBusArgInfo * const _phonefso_usage_method_info_set_default_brightness_IN_ARG_pointers[] =
 {
-  return GPOINTER_TO_UINT (g_hash_table_lookup (_method_name_to_id, method_name));
-}
+  &_phonefso_usage_method_info_set_default_brightness_IN_ARG_brightness,
+  NULL
+};
 
-static guint
-lookup_signal_id_from_signal_name (const gchar *signal_name)
+static const GDBusAnnotationInfo _phonefso_usage_method_set_default_brightness_annotation_info_0 =
 {
-  return GPOINTER_TO_UINT (g_hash_table_lookup (_signal_name_to_id, signal_name));
-}
+  -1,
+  "org.freedesktop.DBus.GLib.Async",
+  "true",
+  NULL
+};
 
-static guint
-lookup_property_id_from_property_name (const gchar *property_name)
+static const GDBusAnnotationInfo * const _phonefso_usage_method_set_default_brightness_annotation_info_pointers[] =
 {
-  return GPOINTER_TO_UINT (g_hash_table_lookup (_property_name_to_id, property_name));
-}
+  &_phonefso_usage_method_set_default_brightness_annotation_info_0,
+  NULL
+};
 
-static const gchar *
-lookup_property_name_from_property_gname (const gchar *property_gname)
+static const _ExtendedGDBusMethodInfo _phonefso_usage_method_info_set_default_brightness =
 {
-  return g_hash_table_lookup (_property_gname_to_name, property_gname);
-}
+  {
+    -1,
+    "SetDefaultBrightness",
+    (GDBusArgInfo **) &_phonefso_usage_method_info_set_default_brightness_IN_ARG_pointers,
+    NULL,
+    (GDBusAnnotationInfo **) &_phonefso_usage_method_set_default_brightness_annotation_info_pointers
+  },
+  "handle-set-default-brightness"
+};
 
-static const gchar *
-lookup_property_gname_from_property_name (const gchar *property_name)
+static const _ExtendedGDBusArgInfo _phonefso_usage_method_info_get_default_brightness_OUT_ARG_brightness =
 {
-  return g_hash_table_lookup (_property_name_to_gname, property_name);
-}
+  {
+    -1,
+    "brightness",
+    "i",
+    NULL
+  },
+  FALSE
+};
 
-/* ------------------------------------------------------------------------- */
-static void dbus_iface_init (GDBusInterfaceIface *iface)
-{
-  iface->get_info = phonefso_usage_g_dbus_interface_interface_info;
-  iface->get_properties = phonefso_usage_get_properties;
-  iface->flush = phonefso_usage_flush;
-  iface->register_object = phonefso_usage_register_object;
-  iface->set_object = phonefso_usage_g_dbus_interface_set_object;
-  iface->get_object = phonefso_usage_g_dbus_interface_get_object;
-  iface->set_flags = phonefso_usage_g_dbus_interface_set_flags;
-  iface->get_flags = phonefso_usage_g_dbus_interface_get_flags;
-}
+static const _ExtendedGDBusArgInfo * const _phonefso_usage_method_info_get_default_brightness_OUT_ARG_pointers[] =
+{
+  &_phonefso_usage_method_info_get_default_brightness_OUT_ARG_brightness,
+  NULL
+};
 
-static void
-phonefso_usage_default_init (PhonefsoUsageIface *iface)
+static const GDBusAnnotationInfo _phonefso_usage_method_get_default_brightness_annotation_info_0 =
+{
+  -1,
+  "org.freedesktop.DBus.GLib.Async",
+  "true",
+  NULL
+};
+
+static const GDBusAnnotationInfo * const _phonefso_usage_method_get_default_brightness_annotation_info_pointers[] =
+{
+  &_phonefso_usage_method_get_default_brightness_annotation_info_0,
+  NULL
+};
+
+static const _ExtendedGDBusMethodInfo _phonefso_usage_method_info_get_default_brightness =
 {
+  {
+    -1,
+    "GetDefaultBrightness",
+    NULL,
+    (GDBusArgInfo **) &_phonefso_usage_method_info_get_default_brightness_OUT_ARG_pointers,
+    (GDBusAnnotationInfo **) &_phonefso_usage_method_get_default_brightness_annotation_info_pointers
+  },
+  "handle-get-default-brightness"
+};
+
+static const _ExtendedGDBusArgInfo _phonefso_usage_method_info_set_pdp_credentials_IN_ARG_apn =
+{
+  {
+    -1,
+    "apn",
+    "s",
+    NULL
+  },
+  FALSE
+};
+
+static const _ExtendedGDBusArgInfo _phonefso_usage_method_info_set_pdp_credentials_IN_ARG_user =
+{
+  {
+    -1,
+    "user",
+    "s",
+    NULL
+  },
+  FALSE
+};
+
+static const _ExtendedGDBusArgInfo _phonefso_usage_method_info_set_pdp_credentials_IN_ARG_password =
+{
+  {
+    -1,
+    "password",
+    "s",
+    NULL
+  },
+  FALSE
+};
+
+static const _ExtendedGDBusArgInfo * const _phonefso_usage_method_info_set_pdp_credentials_IN_ARG_pointers[] =
+{
+  &_phonefso_usage_method_info_set_pdp_credentials_IN_ARG_apn,
+  &_phonefso_usage_method_info_set_pdp_credentials_IN_ARG_user,
+  &_phonefso_usage_method_info_set_pdp_credentials_IN_ARG_password,
+  NULL
+};
+
+static const GDBusAnnotationInfo _phonefso_usage_method_set_pdp_credentials_annotation_info_0 =
+{
+  -1,
+  "org.freedesktop.DBus.GLib.Async",
+  "true",
+  NULL
+};
+
+static const GDBusAnnotationInfo * const _phonefso_usage_method_set_pdp_credentials_annotation_info_pointers[] =
+{
+  &_phonefso_usage_method_set_pdp_credentials_annotation_info_0,
+  NULL
+};
+
+static const _ExtendedGDBusMethodInfo _phonefso_usage_method_info_set_pdp_credentials =
+{
+  {
+    -1,
+    "SetPdpCredentials",
+    (GDBusArgInfo **) &_phonefso_usage_method_info_set_pdp_credentials_IN_ARG_pointers,
+    NULL,
+    (GDBusAnnotationInfo **) &_phonefso_usage_method_set_pdp_credentials_annotation_info_pointers
+  },
+  "handle-set-pdp-credentials"
+};
+
+static const _ExtendedGDBusArgInfo _phonefso_usage_method_info_set_pin_IN_ARG_pin =
+{
+  {
+    -1,
+    "pin",
+    "s",
+    NULL
+  },
+  FALSE
+};
+
+static const _ExtendedGDBusArgInfo * const _phonefso_usage_method_info_set_pin_IN_ARG_pointers[] =
+{
+  &_phonefso_usage_method_info_set_pin_IN_ARG_pin,
+  NULL
+};
+
+static const GDBusAnnotationInfo _phonefso_usage_method_set_pin_annotation_info_0 =
+{
+  -1,
+  "org.freedesktop.DBus.GLib.Async",
+  "true",
+  NULL
+};
+
+static const GDBusAnnotationInfo * const _phonefso_usage_method_set_pin_annotation_info_pointers[] =
+{
+  &_phonefso_usage_method_set_pin_annotation_info_0,
+  NULL
+};
+
+static const _ExtendedGDBusMethodInfo _phonefso_usage_method_info_set_pin =
+{
+  {
+    -1,
+    "SetPin",
+    (GDBusArgInfo **) &_phonefso_usage_method_info_set_pin_IN_ARG_pointers,
+    NULL,
+    (GDBusAnnotationInfo **) &_phonefso_usage_method_set_pin_annotation_info_pointers
+  },
+  "handle-set-pin"
+};
+
+static const _ExtendedGDBusMethodInfo * const _phonefso_usage_method_info_pointers[] =
+{
+  &_phonefso_usage_method_info_set_offline_mode,
+  &_phonefso_usage_method_info_get_offline_mode,
+  &_phonefso_usage_method_info_set_default_brightness,
+  &_phonefso_usage_method_info_get_default_brightness,
+  &_phonefso_usage_method_info_set_pdp_credentials,
+  &_phonefso_usage_method_info_set_pin,
+  NULL
+};
+
+static const _ExtendedGDBusInterfaceInfo _phonefso_usage_interface_info =
+{
+  {
+    -1,
+    "org.shr.phonefso.Usage",
+    (GDBusMethodInfo **) &_phonefso_usage_method_info_pointers,
+    NULL,
+    NULL,
+    NULL
+  },
+  "phonefso-usage",
+};
 
-  /* Build lookup structures */
-  _method_name_to_id = g_hash_table_new (g_str_hash, g_str_equal);
-  _signal_name_to_id = g_hash_table_new (g_str_hash, g_str_equal);
-  _property_name_to_id = g_hash_table_new (g_str_hash, g_str_equal);
-  _property_gname_to_name = g_hash_table_new (g_str_hash, g_str_equal);
-  _property_name_to_gname = g_hash_table_new (g_str_hash, g_str_equal);
-  g_hash_table_insert (_method_name_to_id, "SetOfflineMode", GUINT_TO_POINTER (__SET_OFFLINE_MODE_METHOD));
-  g_hash_table_insert (_method_name_to_id, "GetOfflineMode", GUINT_TO_POINTER (__GET_OFFLINE_MODE_METHOD));
-  g_hash_table_insert (_method_name_to_id, "SetDefaultBrightness", GUINT_TO_POINTER (__SET_DEFAULT_BRIGHTNESS_METHOD));
-  g_hash_table_insert (_method_name_to_id, "GetDefaultBrightness", GUINT_TO_POINTER (__GET_DEFAULT_BRIGHTNESS_METHOD));
-  g_hash_table_insert (_method_name_to_id, "SetPdpCredentials", GUINT_TO_POINTER (__SET_PDP_CREDENTIALS_METHOD));
-  g_hash_table_insert (_method_name_to_id, "SetPin", GUINT_TO_POINTER (__SET_PIN_METHOD));
 
-  /* GObject signals definitions for D-Bus signals: */
+/**
+ * phonefso_usage_interface_info:
+ *
+ * Gets a machine-readable description of the <link linkend="gdbus-interface-org-shr-phonefso-Usage.top_of_page">org.shr.phonefso.Usage</link> D-Bus interface.
+ *
+ * Returns: (transfer none): A #GDBusInterfaceInfo. Do not free.
+ */
+GDBusInterfaceInfo *
+phonefso_usage_interface_info (void)
+{
+  return (GDBusInterfaceInfo *) &_phonefso_usage_interface_info;
+}
+
+
+
+/**
+ * PhonefsoUsage:
+ *
+ * Abstract interface type for the D-Bus interface <link linkend="gdbus-interface-org-shr-phonefso-Usage.top_of_page">org.shr.phonefso.Usage</link>.
+ */
 
-  /* GObject signals definitions for D-Bus methods: */
+/**
+ * PhonefsoUsageIface:
+ * @parent_iface: The parent interface.
+ * @handle_get_default_brightness: Handler for the #PhonefsoUsage::handle-get-default-brightness signal.
+ * @handle_get_offline_mode: Handler for the #PhonefsoUsage::handle-get-offline-mode signal.
+ * @handle_set_default_brightness: Handler for the #PhonefsoUsage::handle-set-default-brightness signal.
+ * @handle_set_offline_mode: Handler for the #PhonefsoUsage::handle-set-offline-mode signal.
+ * @handle_set_pdp_credentials: Handler for the #PhonefsoUsage::handle-set-pdp-credentials signal.
+ * @handle_set_pin: Handler for the #PhonefsoUsage::handle-set-pin signal.
+ *
+ * Virtual table for the D-Bus interface <link linkend="gdbus-interface-org-shr-phonefso-Usage.top_of_page">org.shr.phonefso.Usage</link>.
+ */
+
+static void
+phonefso_usage_default_init (PhonefsoUsageIface *iface)
+{
+  /* GObject signals for incoming D-Bus method calls: */
   /**
    * PhonefsoUsage::handle-set-offline-mode:
-   * @object: The exported object emitting the signal.
-   * @invocation: A #GDBusMethodInvocation object that can be used to return a value or error.
-   * @state: Parameter.
+   * @object: A #PhonefsoUsage.
+   * @invocation: A #GDBusMethodInvocation.
+   * @state: Argument passed by remote caller.
    *
-   * On exported objects, this signal is emitted when a remote process (identified by @invocation) invokes the <literal>org.shr.phonefso.Usage.SetOfflineMode()</literal> D-Bus method on @object. Use phonefso_usage_complete_set_offline_mode() to return a value or g_dbus_method_invocation_return_error() to return an error.
+   * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-shr-phonefso-Usage.SetOfflineMode">SetOfflineMode()</link> D-Bus method.
    *
-   * The signal is emitted in the
-   * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
-   * of the thread that @object was registered in.
+   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phonefso_usage_complete_set_offline_mode() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
    *
-   * On proxies, this signal is never emitted.
-   *
-   * Returns: %TRUE if you want to handle the method call (will stop further handlers from being called), %FALSE otherwise.
+   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
    */
-  signals[__SET_OFFLINE_MODE_METHOD] =
-    g_signal_new ("handle-set-offline-mode",
-                  G_TYPE_FROM_INTERFACE (iface),
-                  G_SIGNAL_RUN_LAST,
-                  G_STRUCT_OFFSET (PhonefsoUsageIface, handle_set_offline_mode),
-                  g_signal_accumulator_true_handled,
-                  NULL,
-                  _shr_gdbus_cclosure_marshaller_BOOLEAN__OBJECT_BOOLEAN,
-                  G_TYPE_BOOLEAN,
-                  2,
-                  G_TYPE_DBUS_METHOD_INVOCATION,
-                  G_TYPE_BOOLEAN);
+  g_signal_new ("handle-set-offline-mode",
+    G_TYPE_FROM_INTERFACE (iface),
+    G_SIGNAL_RUN_LAST,
+    G_STRUCT_OFFSET (PhonefsoUsageIface, handle_set_offline_mode),
+    g_signal_accumulator_true_handled,
+    NULL,
+    g_cclosure_marshal_generic,
+    G_TYPE_BOOLEAN,
+    2,
+    G_TYPE_DBUS_METHOD_INVOCATION, G_TYPE_BOOLEAN);
+
   /**
    * PhonefsoUsage::handle-get-offline-mode:
-   * @object: The exported object emitting the signal.
-   * @invocation: A #GDBusMethodInvocation object that can be used to return a value or error.
+   * @object: A #PhonefsoUsage.
+   * @invocation: A #GDBusMethodInvocation.
    *
-   * On exported objects, this signal is emitted when a remote process (identified by @invocation) invokes the <literal>org.shr.phonefso.Usage.GetOfflineMode()</literal> D-Bus method on @object. Use phonefso_usage_complete_get_offline_mode() to return a value or g_dbus_method_invocation_return_error() to return an error.
+   * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-shr-phonefso-Usage.GetOfflineMode">GetOfflineMode()</link> D-Bus method.
    *
-   * The signal is emitted in the
-   * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
-   * of the thread that @object was registered in.
+   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phonefso_usage_complete_get_offline_mode() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
    *
-   * On proxies, this signal is never emitted.
-   *
-   * Returns: %TRUE if you want to handle the method call (will stop further handlers from being called), %FALSE otherwise.
+   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
    */
-  signals[__GET_OFFLINE_MODE_METHOD] =
-    g_signal_new ("handle-get-offline-mode",
-                  G_TYPE_FROM_INTERFACE (iface),
-                  G_SIGNAL_RUN_LAST,
-                  G_STRUCT_OFFSET (PhonefsoUsageIface, handle_get_offline_mode),
-                  g_signal_accumulator_true_handled,
-                  NULL,
-                  _shr_gdbus_cclosure_marshaller_BOOLEAN__OBJECT,
-                  G_TYPE_BOOLEAN,
-                  1,
-                  G_TYPE_DBUS_METHOD_INVOCATION);
+  g_signal_new ("handle-get-offline-mode",
+    G_TYPE_FROM_INTERFACE (iface),
+    G_SIGNAL_RUN_LAST,
+    G_STRUCT_OFFSET (PhonefsoUsageIface, handle_get_offline_mode),
+    g_signal_accumulator_true_handled,
+    NULL,
+    g_cclosure_marshal_generic,
+    G_TYPE_BOOLEAN,
+    1,
+    G_TYPE_DBUS_METHOD_INVOCATION);
+
   /**
    * PhonefsoUsage::handle-set-default-brightness:
-   * @object: The exported object emitting the signal.
-   * @invocation: A #GDBusMethodInvocation object that can be used to return a value or error.
-   * @brightness: Parameter.
+   * @object: A #PhonefsoUsage.
+   * @invocation: A #GDBusMethodInvocation.
+   * @brightness: Argument passed by remote caller.
    *
-   * On exported objects, this signal is emitted when a remote process (identified by @invocation) invokes the <literal>org.shr.phonefso.Usage.SetDefaultBrightness()</literal> D-Bus method on @object. Use phonefso_usage_complete_set_default_brightness() to return a value or g_dbus_method_invocation_return_error() to return an error.
+   * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-shr-phonefso-Usage.SetDefaultBrightness">SetDefaultBrightness()</link> D-Bus method.
    *
-   * The signal is emitted in the
-   * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
-   * of the thread that @object was registered in.
+   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phonefso_usage_complete_set_default_brightness() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
    *
-   * On proxies, this signal is never emitted.
-   *
-   * Returns: %TRUE if you want to handle the method call (will stop further handlers from being called), %FALSE otherwise.
+   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
    */
-  signals[__SET_DEFAULT_BRIGHTNESS_METHOD] =
-    g_signal_new ("handle-set-default-brightness",
-                  G_TYPE_FROM_INTERFACE (iface),
-                  G_SIGNAL_RUN_LAST,
-                  G_STRUCT_OFFSET (PhonefsoUsageIface, handle_set_default_brightness),
-                  g_signal_accumulator_true_handled,
-                  NULL,
-                  _shr_gdbus_cclosure_marshaller_BOOLEAN__OBJECT_INT,
-                  G_TYPE_BOOLEAN,
-                  2,
-                  G_TYPE_DBUS_METHOD_INVOCATION,
-                  G_TYPE_INT);
+  g_signal_new ("handle-set-default-brightness",
+    G_TYPE_FROM_INTERFACE (iface),
+    G_SIGNAL_RUN_LAST,
+    G_STRUCT_OFFSET (PhonefsoUsageIface, handle_set_default_brightness),
+    g_signal_accumulator_true_handled,
+    NULL,
+    g_cclosure_marshal_generic,
+    G_TYPE_BOOLEAN,
+    2,
+    G_TYPE_DBUS_METHOD_INVOCATION, G_TYPE_INT);
+
   /**
    * PhonefsoUsage::handle-get-default-brightness:
-   * @object: The exported object emitting the signal.
-   * @invocation: A #GDBusMethodInvocation object that can be used to return a value or error.
+   * @object: A #PhonefsoUsage.
+   * @invocation: A #GDBusMethodInvocation.
    *
-   * On exported objects, this signal is emitted when a remote process (identified by @invocation) invokes the <literal>org.shr.phonefso.Usage.GetDefaultBrightness()</literal> D-Bus method on @object. Use phonefso_usage_complete_get_default_brightness() to return a value or g_dbus_method_invocation_return_error() to return an error.
+   * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-shr-phonefso-Usage.GetDefaultBrightness">GetDefaultBrightness()</link> D-Bus method.
    *
-   * The signal is emitted in the
-   * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
-   * of the thread that @object was registered in.
+   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phonefso_usage_complete_get_default_brightness() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
    *
-   * On proxies, this signal is never emitted.
-   *
-   * Returns: %TRUE if you want to handle the method call (will stop further handlers from being called), %FALSE otherwise.
+   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
    */
-  signals[__GET_DEFAULT_BRIGHTNESS_METHOD] =
-    g_signal_new ("handle-get-default-brightness",
-                  G_TYPE_FROM_INTERFACE (iface),
-                  G_SIGNAL_RUN_LAST,
-                  G_STRUCT_OFFSET (PhonefsoUsageIface, handle_get_default_brightness),
-                  g_signal_accumulator_true_handled,
-                  NULL,
-                  _shr_gdbus_cclosure_marshaller_BOOLEAN__OBJECT,
-                  G_TYPE_BOOLEAN,
-                  1,
-                  G_TYPE_DBUS_METHOD_INVOCATION);
+  g_signal_new ("handle-get-default-brightness",
+    G_TYPE_FROM_INTERFACE (iface),
+    G_SIGNAL_RUN_LAST,
+    G_STRUCT_OFFSET (PhonefsoUsageIface, handle_get_default_brightness),
+    g_signal_accumulator_true_handled,
+    NULL,
+    g_cclosure_marshal_generic,
+    G_TYPE_BOOLEAN,
+    1,
+    G_TYPE_DBUS_METHOD_INVOCATION);
+
   /**
    * PhonefsoUsage::handle-set-pdp-credentials:
-   * @object: The exported object emitting the signal.
-   * @invocation: A #GDBusMethodInvocation object that can be used to return a value or error.
-   * @apn: Parameter.
-   * @user: Parameter.
-   * @password: Parameter.
+   * @object: A #PhonefsoUsage.
+   * @invocation: A #GDBusMethodInvocation.
+   * @apn: Argument passed by remote caller.
+   * @user: Argument passed by remote caller.
+   * @password: Argument passed by remote caller.
    *
-   * On exported objects, this signal is emitted when a remote process (identified by @invocation) invokes the <literal>org.shr.phonefso.Usage.SetPdpCredentials()</literal> D-Bus method on @object. Use phonefso_usage_complete_set_pdp_credentials() to return a value or g_dbus_method_invocation_return_error() to return an error.
+   * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-shr-phonefso-Usage.SetPdpCredentials">SetPdpCredentials()</link> D-Bus method.
    *
-   * The signal is emitted in the
-   * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
-   * of the thread that @object was registered in.
+   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phonefso_usage_complete_set_pdp_credentials() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
    *
-   * On proxies, this signal is never emitted.
-   *
-   * Returns: %TRUE if you want to handle the method call (will stop further handlers from being called), %FALSE otherwise.
+   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
    */
-  signals[__SET_PDP_CREDENTIALS_METHOD] =
-    g_signal_new ("handle-set-pdp-credentials",
-                  G_TYPE_FROM_INTERFACE (iface),
-                  G_SIGNAL_RUN_LAST,
-                  G_STRUCT_OFFSET (PhonefsoUsageIface, handle_set_pdp_credentials),
-                  g_signal_accumulator_true_handled,
-                  NULL,
-                  _shr_gdbus_cclosure_marshaller_BOOLEAN__OBJECT_STRING_STRING_STRING,
-                  G_TYPE_BOOLEAN,
-                  4,
-                  G_TYPE_DBUS_METHOD_INVOCATION,
-                  G_TYPE_STRING,
-                  G_TYPE_STRING,
-                  G_TYPE_STRING);
+  g_signal_new ("handle-set-pdp-credentials",
+    G_TYPE_FROM_INTERFACE (iface),
+    G_SIGNAL_RUN_LAST,
+    G_STRUCT_OFFSET (PhonefsoUsageIface, handle_set_pdp_credentials),
+    g_signal_accumulator_true_handled,
+    NULL,
+    g_cclosure_marshal_generic,
+    G_TYPE_BOOLEAN,
+    4,
+    G_TYPE_DBUS_METHOD_INVOCATION, G_TYPE_STRING, G_TYPE_STRING, G_TYPE_STRING);
+
   /**
    * PhonefsoUsage::handle-set-pin:
-   * @object: The exported object emitting the signal.
-   * @invocation: A #GDBusMethodInvocation object that can be used to return a value or error.
-   * @pin: Parameter.
+   * @object: A #PhonefsoUsage.
+   * @invocation: A #GDBusMethodInvocation.
+   * @pin: Argument passed by remote caller.
    *
-   * On exported objects, this signal is emitted when a remote process (identified by @invocation) invokes the <literal>org.shr.phonefso.Usage.SetPin()</literal> D-Bus method on @object. Use phonefso_usage_complete_set_pin() to return a value or g_dbus_method_invocation_return_error() to return an error.
+   * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-shr-phonefso-Usage.SetPin">SetPin()</link> D-Bus method.
    *
-   * The signal is emitted in the
-   * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
-   * of the thread that @object was registered in.
+   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phonefso_usage_complete_set_pin() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
    *
-   * On proxies, this signal is never emitted.
-   *
-   * Returns: %TRUE if you want to handle the method call (will stop further handlers from being called), %FALSE otherwise.
+   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
    */
-  signals[__SET_PIN_METHOD] =
-    g_signal_new ("handle-set-pin",
-                  G_TYPE_FROM_INTERFACE (iface),
-                  G_SIGNAL_RUN_LAST,
-                  G_STRUCT_OFFSET (PhonefsoUsageIface, handle_set_pin),
-                  g_signal_accumulator_true_handled,
-                  NULL,
-                  _shr_gdbus_cclosure_marshaller_BOOLEAN__OBJECT_STRING,
-                  G_TYPE_BOOLEAN,
-                  2,
-                  G_TYPE_DBUS_METHOD_INVOCATION,
-                  G_TYPE_STRING);
-
-  /* GObject property definitions for D-Bus properties: */
-}
+  g_signal_new ("handle-set-pin",
+    G_TYPE_FROM_INTERFACE (iface),
+    G_SIGNAL_RUN_LAST,
+    G_STRUCT_OFFSET (PhonefsoUsageIface, handle_set_pin),
+    g_signal_accumulator_true_handled,
+    NULL,
+    g_cclosure_marshal_generic,
+    G_TYPE_BOOLEAN,
+    2,
+    G_TYPE_DBUS_METHOD_INVOCATION, G_TYPE_STRING);
 
+}
 
-/* C Bindings for properties */
+typedef PhonefsoUsageIface PhonefsoUsageInterface;
+G_DEFINE_INTERFACE (PhonefsoUsage, phonefso_usage, G_TYPE_OBJECT);
 
 /**
  * phonefso_usage_call_set_offline_mode:
- * @proxy: A #PhonefsoUsage.
- * @state: Method parameter.
- * @cancellable: A #GCancellable or %NULL.
- * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL if you don't care about the result of the method invocation.
- * @user_data: Data to pass to @callback.
- *
- * Invokes the <literal>org.shr.phonefso.Usage.SetOfflineMode()</literal>
- * D-Bus method on the remote object represented by @proxy.
- *
- * This is an asynchronous method. When the operation is finished,
- * callback will be invoked in the
- * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
- * of the thread you are calling this method from. You can then call
- * phonefso_usage_call_set_offline_mode_finish() to get the result of the operation.
- * See phonefso_usage_call_set_offline_mode_sync() for the synchronous version of this method.
+ * @proxy: A #PhonefsoUsageProxy.
+ * @state: Argument to pass with the method invocation.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL.
+ * @user_data: User data to pass to @callback.
+ *
+ * Asynchronously invokes the <link linkend="gdbus-method-org-shr-phonefso-Usage.SetOfflineMode">SetOfflineMode()</link> D-Bus method on @proxy.
+ * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
+ * You can then call phonefso_usage_call_set_offline_mode_finish() to get the result of the operation.
+ *
+ * See phonefso_usage_call_set_offline_mode_sync() for the synchronous, blocking version of this method.
  */
-void phonefso_usage_call_set_offline_mode (
-        PhonefsoUsage *proxy,
-        gboolean state,
-        GCancellable *cancellable,
-        GAsyncReadyCallback callback,
-        gpointer user_data)
-{
-  GVariant *_params;
-  _params = g_variant_new ("(b)",
-                           state);
+void
+phonefso_usage_call_set_offline_mode (
+    PhonefsoUsage *proxy,
+    gboolean state,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data)
+{
   g_dbus_proxy_call (G_DBUS_PROXY (proxy),
-                     "SetOfflineMode",
-                     _params,
-                     G_DBUS_CALL_FLAGS_NONE,
-                     -1,
-                     cancellable,
-                     callback,
-                     user_data);
+    "SetOfflineMode",
+    g_variant_new ("(b)",
+                   state),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    callback,
+    user_data);
 }
 
 /**
  * phonefso_usage_call_set_offline_mode_finish:
- * @proxy: A #PhonefsoUsage.
- * @res: A #GAsyncResult obtained from the #GAsyncReadyCallback passed to phonefso_usage_call_set_offline_mode().
+ * @proxy: A #PhonefsoUsageProxy.
+ * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phonefso_usage_call_set_offline_mode().
  * @error: Return location for error or %NULL.
  *
- * Finishes invoking the <literal>org.shr.phonefso.Usage.SetOfflineMode()</literal>
- * D-Bus method on the remote object represented by @proxy.
+ * Finishes an operation started with phonefso_usage_call_set_offline_mode().
  *
- * Returns: %TRUE if the call succeeded, %FALSE if @error is set.
+ * Returns: %TRUE if the call succeded, %FALSE if @error is set.
  */
-gboolean phonefso_usage_call_set_offline_mode_finish (
-        PhonefsoUsage *proxy,
-        GAsyncResult *res,
-        GError **error)
-{
-  gboolean _ret = FALSE;
-  GVariant *_result;
-  _result = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
-  if (_result == NULL)
+gboolean
+phonefso_usage_call_set_offline_mode_finish (
+    PhonefsoUsage *proxy,
+    GAsyncResult *res,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
+  if (_ret == NULL)
     goto _out;
-  g_variant_unref (_result);
-  _ret = TRUE;
+  g_variant_get (_ret,
+                 "()");
+  g_variant_unref (_ret);
 _out:
-  return _ret;
+  return _ret != NULL;
 }
 
 /**
  * phonefso_usage_call_set_offline_mode_sync:
- * @proxy: A #PhonefsoUsage.
- * @state: Method parameter.
- * @cancellable: A #GCancellable or %NULL.
+ * @proxy: A #PhonefsoUsageProxy.
+ * @state: Argument to pass with the method invocation.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
  * @error: Return location for error or %NULL.
  *
- * Synchronously invokes the <literal>org.shr.phonefso.Usage.SetOfflineMode()</literal>
- * D-Bus method on the remote object represented by @proxy.
- * The calling thread is blocked until a reply is received. See
- * phonefso_usage_call_set_offline_mode() for the asynchronous version of this method.
+ * Synchronously invokes the <link linkend="gdbus-method-org-shr-phonefso-Usage.SetOfflineMode">SetOfflineMode()</link> D-Bus method on @proxy. The calling thread is blocked until a reply is received.
+ *
+ * See phonefso_usage_call_set_offline_mode() for the asynchronous version of this method.
  *
- * Returns: %TRUE if the call succeeded, %FALSE if @error is set.
+ * Returns: %TRUE if the call succeded, %FALSE if @error is set.
  */
-gboolean phonefso_usage_call_set_offline_mode_sync (
-        PhonefsoUsage *proxy,
-        gboolean state,
-        GCancellable *cancellable,
-        GError **error)
-{
-  gboolean _ret = FALSE;
-  GVariant *_params;
-  GVariant *_result;
-  _params = g_variant_new ("(b)",
-                           state);
-  _result = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
-                                   "SetOfflineMode",
-                                   _params,
-                                   G_DBUS_CALL_FLAGS_NONE,
-                                   -1,
-                                   cancellable,
-                                   error);
-  if (_result == NULL)
+gboolean
+phonefso_usage_call_set_offline_mode_sync (
+    PhonefsoUsage *proxy,
+    gboolean state,
+    GCancellable *cancellable,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
+    "SetOfflineMode",
+    g_variant_new ("(b)",
+                   state),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    error);
+  if (_ret == NULL)
     goto _out;
-  g_variant_unref (_result);
-  _ret = TRUE;
+  g_variant_get (_ret,
+                 "()");
+  g_variant_unref (_ret);
 _out:
-  return _ret;
+  return _ret != NULL;
 }
 
-
 /**
  * phonefso_usage_call_get_offline_mode:
- * @proxy: A #PhonefsoUsage.
- * @cancellable: A #GCancellable or %NULL.
- * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL if you don't care about the result of the method invocation.
- * @user_data: Data to pass to @callback.
- *
- * Invokes the <literal>org.shr.phonefso.Usage.GetOfflineMode()</literal>
- * D-Bus method on the remote object represented by @proxy.
- *
- * This is an asynchronous method. When the operation is finished,
- * callback will be invoked in the
- * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
- * of the thread you are calling this method from. You can then call
- * phonefso_usage_call_get_offline_mode_finish() to get the result of the operation.
- * See phonefso_usage_call_get_offline_mode_sync() for the synchronous version of this method.
+ * @proxy: A #PhonefsoUsageProxy.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL.
+ * @user_data: User data to pass to @callback.
+ *
+ * Asynchronously invokes the <link linkend="gdbus-method-org-shr-phonefso-Usage.GetOfflineMode">GetOfflineMode()</link> D-Bus method on @proxy.
+ * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
+ * You can then call phonefso_usage_call_get_offline_mode_finish() to get the result of the operation.
+ *
+ * See phonefso_usage_call_get_offline_mode_sync() for the synchronous, blocking version of this method.
  */
-void phonefso_usage_call_get_offline_mode (
-        PhonefsoUsage *proxy,
-        GCancellable *cancellable,
-        GAsyncReadyCallback callback,
-        gpointer user_data)
-{
-  GVariant *_params;
-  _params = NULL;
+void
+phonefso_usage_call_get_offline_mode (
+    PhonefsoUsage *proxy,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data)
+{
   g_dbus_proxy_call (G_DBUS_PROXY (proxy),
-                     "GetOfflineMode",
-                     _params,
-                     G_DBUS_CALL_FLAGS_NONE,
-                     -1,
-                     cancellable,
-                     callback,
-                     user_data);
+    "GetOfflineMode",
+    g_variant_new ("()"),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    callback,
+    user_data);
 }
 
 /**
  * phonefso_usage_call_get_offline_mode_finish:
- * @proxy: A #PhonefsoUsage.
- * @out_state: Return location for out parameter or %NULL.
- * @res: A #GAsyncResult obtained from the #GAsyncReadyCallback passed to phonefso_usage_call_get_offline_mode().
+ * @proxy: A #PhonefsoUsageProxy.
+ * @out_state: (out): Return location for return parameter or %NULL to ignore.
+ * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phonefso_usage_call_get_offline_mode().
  * @error: Return location for error or %NULL.
  *
- * Finishes invoking the <literal>org.shr.phonefso.Usage.GetOfflineMode()</literal>
- * D-Bus method on the remote object represented by @proxy.
+ * Finishes an operation started with phonefso_usage_call_get_offline_mode().
  *
- * Returns: %TRUE if the call succeeded, %FALSE if @error is set.
+ * Returns: %TRUE if the call succeded, %FALSE if @error is set.
  */
-gboolean phonefso_usage_call_get_offline_mode_finish (
-        PhonefsoUsage *proxy,
-        gboolean *out_state,
-        GAsyncResult *res,
-        GError **error)
-{
-  gboolean _ret = FALSE;
-  GVariant *_result;
-  _result = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
-  if (_result == NULL)
+gboolean
+phonefso_usage_call_get_offline_mode_finish (
+    PhonefsoUsage *proxy,
+    gboolean *out_state,
+    GAsyncResult *res,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
+  if (_ret == NULL)
     goto _out;
-  {
-    g_variant_get (_result,
-                   "(b)",
-                   out_state);
-  }
-  g_variant_unref (_result);
-  _ret = TRUE;
+  g_variant_get (_ret,
+                 "(b)",
+                 out_state);
+  g_variant_unref (_ret);
 _out:
-  return _ret;
+  return _ret != NULL;
 }
 
 /**
  * phonefso_usage_call_get_offline_mode_sync:
- * @proxy: A #PhonefsoUsage.
- * @out_state: Return location for out parameter or %NULL.
- * @cancellable: A #GCancellable or %NULL.
+ * @proxy: A #PhonefsoUsageProxy.
+ * @out_state: (out): Return location for return parameter or %NULL to ignore.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
  * @error: Return location for error or %NULL.
  *
- * Synchronously invokes the <literal>org.shr.phonefso.Usage.GetOfflineMode()</literal>
- * D-Bus method on the remote object represented by @proxy.
- * The calling thread is blocked until a reply is received. See
- * phonefso_usage_call_get_offline_mode() for the asynchronous version of this method.
+ * Synchronously invokes the <link linkend="gdbus-method-org-shr-phonefso-Usage.GetOfflineMode">GetOfflineMode()</link> D-Bus method on @proxy. The calling thread is blocked until a reply is received.
  *
- * Returns: %TRUE if the call succeeded, %FALSE if @error is set.
+ * See phonefso_usage_call_get_offline_mode() for the asynchronous version of this method.
+ *
+ * Returns: %TRUE if the call succeded, %FALSE if @error is set.
  */
-gboolean phonefso_usage_call_get_offline_mode_sync (
-        PhonefsoUsage *proxy,
-        gboolean *out_state,
-        GCancellable *cancellable,
-        GError **error)
-{
-  gboolean _ret = FALSE;
-  GVariant *_params;
-  GVariant *_result;
-  _params = NULL;
-  _result = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
-                                   "GetOfflineMode",
-                                   _params,
-                                   G_DBUS_CALL_FLAGS_NONE,
-                                   -1,
-                                   cancellable,
-                                   error);
-  if (_result == NULL)
+gboolean
+phonefso_usage_call_get_offline_mode_sync (
+    PhonefsoUsage *proxy,
+    gboolean *out_state,
+    GCancellable *cancellable,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
+    "GetOfflineMode",
+    g_variant_new ("()"),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    error);
+  if (_ret == NULL)
     goto _out;
-  {
-    g_variant_get (_result,
-                   "(b)",
-                   out_state);
-  }
-  g_variant_unref (_result);
-  _ret = TRUE;
+  g_variant_get (_ret,
+                 "(b)",
+                 out_state);
+  g_variant_unref (_ret);
 _out:
-  return _ret;
+  return _ret != NULL;
 }
 
-
 /**
  * phonefso_usage_call_set_default_brightness:
- * @proxy: A #PhonefsoUsage.
- * @brightness: Method parameter.
- * @cancellable: A #GCancellable or %NULL.
- * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL if you don't care about the result of the method invocation.
- * @user_data: Data to pass to @callback.
- *
- * Invokes the <literal>org.shr.phonefso.Usage.SetDefaultBrightness()</literal>
- * D-Bus method on the remote object represented by @proxy.
- *
- * This is an asynchronous method. When the operation is finished,
- * callback will be invoked in the
- * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
- * of the thread you are calling this method from. You can then call
- * phonefso_usage_call_set_default_brightness_finish() to get the result of the operation.
- * See phonefso_usage_call_set_default_brightness_sync() for the synchronous version of this method.
+ * @proxy: A #PhonefsoUsageProxy.
+ * @brightness: Argument to pass with the method invocation.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL.
+ * @user_data: User data to pass to @callback.
+ *
+ * Asynchronously invokes the <link linkend="gdbus-method-org-shr-phonefso-Usage.SetDefaultBrightness">SetDefaultBrightness()</link> D-Bus method on @proxy.
+ * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
+ * You can then call phonefso_usage_call_set_default_brightness_finish() to get the result of the operation.
+ *
+ * See phonefso_usage_call_set_default_brightness_sync() for the synchronous, blocking version of this method.
  */
-void phonefso_usage_call_set_default_brightness (
-        PhonefsoUsage *proxy,
-        gint brightness,
-        GCancellable *cancellable,
-        GAsyncReadyCallback callback,
-        gpointer user_data)
-{
-  GVariant *_params;
-  _params = g_variant_new ("(i)",
-                           brightness);
+void
+phonefso_usage_call_set_default_brightness (
+    PhonefsoUsage *proxy,
+    gint brightness,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data)
+{
   g_dbus_proxy_call (G_DBUS_PROXY (proxy),
-                     "SetDefaultBrightness",
-                     _params,
-                     G_DBUS_CALL_FLAGS_NONE,
-                     -1,
-                     cancellable,
-                     callback,
-                     user_data);
+    "SetDefaultBrightness",
+    g_variant_new ("(i)",
+                   brightness),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    callback,
+    user_data);
 }
 
 /**
  * phonefso_usage_call_set_default_brightness_finish:
- * @proxy: A #PhonefsoUsage.
- * @res: A #GAsyncResult obtained from the #GAsyncReadyCallback passed to phonefso_usage_call_set_default_brightness().
+ * @proxy: A #PhonefsoUsageProxy.
+ * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phonefso_usage_call_set_default_brightness().
  * @error: Return location for error or %NULL.
  *
- * Finishes invoking the <literal>org.shr.phonefso.Usage.SetDefaultBrightness()</literal>
- * D-Bus method on the remote object represented by @proxy.
+ * Finishes an operation started with phonefso_usage_call_set_default_brightness().
  *
- * Returns: %TRUE if the call succeeded, %FALSE if @error is set.
+ * Returns: %TRUE if the call succeded, %FALSE if @error is set.
  */
-gboolean phonefso_usage_call_set_default_brightness_finish (
-        PhonefsoUsage *proxy,
-        GAsyncResult *res,
-        GError **error)
-{
-  gboolean _ret = FALSE;
-  GVariant *_result;
-  _result = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
-  if (_result == NULL)
+gboolean
+phonefso_usage_call_set_default_brightness_finish (
+    PhonefsoUsage *proxy,
+    GAsyncResult *res,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
+  if (_ret == NULL)
     goto _out;
-  g_variant_unref (_result);
-  _ret = TRUE;
+  g_variant_get (_ret,
+                 "()");
+  g_variant_unref (_ret);
 _out:
-  return _ret;
+  return _ret != NULL;
 }
 
 /**
  * phonefso_usage_call_set_default_brightness_sync:
- * @proxy: A #PhonefsoUsage.
- * @brightness: Method parameter.
- * @cancellable: A #GCancellable or %NULL.
+ * @proxy: A #PhonefsoUsageProxy.
+ * @brightness: Argument to pass with the method invocation.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
  * @error: Return location for error or %NULL.
  *
- * Synchronously invokes the <literal>org.shr.phonefso.Usage.SetDefaultBrightness()</literal>
- * D-Bus method on the remote object represented by @proxy.
- * The calling thread is blocked until a reply is received. See
- * phonefso_usage_call_set_default_brightness() for the asynchronous version of this method.
+ * Synchronously invokes the <link linkend="gdbus-method-org-shr-phonefso-Usage.SetDefaultBrightness">SetDefaultBrightness()</link> D-Bus method on @proxy. The calling thread is blocked until a reply is received.
+ *
+ * See phonefso_usage_call_set_default_brightness() for the asynchronous version of this method.
  *
- * Returns: %TRUE if the call succeeded, %FALSE if @error is set.
+ * Returns: %TRUE if the call succeded, %FALSE if @error is set.
  */
-gboolean phonefso_usage_call_set_default_brightness_sync (
-        PhonefsoUsage *proxy,
-        gint brightness,
-        GCancellable *cancellable,
-        GError **error)
-{
-  gboolean _ret = FALSE;
-  GVariant *_params;
-  GVariant *_result;
-  _params = g_variant_new ("(i)",
-                           brightness);
-  _result = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
-                                   "SetDefaultBrightness",
-                                   _params,
-                                   G_DBUS_CALL_FLAGS_NONE,
-                                   -1,
-                                   cancellable,
-                                   error);
-  if (_result == NULL)
+gboolean
+phonefso_usage_call_set_default_brightness_sync (
+    PhonefsoUsage *proxy,
+    gint brightness,
+    GCancellable *cancellable,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
+    "SetDefaultBrightness",
+    g_variant_new ("(i)",
+                   brightness),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    error);
+  if (_ret == NULL)
     goto _out;
-  g_variant_unref (_result);
-  _ret = TRUE;
+  g_variant_get (_ret,
+                 "()");
+  g_variant_unref (_ret);
 _out:
-  return _ret;
+  return _ret != NULL;
 }
 
-
 /**
  * phonefso_usage_call_get_default_brightness:
- * @proxy: A #PhonefsoUsage.
- * @cancellable: A #GCancellable or %NULL.
- * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL if you don't care about the result of the method invocation.
- * @user_data: Data to pass to @callback.
- *
- * Invokes the <literal>org.shr.phonefso.Usage.GetDefaultBrightness()</literal>
- * D-Bus method on the remote object represented by @proxy.
- *
- * This is an asynchronous method. When the operation is finished,
- * callback will be invoked in the
- * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
- * of the thread you are calling this method from. You can then call
- * phonefso_usage_call_get_default_brightness_finish() to get the result of the operation.
- * See phonefso_usage_call_get_default_brightness_sync() for the synchronous version of this method.
+ * @proxy: A #PhonefsoUsageProxy.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL.
+ * @user_data: User data to pass to @callback.
+ *
+ * Asynchronously invokes the <link linkend="gdbus-method-org-shr-phonefso-Usage.GetDefaultBrightness">GetDefaultBrightness()</link> D-Bus method on @proxy.
+ * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
+ * You can then call phonefso_usage_call_get_default_brightness_finish() to get the result of the operation.
+ *
+ * See phonefso_usage_call_get_default_brightness_sync() for the synchronous, blocking version of this method.
  */
-void phonefso_usage_call_get_default_brightness (
-        PhonefsoUsage *proxy,
-        GCancellable *cancellable,
-        GAsyncReadyCallback callback,
-        gpointer user_data)
-{
-  GVariant *_params;
-  _params = NULL;
+void
+phonefso_usage_call_get_default_brightness (
+    PhonefsoUsage *proxy,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data)
+{
   g_dbus_proxy_call (G_DBUS_PROXY (proxy),
-                     "GetDefaultBrightness",
-                     _params,
-                     G_DBUS_CALL_FLAGS_NONE,
-                     -1,
-                     cancellable,
-                     callback,
-                     user_data);
+    "GetDefaultBrightness",
+    g_variant_new ("()"),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    callback,
+    user_data);
 }
 
 /**
  * phonefso_usage_call_get_default_brightness_finish:
- * @proxy: A #PhonefsoUsage.
- * @out_brightness: Return location for out parameter or %NULL.
- * @res: A #GAsyncResult obtained from the #GAsyncReadyCallback passed to phonefso_usage_call_get_default_brightness().
+ * @proxy: A #PhonefsoUsageProxy.
+ * @out_brightness: (out): Return location for return parameter or %NULL to ignore.
+ * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phonefso_usage_call_get_default_brightness().
  * @error: Return location for error or %NULL.
  *
- * Finishes invoking the <literal>org.shr.phonefso.Usage.GetDefaultBrightness()</literal>
- * D-Bus method on the remote object represented by @proxy.
+ * Finishes an operation started with phonefso_usage_call_get_default_brightness().
  *
- * Returns: %TRUE if the call succeeded, %FALSE if @error is set.
+ * Returns: %TRUE if the call succeded, %FALSE if @error is set.
  */
-gboolean phonefso_usage_call_get_default_brightness_finish (
-        PhonefsoUsage *proxy,
-        gint *out_brightness,
-        GAsyncResult *res,
-        GError **error)
-{
-  gboolean _ret = FALSE;
-  GVariant *_result;
-  _result = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
-  if (_result == NULL)
+gboolean
+phonefso_usage_call_get_default_brightness_finish (
+    PhonefsoUsage *proxy,
+    gint *out_brightness,
+    GAsyncResult *res,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
+  if (_ret == NULL)
     goto _out;
-  {
-    g_variant_get (_result,
-                   "(i)",
-                   out_brightness);
-  }
-  g_variant_unref (_result);
-  _ret = TRUE;
+  g_variant_get (_ret,
+                 "(i)",
+                 out_brightness);
+  g_variant_unref (_ret);
 _out:
-  return _ret;
+  return _ret != NULL;
 }
 
 /**
  * phonefso_usage_call_get_default_brightness_sync:
- * @proxy: A #PhonefsoUsage.
- * @out_brightness: Return location for out parameter or %NULL.
- * @cancellable: A #GCancellable or %NULL.
+ * @proxy: A #PhonefsoUsageProxy.
+ * @out_brightness: (out): Return location for return parameter or %NULL to ignore.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
  * @error: Return location for error or %NULL.
  *
- * Synchronously invokes the <literal>org.shr.phonefso.Usage.GetDefaultBrightness()</literal>
- * D-Bus method on the remote object represented by @proxy.
- * The calling thread is blocked until a reply is received. See
- * phonefso_usage_call_get_default_brightness() for the asynchronous version of this method.
+ * Synchronously invokes the <link linkend="gdbus-method-org-shr-phonefso-Usage.GetDefaultBrightness">GetDefaultBrightness()</link> D-Bus method on @proxy. The calling thread is blocked until a reply is received.
  *
- * Returns: %TRUE if the call succeeded, %FALSE if @error is set.
+ * See phonefso_usage_call_get_default_brightness() for the asynchronous version of this method.
+ *
+ * Returns: %TRUE if the call succeded, %FALSE if @error is set.
  */
-gboolean phonefso_usage_call_get_default_brightness_sync (
-        PhonefsoUsage *proxy,
-        gint *out_brightness,
-        GCancellable *cancellable,
-        GError **error)
-{
-  gboolean _ret = FALSE;
-  GVariant *_params;
-  GVariant *_result;
-  _params = NULL;
-  _result = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
-                                   "GetDefaultBrightness",
-                                   _params,
-                                   G_DBUS_CALL_FLAGS_NONE,
-                                   -1,
-                                   cancellable,
-                                   error);
-  if (_result == NULL)
+gboolean
+phonefso_usage_call_get_default_brightness_sync (
+    PhonefsoUsage *proxy,
+    gint *out_brightness,
+    GCancellable *cancellable,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
+    "GetDefaultBrightness",
+    g_variant_new ("()"),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    error);
+  if (_ret == NULL)
     goto _out;
-  {
-    g_variant_get (_result,
-                   "(i)",
-                   out_brightness);
-  }
-  g_variant_unref (_result);
-  _ret = TRUE;
+  g_variant_get (_ret,
+                 "(i)",
+                 out_brightness);
+  g_variant_unref (_ret);
 _out:
-  return _ret;
+  return _ret != NULL;
 }
 
-
 /**
  * phonefso_usage_call_set_pdp_credentials:
- * @proxy: A #PhonefsoUsage.
- * @apn: Method parameter.
- * @user: Method parameter.
- * @password: Method parameter.
- * @cancellable: A #GCancellable or %NULL.
- * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL if you don't care about the result of the method invocation.
- * @user_data: Data to pass to @callback.
- *
- * Invokes the <literal>org.shr.phonefso.Usage.SetPdpCredentials()</literal>
- * D-Bus method on the remote object represented by @proxy.
- *
- * This is an asynchronous method. When the operation is finished,
- * callback will be invoked in the
- * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
- * of the thread you are calling this method from. You can then call
- * phonefso_usage_call_set_pdp_credentials_finish() to get the result of the operation.
- * See phonefso_usage_call_set_pdp_credentials_sync() for the synchronous version of this method.
+ * @proxy: A #PhonefsoUsageProxy.
+ * @apn: Argument to pass with the method invocation.
+ * @user: Argument to pass with the method invocation.
+ * @password: Argument to pass with the method invocation.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL.
+ * @user_data: User data to pass to @callback.
+ *
+ * Asynchronously invokes the <link linkend="gdbus-method-org-shr-phonefso-Usage.SetPdpCredentials">SetPdpCredentials()</link> D-Bus method on @proxy.
+ * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
+ * You can then call phonefso_usage_call_set_pdp_credentials_finish() to get the result of the operation.
+ *
+ * See phonefso_usage_call_set_pdp_credentials_sync() for the synchronous, blocking version of this method.
  */
-void phonefso_usage_call_set_pdp_credentials (
-        PhonefsoUsage *proxy,
-        const gchar *apn,
-        const gchar *user,
-        const gchar *password,
-        GCancellable *cancellable,
-        GAsyncReadyCallback callback,
-        gpointer user_data)
-{
-  GVariant *_params;
-  _params = g_variant_new ("(sss)",
-                           apn,
-                           user,
-                           password);
+void
+phonefso_usage_call_set_pdp_credentials (
+    PhonefsoUsage *proxy,
+    const gchar *apn,
+    const gchar *user,
+    const gchar *password,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data)
+{
   g_dbus_proxy_call (G_DBUS_PROXY (proxy),
-                     "SetPdpCredentials",
-                     _params,
-                     G_DBUS_CALL_FLAGS_NONE,
-                     -1,
-                     cancellable,
-                     callback,
-                     user_data);
+    "SetPdpCredentials",
+    g_variant_new ("(sss)",
+                   apn,
+                   user,
+                   password),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    callback,
+    user_data);
 }
 
 /**
  * phonefso_usage_call_set_pdp_credentials_finish:
- * @proxy: A #PhonefsoUsage.
- * @res: A #GAsyncResult obtained from the #GAsyncReadyCallback passed to phonefso_usage_call_set_pdp_credentials().
+ * @proxy: A #PhonefsoUsageProxy.
+ * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phonefso_usage_call_set_pdp_credentials().
  * @error: Return location for error or %NULL.
  *
- * Finishes invoking the <literal>org.shr.phonefso.Usage.SetPdpCredentials()</literal>
- * D-Bus method on the remote object represented by @proxy.
+ * Finishes an operation started with phonefso_usage_call_set_pdp_credentials().
  *
- * Returns: %TRUE if the call succeeded, %FALSE if @error is set.
+ * Returns: %TRUE if the call succeded, %FALSE if @error is set.
  */
-gboolean phonefso_usage_call_set_pdp_credentials_finish (
-        PhonefsoUsage *proxy,
-        GAsyncResult *res,
-        GError **error)
-{
-  gboolean _ret = FALSE;
-  GVariant *_result;
-  _result = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
-  if (_result == NULL)
+gboolean
+phonefso_usage_call_set_pdp_credentials_finish (
+    PhonefsoUsage *proxy,
+    GAsyncResult *res,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
+  if (_ret == NULL)
     goto _out;
-  g_variant_unref (_result);
-  _ret = TRUE;
+  g_variant_get (_ret,
+                 "()");
+  g_variant_unref (_ret);
 _out:
-  return _ret;
+  return _ret != NULL;
 }
 
 /**
  * phonefso_usage_call_set_pdp_credentials_sync:
- * @proxy: A #PhonefsoUsage.
- * @apn: Method parameter.
- * @user: Method parameter.
- * @password: Method parameter.
- * @cancellable: A #GCancellable or %NULL.
- * @error: Return location for error or %NULL.
- *
- * Synchronously invokes the <literal>org.shr.phonefso.Usage.SetPdpCredentials()</literal>
- * D-Bus method on the remote object represented by @proxy.
- * The calling thread is blocked until a reply is received. See
- * phonefso_usage_call_set_pdp_credentials() for the asynchronous version of this method.
- *
- * Returns: %TRUE if the call succeeded, %FALSE if @error is set.
- */
-gboolean phonefso_usage_call_set_pdp_credentials_sync (
-        PhonefsoUsage *proxy,
-        const gchar *apn,
-        const gchar *user,
-        const gchar *password,
-        GCancellable *cancellable,
-        GError **error)
-{
-  gboolean _ret = FALSE;
-  GVariant *_params;
-  GVariant *_result;
-  _params = g_variant_new ("(sss)",
-                           apn,
-                           user,
-                           password);
-  _result = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
-                                   "SetPdpCredentials",
-                                   _params,
-                                   G_DBUS_CALL_FLAGS_NONE,
-                                   -1,
-                                   cancellable,
-                                   error);
-  if (_result == NULL)
-    goto _out;
-  g_variant_unref (_result);
-  _ret = TRUE;
-_out:
-  return _ret;
-}
-
-
-/**
- * phonefso_usage_call_set_pin:
- * @proxy: A #PhonefsoUsage.
- * @pin: Method parameter.
- * @cancellable: A #GCancellable or %NULL.
- * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL if you don't care about the result of the method invocation.
- * @user_data: Data to pass to @callback.
- *
- * Invokes the <literal>org.shr.phonefso.Usage.SetPin()</literal>
- * D-Bus method on the remote object represented by @proxy.
- *
- * This is an asynchronous method. When the operation is finished,
- * callback will be invoked in the
- * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
- * of the thread you are calling this method from. You can then call
- * phonefso_usage_call_set_pin_finish() to get the result of the operation.
- * See phonefso_usage_call_set_pin_sync() for the synchronous version of this method.
- */
-void phonefso_usage_call_set_pin (
-        PhonefsoUsage *proxy,
-        const gchar *pin,
-        GCancellable *cancellable,
-        GAsyncReadyCallback callback,
-        gpointer user_data)
-{
-  GVariant *_params;
-  _params = g_variant_new ("(s)",
-                           pin);
-  g_dbus_proxy_call (G_DBUS_PROXY (proxy),
-                     "SetPin",
-                     _params,
-                     G_DBUS_CALL_FLAGS_NONE,
-                     -1,
-                     cancellable,
-                     callback,
-                     user_data);
-}
-
-/**
- * phonefso_usage_call_set_pin_finish:
- * @proxy: A #PhonefsoUsage.
- * @res: A #GAsyncResult obtained from the #GAsyncReadyCallback passed to phonefso_usage_call_set_pin().
+ * @proxy: A #PhonefsoUsageProxy.
+ * @apn: Argument to pass with the method invocation.
+ * @user: Argument to pass with the method invocation.
+ * @password: Argument to pass with the method invocation.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
  * @error: Return location for error or %NULL.
  *
- * Finishes invoking the <literal>org.shr.phonefso.Usage.SetPin()</literal>
- * D-Bus method on the remote object represented by @proxy.
- *
- * Returns: %TRUE if the call succeeded, %FALSE if @error is set.
- */
-gboolean phonefso_usage_call_set_pin_finish (
-        PhonefsoUsage *proxy,
-        GAsyncResult *res,
-        GError **error)
-{
-  gboolean _ret = FALSE;
-  GVariant *_result;
-  _result = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
-  if (_result == NULL)
-    goto _out;
-  g_variant_unref (_result);
-  _ret = TRUE;
-_out:
-  return _ret;
-}
-
-/**
- * phonefso_usage_call_set_pin_sync:
- * @proxy: A #PhonefsoUsage.
- * @pin: Method parameter.
- * @cancellable: A #GCancellable or %NULL.
- * @error: Return location for error or %NULL.
+ * Synchronously invokes the <link linkend="gdbus-method-org-shr-phonefso-Usage.SetPdpCredentials">SetPdpCredentials()</link> D-Bus method on @proxy. The calling thread is blocked until a reply is received.
  *
- * Synchronously invokes the <literal>org.shr.phonefso.Usage.SetPin()</literal>
- * D-Bus method on the remote object represented by @proxy.
- * The calling thread is blocked until a reply is received. See
- * phonefso_usage_call_set_pin() for the asynchronous version of this method.
+ * See phonefso_usage_call_set_pdp_credentials() for the asynchronous version of this method.
  *
- * Returns: %TRUE if the call succeeded, %FALSE if @error is set.
+ * Returns: %TRUE if the call succeded, %FALSE if @error is set.
  */
-gboolean phonefso_usage_call_set_pin_sync (
-        PhonefsoUsage *proxy,
-        const gchar *pin,
-        GCancellable *cancellable,
-        GError **error)
-{
-  gboolean _ret = FALSE;
-  GVariant *_params;
-  GVariant *_result;
-  _params = g_variant_new ("(s)",
-                           pin);
-  _result = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
-                                   "SetPin",
-                                   _params,
-                                   G_DBUS_CALL_FLAGS_NONE,
-                                   -1,
-                                   cancellable,
-                                   error);
-  if (_result == NULL)
+gboolean
+phonefso_usage_call_set_pdp_credentials_sync (
+    PhonefsoUsage *proxy,
+    const gchar *apn,
+    const gchar *user,
+    const gchar *password,
+    GCancellable *cancellable,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
+    "SetPdpCredentials",
+    g_variant_new ("(sss)",
+                   apn,
+                   user,
+                   password),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    error);
+  if (_ret == NULL)
     goto _out;
-  g_variant_unref (_result);
-  _ret = TRUE;
+  g_variant_get (_ret,
+                 "()");
+  g_variant_unref (_ret);
 _out:
-  return _ret;
-}
-
-
-/**
- * phonefso_usage_complete_set_offline_mode:
- * @object: A #PhonefsoUsage.
- * @invocation: A #GDBusMethodInvocation.
- *
- * Completes handling the <literal>org.shr.phonefso.Usage.SetOfflineMode()</literal>
- * D-Bus method invocation by returning a value.
- *
- * If you want to return an error, use g_dbus_method_invocation_return_error()
- * or similar instead.
- *
- * This method will free @invocation, you cannot use it afterwards.
- */
-void phonefso_usage_complete_set_offline_mode (
-        PhonefsoUsage *object,
-        GDBusMethodInvocation *invocation)
-{
-  g_dbus_method_invocation_return_value (invocation, NULL);
-}
-
-
-/**
- * phonefso_usage_complete_get_offline_mode:
- * @object: A #PhonefsoUsage.
- * @invocation: A #GDBusMethodInvocation.
- * @state: Value to return.
- *
- * Completes handling the <literal>org.shr.phonefso.Usage.GetOfflineMode()</literal>
- * D-Bus method invocation by returning a value.
- *
- * If you want to return an error, use g_dbus_method_invocation_return_error()
- * or similar instead.
- *
- * This method will free @invocation, you cannot use it afterwards.
- */
-void phonefso_usage_complete_get_offline_mode (
-        PhonefsoUsage *object,
-        GDBusMethodInvocation *invocation,
-        gboolean state)
-{
-  GVariant *_params;
-  _params = g_variant_new ("(b)",
-                           state);
-  g_dbus_method_invocation_return_value (invocation, _params);
-}
-
-
-/**
- * phonefso_usage_complete_set_default_brightness:
- * @object: A #PhonefsoUsage.
- * @invocation: A #GDBusMethodInvocation.
- *
- * Completes handling the <literal>org.shr.phonefso.Usage.SetDefaultBrightness()</literal>
- * D-Bus method invocation by returning a value.
- *
- * If you want to return an error, use g_dbus_method_invocation_return_error()
- * or similar instead.
- *
- * This method will free @invocation, you cannot use it afterwards.
- */
-void phonefso_usage_complete_set_default_brightness (
-        PhonefsoUsage *object,
-        GDBusMethodInvocation *invocation)
-{
-  g_dbus_method_invocation_return_value (invocation, NULL);
-}
-
-
-/**
- * phonefso_usage_complete_get_default_brightness:
- * @object: A #PhonefsoUsage.
- * @invocation: A #GDBusMethodInvocation.
- * @brightness: Value to return.
- *
- * Completes handling the <literal>org.shr.phonefso.Usage.GetDefaultBrightness()</literal>
- * D-Bus method invocation by returning a value.
- *
- * If you want to return an error, use g_dbus_method_invocation_return_error()
- * or similar instead.
- *
- * This method will free @invocation, you cannot use it afterwards.
- */
-void phonefso_usage_complete_get_default_brightness (
-        PhonefsoUsage *object,
-        GDBusMethodInvocation *invocation,
-        gint brightness)
-{
-  GVariant *_params;
-  _params = g_variant_new ("(i)",
-                           brightness);
-  g_dbus_method_invocation_return_value (invocation, _params);
-}
-
-
-/**
- * phonefso_usage_complete_set_pdp_credentials:
- * @object: A #PhonefsoUsage.
- * @invocation: A #GDBusMethodInvocation.
- *
- * Completes handling the <literal>org.shr.phonefso.Usage.SetPdpCredentials()</literal>
- * D-Bus method invocation by returning a value.
- *
- * If you want to return an error, use g_dbus_method_invocation_return_error()
- * or similar instead.
- *
- * This method will free @invocation, you cannot use it afterwards.
- */
-void phonefso_usage_complete_set_pdp_credentials (
-        PhonefsoUsage *object,
-        GDBusMethodInvocation *invocation)
-{
-  g_dbus_method_invocation_return_value (invocation, NULL);
+  return _ret != NULL;
 }
 
-
 /**
- * phonefso_usage_complete_set_pin:
- * @object: A #PhonefsoUsage.
- * @invocation: A #GDBusMethodInvocation.
- *
- * Completes handling the <literal>org.shr.phonefso.Usage.SetPin()</literal>
- * D-Bus method invocation by returning a value.
+ * phonefso_usage_call_set_pin:
+ * @proxy: A #PhonefsoUsageProxy.
+ * @pin: Argument to pass with the method invocation.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL.
+ * @user_data: User data to pass to @callback.
  *
- * If you want to return an error, use g_dbus_method_invocation_return_error()
- * or similar instead.
+ * Asynchronously invokes the <link linkend="gdbus-method-org-shr-phonefso-Usage.SetPin">SetPin()</link> D-Bus method on @proxy.
+ * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
+ * You can then call phonefso_usage_call_set_pin_finish() to get the result of the operation.
  *
- * This method will free @invocation, you cannot use it afterwards.
+ * See phonefso_usage_call_set_pin_sync() for the synchronous, blocking version of this method.
  */
-void phonefso_usage_complete_set_pin (
-        PhonefsoUsage *object,
-        GDBusMethodInvocation *invocation)
-{
-  g_dbus_method_invocation_return_value (invocation, NULL);
-}
-
-
-static const GDBusArgInfo phonefso_usage_method_in_SetOfflineMode_state =
-{
-  -1,
-  "state",
-  "b",
-  (GDBusAnnotationInfo **) NULL
-};
-static const GDBusArgInfo * const phonefso_usage_method_in_SetOfflineMode_arg_pointers[] =
-{
-  &phonefso_usage_method_in_SetOfflineMode_state,
-  NULL
-};
-
-static const GDBusAnnotationInfo SetOfflineMode_method_annotations_annotation_0 = {
-  -1,
-  "org.freedesktop.DBus.GLib.Async",
-  "true",
-};
-
-static const GDBusAnnotationInfo *SetOfflineMode_method_annotations[] = {
-  &SetOfflineMode_method_annotations_annotation_0,
-  NULL
-};
-
-static const GDBusMethodInfo phonefso_usage_method_SetOfflineMode =
-{
-  -1,
-  "SetOfflineMode",
-  (GDBusArgInfo **) &phonefso_usage_method_in_SetOfflineMode_arg_pointers,
-  (GDBusArgInfo **) NULL,
-  (GDBusAnnotationInfo **) SetOfflineMode_method_annotations,
-};
-
-static const GDBusArgInfo phonefso_usage_method_out_GetOfflineMode_state =
-{
-  -1,
-  "state",
-  "b",
-  (GDBusAnnotationInfo **) NULL
-};
-static const GDBusArgInfo * const phonefso_usage_method_out_GetOfflineMode_arg_pointers[] =
-{
-  &phonefso_usage_method_out_GetOfflineMode_state,
-  NULL
-};
-
-static const GDBusAnnotationInfo GetOfflineMode_method_annotations_annotation_0 = {
-  -1,
-  "org.freedesktop.DBus.GLib.Async",
-  "true",
-};
-
-static const GDBusAnnotationInfo *GetOfflineMode_method_annotations[] = {
-  &GetOfflineMode_method_annotations_annotation_0,
-  NULL
-};
-
-static const GDBusMethodInfo phonefso_usage_method_GetOfflineMode =
-{
-  -1,
-  "GetOfflineMode",
-  (GDBusArgInfo **) NULL,
-  (GDBusArgInfo **) &phonefso_usage_method_out_GetOfflineMode_arg_pointers,
-  (GDBusAnnotationInfo **) GetOfflineMode_method_annotations,
-};
-
-static const GDBusArgInfo phonefso_usage_method_in_SetDefaultBrightness_brightness =
-{
-  -1,
-  "brightness",
-  "i",
-  (GDBusAnnotationInfo **) NULL
-};
-static const GDBusArgInfo * const phonefso_usage_method_in_SetDefaultBrightness_arg_pointers[] =
-{
-  &phonefso_usage_method_in_SetDefaultBrightness_brightness,
-  NULL
-};
-
-static const GDBusAnnotationInfo SetDefaultBrightness_method_annotations_annotation_0 = {
-  -1,
-  "org.freedesktop.DBus.GLib.Async",
-  "true",
-};
-
-static const GDBusAnnotationInfo *SetDefaultBrightness_method_annotations[] = {
-  &SetDefaultBrightness_method_annotations_annotation_0,
-  NULL
-};
-
-static const GDBusMethodInfo phonefso_usage_method_SetDefaultBrightness =
-{
-  -1,
-  "SetDefaultBrightness",
-  (GDBusArgInfo **) &phonefso_usage_method_in_SetDefaultBrightness_arg_pointers,
-  (GDBusArgInfo **) NULL,
-  (GDBusAnnotationInfo **) SetDefaultBrightness_method_annotations,
-};
-
-static const GDBusArgInfo phonefso_usage_method_out_GetDefaultBrightness_brightness =
-{
-  -1,
-  "brightness",
-  "i",
-  (GDBusAnnotationInfo **) NULL
-};
-static const GDBusArgInfo * const phonefso_usage_method_out_GetDefaultBrightness_arg_pointers[] =
+void
+phonefso_usage_call_set_pin (
+    PhonefsoUsage *proxy,
+    const gchar *pin,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data)
 {
-  &phonefso_usage_method_out_GetDefaultBrightness_brightness,
-  NULL
-};
-
-static const GDBusAnnotationInfo GetDefaultBrightness_method_annotations_annotation_0 = {
-  -1,
-  "org.freedesktop.DBus.GLib.Async",
-  "true",
-};
-
-static const GDBusAnnotationInfo *GetDefaultBrightness_method_annotations[] = {
-  &GetDefaultBrightness_method_annotations_annotation_0,
-  NULL
-};
-
-static const GDBusMethodInfo phonefso_usage_method_GetDefaultBrightness =
-{
-  -1,
-  "GetDefaultBrightness",
-  (GDBusArgInfo **) NULL,
-  (GDBusArgInfo **) &phonefso_usage_method_out_GetDefaultBrightness_arg_pointers,
-  (GDBusAnnotationInfo **) GetDefaultBrightness_method_annotations,
-};
-
-static const GDBusArgInfo phonefso_usage_method_in_SetPdpCredentials_apn =
-{
-  -1,
-  "apn",
-  "s",
-  (GDBusAnnotationInfo **) NULL
-};
-static const GDBusArgInfo phonefso_usage_method_in_SetPdpCredentials_user =
-{
-  -1,
-  "user",
-  "s",
-  (GDBusAnnotationInfo **) NULL
-};
-static const GDBusArgInfo phonefso_usage_method_in_SetPdpCredentials_password =
-{
-  -1,
-  "password",
-  "s",
-  (GDBusAnnotationInfo **) NULL
-};
-static const GDBusArgInfo * const phonefso_usage_method_in_SetPdpCredentials_arg_pointers[] =
-{
-  &phonefso_usage_method_in_SetPdpCredentials_apn,
-  &phonefso_usage_method_in_SetPdpCredentials_user,
-  &phonefso_usage_method_in_SetPdpCredentials_password,
-  NULL
-};
-
-static const GDBusAnnotationInfo SetPdpCredentials_method_annotations_annotation_0 = {
-  -1,
-  "org.freedesktop.DBus.GLib.Async",
-  "true",
-};
-
-static const GDBusAnnotationInfo *SetPdpCredentials_method_annotations[] = {
-  &SetPdpCredentials_method_annotations_annotation_0,
-  NULL
-};
-
-static const GDBusMethodInfo phonefso_usage_method_SetPdpCredentials =
-{
-  -1,
-  "SetPdpCredentials",
-  (GDBusArgInfo **) &phonefso_usage_method_in_SetPdpCredentials_arg_pointers,
-  (GDBusArgInfo **) NULL,
-  (GDBusAnnotationInfo **) SetPdpCredentials_method_annotations,
-};
-
-static const GDBusArgInfo phonefso_usage_method_in_SetPin_pin =
-{
-  -1,
-  "pin",
-  "s",
-  (GDBusAnnotationInfo **) NULL
-};
-static const GDBusArgInfo * const phonefso_usage_method_in_SetPin_arg_pointers[] =
-{
-  &phonefso_usage_method_in_SetPin_pin,
-  NULL
-};
-
-static const GDBusAnnotationInfo SetPin_method_annotations_annotation_0 = {
-  -1,
-  "org.freedesktop.DBus.GLib.Async",
-  "true",
-};
-
-static const GDBusAnnotationInfo *SetPin_method_annotations[] = {
-  &SetPin_method_annotations_annotation_0,
-  NULL
-};
-
-static const GDBusMethodInfo phonefso_usage_method_SetPin =
-{
-  -1,
-  "SetPin",
-  (GDBusArgInfo **) &phonefso_usage_method_in_SetPin_arg_pointers,
-  (GDBusArgInfo **) NULL,
-  (GDBusAnnotationInfo **) SetPin_method_annotations,
-};
-
-static const GDBusMethodInfo * const phonefso_usage_method_info_pointers[] =
-{
-  &phonefso_usage_method_SetOfflineMode,
-  &phonefso_usage_method_GetOfflineMode,
-  &phonefso_usage_method_SetDefaultBrightness,
-  &phonefso_usage_method_GetDefaultBrightness,
-  &phonefso_usage_method_SetPdpCredentials,
-  &phonefso_usage_method_SetPin,
-  NULL
-};
-
-static const GDBusInterfaceInfo _phonefso_usage_interface_info =
-{
-  -1,
-  "org.shr.phonefso.Usage",
-  (GDBusMethodInfo **) &phonefso_usage_method_info_pointers,
-  (GDBusSignalInfo **) NULL,
-  (GDBusPropertyInfo **) NULL,
-  (GDBusAnnotationInfo **) NULL
-};
-
-static void
-handle_method_call_real (GDBusConnection       *connection,
-                         const gchar           *sender,
-                         const gchar           *object_path,
-                         const gchar           *interface_name,
-                         const gchar           *method_name,
-                         GVariant              *parameters,
-                         GDBusMethodInvocation *invocation,
-                         gpointer               user_data)
-{
-  guint method_id;
-  method_id = lookup_method_id_from_method_name (method_name);
-  switch (method_id)
-    {
-    case __SET_OFFLINE_MODE_METHOD:
-      {
-        PhonefsoUsage *object = PHONEFSO_USAGE (user_data);
-        gboolean handled;
-        gboolean arg_state;
-        g_variant_get (parameters,
-                       "(b)",
-                       &arg_state);
-        g_signal_emit (object,
-                       signals[method_id],
-                       0, invocation, arg_state, &handled);
-        if (!handled)
-          goto not_implemented;
-      }
-      break;
-
-    case __GET_OFFLINE_MODE_METHOD:
-      {
-        PhonefsoUsage *object = PHONEFSO_USAGE (user_data);
-        gboolean handled;
-        g_signal_emit (object,
-                       signals[method_id],
-                       0, invocation, &handled);
-        if (!handled)
-          goto not_implemented;
-      }
-      break;
-
-    case __SET_DEFAULT_BRIGHTNESS_METHOD:
-      {
-        PhonefsoUsage *object = PHONEFSO_USAGE (user_data);
-        gboolean handled;
-        gint arg_brightness;
-        g_variant_get (parameters,
-                       "(i)",
-                       &arg_brightness);
-        g_signal_emit (object,
-                       signals[method_id],
-                       0, invocation, arg_brightness, &handled);
-        if (!handled)
-          goto not_implemented;
-      }
-      break;
-
-    case __GET_DEFAULT_BRIGHTNESS_METHOD:
-      {
-        PhonefsoUsage *object = PHONEFSO_USAGE (user_data);
-        gboolean handled;
-        g_signal_emit (object,
-                       signals[method_id],
-                       0, invocation, &handled);
-        if (!handled)
-          goto not_implemented;
-      }
-      break;
-
-    case __SET_PDP_CREDENTIALS_METHOD:
-      {
-        PhonefsoUsage *object = PHONEFSO_USAGE (user_data);
-        gboolean handled;
-        const gchar *arg_apn;
-        const gchar *arg_user;
-        const gchar *arg_password;
-        g_variant_get (parameters,
-                       "(&s&s&s)",
-                       &arg_apn,
-                       &arg_user,
-                       &arg_password);
-        g_signal_emit (object,
-                       signals[method_id],
-                       0, invocation, arg_apn, arg_user, arg_password, &handled);
-        if (!handled)
-          goto not_implemented;
-      }
-      break;
-
-    case __SET_PIN_METHOD:
-      {
-        PhonefsoUsage *object = PHONEFSO_USAGE (user_data);
-        gboolean handled;
-        const gchar *arg_pin;
-        g_variant_get (parameters,
-                       "(&s)",
-                       &arg_pin);
-        g_signal_emit (object,
-                       signals[method_id],
-                       0, invocation, arg_pin, &handled);
-        if (!handled)
-          goto not_implemented;
-      }
-      break;
-
-    default:
-not_implemented:
-      g_dbus_method_invocation_return_error (invocation,
-                                             G_DBUS_ERROR,
-                                             G_DBUS_ERROR_NOT_SUPPORTED,
-                                             "Method `%s' is not implemented",
-                                             method_name);
-      break;
-    }
-};
-
-typedef struct
-{
-  GDBusMethodInvocation *invocation;
-  gpointer               user_data;
-} HandleMethodInThreadData;
-
-static gboolean
-handle_method_call_in_thread_func (GIOSchedulerJob *job,
-                                   GCancellable    *cancellable,
-                                   gpointer         user_data)
-{
-  HandleMethodInThreadData *data = user_data;
-
-  handle_method_call_real (g_dbus_method_invocation_get_connection (data->invocation),
-                           g_dbus_method_invocation_get_sender (data->invocation),
-                           g_dbus_method_invocation_get_object_path (data->invocation),
-                           g_dbus_method_invocation_get_interface_name (data->invocation),
-                           g_dbus_method_invocation_get_method_name (data->invocation),
-                           g_dbus_method_invocation_get_parameters (data->invocation),
-                           data->invocation,
-                           data->user_data);
-  return FALSE; /* job is complete */
-}
-
-static void
-handle_method_call (GDBusConnection       *connection,
-                    const gchar           *sender,
-                    const gchar           *object_path,
-                    const gchar           *interface_name,
-                    const gchar           *method_name,
-                    GVariant              *parameters,
-                    GDBusMethodInvocation *invocation,
-                    gpointer               user_data)
-{
-  GDBusInterface *interface = G_DBUS_INTERFACE (user_data);
-  GDBusInterfaceFlags flags;
-
-  flags = g_dbus_interface_get_flags (interface);
-  if (flags & G_DBUS_INTERFACE_FLAGS_RUN_IN_THREAD)
-    {
-      HandleMethodInThreadData *data;
-      data = g_new0 (HandleMethodInThreadData, 1);
-      data->invocation = invocation;
-      data->user_data = user_data;
-      g_io_scheduler_push_job (handle_method_call_in_thread_func,
-                               data,
-                               g_free, /* since we don't need refs on objects */
-                               G_PRIORITY_DEFAULT,
-                               NULL); /* GCancellable* */
-    }
-  else
-    {
-      handle_method_call_real (connection,
-                               sender,
-                               object_path,
-                               interface_name,
-                               method_name,
-                               parameters,
-                               invocation,
-                               user_data);
-    }
-}
-
-static GVariant *
-get_property (GDBusConnection  *connection,
-              const gchar      *sender,
-              const gchar      *object_path,
-              const gchar      *interface_name,
-              const gchar      *property_name,
-              GError          **error,
-              gpointer          user_data)
-{
-  GVariant *ret;
-  guint prop_id;
-  prop_id = lookup_property_id_from_property_name (property_name);
-  ret = NULL;
-  switch (prop_id)
-    {
-    default:
-      g_assert_not_reached ();
-      break;
-    }
-
-  if (ret == NULL)
-    {
-      GVariant *untrusted_empty;
-      GDBusPropertyInfo *property_info;
-      const GVariantType *type;
-      property_info = g_dbus_interface_info_lookup_property ((GDBusInterfaceInfo *) &_phonefso_usage_interface_info, property_name);
-      type = G_VARIANT_TYPE (property_info->signature);
-      untrusted_empty = g_variant_new_from_data (type, NULL, 0, FALSE, NULL, NULL);
-      ret = g_variant_get_normal_form (untrusted_empty);
-      g_variant_unref (untrusted_empty);
-    }
-
-  return ret;
-};
-
-static gboolean
-set_property (GDBusConnection  *connection,
-              const gchar      *sender,
-              const gchar      *object_path,
-              const gchar      *interface_name,
-              const gchar      *property_name,
-              GVariant         *value,
-              GError          **error,
-              gpointer          user_data)
-{
-  gboolean ret;
-  guint prop_id;
-  prop_id = lookup_property_id_from_property_name (property_name);
-  ret = TRUE;
-  switch (prop_id)
-    {
-    default:
-      g_set_error (error,
-                   G_DBUS_ERROR,
-                   G_DBUS_ERROR_NOT_SUPPORTED,
-                   "This implementation does not support property `%s'",
-                   property_name);
-      ret = FALSE;
-      break;
-    }
-
-  return ret;
-};
-
-static const GDBusInterfaceVTable phonefso_usage_interface_vtable =
-{
-  handle_method_call,
-  get_property,
-  set_property,
-};
-
-/* ---------------------------------------------------------------------- */
-
-typedef struct {
-  gpointer data;
-  gsize size;
-} _VariantBlob;
-
-static void
-_variant_blob_free (_VariantBlob *blob)
-{
-  g_free (blob->data);
-  g_free (blob);
-}
-
-static _VariantBlob *
-_variant_blob_new (GVariant *value)
-{
-  _VariantBlob *blob;
-  blob = g_new0 (_VariantBlob, 1);
-  blob->size = g_variant_get_size (value);
-  blob->data = g_malloc (blob->size);
-  g_variant_store (value, blob->data);
-  return blob;
-}
-
-static gboolean
-_variant_blob_equal (_VariantBlob *a,
-                    _VariantBlob *b)
-{
-  return (a->size == b->size) && (memcmp (a->data, b->data, a->size) == 0);
-}
-/* ---------------------------------------------------------------------- */
-
-static gboolean
-emit_notifications_in_idle (gpointer user_data)
-{
-  GObject *object = G_OBJECT (user_data);
-  GDBusConnection *connection;
-  const gchar *path;
-  GHashTable *notification_queue;
-  GHashTableIter iter;
-  const gchar *property_name;
-  GVariant *value;
-  GVariantBuilder builder;
-  GVariantBuilder invalidated_builder;
-  GHashTable *pvc;
-  gboolean has_changes;
-
-  notification_queue = g_object_get_data (object, "gdbus-codegen-notification-queue");
-  path = g_object_get_data (object, "gdbus-codegen-path");
-  connection = g_object_get_data (object, "gdbus-codegen-connection");
-  pvc = g_object_get_data (object, "gdbus-codegen-pvc");
-  g_assert (notification_queue != NULL && path != NULL && connection != NULL && pvc != NULL);
-
-  g_variant_builder_init (&builder, G_VARIANT_TYPE ("a{sv}"));
-  g_variant_builder_init (&invalidated_builder, G_VARIANT_TYPE ("as"));
-  g_hash_table_iter_init (&iter, notification_queue);
-  has_changes = FALSE;
-  while (g_hash_table_iter_next (&iter, (gpointer) &property_name, (gpointer) &value))
-    {
-      _VariantBlob *cached_blob;
-      _VariantBlob *blob;
-      cached_blob = g_hash_table_lookup (pvc, property_name);
-      blob = _variant_blob_new (value);
-      if (cached_blob == NULL || !_variant_blob_equal (cached_blob, blob))
-        {
-          g_hash_table_insert (pvc, (gpointer) property_name, blob);
-          g_variant_builder_add (&builder, "{sv}", property_name, value);
-          has_changes = TRUE;
-        }
-      else
-        {
-          _variant_blob_free (blob);
-        }
-    }
-
-  if (has_changes)
-    {
-      g_dbus_connection_emit_signal (connection,
-                                     NULL,
-                                     path,
-                                     "org.freedesktop.DBus.Properties",
-                                     "PropertiesChanged",
-                                     g_variant_new ("(sa{sv}as)",
-                                                    "org.shr.phonefso.Usage",
-                                                    &builder,
-                                                    &invalidated_builder),
-                                     NULL);
-    }
-  else
-    {
-      g_variant_builder_clear (&builder);
-      g_variant_builder_clear (&invalidated_builder);
-    }
-
-  g_hash_table_remove_all (notification_queue);
-  g_object_set_data (object, "gdbus-codegen-notification-idle-source", NULL);
-  return FALSE;
-}
-
-static void
-queue_notification (GObject     *object,
-                    const gchar *property_name,
-                    GVariant    *value)
-{
-  GHashTable *notification_queue;
-  GSource *idle_source;
-  notification_queue = g_object_get_data (object, "gdbus-codegen-notification-queue");
-  if (notification_queue == NULL)
-    {
-      notification_queue = g_hash_table_new_full (g_str_hash, g_str_equal, NULL, (GDestroyNotify) g_variant_unref);
-      g_object_set_data_full (object, "gdbus-codegen-notification-queue", notification_queue, (GDestroyNotify) g_hash_table_unref);
-    }
-  g_hash_table_insert (notification_queue, (gpointer) property_name, (gpointer) value); /* adopts value */
-  idle_source = g_object_get_data (object, "gdbus-codegen-notification-idle-source");
-  if (idle_source == NULL)
-    {
-      idle_source = g_idle_source_new ();
-      g_source_set_priority (idle_source, G_PRIORITY_DEFAULT);
-      g_source_set_callback (idle_source,
-                             emit_notifications_in_idle,
-                             g_object_ref (object),
-                             (GDestroyNotify) g_object_unref);
-      g_source_attach (idle_source, g_main_context_get_thread_default ());
-      g_source_unref (idle_source);
-      g_object_set_data (object, "gdbus-codegen-notification-idle-source", idle_source);
-    }
-}
-
-static void
-phonefso_usage_flush (GDBusInterface *_object)
-{
-  PhonefsoUsage *object = PHONEFSO_USAGE (_object);
-  GSource *idle_source;
-  idle_source = g_object_get_data (G_OBJECT (object), "gdbus-codegen-notification-idle-source");
-  if (idle_source != NULL)
-    {
-      emit_notifications_in_idle (object);
-      g_source_destroy (idle_source);
-    }
+  g_dbus_proxy_call (G_DBUS_PROXY (proxy),
+    "SetPin",
+    g_variant_new ("(s)",
+                   pin),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    callback,
+    user_data);
 }
 
-static void
-on_notify (GObject    *object,
-           GParamSpec *pspec,
-           gpointer    user_data)
-{
-  GDBusConnection *connection;
-  const gchar *path;
-  GVariant *value;
-  const gchar *property_name;
-
-  path = g_object_get_data (object, "gdbus-codegen-path");
-  connection = g_object_get_data (object, "gdbus-codegen-connection");
-  if (connection == NULL || path == NULL)
-    goto out;
-  property_name = lookup_property_name_from_property_gname (pspec->name);
-  if (property_name == NULL)
-    goto out;
-
-  value = get_property (connection, NULL, path, "org.shr.phonefso.Usage", property_name, NULL, object);
-  if (value != NULL)
-    {
-      if (g_variant_is_floating (value))
-        g_variant_ref_sink (value);
-      queue_notification (object, property_name, value);
-    }
-out:
-  ;
+/**
+ * phonefso_usage_call_set_pin_finish:
+ * @proxy: A #PhonefsoUsageProxy.
+ * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phonefso_usage_call_set_pin().
+ * @error: Return location for error or %NULL.
+ *
+ * Finishes an operation started with phonefso_usage_call_set_pin().
+ *
+ * Returns: %TRUE if the call succeded, %FALSE if @error is set.
+ */
+gboolean
+phonefso_usage_call_set_pin_finish (
+    PhonefsoUsage *proxy,
+    GAsyncResult *res,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
+  if (_ret == NULL)
+    goto _out;
+  g_variant_get (_ret,
+                 "()");
+  g_variant_unref (_ret);
+_out:
+  return _ret != NULL;
 }
 
-static void
-on_object_unregistered (GObject *object)
-{
-  GSource *idle_source;
-  idle_source = g_object_get_data (G_OBJECT (object), "gdbus-codegen-notification-idle-source");
-  if (idle_source != NULL)
-    g_source_destroy (idle_source);
-  g_object_set_data (G_OBJECT (object), "gdbus-codegen-notification-idle-source", NULL);
-  g_object_set_data (G_OBJECT (object), "gdbus-codegen-path", NULL);
-  g_object_set_data (G_OBJECT (object), "gdbus-codegen-connection", NULL);
-  g_signal_handlers_disconnect_by_func (object, on_notify, NULL);
+/**
+ * phonefso_usage_call_set_pin_sync:
+ * @proxy: A #PhonefsoUsageProxy.
+ * @pin: Argument to pass with the method invocation.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @error: Return location for error or %NULL.
+ *
+ * Synchronously invokes the <link linkend="gdbus-method-org-shr-phonefso-Usage.SetPin">SetPin()</link> D-Bus method on @proxy. The calling thread is blocked until a reply is received.
+ *
+ * See phonefso_usage_call_set_pin() for the asynchronous version of this method.
+ *
+ * Returns: %TRUE if the call succeded, %FALSE if @error is set.
+ */
+gboolean
+phonefso_usage_call_set_pin_sync (
+    PhonefsoUsage *proxy,
+    const gchar *pin,
+    GCancellable *cancellable,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
+    "SetPin",
+    g_variant_new ("(s)",
+                   pin),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    error);
+  if (_ret == NULL)
+    goto _out;
+  g_variant_get (_ret,
+                 "()");
+  g_variant_unref (_ret);
+_out:
+  return _ret != NULL;
 }
 
-static guint
-phonefso_usage_register_object (GDBusInterface *_object,
-           GDBusConnection *connection,
-           const gchar *object_path,
-           GError **error)
+/**
+ * phonefso_usage_complete_set_offline_mode:
+ * @object: A #PhonefsoUsage.
+ * @invocation: (transfer full): A #GDBusMethodInvocation.
+ *
+ * Helper function used in service implementations to finish handling invocations of the <link linkend="gdbus-method-org-shr-phonefso-Usage.SetOfflineMode">SetOfflineMode()</link> D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.
+ *
+ * This method will free @invocation, you cannot use it afterwards.
+ */
+void
+phonefso_usage_complete_set_offline_mode (
+    PhonefsoUsage *object,
+    GDBusMethodInvocation *invocation)
 {
-  PhonefsoUsage *object = PHONEFSO_USAGE (_object);
-  GHashTable *pvc;
-  guint n;
-
-  pvc = g_hash_table_new_full (g_str_hash, g_str_equal, NULL, (GDestroyNotify) _variant_blob_free);
-  if (_phonefso_usage_interface_info.properties != NULL)
-    {
-      for (n = 0; _phonefso_usage_interface_info.properties[n] != NULL; n++)
-        {
-          GDBusPropertyInfo *prop_info = _phonefso_usage_interface_info.properties[n];
-          if (prop_info->flags & G_DBUS_PROPERTY_INFO_FLAGS_READABLE)
-            {
-              GVariant *value;
-              value = get_property (connection, NULL, object_path, "org.shr.phonefso.Usage", prop_info->name, NULL, object);
-              if (value != NULL)
-                {
-                  if (g_variant_is_floating (value))
-                    g_variant_ref_sink (value);
-                  g_hash_table_insert (pvc, prop_info->name, _variant_blob_new (value));
-                  g_variant_unref (value);
-                }
-            }
-        }
-    }
-
-  g_object_set_data_full (G_OBJECT (object), "gdbus-codegen-path", (gpointer) g_strdup (object_path), g_free);
-  g_object_set_data (G_OBJECT (object), "gdbus-codegen-connection", (gpointer) connection);
-  g_object_set_data_full (G_OBJECT (object), "gdbus-codegen-pvc", (gpointer) pvc, (GDestroyNotify) g_hash_table_unref);
-  g_signal_connect (object, "notify", G_CALLBACK (on_notify), NULL);
-  return g_dbus_connection_register_object (connection,
-          object_path,
-          (GDBusInterfaceInfo *) &_phonefso_usage_interface_info,
-          &phonefso_usage_interface_vtable,
-          object,
-          (GDestroyNotify) on_object_unregistered,
-          error);
+  g_dbus_method_invocation_return_value (invocation,
+    g_variant_new ("()"));
 }
 
 /**
- * phonefso_usage_interface_info:
+ * phonefso_usage_complete_get_offline_mode:
+ * @object: A #PhonefsoUsage.
+ * @invocation: (transfer full): A #GDBusMethodInvocation.
+ * @state: Parameter to return.
  *
- * Gets interface description for the <literal>org.shr.phonefso.Usage</literal> D-Bus interface.
+ * Helper function used in service implementations to finish handling invocations of the <link linkend="gdbus-method-org-shr-phonefso-Usage.GetOfflineMode">GetOfflineMode()</link> D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.
  *
- * Returns: A #GDBusInterfaceInfo. Do not free, the object is statically allocated.
+ * This method will free @invocation, you cannot use it afterwards.
  */
-GDBusInterfaceInfo *
-phonefso_usage_interface_info (void)
+void
+phonefso_usage_complete_get_offline_mode (
+    PhonefsoUsage *object,
+    GDBusMethodInvocation *invocation,
+    gboolean state)
 {
-  return (GDBusInterfaceInfo *) &_phonefso_usage_interface_info;
+  g_dbus_method_invocation_return_value (invocation,
+    g_variant_new ("(b)",
+                   state));
 }
 
-static GDBusInterfaceInfo *
-phonefso_usage_g_dbus_interface_interface_info (GDBusInterface *object)
+/**
+ * phonefso_usage_complete_set_default_brightness:
+ * @object: A #PhonefsoUsage.
+ * @invocation: (transfer full): A #GDBusMethodInvocation.
+ *
+ * Helper function used in service implementations to finish handling invocations of the <link linkend="gdbus-method-org-shr-phonefso-Usage.SetDefaultBrightness">SetDefaultBrightness()</link> D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.
+ *
+ * This method will free @invocation, you cannot use it afterwards.
+ */
+void
+phonefso_usage_complete_set_default_brightness (
+    PhonefsoUsage *object,
+    GDBusMethodInvocation *invocation)
 {
-  return phonefso_usage_interface_info ();
+  g_dbus_method_invocation_return_value (invocation,
+    g_variant_new ("()"));
 }
 
-static GVariant *
-phonefso_usage_get_properties (GDBusInterface *object)
+/**
+ * phonefso_usage_complete_get_default_brightness:
+ * @object: A #PhonefsoUsage.
+ * @invocation: (transfer full): A #GDBusMethodInvocation.
+ * @brightness: Parameter to return.
+ *
+ * Helper function used in service implementations to finish handling invocations of the <link linkend="gdbus-method-org-shr-phonefso-Usage.GetDefaultBrightness">GetDefaultBrightness()</link> D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.
+ *
+ * This method will free @invocation, you cannot use it afterwards.
+ */
+void
+phonefso_usage_complete_get_default_brightness (
+    PhonefsoUsage *object,
+    GDBusMethodInvocation *invocation,
+    gint brightness)
 {
-  GDBusConnection *connection;
-  const gchar *object_path;
-  GVariantBuilder builder;
-  guint n;
-
-  g_variant_builder_init (&builder, G_VARIANT_TYPE ("a{sv}"));
-
-  if (_phonefso_usage_interface_info.properties == NULL)
-    goto out;
-
-  connection = g_object_get_data (G_OBJECT (object), "gdbus-codegen-connection");
-  object_path = g_object_get_data (G_OBJECT (object), "gdbus-codegen-path");
+  g_dbus_method_invocation_return_value (invocation,
+    g_variant_new ("(i)",
+                   brightness));
+}
 
-  for (n = 0; _phonefso_usage_interface_info.properties[n] != NULL; n++)
-    {
-      GDBusPropertyInfo *prop_info = _phonefso_usage_interface_info.properties[n];
-      if (prop_info->flags & G_DBUS_PROPERTY_INFO_FLAGS_READABLE)
-        {
-          GVariant *value;
-          value = get_property (connection, NULL, object_path, "org.shr.phonefso.Usage", prop_info->name, NULL, object);
-          if (value != NULL)
-            {
-              if (g_variant_is_floating (value))
-                g_variant_ref_sink (value);
-              g_variant_builder_add (&builder, "{sv}", prop_info->name, value);
-              g_variant_unref (value);
-            }
-        }
-    }
-out:
-  return g_variant_builder_end (&builder);
+/**
+ * phonefso_usage_complete_set_pdp_credentials:
+ * @object: A #PhonefsoUsage.
+ * @invocation: (transfer full): A #GDBusMethodInvocation.
+ *
+ * Helper function used in service implementations to finish handling invocations of the <link linkend="gdbus-method-org-shr-phonefso-Usage.SetPdpCredentials">SetPdpCredentials()</link> D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.
+ *
+ * This method will free @invocation, you cannot use it afterwards.
+ */
+void
+phonefso_usage_complete_set_pdp_credentials (
+    PhonefsoUsage *object,
+    GDBusMethodInvocation *invocation)
+{
+  g_dbus_method_invocation_return_value (invocation,
+    g_variant_new ("()"));
 }
 
+/**
+ * phonefso_usage_complete_set_pin:
+ * @object: A #PhonefsoUsage.
+ * @invocation: (transfer full): A #GDBusMethodInvocation.
+ *
+ * Helper function used in service implementations to finish handling invocations of the <link linkend="gdbus-method-org-shr-phonefso-Usage.SetPin">SetPin()</link> D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.
+ *
+ * This method will free @invocation, you cannot use it afterwards.
+ */
+void
+phonefso_usage_complete_set_pin (
+    PhonefsoUsage *object,
+    GDBusMethodInvocation *invocation)
+{
+  g_dbus_method_invocation_return_value (invocation,
+    g_variant_new ("()"));
+}
 
-/* ---------------------------------------------------------------------- */
+/* ------------------------------------------------------------------------ */
 
-static void proxy_iface_init (PhonefsoUsageIface *iface);
+/**
+ * PhonefsoUsageProxy:
+ *
+ * The #PhonefsoUsageProxy structure contains only private data and should only be accessed using the provided API.
+ */
 
-G_DEFINE_TYPE_WITH_CODE (PhonefsoUsageProxy, phonefso_usage_proxy, G_TYPE_DBUS_PROXY,
-                         G_IMPLEMENT_INTERFACE (TYPE_PHONEFSO_USAGE, proxy_iface_init));
+/**
+ * PhonefsoUsageProxyClass:
+ * @parent_class: The parent class.
+ *
+ * Class structure for #PhonefsoUsageProxy.
+ */
 
 static void
-phonefso_usage_proxy_init (PhonefsoUsageProxy *proxy)
+phonefso_usage_proxy_iface_init (PhonefsoUsageIface *iface)
 {
-  g_dbus_proxy_set_interface_info (G_DBUS_PROXY (proxy),
-                                   (GDBusInterfaceInfo *) &_phonefso_usage_interface_info);
 }
 
-static void
-g_signal (GDBusProxy  *proxy,
-          const gchar *sender_name,
-          const gchar *signal_name,
-          GVariant    *parameters)
-{
-  guint signal_id;
-  signal_id = lookup_signal_id_from_signal_name (signal_name);
-  switch (signal_id)
-    {
-    }
-}
+#define phonefso_usage_proxy_get_type phonefso_usage_proxy_get_type
+G_DEFINE_TYPE_WITH_CODE (PhonefsoUsageProxy, phonefso_usage_proxy, G_TYPE_DBUS_PROXY,
+                         G_IMPLEMENT_INTERFACE (TYPE_PHONEFSO_USAGE, phonefso_usage_proxy_iface_init));
+#undef phonefso_usage_proxy_get_type
 
 static void
 phonefso_usage_proxy_get_property (GObject      *object,
-                       guint         prop_id,
-                       GValue       *value,
-                       GParamSpec   *pspec)
+  guint         prop_id,
+  GValue       *value,
+  GParamSpec   *pspec)
 {
-  G_GNUC_UNUSED GVariant *cached;
-  switch (prop_id)
-    {
-
-    default:
-      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
-      break;
-    }
 }
 
 static void
-property_set_cb (GDBusProxy   *proxy,
-                 GAsyncResult *res,
-                 gpointer      user_data)
+phonefso_usage_proxy_set_property (GObject      *object,
+  guint         prop_id,
+  const GValue *value,
+  GParamSpec   *pspec)
 {
-  const gchar *property_name = user_data;
-  GError *error;
-  GVariant *result;
-
-  error = NULL;
-  result = g_dbus_proxy_call_finish (proxy, res, &error);
-  if (result == NULL)
-    {
-      g_warning ("Error setting property `%s': %s", property_name, error->message);
-      g_error_free (error);
-    }
-  else
-    {
-      g_variant_unref (result);
-    }
 }
 
 static void
-phonefso_usage_proxy_set_property (GObject      *object,
-                       guint         prop_id,
-                       const GValue *value,
-                       GParamSpec   *pspec)
-{
-  GVariant *new_value;
-  const gchar *property_name;
-  new_value = NULL;
-  property_name = NULL;
-  switch (prop_id)
-    {
-
-    default:
-      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
-      break;
-    }
-
-  if (new_value != NULL)
+phonefso_usage_proxy_g_signal (GDBusProxy *proxy,
+  const gchar *sender_name,
+  const gchar *signal_name,
+  GVariant *parameters)
+{
+  _ExtendedGDBusSignalInfo *info;
+  GVariantIter iter;
+  GVariant *child;
+  GValue *paramv;
+  guint num_params;
+  guint n;
+  guint signal_id;
+  info = (_ExtendedGDBusSignalInfo *) g_dbus_interface_info_lookup_signal ((GDBusInterfaceInfo *) &_phonefso_usage_interface_info, signal_name);
+  if (info == NULL)
+    return;
+  num_params = g_variant_n_children (parameters);
+  paramv = g_new0 (GValue, num_params + 1);
+  g_value_init (&paramv[0], TYPE_PHONEFSO_USAGE);
+  g_value_set_object (&paramv[0], proxy);
+  g_variant_iter_init (&iter, parameters);
+  n = 1;
+  while ((child = g_variant_iter_next_value (&iter)) != NULL)
     {
-      g_variant_ref_sink (new_value);
-      g_dbus_proxy_call (G_DBUS_PROXY (object),
-                         "org.freedesktop.DBus.Properties.Set",
-                         g_variant_new ("(ssv)",
-                                        "org.shr.phonefso.Usage",
-                                        property_name,
-                                        new_value),
-                         G_DBUS_CALL_FLAGS_NONE,
-                         -1,
-                         NULL,
-                         (GAsyncReadyCallback) property_set_cb,
-                         (gpointer) property_name);
-      g_variant_unref (new_value);
+      _ExtendedGDBusArgInfo *arg_info = (_ExtendedGDBusArgInfo *) info->parent_struct.args[n - 1];
+      if (arg_info->use_gvariant)
+        {
+          g_value_init (&paramv[n], G_TYPE_VARIANT);
+          g_value_set_variant (&paramv[n], child);
+          n++;
+        }
+      else
+        g_dbus_gvariant_to_gvalue (child, &paramv[n++]);
+      g_variant_unref (child);
     }
-
+  signal_id = g_signal_lookup (info->signal_name, TYPE_PHONEFSO_USAGE);
+  g_signal_emitv (paramv, signal_id, 0, NULL);
+  for (n = 0; n < num_params + 1; n++)
+    g_value_unset (&paramv[n]);
+  g_free (paramv);
 }
 
 static void
-g_properties_changed (GDBusProxy         *proxy,
-                      GVariant           *changed_properties,
-                      const gchar* const *invalidated_properties)
+phonefso_usage_proxy_g_properties_changed (GDBusProxy *proxy,
+  GVariant *changed_properties,
+  const gchar *const *invalidated_properties)
 {
   guint n;
   const gchar *key;
   GVariantIter *iter;
-  const gchar *gname;
-
+  _ExtendedGDBusPropertyInfo *info;
   g_variant_get (changed_properties, "a{sv}", &iter);
   while (g_variant_iter_next (iter, "{&sv}", &key, NULL))
     {
-      gname = lookup_property_gname_from_property_name (key);
-      if (gname != NULL)
-        g_object_notify (G_OBJECT (proxy), gname);
+      info = (_ExtendedGDBusPropertyInfo *) g_dbus_interface_info_lookup_property ((GDBusInterfaceInfo *) &_phonefso_usage_interface_info, key);
+      if (info != NULL)
+        g_object_notify (G_OBJECT (proxy), info->hyphen_name);
     }
-
+  g_variant_iter_free (iter);
   for (n = 0; invalidated_properties[n] != NULL; n++)
     {
-      gname = lookup_property_gname_from_property_name (invalidated_properties[n]);
-      if (gname != NULL)
-        g_object_notify (G_OBJECT (proxy), gname);
+      info = (_ExtendedGDBusPropertyInfo *) g_dbus_interface_info_lookup_property ((GDBusInterfaceInfo *) &_phonefso_usage_interface_info, invalidated_properties[n]);
+      if (info != NULL)
+        g_object_notify (G_OBJECT (proxy), info->hyphen_name);
     }
+}
 
+static void
+phonefso_usage_proxy_init (PhonefsoUsageProxy *proxy)
+{
+  g_dbus_proxy_set_interface_info (G_DBUS_PROXY (proxy), phonefso_usage_interface_info ());
 }
 
 static void
@@ -2064,74 +1479,62 @@ phonefso_usage_proxy_class_init (PhonefsoUsageProxyClass *klass)
   gobject_class->set_property = phonefso_usage_proxy_set_property;
 
   proxy_class = G_DBUS_PROXY_CLASS (klass);
-  proxy_class->g_signal = g_signal;
-  proxy_class->g_properties_changed = g_properties_changed;
-
-}
+  proxy_class->g_signal = phonefso_usage_proxy_g_signal;
+  proxy_class->g_properties_changed = phonefso_usage_proxy_g_properties_changed;
 
-static void
-proxy_iface_init (PhonefsoUsageIface *iface)
-{
 }
 
-
 /**
  * phonefso_usage_proxy_new:
  * @connection: A #GDBusConnection.
- * @flags: Flags used when constructing the proxy.
- * @name: A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.
+ * @flags: Flags from the #GDBusProxyFlags enumeration.
+ * @name: (allow-none): A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.
  * @object_path: An object path.
- * @cancellable: A #GCancellable or %NULL.
- * @callback: Callback function to invoke when the proxy is ready.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @callback: A #GAsyncReadyCallback to call when the request is satisfied.
  * @user_data: User data to pass to @callback.
  *
- * Like g_dbus_proxy_new() but returns a #PhonefsoUsageProxy.
+ * Asynchronously creates a proxy for the D-Bus interface <link linkend="gdbus-interface-org-shr-phonefso-Usage.top_of_page">org.shr.phonefso.Usage</link>. See g_dbus_proxy_new() for more details.
  *
- * This is a failable asynchronous constructor - when the proxy is ready, callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this function from. You can then call phonefso_usage_proxy_new_finish() to get the result. See phonefso_usage_proxy_new_sync() for the synchronous version.
+ * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
+ * You can then call phonefso_usage_proxy_new_finish() to get the result of the operation.
+ *
+ * See phonefso_usage_proxy_new_sync() for the synchronous, blocking version of this constructor.
  */
-void phonefso_usage_proxy_new (GDBusConnection     *connection,
-                   GDBusProxyFlags      flags,
-                   const gchar         *name,
-                   const gchar         *object_path,
-                   GCancellable        *cancellable,
-                   GAsyncReadyCallback  callback,
-                   gpointer             user_data)
-{
-  g_async_initable_new_async (TYPE_PHONEFSO_USAGE_PROXY,
-                              G_PRIORITY_DEFAULT,
-                              cancellable,
-                              callback,
-                              user_data,
-                              "g-flags", flags,
-                              "g-name", name,
-                              "g-connection", connection,
-                              "g-object-path", object_path,
-                              "g-interface-name", "org.shr.phonefso.Usage",
-                              NULL);
+void
+phonefso_usage_proxy_new (
+    GDBusConnection     *connection,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GAsyncReadyCallback  callback,
+    gpointer             user_data)
+{
+  g_async_initable_new_async (TYPE_PHONEFSO_USAGE_PROXY, G_PRIORITY_DEFAULT, cancellable, callback, user_data, "g-flags", flags, "g-name", name, "g-connection", connection, "g-object-path", object_path, "g-interface-name", "org.shr.phonefso.Usage", NULL);
 }
 
 /**
  * phonefso_usage_proxy_new_finish:
- * @res: A #GAsyncResult obtained from the #GAsyncReadyCallback function passed to phonefso_usage_proxy_new().
- * @error: Return location for error or %NULL.
+ * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phonefso_usage_proxy_new().
+ * @error: Return location for error or %NULL
  *
- * Finishes creating a #PhonefsoUsageProxy.
+ * Finishes an operation started with phonefso_usage_proxy_new().
  *
- * Returns: A #PhonefsoUsageProxy or %NULL if @error is set. Free with g_object_unref().
+ * Returns: (transfer full) (type PhonefsoUsageProxy): The constructed proxy object or %NULL if @error is set.
  */
-PhonefsoUsage *phonefso_usage_proxy_new_finish (GAsyncResult  *res,
-                        GError       **error)
+PhonefsoUsage *
+phonefso_usage_proxy_new_finish (
+    GAsyncResult        *res,
+    GError             **error)
 {
-  GObject *object;
+  GObject *ret;
   GObject *source_object;
   source_object = g_async_result_get_source_object (res);
-  g_assert (source_object != NULL);
-  object = g_async_initable_new_finish (G_ASYNC_INITABLE (source_object),
-                                        res,
-                                        error);
+  ret = g_async_initable_new_finish (G_ASYNC_INITABLE (source_object), res, error);
   g_object_unref (source_object);
-  if (object != NULL)
-    return PHONEFSO_USAGE (object);
+  if (ret != NULL)
+    return PHONEFSO_USAGE (ret);
   else
     return NULL;
 }
@@ -2139,37 +1542,33 @@ PhonefsoUsage *phonefso_usage_proxy_new_finish (GAsyncResult  *res,
 /**
  * phonefso_usage_proxy_new_sync:
  * @connection: A #GDBusConnection.
- * @flags: Flags used when constructing the proxy.
- * @name: A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.
+ * @flags: Flags from the #GDBusProxyFlags enumeration.
+ * @name: (allow-none): A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.
  * @object_path: An object path.
- * @cancellable: A #GCancellable or %NULL.
- * @error: Return location for error or %NULL.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @error: Return location for error or %NULL
+ *
+ * Synchronously creates a proxy for the D-Bus interface <link linkend="gdbus-interface-org-shr-phonefso-Usage.top_of_page">org.shr.phonefso.Usage</link>. See g_dbus_proxy_new_sync() for more details.
  *
- * Like g_dbus_proxy_new_sync() but returns a #PhonefsoUsageProxy.
+ * The calling thread is blocked until a reply is received.
  *
- * This is a synchronous failable constructor - the calling thread is blocked until the object is ready. See phonefso_usage_proxy_new() for the asynchronous version.
+ * See phonefso_usage_proxy_new() for the asynchronous version of this constructor.
  *
- * Returns: A #PhonefsoUsageProxy or %NULL if error is set. Free with g_object_unref().
+ * Returns: (transfer full) (type PhonefsoUsageProxy): The constructed proxy object or %NULL if @error is set.
  */
-PhonefsoUsage *phonefso_usage_proxy_new_sync (GDBusConnection     *connection,
-                       GDBusProxyFlags      flags,
-                       const gchar         *name,
-                       const gchar         *object_path,
-                       GCancellable        *cancellable,
-                       GError             **error)
-{
-  GInitable *initable;
-  initable = g_initable_new (TYPE_PHONEFSO_USAGE_PROXY,
-                             cancellable,
-                             error,
-                             "g-flags", flags,
-                             "g-name", name,
-                             "g-connection", connection,
-                             "g-object-path", object_path,
-                             "g-interface-name", "org.shr.phonefso.Usage",
-                             NULL);
-  if (initable != NULL)
-    return PHONEFSO_USAGE (initable);
+PhonefsoUsage *
+phonefso_usage_proxy_new_sync (
+    GDBusConnection     *connection,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GError             **error)
+{
+  GInitable *ret;
+  ret = g_initable_new (TYPE_PHONEFSO_USAGE_PROXY, cancellable, error, "g-flags", flags, "g-name", name, "g-connection", connection, "g-object-path", object_path, "g-interface-name", "org.shr.phonefso.Usage", NULL);
+  if (ret != NULL)
+    return PHONEFSO_USAGE (ret);
   else
     return NULL;
 }
@@ -2178,60 +1577,54 @@ PhonefsoUsage *phonefso_usage_proxy_new_sync (GDBusConnection     *connection,
 /**
  * phonefso_usage_proxy_new_for_bus:
  * @bus_type: A #GBusType.
- * @flags: Flags used when constructing the proxy.
+ * @flags: Flags from the #GDBusProxyFlags enumeration.
  * @name: A bus name (well-known or unique).
  * @object_path: An object path.
- * @cancellable: A #GCancellable or %NULL.
- * @callback: Callback function to invoke when the proxy is ready.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @callback: A #GAsyncReadyCallback to call when the request is satisfied.
  * @user_data: User data to pass to @callback.
  *
- * Like g_dbus_proxy_new_for_bus() but returns a #PhonefsoUsageProxy.
+ * Like phonefso_usage_proxy_new() but takes a #GBusType instead of a #GDBusConnection.
+ *
+ * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
+ * You can then call phonefso_usage_proxy_new_for_bus_finish() to get the result of the operation.
  *
- * This is a failable asynchronous constructor - when the proxy is ready, callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this function from. You can then call phonefso_usage_proxy_new_for_bus_finish() to get the result. See phonefso_usage_proxy_new_for_bus_sync() for the synchronous version.
+ * See phonefso_usage_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.
  */
-void phonefso_usage_proxy_new_for_bus (GBusType             bus_type,
-                           GDBusProxyFlags      flags,
-                           const gchar         *name,
-                           const gchar         *object_path,
-                           GCancellable        *cancellable,
-                           GAsyncReadyCallback  callback,
-                           gpointer             user_data)
-{
-  g_async_initable_new_async (TYPE_PHONEFSO_USAGE_PROXY,
-                              G_PRIORITY_DEFAULT,
-                              cancellable,
-                              callback,
-                              user_data,
-                              "g-flags", flags,
-                              "g-name", name,
-                              "g-bus-type", bus_type,
-                              "g-object-path", object_path,
-                              "g-interface-name", "org.shr.phonefso.Usage",
-                              NULL);
+void
+phonefso_usage_proxy_new_for_bus (
+    GBusType             bus_type,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GAsyncReadyCallback  callback,
+    gpointer             user_data)
+{
+  g_async_initable_new_async (TYPE_PHONEFSO_USAGE_PROXY, G_PRIORITY_DEFAULT, cancellable, callback, user_data, "g-flags", flags, "g-name", name, "g-bus-type", bus_type, "g-object-path", object_path, "g-interface-name", "org.shr.phonefso.Usage", NULL);
 }
 
 /**
  * phonefso_usage_proxy_new_for_bus_finish:
- * @res: A #GAsyncResult obtained from the #GAsyncReadyCallback function passed to phonefso_usage_proxy_new_for_bus().
- * @error: Return location for error or %NULL.
+ * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phonefso_usage_proxy_new_for_bus().
+ * @error: Return location for error or %NULL
  *
- * Finishes creating a #PhonefsoUsageProxy.
+ * Finishes an operation started with phonefso_usage_proxy_new_for_bus().
  *
- * Returns: A #PhonefsoUsageProxy or %NULL if @error is set. Free with g_object_unref().
+ * Returns: (transfer full) (type PhonefsoUsageProxy): The constructed proxy object or %NULL if @error is set.
  */
-PhonefsoUsage *phonefso_usage_proxy_new_for_bus_finish (GAsyncResult  *res,
-                                GError       **error)
+PhonefsoUsage *
+phonefso_usage_proxy_new_for_bus_finish (
+    GAsyncResult        *res,
+    GError             **error)
 {
-  GObject *object;
+  GObject *ret;
   GObject *source_object;
   source_object = g_async_result_get_source_object (res);
-  g_assert (source_object != NULL);
-  object = g_async_initable_new_finish (G_ASYNC_INITABLE (source_object),
-                                        res,
-                                        error);
+  ret = g_async_initable_new_finish (G_ASYNC_INITABLE (source_object), res, error);
   g_object_unref (source_object);
-  if (object != NULL)
-    return PHONEFSO_USAGE (object);
+  if (ret != NULL)
+    return PHONEFSO_USAGE (ret);
   else
     return NULL;
 }
@@ -2239,163 +1632,321 @@ PhonefsoUsage *phonefso_usage_proxy_new_for_bus_finish (GAsyncResult  *res,
 /**
  * phonefso_usage_proxy_new_for_bus_sync:
  * @bus_type: A #GBusType.
- * @flags: Flags used when constructing the proxy.
+ * @flags: Flags from the #GDBusProxyFlags enumeration.
  * @name: A bus name (well-known or unique).
  * @object_path: An object path.
- * @cancellable: A #GCancellable or %NULL.
- * @error: Return location for error or %NULL.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @error: Return location for error or %NULL
  *
- * Like g_dbus_proxy_new_for_bus_sync() but returns a #PhonefsoUsageProxy.
+ * Like phonefso_usage_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.
  *
- * This is a synchronous failable constructor - the calling thread is blocked until the object is ready. See phonefso_usage_proxy_new_for_bus() for the asynchronous version.
+ * The calling thread is blocked until a reply is received.
  *
- * Returns: A #PhonefsoUsageProxy or %NULL if error is set. Free with g_object_unref().
+ * See phonefso_usage_proxy_new_for_bus() for the asynchronous version of this constructor.
+ *
+ * Returns: (transfer full) (type PhonefsoUsageProxy): The constructed proxy object or %NULL if @error is set.
  */
-PhonefsoUsage *phonefso_usage_proxy_new_for_bus_sync (GBusType             bus_type,
-                               GDBusProxyFlags      flags,
-                               const gchar         *name,
-                               const gchar         *object_path,
-                               GCancellable        *cancellable,
-                               GError             **error)
-{
-  GInitable *initable;
-  initable = g_initable_new (TYPE_PHONEFSO_USAGE_PROXY,
-                             cancellable,
-                             error,
-                             "g-flags", flags,
-                             "g-name", name,
-                             "g-bus-type", bus_type,
-                             "g-object-path", object_path,
-                             "g-interface-name", "org.shr.phonefso.Usage",
-                             NULL);
-  if (initable != NULL)
-    return PHONEFSO_USAGE (initable);
+PhonefsoUsage *
+phonefso_usage_proxy_new_for_bus_sync (
+    GBusType             bus_type,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GError             **error)
+{
+  GInitable *ret;
+  ret = g_initable_new (TYPE_PHONEFSO_USAGE_PROXY, cancellable, error, "g-flags", flags, "g-name", name, "g-bus-type", bus_type, "g-object-path", object_path, "g-interface-name", "org.shr.phonefso.Usage", NULL);
+  if (ret != NULL)
+    return PHONEFSO_USAGE (ret);
   else
     return NULL;
 }
 
 
-/* ---------------------------------------------------------------------- */
+/* ------------------------------------------------------------------------ */
+
+/**
+ * PhonefsoUsageSkeleton:
+ *
+ * The #PhonefsoUsageSkeleton structure contains only private data and should only be accessed using the provided API.
+ */
+
+/**
+ * PhonefsoUsageSkeletonClass:
+ * @parent_class: The parent class.
+ *
+ * Class structure for #PhonefsoUsageSkeleton.
+ */
 
-struct _PhonefsoUsageStubPrivate
+struct _PhonefsoUsageSkeletonPrivate
 {
-  GDBusObject *enclosing_object;
-  GDBusInterfaceFlags flags;
+  GValueArray *properties;
+  GList *changed_properties;
+  GSource *changed_properties_idle_source;
+  GMainContext *context;
 };
 
-static void stub_iface_init (PhonefsoUsageIface *iface);
+static void
+_phonefso_usage_skeleton_handle_method_call (
+  GDBusConnection *connection,
+  const gchar *sender,
+  const gchar *object_path,
+  const gchar *interface_name,
+  const gchar *method_name,
+  GVariant *parameters,
+  GDBusMethodInvocation *invocation,
+  gpointer user_data)
+{
+  PhonefsoUsageSkeleton *skeleton = PHONEFSO_USAGE_SKELETON (user_data);
+  _ExtendedGDBusMethodInfo *info;
+  GVariantIter iter;
+  GVariant *child;
+  GValue *paramv;
+  guint num_params;
+  guint n;
+  guint signal_id;
+  GValue return_value = {0};
+  info = (_ExtendedGDBusMethodInfo *) g_dbus_method_invocation_get_method_info (invocation);
+  g_assert (info != NULL);
+  num_params = g_variant_n_children (parameters);
+  paramv = g_new0 (GValue, num_params + 2);
+  g_value_init (&paramv[0], TYPE_PHONEFSO_USAGE);
+  g_value_set_object (&paramv[0], skeleton);
+  g_value_init (&paramv[1], G_TYPE_DBUS_METHOD_INVOCATION);
+  g_value_set_object (&paramv[1], invocation);
+  g_variant_iter_init (&iter, parameters);
+  n = 2;
+  while ((child = g_variant_iter_next_value (&iter)) != NULL)
+    {
+      _ExtendedGDBusArgInfo *arg_info = (_ExtendedGDBusArgInfo *) info->parent_struct.in_args[n - 2];
+      if (arg_info->use_gvariant)
+        {
+          g_value_init (&paramv[n], G_TYPE_VARIANT);
+          g_value_set_variant (&paramv[n], child);
+          n++;
+        }
+      else
+        g_dbus_gvariant_to_gvalue (child, &paramv[n++]);
+      g_variant_unref (child);
+    }
+  signal_id = g_signal_lookup (info->signal_name, TYPE_PHONEFSO_USAGE);
+  g_value_init (&return_value, G_TYPE_BOOLEAN);
+  g_signal_emitv (paramv, signal_id, 0, &return_value);
+  if (!g_value_get_boolean (&return_value))
+    g_dbus_method_invocation_return_error (invocation, G_DBUS_ERROR, G_DBUS_ERROR_UNKNOWN_METHOD, "Method %s is not implemented on interface %s", method_name, interface_name);
+  g_value_unset (&return_value);
+  for (n = 0; n < num_params + 2; n++)
+    g_value_unset (&paramv[n]);
+  g_free (paramv);
+}
 
-G_DEFINE_TYPE_WITH_CODE (PhonefsoUsageStub, phonefso_usage_stub, G_TYPE_OBJECT,
-                         G_IMPLEMENT_INTERFACE (G_TYPE_DBUS_INTERFACE, dbus_iface_init)
-                         G_IMPLEMENT_INTERFACE (TYPE_PHONEFSO_USAGE, stub_iface_init));
+static GVariant *
+_phonefso_usage_skeleton_handle_get_property (
+  GDBusConnection *connection,
+  const gchar *sender,
+  const gchar *object_path,
+  const gchar *interface_name,
+  const gchar *property_name,
+  GError **error,
+  gpointer user_data)
+{
+  PhonefsoUsageSkeleton *skeleton = PHONEFSO_USAGE_SKELETON (user_data);
+  GValue value = {0};
+  GParamSpec *pspec;
+  _ExtendedGDBusPropertyInfo *info;
+  GVariant *ret;
+  ret = NULL;
+  info = (_ExtendedGDBusPropertyInfo *) g_dbus_interface_info_lookup_property ((GDBusInterfaceInfo *) &_phonefso_usage_interface_info, property_name);
+  g_assert (info != NULL);
+  pspec = g_object_class_find_property (G_OBJECT_GET_CLASS (skeleton), info->hyphen_name);
+  if (pspec == NULL)
+    {
+      g_set_error (error, G_DBUS_ERROR, G_DBUS_ERROR_INVALID_ARGS, "No property with name %s", property_name);
+    }
+  else
+    {
+      g_value_init (&value, pspec->value_type);
+      g_object_get_property (G_OBJECT (skeleton), info->hyphen_name, &value);
+      ret = g_dbus_gvalue_to_gvariant (&value, G_VARIANT_TYPE (info->parent_struct.signature));
+      g_value_unset (&value);
+    }
+  return ret;
+}
 
-static void
-phonefso_usage_stub_finalize (GObject *object)
+static gboolean
+_phonefso_usage_skeleton_handle_set_property (
+  GDBusConnection *connection,
+  const gchar *sender,
+  const gchar *object_path,
+  const gchar *interface_name,
+  const gchar *property_name,
+  GVariant *variant,
+  GError **error,
+  gpointer user_data)
+{
+  PhonefsoUsageSkeleton *skeleton = PHONEFSO_USAGE_SKELETON (user_data);
+  GValue value = {0};
+  GParamSpec *pspec;
+  _ExtendedGDBusPropertyInfo *info;
+  gboolean ret;
+  ret = FALSE;
+  info = (_ExtendedGDBusPropertyInfo *) g_dbus_interface_info_lookup_property ((GDBusInterfaceInfo *) &_phonefso_usage_interface_info, property_name);
+  g_assert (info != NULL);
+  pspec = g_object_class_find_property (G_OBJECT_GET_CLASS (skeleton), info->hyphen_name);
+  if (pspec == NULL)
+    {
+      g_set_error (error, G_DBUS_ERROR, G_DBUS_ERROR_INVALID_ARGS, "No property with name %s", property_name);
+    }
+  else
+    {
+      if (info->use_gvariant)
+        g_value_set_variant (&value, variant);
+      else
+        g_dbus_gvariant_to_gvalue (variant, &value);
+      g_object_set_property (G_OBJECT (skeleton), info->hyphen_name, &value);
+      g_value_unset (&value);
+      ret = TRUE;
+    }
+  return ret;
+}
+
+static const GDBusInterfaceVTable _phonefso_usage_skeleton_vtable =
 {
-  G_GNUC_UNUSED PhonefsoUsageStub *stub = (PhonefsoUsageStub *) object;
+  _phonefso_usage_skeleton_handle_method_call,
+  _phonefso_usage_skeleton_handle_get_property,
+  _phonefso_usage_skeleton_handle_set_property
+};
 
-  if (G_OBJECT_CLASS (phonefso_usage_stub_parent_class)->finalize != NULL)
-    G_OBJECT_CLASS (phonefso_usage_stub_parent_class)->finalize (object);
+static GDBusInterfaceInfo *
+phonefso_usage_skeleton_dbus_interface_get_info (GDBusInterfaceSkeleton *skeleton)
+{
+  return phonefso_usage_interface_info ();
 }
 
-static void
-phonefso_usage_stub_get_property (GObject      *object,
-                      guint         prop_id,
-                      GValue       *value,
-                      GParamSpec   *pspec)
+static GDBusInterfaceVTable *
+phonefso_usage_skeleton_dbus_interface_get_vtable (GDBusInterfaceSkeleton *skeleton)
 {
-  G_GNUC_UNUSED PhonefsoUsageStub *stub = (PhonefsoUsageStub *) object;
-  switch (prop_id)
-    {
-
-    default:
-      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
-      break;
-    }
+  return (GDBusInterfaceVTable *) &_phonefso_usage_skeleton_vtable;
 }
 
-static void
-phonefso_usage_stub_set_property (GObject      *object,
-                      guint         prop_id,
-                      const GValue *value,
-                      GParamSpec   *pspec)
+static GVariant *
+phonefso_usage_skeleton_dbus_interface_get_properties (GDBusInterfaceSkeleton *_skeleton)
 {
-  G_GNUC_UNUSED PhonefsoUsageStub *stub = (PhonefsoUsageStub *) object;
-  switch (prop_id)
-    {
+  PhonefsoUsageSkeleton *skeleton = PHONEFSO_USAGE_SKELETON (_skeleton);
 
-    default:
-      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
-      break;
+  GVariantBuilder builder;
+  guint n;
+  g_variant_builder_init (&builder, G_VARIANT_TYPE ("a{sv}"));
+  if (_phonefso_usage_interface_info.parent_struct.properties == NULL)
+    goto out;
+  for (n = 0; _phonefso_usage_interface_info.parent_struct.properties[n] != NULL; n++)
+    {
+      GDBusPropertyInfo *info = _phonefso_usage_interface_info.parent_struct.properties[n];
+      if (info->flags & G_DBUS_PROPERTY_INFO_FLAGS_READABLE)
+        {
+          GVariant *value;
+          value = _phonefso_usage_skeleton_handle_get_property (g_dbus_interface_skeleton_get_connection (G_DBUS_INTERFACE_SKELETON (skeleton)), NULL, g_dbus_interface_skeleton_get_object_path (G_DBUS_INTERFACE_SKELETON (skeleton)), "org.shr.phonefso.Usage", info->name, NULL, skeleton);
+          if (value != NULL)
+            {
+              if (g_variant_is_floating (value))
+                g_variant_ref_sink (value);
+              g_variant_builder_add (&builder, "{sv}", info->name, value);
+              g_variant_unref (value);
+            }
+        }
     }
+out:
+  return g_variant_builder_end (&builder);
 }
 
 static void
-phonefso_usage_stub_init (PhonefsoUsageStub *stub)
+phonefso_usage_skeleton_dbus_interface_flush (GDBusInterfaceSkeleton *_skeleton)
 {
-  stub->priv = G_TYPE_INSTANCE_GET_PRIVATE (stub, TYPE_PHONEFSO_USAGE_STUB, PhonefsoUsageStubPrivate);
 }
 
 static void
-phonefso_usage_stub_class_init (PhonefsoUsageStubClass *klass)
+phonefso_usage_skeleton_iface_init (PhonefsoUsageIface *iface)
 {
-  GObjectClass *gobject_class;
-
-  gobject_class = G_OBJECT_CLASS (klass);
-  gobject_class->finalize     = phonefso_usage_stub_finalize;
-  gobject_class->get_property = phonefso_usage_stub_get_property;
-  gobject_class->set_property = phonefso_usage_stub_set_property;
-  g_type_class_add_private (klass, sizeof (PhonefsoUsageStubPrivate));
 }
 
+#define phonefso_usage_skeleton_get_type phonefso_usage_skeleton_get_type
+G_DEFINE_TYPE_WITH_CODE (PhonefsoUsageSkeleton, phonefso_usage_skeleton, G_TYPE_DBUS_INTERFACE_SKELETON,
+                         G_IMPLEMENT_INTERFACE (TYPE_PHONEFSO_USAGE, phonefso_usage_skeleton_iface_init));
+#undef phonefso_usage_skeleton_get_type
+
 static void
-stub_iface_init (PhonefsoUsageIface *iface)
+phonefso_usage_skeleton_finalize (GObject *object)
 {
+  PhonefsoUsageSkeleton *skeleton = PHONEFSO_USAGE_SKELETON (object);
+  g_list_foreach (skeleton->priv->changed_properties, (GFunc) _changed_property_free, NULL);
+  g_list_free (skeleton->priv->changed_properties);
+  if (skeleton->priv->changed_properties_idle_source != NULL)
+    g_source_destroy (skeleton->priv->changed_properties_idle_source);
+  if (skeleton->priv->context != NULL)
+    g_main_context_unref (skeleton->priv->context);
+  G_OBJECT_CLASS (phonefso_usage_skeleton_parent_class)->finalize (object);
 }
 
-/**
- * phonefso_usage_stub_new:
- *
- * Creates a new stub object that can be exported via g_dbus_interface_register_object().
- *
- * Returns: A #PhonefsoUsageStub instance. Free with g_object_unref().
- */
-PhonefsoUsage *
-phonefso_usage_stub_new (void)
+static void
+phonefso_usage_skeleton_get_property (GObject      *object,
+  guint         prop_id,
+  GValue       *value,
+  GParamSpec   *pspec)
 {
-  return PHONEFSO_USAGE (g_object_new (TYPE_PHONEFSO_USAGE_STUB, NULL));
+  PhonefsoUsageSkeleton *skeleton = PHONEFSO_USAGE_SKELETON (object);
+  g_assert (prop_id - 1 >= 0 && prop_id - 1 < 0);
+  g_value_copy (&skeleton->priv->properties->values[prop_id - 1], value);
 }
 
-static GDBusObject *
-phonefso_usage_g_dbus_interface_get_object (GDBusInterface *interface)
+static void
+phonefso_usage_skeleton_set_property (GObject      *object,
+  guint         prop_id,
+  const GValue *value,
+  GParamSpec   *pspec)
 {
-  PhonefsoUsageStub *stub = G_TYPE_CHECK_INSTANCE_CAST (interface, TYPE_PHONEFSO_USAGE_STUB, PhonefsoUsageStub);
-  if (stub->priv->enclosing_object != NULL)
-    return g_object_ref (stub->priv->enclosing_object);
-  else
-    return NULL;
 }
 
 static void
-phonefso_usage_g_dbus_interface_set_object (GDBusInterface *interface,
-                                GDBusObject    *object)
+phonefso_usage_skeleton_init (PhonefsoUsageSkeleton *skeleton)
 {
-  PhonefsoUsageStub *stub = G_TYPE_CHECK_INSTANCE_CAST (interface, TYPE_PHONEFSO_USAGE_STUB, PhonefsoUsageStub);
-  stub->priv->enclosing_object = object;
+  skeleton->priv = G_TYPE_INSTANCE_GET_PRIVATE (skeleton, TYPE_PHONEFSO_USAGE_SKELETON, PhonefsoUsageSkeletonPrivate);
+  skeleton->priv->context = g_main_context_get_thread_default ();
+  if (skeleton->priv->context != NULL)
+    g_main_context_ref (skeleton->priv->context);
 }
 
-static GDBusInterfaceFlags
-phonefso_usage_g_dbus_interface_get_flags (GDBusInterface *interface)
+static void
+phonefso_usage_skeleton_class_init (PhonefsoUsageSkeletonClass *klass)
 {
-  PhonefsoUsageStub *stub = G_TYPE_CHECK_INSTANCE_CAST (interface, TYPE_PHONEFSO_USAGE_STUB, PhonefsoUsageStub);
-  return stub->priv->flags;
+  GObjectClass *gobject_class;
+  GDBusInterfaceSkeletonClass *skeleton_class;
+
+  g_type_class_add_private (klass, sizeof (PhonefsoUsageSkeletonPrivate));
+
+  gobject_class = G_OBJECT_CLASS (klass);
+  gobject_class->finalize = phonefso_usage_skeleton_finalize;
+  gobject_class->get_property = phonefso_usage_skeleton_get_property;
+  gobject_class->set_property = phonefso_usage_skeleton_set_property;
+
+
+  skeleton_class = G_DBUS_INTERFACE_SKELETON_CLASS (klass);
+  skeleton_class->get_info = phonefso_usage_skeleton_dbus_interface_get_info;
+  skeleton_class->get_properties = phonefso_usage_skeleton_dbus_interface_get_properties;
+  skeleton_class->flush = phonefso_usage_skeleton_dbus_interface_flush;
+  skeleton_class->get_vtable = phonefso_usage_skeleton_dbus_interface_get_vtable;
 }
 
-static void
-phonefso_usage_g_dbus_interface_set_flags (GDBusInterface      *interface,
-                               GDBusInterfaceFlags  flags)
+/**
+ * phonefso_usage_skeleton_new:
+ *
+ * Creates a skeleton object for the D-Bus interface <link linkend="gdbus-interface-org-shr-phonefso-Usage.top_of_page">org.shr.phonefso.Usage</link>.
+ *
+ * Returns: (transfer full) (type PhonefsoUsageSkeleton): The skeleton object.
+ */
+PhonefsoUsage *
+phonefso_usage_skeleton_new (void)
 {
-  PhonefsoUsageStub *stub = G_TYPE_CHECK_INSTANCE_CAST (interface, TYPE_PHONEFSO_USAGE_STUB, PhonefsoUsageStub);
-  stub->priv->flags = flags;
+  return PHONEFSO_USAGE (g_object_new (TYPE_PHONEFSO_USAGE_SKELETON, NULL));
 }
 
diff --git a/src/shr-phonefsousage.h b/src/shr-phonefsousage.h
index b0dd449..fc6f5e9 100644
--- a/src/shr-phonefsousage.h
+++ b/src/shr-phonefsousage.h
@@ -1,384 +1,308 @@
-/* File:       shr-phonefsousage.h
+/*
+ * Generated by gdbus-codegen 2.29.3. DO NOT EDIT.
  *
- * GType name: PhonefsoUsage
- * D-Bus name: org.shr.phonefso.Usage
- *
- * Generated by GDBus Binding Tool 0.1. DO NOT EDIT.
+ * The license of this code is the same as for the source it was derived from.
  */
 
-#ifndef __SHR_PHONEFSO_USAGE_H__
-#define __SHR_PHONEFSO_USAGE_H__
+#ifndef __SHR_PHONEFSOUSAGE_H__
+#define __SHR_PHONEFSOUSAGE_H__
 
 #include <gio/gio.h>
-#include <gdbusinterface.h>
-#include <gdbusobjectproxy.h>
-#include <gdbusproxymanager.h>
-#include <gdbusobject.h>
-#include <gdbusobjectmanager.h>
-#include <gdbuscodegen-enumtypes.h>
-#include <string.h>
-#include <shr-types.h>
 
 G_BEGIN_DECLS
 
-#define TYPE_PHONEFSO_USAGE         (phonefso_usage_get_gtype ())
-#define PHONEFSO_USAGE(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_PHONEFSO_USAGE, PhonefsoUsage))
-#define IS_PHONEFSO_USAGE(o)        (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_PHONEFSO_USAGE))
-#define PHONEFSO_USAGE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE((o), TYPE_PHONEFSO_USAGE, PhonefsoUsageIface))
 
-/**
- * PhonefsoUsage:
- *
- * Opaque type representing a proxy or an exported object.
- */
-typedef struct _PhonefsoUsage PhonefsoUsage; /* Dummy typedef */
-/**
- * PhonefsoUsageIface:
- * @parent_iface: The parent interface.
- * @handle_set_offline_mode: Handler for the #PhonefsoUsage::handle-set-offline-mode signal.
- * @handle_get_offline_mode: Handler for the #PhonefsoUsage::handle-get-offline-mode signal.
- * @handle_set_default_brightness: Handler for the #PhonefsoUsage::handle-set-default-brightness signal.
- * @handle_get_default_brightness: Handler for the #PhonefsoUsage::handle-get-default-brightness signal.
- * @handle_set_pdp_credentials: Handler for the #PhonefsoUsage::handle-set-pdp-credentials signal.
- * @handle_set_pin: Handler for the #PhonefsoUsage::handle-set-pin signal.
- *
- * Virtual table.
- */
-typedef struct _PhonefsoUsageIface PhonefsoUsageIface;
+/* ------------------------------------------------------------------------ */
+/* Declarations for org.shr.phonefso.Usage */
 
-GType phonefso_usage_get_gtype (void) G_GNUC_CONST;
-GDBusInterfaceInfo *phonefso_usage_interface_info (void);
+#define TYPE_PHONEFSO_USAGE (phonefso_usage_get_type ())
+#define PHONEFSO_USAGE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_PHONEFSO_USAGE, PhonefsoUsage))
+#define IS_PHONEFSO_USAGE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_PHONEFSO_USAGE))
+#define PHONEFSO_USAGE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_PHONEFSO_USAGE, PhonefsoUsage))
 
-/**
- * GET_PHONEFSO_USAGE:
- * @object_proxy: A #GDBusObjectProxy.
- *
- * Convenience macro to get a #PhonefsoUsage interface proxy from @object_proxy.
- *
- * Returns: A #GDBusProxy object implementing the #PhonefsoUsage interface or %NULL if @object_proxy
- * does not implement the <literal>org.shr.phonefso.Usage</literal> D-Bus interface.
- * The returned reference must be released with g_object_unref().
- */
-#define GET_PHONEFSO_USAGE(object_proxy) (g_dbus_object_proxy_lookup_with_typecheck (object_proxy, "org.shr.phonefso.Usage", TYPE_PHONEFSO_USAGE))
+struct _PhonefsoUsage;
+typedef struct _PhonefsoUsage PhonefsoUsage;
+typedef struct _PhonefsoUsageIface PhonefsoUsageIface;
 
-/**
- * PEEK_PHONEFSO_USAGE:
- * @object_proxy: A #GDBusObjectProxy.
- *
- * Like GET_PHONEFSO_USAGE() but doesn't increase the reference count on the returned object.
- *
- * <note><para>This macro is not safe to use outside the thread where the #GDBusProxyManager for @object_proxy was constructed in.</para></note>
- *
- * Returns: A #GDBusProxy object implementing the #PhonefsoUsage interface or %NULL if @object_proxy
- * does not implement the <literal>org.shr.phonefso.Usage</literal> D-Bus interface.
- * Do not free the returned object, it is owned by @object_proxy..
- */
-#define PEEK_PHONEFSO_USAGE(object_proxy) (g_dbus_object_proxy_peek_with_typecheck (object_proxy, "org.shr.phonefso.Usage", TYPE_PHONEFSO_USAGE))
+struct _PhonefsoUsageIface
+{
+  GTypeInterface parent_iface;
 
+  gboolean (*handle_get_default_brightness) (
+    PhonefsoUsage *object,
+    GDBusMethodInvocation *invocation);
 
-/* ---------------------------------------------------------------------- */
+  gboolean (*handle_get_offline_mode) (
+    PhonefsoUsage *object,
+    GDBusMethodInvocation *invocation);
 
-typedef struct _PhonefsoUsageProxy PhonefsoUsageProxy;
-typedef struct _PhonefsoUsageProxyClass PhonefsoUsageProxyClass;
+  gboolean (*handle_set_default_brightness) (
+    PhonefsoUsage *object,
+    GDBusMethodInvocation *invocation,
+    gint brightness);
 
-/**
- * PhonefsoUsageProxyPrivate:
- *
- * The #PhonefsoUsageProxyPrivate structure contains only private data.
- */
-typedef struct _PhonefsoUsageProxyPrivate PhonefsoUsageProxyPrivate;
+  gboolean (*handle_set_offline_mode) (
+    PhonefsoUsage *object,
+    GDBusMethodInvocation *invocation,
+    gboolean state);
 
-/**
- * PhonefsoUsageProxy:
- *
- * The #PhonefsoUsageProxy structure contains only private data and
- * should only be accessed using the provided API.
- */
-struct _PhonefsoUsageProxy
-{
-  /*< private >*/
-  GDBusProxy parent_instance;
-  PhonefsoUsageProxyPrivate *priv;
-};
+  gboolean (*handle_set_pdp_credentials) (
+    PhonefsoUsage *object,
+    GDBusMethodInvocation *invocation,
+    const gchar *apn,
+    const gchar *user,
+    const gchar *password);
+
+  gboolean (*handle_set_pin) (
+    PhonefsoUsage *object,
+    GDBusMethodInvocation *invocation,
+    const gchar *pin);
 
-/**
- * PhonefsoUsageProxyClass:
- *
- * Class structure for #PhonefsoUsageProxy.
- */
-struct _PhonefsoUsageProxyClass
-{
-  /*< private >*/
-  GDBusProxyClass parent_class;
 };
 
-#define TYPE_PHONEFSO_USAGE_PROXY (phonefso_usage_proxy_get_type ())
-GType phonefso_usage_proxy_get_type (void) G_GNUC_CONST;
+GType phonefso_usage_get_type (void) G_GNUC_CONST;
 
-void phonefso_usage_proxy_new (GDBusConnection     *connection,
-                   GDBusProxyFlags      flags,
-                   const gchar         *name,
-                   const gchar         *object_path,
-                   GCancellable        *cancellable,
-                   GAsyncReadyCallback  callback,
-                   gpointer             user_data);
-PhonefsoUsage *phonefso_usage_proxy_new_finish (GAsyncResult  *res,
-                        GError       **error);
-PhonefsoUsage *phonefso_usage_proxy_new_sync (GDBusConnection     *connection,
-                       GDBusProxyFlags      flags,
-                       const gchar         *name,
-                       const gchar         *object_path,
-                       GCancellable        *cancellable,
-                       GError             **error);
-
-void phonefso_usage_proxy_new_for_bus (GBusType             bus_type,
-                           GDBusProxyFlags      flags,
-                           const gchar         *name,
-                           const gchar         *object_path,
-                           GCancellable        *cancellable,
-                           GAsyncReadyCallback  callback,
-                           gpointer             user_data);
-PhonefsoUsage *phonefso_usage_proxy_new_for_bus_finish (GAsyncResult  *res,
-                                 GError       **error);
-PhonefsoUsage *phonefso_usage_proxy_new_for_bus_sync (GBusType             bus_type,
-                               GDBusProxyFlags      flags,
-                               const gchar         *name,
-                               const gchar         *object_path,
-                               GCancellable        *cancellable,
-                               GError             **error);
-
-/* ---------------------------------------------------------------------- */
-
-typedef struct _PhonefsoUsageStub PhonefsoUsageStub;
-typedef struct _PhonefsoUsageStubClass PhonefsoUsageStubClass;
-
-/**
- * PhonefsoUsageStubPrivate:
- *
- * The #PhonefsoUsageStubPrivate structure contains only private data.
- */
-typedef struct _PhonefsoUsageStubPrivate PhonefsoUsageStubPrivate;
+GDBusInterfaceInfo *phonefso_usage_interface_info (void);
 
-/**
- * PhonefsoUsageStub:
- *
- * The #PhonefsoUsageStub structure contains only private data and
- * should only be accessed using the provided API.
- */
-struct _PhonefsoUsageStub
-{
-  /*< private >*/
-  GObject parent_instance;
-  PhonefsoUsageStubPrivate *priv;
-};
 
-/**
- * PhonefsoUsageStubClass:
- *
- * Class structure for #PhonefsoUsageStub.
- */
-struct _PhonefsoUsageStubClass
-{
-  /*< private >*/
-  GObjectClass parent_class;
-};
+/* D-Bus method call completion functions: */
+void phonefso_usage_complete_set_offline_mode (
+    PhonefsoUsage *object,
+    GDBusMethodInvocation *invocation);
 
-#define TYPE_PHONEFSO_USAGE_STUB (phonefso_usage_stub_get_type ())
-GType phonefso_usage_stub_get_type (void) G_GNUC_CONST;
+void phonefso_usage_complete_get_offline_mode (
+    PhonefsoUsage *object,
+    GDBusMethodInvocation *invocation,
+    gboolean state);
 
-PhonefsoUsage *phonefso_usage_stub_new (void);
+void phonefso_usage_complete_set_default_brightness (
+    PhonefsoUsage *object,
+    GDBusMethodInvocation *invocation);
 
+void phonefso_usage_complete_get_default_brightness (
+    PhonefsoUsage *object,
+    GDBusMethodInvocation *invocation,
+    gint brightness);
 
-struct _PhonefsoUsageIface
-{
-  GTypeInterface parent_iface;
+void phonefso_usage_complete_set_pdp_credentials (
+    PhonefsoUsage *object,
+    GDBusMethodInvocation *invocation);
 
-  /* Signal handlers for handling D-Bus method calls: */
-  gboolean (*handle_set_offline_mode) (
-        PhonefsoUsage *object,
-        GDBusMethodInvocation *invocation,
-        gboolean state);
-  gboolean (*handle_get_offline_mode) (
-        PhonefsoUsage *object,
-        GDBusMethodInvocation *invocation);
-  gboolean (*handle_set_default_brightness) (
-        PhonefsoUsage *object,
-        GDBusMethodInvocation *invocation,
-        gint brightness);
-  gboolean (*handle_get_default_brightness) (
-        PhonefsoUsage *object,
-        GDBusMethodInvocation *invocation);
-  gboolean (*handle_set_pdp_credentials) (
-        PhonefsoUsage *object,
-        GDBusMethodInvocation *invocation,
-        const gchar *apn,
-        const gchar *user,
-        const gchar *password);
-  gboolean (*handle_set_pin) (
-        PhonefsoUsage *object,
-        GDBusMethodInvocation *invocation,
-        const gchar *pin);
-};
+void phonefso_usage_complete_set_pin (
+    PhonefsoUsage *object,
+    GDBusMethodInvocation *invocation);
 
-/* C Bindings for properties */
 
 
-/* D-Bus Methods */
+/* D-Bus method calls: */
 void phonefso_usage_call_set_offline_mode (
-        PhonefsoUsage *proxy,
-        gboolean state,
-        GCancellable *cancellable,
-        GAsyncReadyCallback callback,
-        gpointer user_data);
+    PhonefsoUsage *proxy,
+    gboolean state,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data);
 
 gboolean phonefso_usage_call_set_offline_mode_finish (
-        PhonefsoUsage *proxy,
-        GAsyncResult *res,
-        GError **error);
+    PhonefsoUsage *proxy,
+    GAsyncResult *res,
+    GError **error);
 
 gboolean phonefso_usage_call_set_offline_mode_sync (
-        PhonefsoUsage *proxy,
-        gboolean state,
-        GCancellable *cancellable,
-        GError **error);
-
+    PhonefsoUsage *proxy,
+    gboolean state,
+    GCancellable *cancellable,
+    GError **error);
 
 void phonefso_usage_call_get_offline_mode (
-        PhonefsoUsage *proxy,
-        GCancellable *cancellable,
-        GAsyncReadyCallback callback,
-        gpointer user_data);
+    PhonefsoUsage *proxy,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data);
 
 gboolean phonefso_usage_call_get_offline_mode_finish (
-        PhonefsoUsage *proxy,
-        gboolean *out_state,
-        GAsyncResult *res,
-        GError **error);
+    PhonefsoUsage *proxy,
+    gboolean *out_state,
+    GAsyncResult *res,
+    GError **error);
 
 gboolean phonefso_usage_call_get_offline_mode_sync (
-        PhonefsoUsage *proxy,
-        gboolean *out_state,
-        GCancellable *cancellable,
-        GError **error);
-
+    PhonefsoUsage *proxy,
+    gboolean *out_state,
+    GCancellable *cancellable,
+    GError **error);
 
 void phonefso_usage_call_set_default_brightness (
-        PhonefsoUsage *proxy,
-        gint brightness,
-        GCancellable *cancellable,
-        GAsyncReadyCallback callback,
-        gpointer user_data);
+    PhonefsoUsage *proxy,
+    gint brightness,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data);
 
 gboolean phonefso_usage_call_set_default_brightness_finish (
-        PhonefsoUsage *proxy,
-        GAsyncResult *res,
-        GError **error);
+    PhonefsoUsage *proxy,
+    GAsyncResult *res,
+    GError **error);
 
 gboolean phonefso_usage_call_set_default_brightness_sync (
-        PhonefsoUsage *proxy,
-        gint brightness,
-        GCancellable *cancellable,
-        GError **error);
-
+    PhonefsoUsage *proxy,
+    gint brightness,
+    GCancellable *cancellable,
+    GError **error);
 
 void phonefso_usage_call_get_default_brightness (
-        PhonefsoUsage *proxy,
-        GCancellable *cancellable,
-        GAsyncReadyCallback callback,
-        gpointer user_data);
+    PhonefsoUsage *proxy,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data);
 
 gboolean phonefso_usage_call_get_default_brightness_finish (
-        PhonefsoUsage *proxy,
-        gint *out_brightness,
-        GAsyncResult *res,
-        GError **error);
+    PhonefsoUsage *proxy,
+    gint *out_brightness,
+    GAsyncResult *res,
+    GError **error);
 
 gboolean phonefso_usage_call_get_default_brightness_sync (
-        PhonefsoUsage *proxy,
-        gint *out_brightness,
-        GCancellable *cancellable,
-        GError **error);
-
+    PhonefsoUsage *proxy,
+    gint *out_brightness,
+    GCancellable *cancellable,
+    GError **error);
 
 void phonefso_usage_call_set_pdp_credentials (
-        PhonefsoUsage *proxy,
-        const gchar *apn,
-        const gchar *user,
-        const gchar *password,
-        GCancellable *cancellable,
-        GAsyncReadyCallback callback,
-        gpointer user_data);
+    PhonefsoUsage *proxy,
+    const gchar *apn,
+    const gchar *user,
+    const gchar *password,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data);
 
 gboolean phonefso_usage_call_set_pdp_credentials_finish (
-        PhonefsoUsage *proxy,
-        GAsyncResult *res,
-        GError **error);
+    PhonefsoUsage *proxy,
+    GAsyncResult *res,
+    GError **error);
 
 gboolean phonefso_usage_call_set_pdp_credentials_sync (
-        PhonefsoUsage *proxy,
-        const gchar *apn,
-        const gchar *user,
-        const gchar *password,
-        GCancellable *cancellable,
-        GError **error);
-
+    PhonefsoUsage *proxy,
+    const gchar *apn,
+    const gchar *user,
+    const gchar *password,
+    GCancellable *cancellable,
+    GError **error);
 
 void phonefso_usage_call_set_pin (
-        PhonefsoUsage *proxy,
-        const gchar *pin,
-        GCancellable *cancellable,
-        GAsyncReadyCallback callback,
-        gpointer user_data);
+    PhonefsoUsage *proxy,
+    const gchar *pin,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data);
 
 gboolean phonefso_usage_call_set_pin_finish (
-        PhonefsoUsage *proxy,
-        GAsyncResult *res,
-        GError **error);
+    PhonefsoUsage *proxy,
+    GAsyncResult *res,
+    GError **error);
 
 gboolean phonefso_usage_call_set_pin_sync (
-        PhonefsoUsage *proxy,
-        const gchar *pin,
-        GCancellable *cancellable,
-        GError **error);
-
+    PhonefsoUsage *proxy,
+    const gchar *pin,
+    GCancellable *cancellable,
+    GError **error);
 
 
-/* D-Bus Methods Completion Helpers */
-void phonefso_usage_complete_set_offline_mode (
-        PhonefsoUsage *object,
-        GDBusMethodInvocation *invocation);
 
+/* ---- */
 
-void phonefso_usage_complete_get_offline_mode (
-        PhonefsoUsage *object,
-        GDBusMethodInvocation *invocation,
-        gboolean state);
-
-
-void phonefso_usage_complete_set_default_brightness (
-        PhonefsoUsage *object,
-        GDBusMethodInvocation *invocation);
+#define TYPE_PHONEFSO_USAGE_PROXY (phonefso_usage_proxy_get_type ())
+#define PHONEFSO_USAGE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_PHONEFSO_USAGE_PROXY, PhonefsoUsageProxy))
+#define PHONEFSO_USAGE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_PHONEFSO_USAGE_PROXY, PhonefsoUsageProxyClass))
+#define PHONEFSO_USAGE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_PHONEFSO_USAGE_PROXY, PhonefsoUsageProxyClass))
+#define IS_PHONEFSO_USAGE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_PHONEFSO_USAGE_PROXY))
+#define IS_PHONEFSO_USAGE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_PHONEFSO_USAGE_PROXY))
 
+typedef struct _PhonefsoUsageProxy PhonefsoUsageProxy;
+typedef struct _PhonefsoUsageProxyClass PhonefsoUsageProxyClass;
+typedef struct _PhonefsoUsageProxyPrivate PhonefsoUsageProxyPrivate;
 
-void phonefso_usage_complete_get_default_brightness (
-        PhonefsoUsage *object,
-        GDBusMethodInvocation *invocation,
-        gint brightness);
+struct _PhonefsoUsageProxy
+{
+  GDBusProxy parent_instance;
+  PhonefsoUsageProxyPrivate *priv;
+};
 
+struct _PhonefsoUsageProxyClass
+{
+  GDBusProxyClass parent_class;
+};
 
-void phonefso_usage_complete_set_pdp_credentials (
-        PhonefsoUsage *object,
-        GDBusMethodInvocation *invocation);
+GType phonefso_usage_proxy_get_type (void) G_GNUC_CONST;
 
+void phonefso_usage_proxy_new (
+    GDBusConnection     *connection,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GAsyncReadyCallback  callback,
+    gpointer             user_data);
+PhonefsoUsage *phonefso_usage_proxy_new_finish (
+    GAsyncResult        *res,
+    GError             **error);
+PhonefsoUsage *phonefso_usage_proxy_new_sync (
+    GDBusConnection     *connection,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GError             **error);
+
+void phonefso_usage_proxy_new_for_bus (
+    GBusType             bus_type,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GAsyncReadyCallback  callback,
+    gpointer             user_data);
+PhonefsoUsage *phonefso_usage_proxy_new_for_bus_finish (
+    GAsyncResult        *res,
+    GError             **error);
+PhonefsoUsage *phonefso_usage_proxy_new_for_bus_sync (
+    GBusType             bus_type,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GError             **error);
+
+
+/* ---- */
+
+#define TYPE_PHONEFSO_USAGE_SKELETON (phonefso_usage_skeleton_get_type ())
+#define PHONEFSO_USAGE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_PHONEFSO_USAGE_SKELETON, PhonefsoUsageSkeleton))
+#define PHONEFSO_USAGE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_PHONEFSO_USAGE_SKELETON, PhonefsoUsageSkeletonClass))
+#define PHONEFSO_USAGE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_PHONEFSO_USAGE_SKELETON, PhonefsoUsageSkeletonClass))
+#define IS_PHONEFSO_USAGE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_PHONEFSO_USAGE_SKELETON))
+#define IS_PHONEFSO_USAGE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_PHONEFSO_USAGE_SKELETON))
+
+typedef struct _PhonefsoUsageSkeleton PhonefsoUsageSkeleton;
+typedef struct _PhonefsoUsageSkeletonClass PhonefsoUsageSkeletonClass;
+typedef struct _PhonefsoUsageSkeletonPrivate PhonefsoUsageSkeletonPrivate;
+
+struct _PhonefsoUsageSkeleton
+{
+  GDBusInterfaceSkeleton parent_instance;
+  PhonefsoUsageSkeletonPrivate *priv;
+};
 
-void phonefso_usage_complete_set_pin (
-        PhonefsoUsage *object,
-        GDBusMethodInvocation *invocation);
+struct _PhonefsoUsageSkeletonClass
+{
+  GDBusInterfaceSkeletonClass parent_class;
+};
 
+GType phonefso_usage_skeleton_get_type (void) G_GNUC_CONST;
 
+PhonefsoUsage *phonefso_usage_skeleton_new (void);
 
-/* D-Bus Signal Emission Helpers */
 
 G_END_DECLS
 
-#endif /* __SHR_PHONEFSO_USAGE_H__ */
+#endif /* __SHR_PHONEFSOUSAGE_H__ */
diff --git a/src/shr-phoneuicallmanagement.c b/src/shr-phoneuicallmanagement.c
index 33e1d8d..2364352 100644
--- a/src/shr-phoneuicallmanagement.c
+++ b/src/shr-phoneuicallmanagement.c
@@ -1,1656 +1,1137 @@
-/* File:       shr-phoneuicallmanagement.c
+/*
+ * Generated by gdbus-codegen 2.29.3. DO NOT EDIT.
  *
- * GType name: PhoneuiCallManagement
- * D-Bus name: org.shr.phoneui.CallManagement
- *
- * Generated by GDBus Binding Tool 0.1. DO NOT EDIT.
+ * The license of this code is the same as for the source it was derived from.
+ */
+
+#ifdef HAVE_CONFIG_H
+#  include "config.h"
+#endif
+
+#include "shr-phoneuicallmanagement.h"
+
+typedef struct
+{
+  GDBusArgInfo parent_struct;
+  gboolean use_gvariant;
+} _ExtendedGDBusArgInfo;
+
+typedef struct
+{
+  GDBusMethodInfo parent_struct;
+  const gchar *signal_name;
+} _ExtendedGDBusMethodInfo;
+
+typedef struct
+{
+  GDBusSignalInfo parent_struct;
+  const gchar *signal_name;
+} _ExtendedGDBusSignalInfo;
+
+typedef struct
+{
+  GDBusPropertyInfo parent_struct;
+  const gchar *hyphen_name;
+  gboolean use_gvariant;
+} _ExtendedGDBusPropertyInfo;
+
+typedef struct
+{
+  GDBusInterfaceInfo parent_struct;
+  const gchar *hyphen_name;
+} _ExtendedGDBusInterfaceInfo;
+
+typedef struct
+{
+  const _ExtendedGDBusPropertyInfo *info;
+  guint prop_id;
+  GValue orig_value; /* the value before the change */
+} ChangedProperty;
+
+static void
+_changed_property_free (ChangedProperty *data)
+{
+  g_value_unset (&data->orig_value);
+  g_free (data);
+}
+
+static gboolean
+_g_strv_equal0 (gchar **a, gchar **b)
+{
+  gboolean ret = FALSE;
+  guint n;
+  if (a == NULL && b == NULL)
+    {
+      ret = TRUE;
+      goto out;
+    }
+  if (a == NULL || b == NULL)
+    goto out;
+  if (g_strv_length (a) != g_strv_length (b))
+    goto out;
+  for (n = 0; a[n] != NULL; n++)
+    if (g_strcmp0 (a[n], b[n]) != 0)
+      goto out;
+  ret = TRUE;
+out:
+  return ret;
+}
+
+static gboolean
+_g_variant_equal0 (GVariant *a, GVariant *b)
+{
+  gboolean ret = FALSE;
+  if (a == NULL && b == NULL)
+    {
+      ret = TRUE;
+      goto out;
+    }
+  if (a == NULL || b == NULL)
+    goto out;
+  ret = g_variant_equal (a, b);
+out:
+  return ret;
+}
+
+G_GNUC_UNUSED static gboolean
+_g_value_equal (const GValue *a, const GValue *b)
+{
+  gboolean ret = FALSE;
+  g_assert (G_VALUE_TYPE (a) == G_VALUE_TYPE (b));
+  switch (G_VALUE_TYPE (a))
+    {
+      case G_TYPE_BOOLEAN:
+        ret = (g_value_get_boolean (a) == g_value_get_boolean (b));
+        break;
+      case G_TYPE_UCHAR:
+        ret = (g_value_get_uchar (a) == g_value_get_uchar (b));
+        break;
+      case G_TYPE_INT:
+        ret = (g_value_get_int (a) == g_value_get_int (b));
+        break;
+      case G_TYPE_UINT:
+        ret = (g_value_get_uint (a) == g_value_get_uint (b));
+        break;
+      case G_TYPE_INT64:
+        ret = (g_value_get_int64 (a) == g_value_get_int64 (b));
+        break;
+      case G_TYPE_UINT64:
+        ret = (g_value_get_uint64 (a) == g_value_get_uint64 (b));
+        break;
+      case G_TYPE_DOUBLE:
+        ret = (g_value_get_double (a) == g_value_get_double (b));
+        break;
+      case G_TYPE_STRING:
+        ret = (g_strcmp0 (g_value_get_string (a), g_value_get_string (b)) == 0);
+        break;
+      case G_TYPE_VARIANT:
+        ret = _g_variant_equal0 (g_value_get_variant (a), g_value_get_variant (b));
+        break;
+      default:
+        if (G_VALUE_TYPE (a) == G_TYPE_STRV)
+          ret = _g_strv_equal0 (g_value_get_boxed (a), g_value_get_boxed (b));
+        else
+          g_critical ("_g_value_equal() does not handle type %s", g_type_name (G_VALUE_TYPE (a)));
+        break;
+    }
+  return ret;
+}
+
+/* ------------------------------------------------------------------------
+ * Code for interface org.shr.phoneui.CallManagement
+ * ------------------------------------------------------------------------
  */
 
 /**
- * SECTION:shr-phoneuicallmanagement
+ * SECTION:PhoneuiCallManagement
  * @title: PhoneuiCallManagement
- * @short_description: Wraps the org.shr.phoneui.CallManagement D-Bus interface
- * @include: gio/gio.h
- *
- * The abstract #PhoneuiCallManagement interface type wraps the <literal>org.shr.phoneui.CallManagement</literal> D-Bus interface. Two concrete implementations exists: #PhoneuiCallManagementProxy (for client-side usage) and #PhoneuiCallManagementStub (for service-side usage).
- *
- * This code was generated from the following D-Bus introspection XML:
- * <programlisting><![CDATA[
- * <interface name="org.shr.phoneui.CallManagement">
- *   <method name="DisplayIncoming">
- *     <annotation name="org.freedesktop.DBus.GLib.Async" value="true">
- *     </annotation>
- *     <arg type="i" name="call_id" direction="in">
- *     </arg>
- *     <arg type="i" name="status" direction="in">
- *     </arg>
- *     <arg type="s" name="number" direction="in">
- *     </arg>
- *   </method>
- *   <method name="HideIncoming">
- *     <annotation name="org.freedesktop.DBus.GLib.Async" value="true">
- *     </annotation>
- *     <arg type="i" name="call_id" direction="in">
- *     </arg>
- *   </method>
- *   <method name="DisplayOutgoing">
- *     <annotation name="org.freedesktop.DBus.GLib.Async" value="true">
- *     </annotation>
- *     <arg type="i" name="call_id" direction="in">
- *     </arg>
- *     <arg type="i" name="status" direction="in">
- *     </arg>
- *     <arg type="s" name="number" direction="in">
- *     </arg>
- *   </method>
- *   <method name="HideOutgoing">
- *     <annotation name="org.freedesktop.DBus.GLib.Async" value="true">
- *     </annotation>
- *     <arg type="i" name="call_id" direction="in">
- *     </arg>
- *   </method>
- * </interface>
- * ]]></programlisting>
+ * @short_description: Generated C code for the org.shr.phoneui.CallManagement D-Bus interface
  *
+ * This section contains code for working with the <link linkend="gdbus-interface-org-shr-phoneui-CallManagement.top_of_page">org.shr.phoneui.CallManagement</link> D-Bus interface in C.
  */
 
-#include <shr-phoneuicallmanagement.h>
-#include <shr-types.h>
-#include <shr-bindingsprivate.h>
-#include <shr-marshallers.h>
-
-static guint phoneui_call_management_register_object (GDBusInterface *object,
-                    GDBusConnection *connection,
-                    const gchar *object_path,
-                    GError **error);
-static void phoneui_call_management_flush (GDBusInterface *object);
-static GVariant *phoneui_call_management_get_properties (GDBusInterface *object);
-static GDBusInterfaceInfo *phoneui_call_management_g_dbus_interface_interface_info (GDBusInterface *object);
-static GDBusObject *phoneui_call_management_g_dbus_interface_get_object (GDBusInterface *interface);
-static void phoneui_call_management_g_dbus_interface_set_object (GDBusInterface *interface, GDBusObject *object);
-static GDBusInterfaceFlags phoneui_call_management_g_dbus_interface_get_flags (GDBusInterface *interface);
-static void phoneui_call_management_g_dbus_interface_set_flags (GDBusInterface *interface, GDBusInterfaceFlags flags);
+/* ---- Introspection data for org.shr.phoneui.CallManagement ---- */
 
-typedef PhoneuiCallManagementIface PhoneuiCallManagementInterface;
-#define phoneui_call_management_get_type phoneui_call_management_get_gtype
-G_DEFINE_INTERFACE (PhoneuiCallManagement, phoneui_call_management, G_TYPE_OBJECT);
-#undef phoneui_call_management_get_type
+static const _ExtendedGDBusArgInfo _phoneui_call_management_method_info_display_incoming_IN_ARG_call_id =
+{
+  {
+    -1,
+    "call_id",
+    "i",
+    NULL
+  },
+  FALSE
+};
+
+static const _ExtendedGDBusArgInfo _phoneui_call_management_method_info_display_incoming_IN_ARG_status =
+{
+  {
+    -1,
+    "status",
+    "i",
+    NULL
+  },
+  FALSE
+};
+
+static const _ExtendedGDBusArgInfo _phoneui_call_management_method_info_display_incoming_IN_ARG_number =
+{
+  {
+    -1,
+    "number",
+    "s",
+    NULL
+  },
+  FALSE
+};
 
+static const _ExtendedGDBusArgInfo * const _phoneui_call_management_method_info_display_incoming_IN_ARG_pointers[] =
+{
+  &_phoneui_call_management_method_info_display_incoming_IN_ARG_call_id,
+  &_phoneui_call_management_method_info_display_incoming_IN_ARG_status,
+  &_phoneui_call_management_method_info_display_incoming_IN_ARG_number,
+  NULL
+};
 
-enum
+static const GDBusAnnotationInfo _phoneui_call_management_method_display_incoming_annotation_info_0 =
 {
-  _0_SIGNAL,
-  __DISPLAY_INCOMING_METHOD,
-  __HIDE_INCOMING_METHOD,
-  __DISPLAY_OUTGOING_METHOD,
-  __HIDE_OUTGOING_METHOD,
-  __LAST_SIGNAL
+  -1,
+  "org.freedesktop.DBus.GLib.Async",
+  "true",
+  NULL
 };
 
-static guint signals[__LAST_SIGNAL] = {0};
+static const GDBusAnnotationInfo * const _phoneui_call_management_method_display_incoming_annotation_info_pointers[] =
+{
+  &_phoneui_call_management_method_display_incoming_annotation_info_0,
+  NULL
+};
 
+static const _ExtendedGDBusMethodInfo _phoneui_call_management_method_info_display_incoming =
+{
+  {
+    -1,
+    "DisplayIncoming",
+    (GDBusArgInfo **) &_phoneui_call_management_method_info_display_incoming_IN_ARG_pointers,
+    NULL,
+    (GDBusAnnotationInfo **) &_phoneui_call_management_method_display_incoming_annotation_info_pointers
+  },
+  "handle-display-incoming"
+};
 
-enum
+static const _ExtendedGDBusArgInfo _phoneui_call_management_method_info_hide_incoming_IN_ARG_call_id =
 {
-  PROP_0,
+  {
+    -1,
+    "call_id",
+    "i",
+    NULL
+  },
+  FALSE
 };
 
-/* ------------------------------------------------------------------------- */
+static const _ExtendedGDBusArgInfo * const _phoneui_call_management_method_info_hide_incoming_IN_ARG_pointers[] =
+{
+  &_phoneui_call_management_method_info_hide_incoming_IN_ARG_call_id,
+  NULL
+};
 
-/* Various lookup tables */
+static const GDBusAnnotationInfo _phoneui_call_management_method_hide_incoming_annotation_info_0 =
+{
+  -1,
+  "org.freedesktop.DBus.GLib.Async",
+  "true",
+  NULL
+};
 
-static GHashTable *_method_name_to_id = NULL;
-static GHashTable *_signal_name_to_id = NULL;
-static GHashTable *_property_name_to_id = NULL;
-static GHashTable *_property_gname_to_name = NULL;
-static GHashTable *_property_name_to_gname = NULL;
+static const GDBusAnnotationInfo * const _phoneui_call_management_method_hide_incoming_annotation_info_pointers[] =
+{
+  &_phoneui_call_management_method_hide_incoming_annotation_info_0,
+  NULL
+};
 
+static const _ExtendedGDBusMethodInfo _phoneui_call_management_method_info_hide_incoming =
+{
+  {
+    -1,
+    "HideIncoming",
+    (GDBusArgInfo **) &_phoneui_call_management_method_info_hide_incoming_IN_ARG_pointers,
+    NULL,
+    (GDBusAnnotationInfo **) &_phoneui_call_management_method_hide_incoming_annotation_info_pointers
+  },
+  "handle-hide-incoming"
+};
 
-static guint
-lookup_method_id_from_method_name (const gchar *method_name)
+static const _ExtendedGDBusArgInfo _phoneui_call_management_method_info_display_outgoing_IN_ARG_call_id =
 {
-  return GPOINTER_TO_UINT (g_hash_table_lookup (_method_name_to_id, method_name));
-}
+  {
+    -1,
+    "call_id",
+    "i",
+    NULL
+  },
+  FALSE
+};
 
-static guint
-lookup_signal_id_from_signal_name (const gchar *signal_name)
+static const _ExtendedGDBusArgInfo _phoneui_call_management_method_info_display_outgoing_IN_ARG_status =
 {
-  return GPOINTER_TO_UINT (g_hash_table_lookup (_signal_name_to_id, signal_name));
-}
+  {
+    -1,
+    "status",
+    "i",
+    NULL
+  },
+  FALSE
+};
 
-static guint
-lookup_property_id_from_property_name (const gchar *property_name)
+static const _ExtendedGDBusArgInfo _phoneui_call_management_method_info_display_outgoing_IN_ARG_number =
 {
-  return GPOINTER_TO_UINT (g_hash_table_lookup (_property_name_to_id, property_name));
-}
+  {
+    -1,
+    "number",
+    "s",
+    NULL
+  },
+  FALSE
+};
 
-static const gchar *
-lookup_property_name_from_property_gname (const gchar *property_gname)
+static const _ExtendedGDBusArgInfo * const _phoneui_call_management_method_info_display_outgoing_IN_ARG_pointers[] =
 {
-  return g_hash_table_lookup (_property_gname_to_name, property_gname);
-}
+  &_phoneui_call_management_method_info_display_outgoing_IN_ARG_call_id,
+  &_phoneui_call_management_method_info_display_outgoing_IN_ARG_status,
+  &_phoneui_call_management_method_info_display_outgoing_IN_ARG_number,
+  NULL
+};
 
-static const gchar *
-lookup_property_gname_from_property_name (const gchar *property_name)
+static const GDBusAnnotationInfo _phoneui_call_management_method_display_outgoing_annotation_info_0 =
 {
-  return g_hash_table_lookup (_property_name_to_gname, property_name);
-}
+  -1,
+  "org.freedesktop.DBus.GLib.Async",
+  "true",
+  NULL
+};
 
-/* ------------------------------------------------------------------------- */
-static void dbus_iface_init (GDBusInterfaceIface *iface)
-{
-  iface->get_info = phoneui_call_management_g_dbus_interface_interface_info;
-  iface->get_properties = phoneui_call_management_get_properties;
-  iface->flush = phoneui_call_management_flush;
-  iface->register_object = phoneui_call_management_register_object;
-  iface->set_object = phoneui_call_management_g_dbus_interface_set_object;
-  iface->get_object = phoneui_call_management_g_dbus_interface_get_object;
-  iface->set_flags = phoneui_call_management_g_dbus_interface_set_flags;
-  iface->get_flags = phoneui_call_management_g_dbus_interface_get_flags;
-}
+static const GDBusAnnotationInfo * const _phoneui_call_management_method_display_outgoing_annotation_info_pointers[] =
+{
+  &_phoneui_call_management_method_display_outgoing_annotation_info_0,
+  NULL
+};
 
-static void
-phoneui_call_management_default_init (PhoneuiCallManagementIface *iface)
+static const _ExtendedGDBusMethodInfo _phoneui_call_management_method_info_display_outgoing =
+{
+  {
+    -1,
+    "DisplayOutgoing",
+    (GDBusArgInfo **) &_phoneui_call_management_method_info_display_outgoing_IN_ARG_pointers,
+    NULL,
+    (GDBusAnnotationInfo **) &_phoneui_call_management_method_display_outgoing_annotation_info_pointers
+  },
+  "handle-display-outgoing"
+};
+
+static const _ExtendedGDBusArgInfo _phoneui_call_management_method_info_hide_outgoing_IN_ARG_call_id =
+{
+  {
+    -1,
+    "call_id",
+    "i",
+    NULL
+  },
+  FALSE
+};
+
+static const _ExtendedGDBusArgInfo * const _phoneui_call_management_method_info_hide_outgoing_IN_ARG_pointers[] =
+{
+  &_phoneui_call_management_method_info_hide_outgoing_IN_ARG_call_id,
+  NULL
+};
+
+static const GDBusAnnotationInfo _phoneui_call_management_method_hide_outgoing_annotation_info_0 =
+{
+  -1,
+  "org.freedesktop.DBus.GLib.Async",
+  "true",
+  NULL
+};
+
+static const GDBusAnnotationInfo * const _phoneui_call_management_method_hide_outgoing_annotation_info_pointers[] =
+{
+  &_phoneui_call_management_method_hide_outgoing_annotation_info_0,
+  NULL
+};
+
+static const _ExtendedGDBusMethodInfo _phoneui_call_management_method_info_hide_outgoing =
+{
+  {
+    -1,
+    "HideOutgoing",
+    (GDBusArgInfo **) &_phoneui_call_management_method_info_hide_outgoing_IN_ARG_pointers,
+    NULL,
+    (GDBusAnnotationInfo **) &_phoneui_call_management_method_hide_outgoing_annotation_info_pointers
+  },
+  "handle-hide-outgoing"
+};
+
+static const _ExtendedGDBusMethodInfo * const _phoneui_call_management_method_info_pointers[] =
+{
+  &_phoneui_call_management_method_info_display_incoming,
+  &_phoneui_call_management_method_info_hide_incoming,
+  &_phoneui_call_management_method_info_display_outgoing,
+  &_phoneui_call_management_method_info_hide_outgoing,
+  NULL
+};
+
+static const _ExtendedGDBusInterfaceInfo _phoneui_call_management_interface_info =
+{
+  {
+    -1,
+    "org.shr.phoneui.CallManagement",
+    (GDBusMethodInfo **) &_phoneui_call_management_method_info_pointers,
+    NULL,
+    NULL,
+    NULL
+  },
+  "phoneui-call-management",
+};
+
+
+/**
+ * phoneui_call_management_interface_info:
+ *
+ * Gets a machine-readable description of the <link linkend="gdbus-interface-org-shr-phoneui-CallManagement.top_of_page">org.shr.phoneui.CallManagement</link> D-Bus interface.
+ *
+ * Returns: (transfer none): A #GDBusInterfaceInfo. Do not free.
+ */
+GDBusInterfaceInfo *
+phoneui_call_management_interface_info (void)
 {
+  return (GDBusInterfaceInfo *) &_phoneui_call_management_interface_info;
+}
 
-  /* Build lookup structures */
-  _method_name_to_id = g_hash_table_new (g_str_hash, g_str_equal);
-  _signal_name_to_id = g_hash_table_new (g_str_hash, g_str_equal);
-  _property_name_to_id = g_hash_table_new (g_str_hash, g_str_equal);
-  _property_gname_to_name = g_hash_table_new (g_str_hash, g_str_equal);
-  _property_name_to_gname = g_hash_table_new (g_str_hash, g_str_equal);
-  g_hash_table_insert (_method_name_to_id, "DisplayIncoming", GUINT_TO_POINTER (__DISPLAY_INCOMING_METHOD));
-  g_hash_table_insert (_method_name_to_id, "HideIncoming", GUINT_TO_POINTER (__HIDE_INCOMING_METHOD));
-  g_hash_table_insert (_method_name_to_id, "DisplayOutgoing", GUINT_TO_POINTER (__DISPLAY_OUTGOING_METHOD));
-  g_hash_table_insert (_method_name_to_id, "HideOutgoing", GUINT_TO_POINTER (__HIDE_OUTGOING_METHOD));
 
-  /* GObject signals definitions for D-Bus signals: */
 
-  /* GObject signals definitions for D-Bus methods: */
+/**
+ * PhoneuiCallManagement:
+ *
+ * Abstract interface type for the D-Bus interface <link linkend="gdbus-interface-org-shr-phoneui-CallManagement.top_of_page">org.shr.phoneui.CallManagement</link>.
+ */
+
+/**
+ * PhoneuiCallManagementIface:
+ * @parent_iface: The parent interface.
+ * @handle_display_incoming: Handler for the #PhoneuiCallManagement::handle-display-incoming signal.
+ * @handle_display_outgoing: Handler for the #PhoneuiCallManagement::handle-display-outgoing signal.
+ * @handle_hide_incoming: Handler for the #PhoneuiCallManagement::handle-hide-incoming signal.
+ * @handle_hide_outgoing: Handler for the #PhoneuiCallManagement::handle-hide-outgoing signal.
+ *
+ * Virtual table for the D-Bus interface <link linkend="gdbus-interface-org-shr-phoneui-CallManagement.top_of_page">org.shr.phoneui.CallManagement</link>.
+ */
+
+static void
+phoneui_call_management_default_init (PhoneuiCallManagementIface *iface)
+{
+  /* GObject signals for incoming D-Bus method calls: */
   /**
    * PhoneuiCallManagement::handle-display-incoming:
-   * @object: The exported object emitting the signal.
-   * @invocation: A #GDBusMethodInvocation object that can be used to return a value or error.
-   * @call_id: Parameter.
-   * @status: Parameter.
-   * @number: Parameter.
-   *
-   * On exported objects, this signal is emitted when a remote process (identified by @invocation) invokes the <literal>org.shr.phoneui.CallManagement.DisplayIncoming()</literal> D-Bus method on @object. Use phoneui_call_management_complete_display_incoming() to return a value or g_dbus_method_invocation_return_error() to return an error.
+   * @object: A #PhoneuiCallManagement.
+   * @invocation: A #GDBusMethodInvocation.
+   * @call_id: Argument passed by remote caller.
+   * @status: Argument passed by remote caller.
+   * @number: Argument passed by remote caller.
    *
-   * The signal is emitted in the
-   * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
-   * of the thread that @object was registered in.
+   * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-shr-phoneui-CallManagement.DisplayIncoming">DisplayIncoming()</link> D-Bus method.
    *
-   * On proxies, this signal is never emitted.
+   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phoneui_call_management_complete_display_incoming() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
    *
-   * Returns: %TRUE if you want to handle the method call (will stop further handlers from being called), %FALSE otherwise.
+   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
    */
-  signals[__DISPLAY_INCOMING_METHOD] =
-    g_signal_new ("handle-display-incoming",
-                  G_TYPE_FROM_INTERFACE (iface),
-                  G_SIGNAL_RUN_LAST,
-                  G_STRUCT_OFFSET (PhoneuiCallManagementIface, handle_display_incoming),
-                  g_signal_accumulator_true_handled,
-                  NULL,
-                  _shr_gdbus_cclosure_marshaller_BOOLEAN__OBJECT_INT_INT_STRING,
-                  G_TYPE_BOOLEAN,
-                  4,
-                  G_TYPE_DBUS_METHOD_INVOCATION,
-                  G_TYPE_INT,
-                  G_TYPE_INT,
-                  G_TYPE_STRING);
+  g_signal_new ("handle-display-incoming",
+    G_TYPE_FROM_INTERFACE (iface),
+    G_SIGNAL_RUN_LAST,
+    G_STRUCT_OFFSET (PhoneuiCallManagementIface, handle_display_incoming),
+    g_signal_accumulator_true_handled,
+    NULL,
+    g_cclosure_marshal_generic,
+    G_TYPE_BOOLEAN,
+    4,
+    G_TYPE_DBUS_METHOD_INVOCATION, G_TYPE_INT, G_TYPE_INT, G_TYPE_STRING);
+
   /**
    * PhoneuiCallManagement::handle-hide-incoming:
-   * @object: The exported object emitting the signal.
-   * @invocation: A #GDBusMethodInvocation object that can be used to return a value or error.
-   * @call_id: Parameter.
-   *
-   * On exported objects, this signal is emitted when a remote process (identified by @invocation) invokes the <literal>org.shr.phoneui.CallManagement.HideIncoming()</literal> D-Bus method on @object. Use phoneui_call_management_complete_hide_incoming() to return a value or g_dbus_method_invocation_return_error() to return an error.
+   * @object: A #PhoneuiCallManagement.
+   * @invocation: A #GDBusMethodInvocation.
+   * @call_id: Argument passed by remote caller.
    *
-   * The signal is emitted in the
-   * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
-   * of the thread that @object was registered in.
+   * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-shr-phoneui-CallManagement.HideIncoming">HideIncoming()</link> D-Bus method.
    *
-   * On proxies, this signal is never emitted.
+   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phoneui_call_management_complete_hide_incoming() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
    *
-   * Returns: %TRUE if you want to handle the method call (will stop further handlers from being called), %FALSE otherwise.
+   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
    */
-  signals[__HIDE_INCOMING_METHOD] =
-    g_signal_new ("handle-hide-incoming",
-                  G_TYPE_FROM_INTERFACE (iface),
-                  G_SIGNAL_RUN_LAST,
-                  G_STRUCT_OFFSET (PhoneuiCallManagementIface, handle_hide_incoming),
-                  g_signal_accumulator_true_handled,
-                  NULL,
-                  _shr_gdbus_cclosure_marshaller_BOOLEAN__OBJECT_INT,
-                  G_TYPE_BOOLEAN,
-                  2,
-                  G_TYPE_DBUS_METHOD_INVOCATION,
-                  G_TYPE_INT);
+  g_signal_new ("handle-hide-incoming",
+    G_TYPE_FROM_INTERFACE (iface),
+    G_SIGNAL_RUN_LAST,
+    G_STRUCT_OFFSET (PhoneuiCallManagementIface, handle_hide_incoming),
+    g_signal_accumulator_true_handled,
+    NULL,
+    g_cclosure_marshal_generic,
+    G_TYPE_BOOLEAN,
+    2,
+    G_TYPE_DBUS_METHOD_INVOCATION, G_TYPE_INT);
+
   /**
    * PhoneuiCallManagement::handle-display-outgoing:
-   * @object: The exported object emitting the signal.
-   * @invocation: A #GDBusMethodInvocation object that can be used to return a value or error.
-   * @call_id: Parameter.
-   * @status: Parameter.
-   * @number: Parameter.
-   *
-   * On exported objects, this signal is emitted when a remote process (identified by @invocation) invokes the <literal>org.shr.phoneui.CallManagement.DisplayOutgoing()</literal> D-Bus method on @object. Use phoneui_call_management_complete_display_outgoing() to return a value or g_dbus_method_invocation_return_error() to return an error.
+   * @object: A #PhoneuiCallManagement.
+   * @invocation: A #GDBusMethodInvocation.
+   * @call_id: Argument passed by remote caller.
+   * @status: Argument passed by remote caller.
+   * @number: Argument passed by remote caller.
    *
-   * The signal is emitted in the
-   * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
-   * of the thread that @object was registered in.
+   * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-shr-phoneui-CallManagement.DisplayOutgoing">DisplayOutgoing()</link> D-Bus method.
    *
-   * On proxies, this signal is never emitted.
+   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phoneui_call_management_complete_display_outgoing() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
    *
-   * Returns: %TRUE if you want to handle the method call (will stop further handlers from being called), %FALSE otherwise.
+   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
    */
-  signals[__DISPLAY_OUTGOING_METHOD] =
-    g_signal_new ("handle-display-outgoing",
-                  G_TYPE_FROM_INTERFACE (iface),
-                  G_SIGNAL_RUN_LAST,
-                  G_STRUCT_OFFSET (PhoneuiCallManagementIface, handle_display_outgoing),
-                  g_signal_accumulator_true_handled,
-                  NULL,
-                  _shr_gdbus_cclosure_marshaller_BOOLEAN__OBJECT_INT_INT_STRING,
-                  G_TYPE_BOOLEAN,
-                  4,
-                  G_TYPE_DBUS_METHOD_INVOCATION,
-                  G_TYPE_INT,
-                  G_TYPE_INT,
-                  G_TYPE_STRING);
+  g_signal_new ("handle-display-outgoing",
+    G_TYPE_FROM_INTERFACE (iface),
+    G_SIGNAL_RUN_LAST,
+    G_STRUCT_OFFSET (PhoneuiCallManagementIface, handle_display_outgoing),
+    g_signal_accumulator_true_handled,
+    NULL,
+    g_cclosure_marshal_generic,
+    G_TYPE_BOOLEAN,
+    4,
+    G_TYPE_DBUS_METHOD_INVOCATION, G_TYPE_INT, G_TYPE_INT, G_TYPE_STRING);
+
   /**
    * PhoneuiCallManagement::handle-hide-outgoing:
-   * @object: The exported object emitting the signal.
-   * @invocation: A #GDBusMethodInvocation object that can be used to return a value or error.
-   * @call_id: Parameter.
-   *
-   * On exported objects, this signal is emitted when a remote process (identified by @invocation) invokes the <literal>org.shr.phoneui.CallManagement.HideOutgoing()</literal> D-Bus method on @object. Use phoneui_call_management_complete_hide_outgoing() to return a value or g_dbus_method_invocation_return_error() to return an error.
+   * @object: A #PhoneuiCallManagement.
+   * @invocation: A #GDBusMethodInvocation.
+   * @call_id: Argument passed by remote caller.
    *
-   * The signal is emitted in the
-   * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
-   * of the thread that @object was registered in.
+   * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-shr-phoneui-CallManagement.HideOutgoing">HideOutgoing()</link> D-Bus method.
    *
-   * On proxies, this signal is never emitted.
+   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phoneui_call_management_complete_hide_outgoing() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
    *
-   * Returns: %TRUE if you want to handle the method call (will stop further handlers from being called), %FALSE otherwise.
+   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
    */
-  signals[__HIDE_OUTGOING_METHOD] =
-    g_signal_new ("handle-hide-outgoing",
-                  G_TYPE_FROM_INTERFACE (iface),
-                  G_SIGNAL_RUN_LAST,
-                  G_STRUCT_OFFSET (PhoneuiCallManagementIface, handle_hide_outgoing),
-                  g_signal_accumulator_true_handled,
-                  NULL,
-                  _shr_gdbus_cclosure_marshaller_BOOLEAN__OBJECT_INT,
-                  G_TYPE_BOOLEAN,
-                  2,
-                  G_TYPE_DBUS_METHOD_INVOCATION,
-                  G_TYPE_INT);
-
-  /* GObject property definitions for D-Bus properties: */
-}
+  g_signal_new ("handle-hide-outgoing",
+    G_TYPE_FROM_INTERFACE (iface),
+    G_SIGNAL_RUN_LAST,
+    G_STRUCT_OFFSET (PhoneuiCallManagementIface, handle_hide_outgoing),
+    g_signal_accumulator_true_handled,
+    NULL,
+    g_cclosure_marshal_generic,
+    G_TYPE_BOOLEAN,
+    2,
+    G_TYPE_DBUS_METHOD_INVOCATION, G_TYPE_INT);
 
+}
 
-/* C Bindings for properties */
+typedef PhoneuiCallManagementIface PhoneuiCallManagementInterface;
+G_DEFINE_INTERFACE (PhoneuiCallManagement, phoneui_call_management, G_TYPE_OBJECT);
 
 /**
  * phoneui_call_management_call_display_incoming:
- * @proxy: A #PhoneuiCallManagement.
- * @call_id: Method parameter.
- * @status: Method parameter.
- * @number: Method parameter.
- * @cancellable: A #GCancellable or %NULL.
- * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL if you don't care about the result of the method invocation.
- * @user_data: Data to pass to @callback.
- *
- * Invokes the <literal>org.shr.phoneui.CallManagement.DisplayIncoming()</literal>
- * D-Bus method on the remote object represented by @proxy.
- *
- * This is an asynchronous method. When the operation is finished,
- * callback will be invoked in the
- * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
- * of the thread you are calling this method from. You can then call
- * phoneui_call_management_call_display_incoming_finish() to get the result of the operation.
- * See phoneui_call_management_call_display_incoming_sync() for the synchronous version of this method.
+ * @proxy: A #PhoneuiCallManagementProxy.
+ * @call_id: Argument to pass with the method invocation.
+ * @status: Argument to pass with the method invocation.
+ * @number: Argument to pass with the method invocation.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL.
+ * @user_data: User data to pass to @callback.
+ *
+ * Asynchronously invokes the <link linkend="gdbus-method-org-shr-phoneui-CallManagement.DisplayIncoming">DisplayIncoming()</link> D-Bus method on @proxy.
+ * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
+ * You can then call phoneui_call_management_call_display_incoming_finish() to get the result of the operation.
+ *
+ * See phoneui_call_management_call_display_incoming_sync() for the synchronous, blocking version of this method.
  */
-void phoneui_call_management_call_display_incoming (
-        PhoneuiCallManagement *proxy,
-        gint call_id,
-        gint status,
-        const gchar *number,
-        GCancellable *cancellable,
-        GAsyncReadyCallback callback,
-        gpointer user_data)
-{
-  GVariant *_params;
-  _params = g_variant_new ("(iis)",
-                           call_id,
-                           status,
-                           number);
+void
+phoneui_call_management_call_display_incoming (
+    PhoneuiCallManagement *proxy,
+    gint call_id,
+    gint status,
+    const gchar *number,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data)
+{
   g_dbus_proxy_call (G_DBUS_PROXY (proxy),
-                     "DisplayIncoming",
-                     _params,
-                     G_DBUS_CALL_FLAGS_NONE,
-                     -1,
-                     cancellable,
-                     callback,
-                     user_data);
+    "DisplayIncoming",
+    g_variant_new ("(iis)",
+                   call_id,
+                   status,
+                   number),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    callback,
+    user_data);
 }
 
 /**
  * phoneui_call_management_call_display_incoming_finish:
- * @proxy: A #PhoneuiCallManagement.
- * @res: A #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_call_management_call_display_incoming().
+ * @proxy: A #PhoneuiCallManagementProxy.
+ * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_call_management_call_display_incoming().
  * @error: Return location for error or %NULL.
  *
- * Finishes invoking the <literal>org.shr.phoneui.CallManagement.DisplayIncoming()</literal>
- * D-Bus method on the remote object represented by @proxy.
+ * Finishes an operation started with phoneui_call_management_call_display_incoming().
  *
- * Returns: %TRUE if the call succeeded, %FALSE if @error is set.
+ * Returns: %TRUE if the call succeded, %FALSE if @error is set.
  */
-gboolean phoneui_call_management_call_display_incoming_finish (
-        PhoneuiCallManagement *proxy,
-        GAsyncResult *res,
-        GError **error)
-{
-  gboolean _ret = FALSE;
-  GVariant *_result;
-  _result = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
-  if (_result == NULL)
+gboolean
+phoneui_call_management_call_display_incoming_finish (
+    PhoneuiCallManagement *proxy,
+    GAsyncResult *res,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
+  if (_ret == NULL)
     goto _out;
-  g_variant_unref (_result);
-  _ret = TRUE;
+  g_variant_get (_ret,
+                 "()");
+  g_variant_unref (_ret);
 _out:
-  return _ret;
+  return _ret != NULL;
 }
 
 /**
  * phoneui_call_management_call_display_incoming_sync:
- * @proxy: A #PhoneuiCallManagement.
- * @call_id: Method parameter.
- * @status: Method parameter.
- * @number: Method parameter.
- * @cancellable: A #GCancellable or %NULL.
+ * @proxy: A #PhoneuiCallManagementProxy.
+ * @call_id: Argument to pass with the method invocation.
+ * @status: Argument to pass with the method invocation.
+ * @number: Argument to pass with the method invocation.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
  * @error: Return location for error or %NULL.
  *
- * Synchronously invokes the <literal>org.shr.phoneui.CallManagement.DisplayIncoming()</literal>
- * D-Bus method on the remote object represented by @proxy.
- * The calling thread is blocked until a reply is received. See
- * phoneui_call_management_call_display_incoming() for the asynchronous version of this method.
+ * Synchronously invokes the <link linkend="gdbus-method-org-shr-phoneui-CallManagement.DisplayIncoming">DisplayIncoming()</link> D-Bus method on @proxy. The calling thread is blocked until a reply is received.
  *
- * Returns: %TRUE if the call succeeded, %FALSE if @error is set.
+ * See phoneui_call_management_call_display_incoming() for the asynchronous version of this method.
+ *
+ * Returns: %TRUE if the call succeded, %FALSE if @error is set.
  */
-gboolean phoneui_call_management_call_display_incoming_sync (
-        PhoneuiCallManagement *proxy,
-        gint call_id,
-        gint status,
-        const gchar *number,
-        GCancellable *cancellable,
-        GError **error)
-{
-  gboolean _ret = FALSE;
-  GVariant *_params;
-  GVariant *_result;
-  _params = g_variant_new ("(iis)",
-                           call_id,
-                           status,
-                           number);
-  _result = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
-                                   "DisplayIncoming",
-                                   _params,
-                                   G_DBUS_CALL_FLAGS_NONE,
-                                   -1,
-                                   cancellable,
-                                   error);
-  if (_result == NULL)
+gboolean
+phoneui_call_management_call_display_incoming_sync (
+    PhoneuiCallManagement *proxy,
+    gint call_id,
+    gint status,
+    const gchar *number,
+    GCancellable *cancellable,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
+    "DisplayIncoming",
+    g_variant_new ("(iis)",
+                   call_id,
+                   status,
+                   number),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    error);
+  if (_ret == NULL)
     goto _out;
-  g_variant_unref (_result);
-  _ret = TRUE;
+  g_variant_get (_ret,
+                 "()");
+  g_variant_unref (_ret);
 _out:
-  return _ret;
+  return _ret != NULL;
 }
 
-
 /**
  * phoneui_call_management_call_hide_incoming:
- * @proxy: A #PhoneuiCallManagement.
- * @call_id: Method parameter.
- * @cancellable: A #GCancellable or %NULL.
- * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL if you don't care about the result of the method invocation.
- * @user_data: Data to pass to @callback.
- *
- * Invokes the <literal>org.shr.phoneui.CallManagement.HideIncoming()</literal>
- * D-Bus method on the remote object represented by @proxy.
- *
- * This is an asynchronous method. When the operation is finished,
- * callback will be invoked in the
- * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
- * of the thread you are calling this method from. You can then call
- * phoneui_call_management_call_hide_incoming_finish() to get the result of the operation.
- * See phoneui_call_management_call_hide_incoming_sync() for the synchronous version of this method.
+ * @proxy: A #PhoneuiCallManagementProxy.
+ * @call_id: Argument to pass with the method invocation.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL.
+ * @user_data: User data to pass to @callback.
+ *
+ * Asynchronously invokes the <link linkend="gdbus-method-org-shr-phoneui-CallManagement.HideIncoming">HideIncoming()</link> D-Bus method on @proxy.
+ * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
+ * You can then call phoneui_call_management_call_hide_incoming_finish() to get the result of the operation.
+ *
+ * See phoneui_call_management_call_hide_incoming_sync() for the synchronous, blocking version of this method.
  */
-void phoneui_call_management_call_hide_incoming (
-        PhoneuiCallManagement *proxy,
-        gint call_id,
-        GCancellable *cancellable,
-        GAsyncReadyCallback callback,
-        gpointer user_data)
-{
-  GVariant *_params;
-  _params = g_variant_new ("(i)",
-                           call_id);
+void
+phoneui_call_management_call_hide_incoming (
+    PhoneuiCallManagement *proxy,
+    gint call_id,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data)
+{
   g_dbus_proxy_call (G_DBUS_PROXY (proxy),
-                     "HideIncoming",
-                     _params,
-                     G_DBUS_CALL_FLAGS_NONE,
-                     -1,
-                     cancellable,
-                     callback,
-                     user_data);
+    "HideIncoming",
+    g_variant_new ("(i)",
+                   call_id),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    callback,
+    user_data);
 }
 
 /**
  * phoneui_call_management_call_hide_incoming_finish:
- * @proxy: A #PhoneuiCallManagement.
- * @res: A #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_call_management_call_hide_incoming().
+ * @proxy: A #PhoneuiCallManagementProxy.
+ * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_call_management_call_hide_incoming().
  * @error: Return location for error or %NULL.
  *
- * Finishes invoking the <literal>org.shr.phoneui.CallManagement.HideIncoming()</literal>
- * D-Bus method on the remote object represented by @proxy.
+ * Finishes an operation started with phoneui_call_management_call_hide_incoming().
  *
- * Returns: %TRUE if the call succeeded, %FALSE if @error is set.
+ * Returns: %TRUE if the call succeded, %FALSE if @error is set.
  */
-gboolean phoneui_call_management_call_hide_incoming_finish (
-        PhoneuiCallManagement *proxy,
-        GAsyncResult *res,
-        GError **error)
-{
-  gboolean _ret = FALSE;
-  GVariant *_result;
-  _result = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
-  if (_result == NULL)
+gboolean
+phoneui_call_management_call_hide_incoming_finish (
+    PhoneuiCallManagement *proxy,
+    GAsyncResult *res,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
+  if (_ret == NULL)
     goto _out;
-  g_variant_unref (_result);
-  _ret = TRUE;
+  g_variant_get (_ret,
+                 "()");
+  g_variant_unref (_ret);
 _out:
-  return _ret;
+  return _ret != NULL;
 }
 
 /**
  * phoneui_call_management_call_hide_incoming_sync:
- * @proxy: A #PhoneuiCallManagement.
- * @call_id: Method parameter.
- * @cancellable: A #GCancellable or %NULL.
+ * @proxy: A #PhoneuiCallManagementProxy.
+ * @call_id: Argument to pass with the method invocation.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
  * @error: Return location for error or %NULL.
  *
- * Synchronously invokes the <literal>org.shr.phoneui.CallManagement.HideIncoming()</literal>
- * D-Bus method on the remote object represented by @proxy.
- * The calling thread is blocked until a reply is received. See
- * phoneui_call_management_call_hide_incoming() for the asynchronous version of this method.
+ * Synchronously invokes the <link linkend="gdbus-method-org-shr-phoneui-CallManagement.HideIncoming">HideIncoming()</link> D-Bus method on @proxy. The calling thread is blocked until a reply is received.
  *
- * Returns: %TRUE if the call succeeded, %FALSE if @error is set.
+ * See phoneui_call_management_call_hide_incoming() for the asynchronous version of this method.
+ *
+ * Returns: %TRUE if the call succeded, %FALSE if @error is set.
  */
-gboolean phoneui_call_management_call_hide_incoming_sync (
-        PhoneuiCallManagement *proxy,
-        gint call_id,
-        GCancellable *cancellable,
-        GError **error)
-{
-  gboolean _ret = FALSE;
-  GVariant *_params;
-  GVariant *_result;
-  _params = g_variant_new ("(i)",
-                           call_id);
-  _result = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
-                                   "HideIncoming",
-                                   _params,
-                                   G_DBUS_CALL_FLAGS_NONE,
-                                   -1,
-                                   cancellable,
-                                   error);
-  if (_result == NULL)
+gboolean
+phoneui_call_management_call_hide_incoming_sync (
+    PhoneuiCallManagement *proxy,
+    gint call_id,
+    GCancellable *cancellable,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
+    "HideIncoming",
+    g_variant_new ("(i)",
+                   call_id),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    error);
+  if (_ret == NULL)
     goto _out;
-  g_variant_unref (_result);
-  _ret = TRUE;
+  g_variant_get (_ret,
+                 "()");
+  g_variant_unref (_ret);
 _out:
-  return _ret;
+  return _ret != NULL;
 }
 
-
 /**
  * phoneui_call_management_call_display_outgoing:
- * @proxy: A #PhoneuiCallManagement.
- * @call_id: Method parameter.
- * @status: Method parameter.
- * @number: Method parameter.
- * @cancellable: A #GCancellable or %NULL.
- * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL if you don't care about the result of the method invocation.
- * @user_data: Data to pass to @callback.
- *
- * Invokes the <literal>org.shr.phoneui.CallManagement.DisplayOutgoing()</literal>
- * D-Bus method on the remote object represented by @proxy.
- *
- * This is an asynchronous method. When the operation is finished,
- * callback will be invoked in the
- * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
- * of the thread you are calling this method from. You can then call
- * phoneui_call_management_call_display_outgoing_finish() to get the result of the operation.
- * See phoneui_call_management_call_display_outgoing_sync() for the synchronous version of this method.
+ * @proxy: A #PhoneuiCallManagementProxy.
+ * @call_id: Argument to pass with the method invocation.
+ * @status: Argument to pass with the method invocation.
+ * @number: Argument to pass with the method invocation.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL.
+ * @user_data: User data to pass to @callback.
+ *
+ * Asynchronously invokes the <link linkend="gdbus-method-org-shr-phoneui-CallManagement.DisplayOutgoing">DisplayOutgoing()</link> D-Bus method on @proxy.
+ * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
+ * You can then call phoneui_call_management_call_display_outgoing_finish() to get the result of the operation.
+ *
+ * See phoneui_call_management_call_display_outgoing_sync() for the synchronous, blocking version of this method.
  */
-void phoneui_call_management_call_display_outgoing (
-        PhoneuiCallManagement *proxy,
-        gint call_id,
-        gint status,
-        const gchar *number,
-        GCancellable *cancellable,
-        GAsyncReadyCallback callback,
-        gpointer user_data)
-{
-  GVariant *_params;
-  _params = g_variant_new ("(iis)",
-                           call_id,
-                           status,
-                           number);
+void
+phoneui_call_management_call_display_outgoing (
+    PhoneuiCallManagement *proxy,
+    gint call_id,
+    gint status,
+    const gchar *number,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data)
+{
   g_dbus_proxy_call (G_DBUS_PROXY (proxy),
-                     "DisplayOutgoing",
-                     _params,
-                     G_DBUS_CALL_FLAGS_NONE,
-                     -1,
-                     cancellable,
-                     callback,
-                     user_data);
+    "DisplayOutgoing",
+    g_variant_new ("(iis)",
+                   call_id,
+                   status,
+                   number),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    callback,
+    user_data);
 }
 
 /**
  * phoneui_call_management_call_display_outgoing_finish:
- * @proxy: A #PhoneuiCallManagement.
- * @res: A #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_call_management_call_display_outgoing().
+ * @proxy: A #PhoneuiCallManagementProxy.
+ * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_call_management_call_display_outgoing().
  * @error: Return location for error or %NULL.
  *
- * Finishes invoking the <literal>org.shr.phoneui.CallManagement.DisplayOutgoing()</literal>
- * D-Bus method on the remote object represented by @proxy.
+ * Finishes an operation started with phoneui_call_management_call_display_outgoing().
  *
- * Returns: %TRUE if the call succeeded, %FALSE if @error is set.
+ * Returns: %TRUE if the call succeded, %FALSE if @error is set.
  */
-gboolean phoneui_call_management_call_display_outgoing_finish (
-        PhoneuiCallManagement *proxy,
-        GAsyncResult *res,
-        GError **error)
-{
-  gboolean _ret = FALSE;
-  GVariant *_result;
-  _result = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
-  if (_result == NULL)
+gboolean
+phoneui_call_management_call_display_outgoing_finish (
+    PhoneuiCallManagement *proxy,
+    GAsyncResult *res,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
+  if (_ret == NULL)
     goto _out;
-  g_variant_unref (_result);
-  _ret = TRUE;
+  g_variant_get (_ret,
+                 "()");
+  g_variant_unref (_ret);
 _out:
-  return _ret;
+  return _ret != NULL;
 }
 
 /**
  * phoneui_call_management_call_display_outgoing_sync:
- * @proxy: A #PhoneuiCallManagement.
- * @call_id: Method parameter.
- * @status: Method parameter.
- * @number: Method parameter.
- * @cancellable: A #GCancellable or %NULL.
+ * @proxy: A #PhoneuiCallManagementProxy.
+ * @call_id: Argument to pass with the method invocation.
+ * @status: Argument to pass with the method invocation.
+ * @number: Argument to pass with the method invocation.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
  * @error: Return location for error or %NULL.
  *
- * Synchronously invokes the <literal>org.shr.phoneui.CallManagement.DisplayOutgoing()</literal>
- * D-Bus method on the remote object represented by @proxy.
- * The calling thread is blocked until a reply is received. See
- * phoneui_call_management_call_display_outgoing() for the asynchronous version of this method.
+ * Synchronously invokes the <link linkend="gdbus-method-org-shr-phoneui-CallManagement.DisplayOutgoing">DisplayOutgoing()</link> D-Bus method on @proxy. The calling thread is blocked until a reply is received.
  *
- * Returns: %TRUE if the call succeeded, %FALSE if @error is set.
+ * See phoneui_call_management_call_display_outgoing() for the asynchronous version of this method.
+ *
+ * Returns: %TRUE if the call succeded, %FALSE if @error is set.
  */
-gboolean phoneui_call_management_call_display_outgoing_sync (
-        PhoneuiCallManagement *proxy,
-        gint call_id,
-        gint status,
-        const gchar *number,
-        GCancellable *cancellable,
-        GError **error)
-{
-  gboolean _ret = FALSE;
-  GVariant *_params;
-  GVariant *_result;
-  _params = g_variant_new ("(iis)",
-                           call_id,
-                           status,
-                           number);
-  _result = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
-                                   "DisplayOutgoing",
-                                   _params,
-                                   G_DBUS_CALL_FLAGS_NONE,
-                                   -1,
-                                   cancellable,
-                                   error);
-  if (_result == NULL)
+gboolean
+phoneui_call_management_call_display_outgoing_sync (
+    PhoneuiCallManagement *proxy,
+    gint call_id,
+    gint status,
+    const gchar *number,
+    GCancellable *cancellable,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
+    "DisplayOutgoing",
+    g_variant_new ("(iis)",
+                   call_id,
+                   status,
+                   number),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    error);
+  if (_ret == NULL)
     goto _out;
-  g_variant_unref (_result);
-  _ret = TRUE;
+  g_variant_get (_ret,
+                 "()");
+  g_variant_unref (_ret);
 _out:
-  return _ret;
+  return _ret != NULL;
 }
 
-
 /**
  * phoneui_call_management_call_hide_outgoing:
- * @proxy: A #PhoneuiCallManagement.
- * @call_id: Method parameter.
- * @cancellable: A #GCancellable or %NULL.
- * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL if you don't care about the result of the method invocation.
- * @user_data: Data to pass to @callback.
- *
- * Invokes the <literal>org.shr.phoneui.CallManagement.HideOutgoing()</literal>
- * D-Bus method on the remote object represented by @proxy.
- *
- * This is an asynchronous method. When the operation is finished,
- * callback will be invoked in the
- * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
- * of the thread you are calling this method from. You can then call
- * phoneui_call_management_call_hide_outgoing_finish() to get the result of the operation.
- * See phoneui_call_management_call_hide_outgoing_sync() for the synchronous version of this method.
+ * @proxy: A #PhoneuiCallManagementProxy.
+ * @call_id: Argument to pass with the method invocation.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL.
+ * @user_data: User data to pass to @callback.
+ *
+ * Asynchronously invokes the <link linkend="gdbus-method-org-shr-phoneui-CallManagement.HideOutgoing">HideOutgoing()</link> D-Bus method on @proxy.
+ * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
+ * You can then call phoneui_call_management_call_hide_outgoing_finish() to get the result of the operation.
+ *
+ * See phoneui_call_management_call_hide_outgoing_sync() for the synchronous, blocking version of this method.
  */
-void phoneui_call_management_call_hide_outgoing (
-        PhoneuiCallManagement *proxy,
-        gint call_id,
-        GCancellable *cancellable,
-        GAsyncReadyCallback callback,
-        gpointer user_data)
-{
-  GVariant *_params;
-  _params = g_variant_new ("(i)",
-                           call_id);
+void
+phoneui_call_management_call_hide_outgoing (
+    PhoneuiCallManagement *proxy,
+    gint call_id,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data)
+{
   g_dbus_proxy_call (G_DBUS_PROXY (proxy),
-                     "HideOutgoing",
-                     _params,
-                     G_DBUS_CALL_FLAGS_NONE,
-                     -1,
-                     cancellable,
-                     callback,
-                     user_data);
+    "HideOutgoing",
+    g_variant_new ("(i)",
+                   call_id),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    callback,
+    user_data);
 }
 
 /**
  * phoneui_call_management_call_hide_outgoing_finish:
- * @proxy: A #PhoneuiCallManagement.
- * @res: A #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_call_management_call_hide_outgoing().
+ * @proxy: A #PhoneuiCallManagementProxy.
+ * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_call_management_call_hide_outgoing().
  * @error: Return location for error or %NULL.
  *
- * Finishes invoking the <literal>org.shr.phoneui.CallManagement.HideOutgoing()</literal>
- * D-Bus method on the remote object represented by @proxy.
+ * Finishes an operation started with phoneui_call_management_call_hide_outgoing().
  *
- * Returns: %TRUE if the call succeeded, %FALSE if @error is set.
+ * Returns: %TRUE if the call succeded, %FALSE if @error is set.
  */
-gboolean phoneui_call_management_call_hide_outgoing_finish (
-        PhoneuiCallManagement *proxy,
-        GAsyncResult *res,
-        GError **error)
-{
-  gboolean _ret = FALSE;
-  GVariant *_result;
-  _result = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
-  if (_result == NULL)
+gboolean
+phoneui_call_management_call_hide_outgoing_finish (
+    PhoneuiCallManagement *proxy,
+    GAsyncResult *res,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
+  if (_ret == NULL)
     goto _out;
-  g_variant_unref (_result);
-  _ret = TRUE;
+  g_variant_get (_ret,
+                 "()");
+  g_variant_unref (_ret);
 _out:
-  return _ret;
+  return _ret != NULL;
 }
 
 /**
  * phoneui_call_management_call_hide_outgoing_sync:
- * @proxy: A #PhoneuiCallManagement.
- * @call_id: Method parameter.
- * @cancellable: A #GCancellable or %NULL.
+ * @proxy: A #PhoneuiCallManagementProxy.
+ * @call_id: Argument to pass with the method invocation.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
  * @error: Return location for error or %NULL.
  *
- * Synchronously invokes the <literal>org.shr.phoneui.CallManagement.HideOutgoing()</literal>
- * D-Bus method on the remote object represented by @proxy.
- * The calling thread is blocked until a reply is received. See
- * phoneui_call_management_call_hide_outgoing() for the asynchronous version of this method.
+ * Synchronously invokes the <link linkend="gdbus-method-org-shr-phoneui-CallManagement.HideOutgoing">HideOutgoing()</link> D-Bus method on @proxy. The calling thread is blocked until a reply is received.
  *
- * Returns: %TRUE if the call succeeded, %FALSE if @error is set.
+ * See phoneui_call_management_call_hide_outgoing() for the asynchronous version of this method.
+ *
+ * Returns: %TRUE if the call succeded, %FALSE if @error is set.
  */
-gboolean phoneui_call_management_call_hide_outgoing_sync (
-        PhoneuiCallManagement *proxy,
-        gint call_id,
-        GCancellable *cancellable,
-        GError **error)
-{
-  gboolean _ret = FALSE;
-  GVariant *_params;
-  GVariant *_result;
-  _params = g_variant_new ("(i)",
-                           call_id);
-  _result = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
-                                   "HideOutgoing",
-                                   _params,
-                                   G_DBUS_CALL_FLAGS_NONE,
-                                   -1,
-                                   cancellable,
-                                   error);
-  if (_result == NULL)
+gboolean
+phoneui_call_management_call_hide_outgoing_sync (
+    PhoneuiCallManagement *proxy,
+    gint call_id,
+    GCancellable *cancellable,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
+    "HideOutgoing",
+    g_variant_new ("(i)",
+                   call_id),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    error);
+  if (_ret == NULL)
     goto _out;
-  g_variant_unref (_result);
-  _ret = TRUE;
+  g_variant_get (_ret,
+                 "()");
+  g_variant_unref (_ret);
 _out:
-  return _ret;
+  return _ret != NULL;
 }
 
-
 /**
  * phoneui_call_management_complete_display_incoming:
  * @object: A #PhoneuiCallManagement.
- * @invocation: A #GDBusMethodInvocation.
+ * @invocation: (transfer full): A #GDBusMethodInvocation.
  *
- * Completes handling the <literal>org.shr.phoneui.CallManagement.DisplayIncoming()</literal>
- * D-Bus method invocation by returning a value.
- *
- * If you want to return an error, use g_dbus_method_invocation_return_error()
- * or similar instead.
+ * Helper function used in service implementations to finish handling invocations of the <link linkend="gdbus-method-org-shr-phoneui-CallManagement.DisplayIncoming">DisplayIncoming()</link> D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.
  *
  * This method will free @invocation, you cannot use it afterwards.
  */
-void phoneui_call_management_complete_display_incoming (
-        PhoneuiCallManagement *object,
-        GDBusMethodInvocation *invocation)
+void
+phoneui_call_management_complete_display_incoming (
+    PhoneuiCallManagement *object,
+    GDBusMethodInvocation *invocation)
 {
-  g_dbus_method_invocation_return_value (invocation, NULL);
+  g_dbus_method_invocation_return_value (invocation,
+    g_variant_new ("()"));
 }
 
-
 /**
  * phoneui_call_management_complete_hide_incoming:
  * @object: A #PhoneuiCallManagement.
- * @invocation: A #GDBusMethodInvocation.
+ * @invocation: (transfer full): A #GDBusMethodInvocation.
  *
- * Completes handling the <literal>org.shr.phoneui.CallManagement.HideIncoming()</literal>
- * D-Bus method invocation by returning a value.
- *
- * If you want to return an error, use g_dbus_method_invocation_return_error()
- * or similar instead.
+ * Helper function used in service implementations to finish handling invocations of the <link linkend="gdbus-method-org-shr-phoneui-CallManagement.HideIncoming">HideIncoming()</link> D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.
  *
  * This method will free @invocation, you cannot use it afterwards.
  */
-void phoneui_call_management_complete_hide_incoming (
-        PhoneuiCallManagement *object,
-        GDBusMethodInvocation *invocation)
+void
+phoneui_call_management_complete_hide_incoming (
+    PhoneuiCallManagement *object,
+    GDBusMethodInvocation *invocation)
 {
-  g_dbus_method_invocation_return_value (invocation, NULL);
+  g_dbus_method_invocation_return_value (invocation,
+    g_variant_new ("()"));
 }
 
-
 /**
  * phoneui_call_management_complete_display_outgoing:
  * @object: A #PhoneuiCallManagement.
- * @invocation: A #GDBusMethodInvocation.
+ * @invocation: (transfer full): A #GDBusMethodInvocation.
  *
- * Completes handling the <literal>org.shr.phoneui.CallManagement.DisplayOutgoing()</literal>
- * D-Bus method invocation by returning a value.
- *
- * If you want to return an error, use g_dbus_method_invocation_return_error()
- * or similar instead.
+ * Helper function used in service implementations to finish handling invocations of the <link linkend="gdbus-method-org-shr-phoneui-CallManagement.DisplayOutgoing">DisplayOutgoing()</link> D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.
  *
  * This method will free @invocation, you cannot use it afterwards.
  */
-void phoneui_call_management_complete_display_outgoing (
-        PhoneuiCallManagement *object,
-        GDBusMethodInvocation *invocation)
+void
+phoneui_call_management_complete_display_outgoing (
+    PhoneuiCallManagement *object,
+    GDBusMethodInvocation *invocation)
 {
-  g_dbus_method_invocation_return_value (invocation, NULL);
+  g_dbus_method_invocation_return_value (invocation,
+    g_variant_new ("()"));
 }
 
-
 /**
  * phoneui_call_management_complete_hide_outgoing:
  * @object: A #PhoneuiCallManagement.
- * @invocation: A #GDBusMethodInvocation.
+ * @invocation: (transfer full): A #GDBusMethodInvocation.
  *
- * Completes handling the <literal>org.shr.phoneui.CallManagement.HideOutgoing()</literal>
- * D-Bus method invocation by returning a value.
- *
- * If you want to return an error, use g_dbus_method_invocation_return_error()
- * or similar instead.
+ * Helper function used in service implementations to finish handling invocations of the <link linkend="gdbus-method-org-shr-phoneui-CallManagement.HideOutgoing">HideOutgoing()</link> D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.
  *
  * This method will free @invocation, you cannot use it afterwards.
  */
-void phoneui_call_management_complete_hide_outgoing (
-        PhoneuiCallManagement *object,
-        GDBusMethodInvocation *invocation)
+void
+phoneui_call_management_complete_hide_outgoing (
+    PhoneuiCallManagement *object,
+    GDBusMethodInvocation *invocation)
 {
-  g_dbus_method_invocation_return_value (invocation, NULL);
+  g_dbus_method_invocation_return_value (invocation,
+    g_variant_new ("()"));
 }
 
+/* ------------------------------------------------------------------------ */
 
-static const GDBusArgInfo phoneui_call_management_method_in_DisplayIncoming_call_id =
-{
-  -1,
-  "call_id",
-  "i",
-  (GDBusAnnotationInfo **) NULL
-};
-static const GDBusArgInfo phoneui_call_management_method_in_DisplayIncoming_status =
-{
-  -1,
-  "status",
-  "i",
-  (GDBusAnnotationInfo **) NULL
-};
-static const GDBusArgInfo phoneui_call_management_method_in_DisplayIncoming_number =
-{
-  -1,
-  "number",
-  "s",
-  (GDBusAnnotationInfo **) NULL
-};
-static const GDBusArgInfo * const phoneui_call_management_method_in_DisplayIncoming_arg_pointers[] =
-{
-  &phoneui_call_management_method_in_DisplayIncoming_call_id,
-  &phoneui_call_management_method_in_DisplayIncoming_status,
-  &phoneui_call_management_method_in_DisplayIncoming_number,
-  NULL
-};
-
-static const GDBusAnnotationInfo DisplayIncoming_method_annotations_annotation_0 = {
-  -1,
-  "org.freedesktop.DBus.GLib.Async",
-  "true",
-};
-
-static const GDBusAnnotationInfo *DisplayIncoming_method_annotations[] = {
-  &DisplayIncoming_method_annotations_annotation_0,
-  NULL
-};
+/**
+ * PhoneuiCallManagementProxy:
+ *
+ * The #PhoneuiCallManagementProxy structure contains only private data and should only be accessed using the provided API.
+ */
 
-static const GDBusMethodInfo phoneui_call_management_method_DisplayIncoming =
-{
-  -1,
-  "DisplayIncoming",
-  (GDBusArgInfo **) &phoneui_call_management_method_in_DisplayIncoming_arg_pointers,
-  (GDBusArgInfo **) NULL,
-  (GDBusAnnotationInfo **) DisplayIncoming_method_annotations,
-};
+/**
+ * PhoneuiCallManagementProxyClass:
+ * @parent_class: The parent class.
+ *
+ * Class structure for #PhoneuiCallManagementProxy.
+ */
 
-static const GDBusArgInfo phoneui_call_management_method_in_HideIncoming_call_id =
-{
-  -1,
-  "call_id",
-  "i",
-  (GDBusAnnotationInfo **) NULL
-};
-static const GDBusArgInfo * const phoneui_call_management_method_in_HideIncoming_arg_pointers[] =
+static void
+phoneui_call_management_proxy_iface_init (PhoneuiCallManagementIface *iface)
 {
-  &phoneui_call_management_method_in_HideIncoming_call_id,
-  NULL
-};
-
-static const GDBusAnnotationInfo HideIncoming_method_annotations_annotation_0 = {
-  -1,
-  "org.freedesktop.DBus.GLib.Async",
-  "true",
-};
+}
 
-static const GDBusAnnotationInfo *HideIncoming_method_annotations[] = {
-  &HideIncoming_method_annotations_annotation_0,
-  NULL
-};
+#define phoneui_call_management_proxy_get_type phoneui_call_management_proxy_get_type
+G_DEFINE_TYPE_WITH_CODE (PhoneuiCallManagementProxy, phoneui_call_management_proxy, G_TYPE_DBUS_PROXY,
+                         G_IMPLEMENT_INTERFACE (TYPE_PHONEUI_CALL_MANAGEMENT, phoneui_call_management_proxy_iface_init));
+#undef phoneui_call_management_proxy_get_type
 
-static const GDBusMethodInfo phoneui_call_management_method_HideIncoming =
+static void
+phoneui_call_management_proxy_get_property (GObject      *object,
+  guint         prop_id,
+  GValue       *value,
+  GParamSpec   *pspec)
 {
-  -1,
-  "HideIncoming",
-  (GDBusArgInfo **) &phoneui_call_management_method_in_HideIncoming_arg_pointers,
-  (GDBusArgInfo **) NULL,
-  (GDBusAnnotationInfo **) HideIncoming_method_annotations,
-};
+}
 
-static const GDBusArgInfo phoneui_call_management_method_in_DisplayOutgoing_call_id =
+static void
+phoneui_call_management_proxy_set_property (GObject      *object,
+  guint         prop_id,
+  const GValue *value,
+  GParamSpec   *pspec)
 {
-  -1,
-  "call_id",
-  "i",
-  (GDBusAnnotationInfo **) NULL
-};
-static const GDBusArgInfo phoneui_call_management_method_in_DisplayOutgoing_status =
-{
-  -1,
-  "status",
-  "i",
-  (GDBusAnnotationInfo **) NULL
-};
-static const GDBusArgInfo phoneui_call_management_method_in_DisplayOutgoing_number =
-{
-  -1,
-  "number",
-  "s",
-  (GDBusAnnotationInfo **) NULL
-};
-static const GDBusArgInfo * const phoneui_call_management_method_in_DisplayOutgoing_arg_pointers[] =
-{
-  &phoneui_call_management_method_in_DisplayOutgoing_call_id,
-  &phoneui_call_management_method_in_DisplayOutgoing_status,
-  &phoneui_call_management_method_in_DisplayOutgoing_number,
-  NULL
-};
-
-static const GDBusAnnotationInfo DisplayOutgoing_method_annotations_annotation_0 = {
-  -1,
-  "org.freedesktop.DBus.GLib.Async",
-  "true",
-};
-
-static const GDBusAnnotationInfo *DisplayOutgoing_method_annotations[] = {
-  &DisplayOutgoing_method_annotations_annotation_0,
-  NULL
-};
-
-static const GDBusMethodInfo phoneui_call_management_method_DisplayOutgoing =
-{
-  -1,
-  "DisplayOutgoing",
-  (GDBusArgInfo **) &phoneui_call_management_method_in_DisplayOutgoing_arg_pointers,
-  (GDBusArgInfo **) NULL,
-  (GDBusAnnotationInfo **) DisplayOutgoing_method_annotations,
-};
-
-static const GDBusArgInfo phoneui_call_management_method_in_HideOutgoing_call_id =
-{
-  -1,
-  "call_id",
-  "i",
-  (GDBusAnnotationInfo **) NULL
-};
-static const GDBusArgInfo * const phoneui_call_management_method_in_HideOutgoing_arg_pointers[] =
-{
-  &phoneui_call_management_method_in_HideOutgoing_call_id,
-  NULL
-};
-
-static const GDBusAnnotationInfo HideOutgoing_method_annotations_annotation_0 = {
-  -1,
-  "org.freedesktop.DBus.GLib.Async",
-  "true",
-};
-
-static const GDBusAnnotationInfo *HideOutgoing_method_annotations[] = {
-  &HideOutgoing_method_annotations_annotation_0,
-  NULL
-};
-
-static const GDBusMethodInfo phoneui_call_management_method_HideOutgoing =
-{
-  -1,
-  "HideOutgoing",
-  (GDBusArgInfo **) &phoneui_call_management_method_in_HideOutgoing_arg_pointers,
-  (GDBusArgInfo **) NULL,
-  (GDBusAnnotationInfo **) HideOutgoing_method_annotations,
-};
-
-static const GDBusMethodInfo * const phoneui_call_management_method_info_pointers[] =
-{
-  &phoneui_call_management_method_DisplayIncoming,
-  &phoneui_call_management_method_HideIncoming,
-  &phoneui_call_management_method_DisplayOutgoing,
-  &phoneui_call_management_method_HideOutgoing,
-  NULL
-};
-
-static const GDBusInterfaceInfo _phoneui_call_management_interface_info =
-{
-  -1,
-  "org.shr.phoneui.CallManagement",
-  (GDBusMethodInfo **) &phoneui_call_management_method_info_pointers,
-  (GDBusSignalInfo **) NULL,
-  (GDBusPropertyInfo **) NULL,
-  (GDBusAnnotationInfo **) NULL
-};
-
-static void
-handle_method_call_real (GDBusConnection       *connection,
-                         const gchar           *sender,
-                         const gchar           *object_path,
-                         const gchar           *interface_name,
-                         const gchar           *method_name,
-                         GVariant              *parameters,
-                         GDBusMethodInvocation *invocation,
-                         gpointer               user_data)
-{
-  guint method_id;
-  method_id = lookup_method_id_from_method_name (method_name);
-  switch (method_id)
-    {
-    case __DISPLAY_INCOMING_METHOD:
-      {
-        PhoneuiCallManagement *object = PHONEUI_CALL_MANAGEMENT (user_data);
-        gboolean handled;
-        gint arg_call_id;
-        gint arg_status;
-        const gchar *arg_number;
-        g_variant_get (parameters,
-                       "(ii&s)",
-                       &arg_call_id,
-                       &arg_status,
-                       &arg_number);
-        g_signal_emit (object,
-                       signals[method_id],
-                       0, invocation, arg_call_id, arg_status, arg_number, &handled);
-        if (!handled)
-          goto not_implemented;
-      }
-      break;
-
-    case __HIDE_INCOMING_METHOD:
-      {
-        PhoneuiCallManagement *object = PHONEUI_CALL_MANAGEMENT (user_data);
-        gboolean handled;
-        gint arg_call_id;
-        g_variant_get (parameters,
-                       "(i)",
-                       &arg_call_id);
-        g_signal_emit (object,
-                       signals[method_id],
-                       0, invocation, arg_call_id, &handled);
-        if (!handled)
-          goto not_implemented;
-      }
-      break;
-
-    case __DISPLAY_OUTGOING_METHOD:
-      {
-        PhoneuiCallManagement *object = PHONEUI_CALL_MANAGEMENT (user_data);
-        gboolean handled;
-        gint arg_call_id;
-        gint arg_status;
-        const gchar *arg_number;
-        g_variant_get (parameters,
-                       "(ii&s)",
-                       &arg_call_id,
-                       &arg_status,
-                       &arg_number);
-        g_signal_emit (object,
-                       signals[method_id],
-                       0, invocation, arg_call_id, arg_status, arg_number, &handled);
-        if (!handled)
-          goto not_implemented;
-      }
-      break;
-
-    case __HIDE_OUTGOING_METHOD:
-      {
-        PhoneuiCallManagement *object = PHONEUI_CALL_MANAGEMENT (user_data);
-        gboolean handled;
-        gint arg_call_id;
-        g_variant_get (parameters,
-                       "(i)",
-                       &arg_call_id);
-        g_signal_emit (object,
-                       signals[method_id],
-                       0, invocation, arg_call_id, &handled);
-        if (!handled)
-          goto not_implemented;
-      }
-      break;
-
-    default:
-not_implemented:
-      g_dbus_method_invocation_return_error (invocation,
-                                             G_DBUS_ERROR,
-                                             G_DBUS_ERROR_NOT_SUPPORTED,
-                                             "Method `%s' is not implemented",
-                                             method_name);
-      break;
-    }
-};
-
-typedef struct
-{
-  GDBusMethodInvocation *invocation;
-  gpointer               user_data;
-} HandleMethodInThreadData;
-
-static gboolean
-handle_method_call_in_thread_func (GIOSchedulerJob *job,
-                                   GCancellable    *cancellable,
-                                   gpointer         user_data)
-{
-  HandleMethodInThreadData *data = user_data;
-
-  handle_method_call_real (g_dbus_method_invocation_get_connection (data->invocation),
-                           g_dbus_method_invocation_get_sender (data->invocation),
-                           g_dbus_method_invocation_get_object_path (data->invocation),
-                           g_dbus_method_invocation_get_interface_name (data->invocation),
-                           g_dbus_method_invocation_get_method_name (data->invocation),
-                           g_dbus_method_invocation_get_parameters (data->invocation),
-                           data->invocation,
-                           data->user_data);
-  return FALSE; /* job is complete */
 }
 
 static void
-handle_method_call (GDBusConnection       *connection,
-                    const gchar           *sender,
-                    const gchar           *object_path,
-                    const gchar           *interface_name,
-                    const gchar           *method_name,
-                    GVariant              *parameters,
-                    GDBusMethodInvocation *invocation,
-                    gpointer               user_data)
-{
-  GDBusInterface *interface = G_DBUS_INTERFACE (user_data);
-  GDBusInterfaceFlags flags;
-
-  flags = g_dbus_interface_get_flags (interface);
-  if (flags & G_DBUS_INTERFACE_FLAGS_RUN_IN_THREAD)
-    {
-      HandleMethodInThreadData *data;
-      data = g_new0 (HandleMethodInThreadData, 1);
-      data->invocation = invocation;
-      data->user_data = user_data;
-      g_io_scheduler_push_job (handle_method_call_in_thread_func,
-                               data,
-                               g_free, /* since we don't need refs on objects */
-                               G_PRIORITY_DEFAULT,
-                               NULL); /* GCancellable* */
-    }
-  else
-    {
-      handle_method_call_real (connection,
-                               sender,
-                               object_path,
-                               interface_name,
-                               method_name,
-                               parameters,
-                               invocation,
-                               user_data);
-    }
-}
-
-static GVariant *
-get_property (GDBusConnection  *connection,
-              const gchar      *sender,
-              const gchar      *object_path,
-              const gchar      *interface_name,
-              const gchar      *property_name,
-              GError          **error,
-              gpointer          user_data)
-{
-  GVariant *ret;
-  guint prop_id;
-  prop_id = lookup_property_id_from_property_name (property_name);
-  ret = NULL;
-  switch (prop_id)
-    {
-    default:
-      g_assert_not_reached ();
-      break;
-    }
-
-  if (ret == NULL)
-    {
-      GVariant *untrusted_empty;
-      GDBusPropertyInfo *property_info;
-      const GVariantType *type;
-      property_info = g_dbus_interface_info_lookup_property ((GDBusInterfaceInfo *) &_phoneui_call_management_interface_info, property_name);
-      type = G_VARIANT_TYPE (property_info->signature);
-      untrusted_empty = g_variant_new_from_data (type, NULL, 0, FALSE, NULL, NULL);
-      ret = g_variant_get_normal_form (untrusted_empty);
-      g_variant_unref (untrusted_empty);
-    }
-
-  return ret;
-};
-
-static gboolean
-set_property (GDBusConnection  *connection,
-              const gchar      *sender,
-              const gchar      *object_path,
-              const gchar      *interface_name,
-              const gchar      *property_name,
-              GVariant         *value,
-              GError          **error,
-              gpointer          user_data)
-{
-  gboolean ret;
-  guint prop_id;
-  prop_id = lookup_property_id_from_property_name (property_name);
-  ret = TRUE;
-  switch (prop_id)
-    {
-    default:
-      g_set_error (error,
-                   G_DBUS_ERROR,
-                   G_DBUS_ERROR_NOT_SUPPORTED,
-                   "This implementation does not support property `%s'",
-                   property_name);
-      ret = FALSE;
-      break;
-    }
-
-  return ret;
-};
-
-static const GDBusInterfaceVTable phoneui_call_management_interface_vtable =
-{
-  handle_method_call,
-  get_property,
-  set_property,
-};
-
-/* ---------------------------------------------------------------------- */
-
-typedef struct {
-  gpointer data;
-  gsize size;
-} _VariantBlob;
-
-static void
-_variant_blob_free (_VariantBlob *blob)
-{
-  g_free (blob->data);
-  g_free (blob);
-}
-
-static _VariantBlob *
-_variant_blob_new (GVariant *value)
-{
-  _VariantBlob *blob;
-  blob = g_new0 (_VariantBlob, 1);
-  blob->size = g_variant_get_size (value);
-  blob->data = g_malloc (blob->size);
-  g_variant_store (value, blob->data);
-  return blob;
-}
-
-static gboolean
-_variant_blob_equal (_VariantBlob *a,
-                    _VariantBlob *b)
-{
-  return (a->size == b->size) && (memcmp (a->data, b->data, a->size) == 0);
-}
-/* ---------------------------------------------------------------------- */
-
-static gboolean
-emit_notifications_in_idle (gpointer user_data)
-{
-  GObject *object = G_OBJECT (user_data);
-  GDBusConnection *connection;
-  const gchar *path;
-  GHashTable *notification_queue;
-  GHashTableIter iter;
-  const gchar *property_name;
-  GVariant *value;
-  GVariantBuilder builder;
-  GVariantBuilder invalidated_builder;
-  GHashTable *pvc;
-  gboolean has_changes;
-
-  notification_queue = g_object_get_data (object, "gdbus-codegen-notification-queue");
-  path = g_object_get_data (object, "gdbus-codegen-path");
-  connection = g_object_get_data (object, "gdbus-codegen-connection");
-  pvc = g_object_get_data (object, "gdbus-codegen-pvc");
-  g_assert (notification_queue != NULL && path != NULL && connection != NULL && pvc != NULL);
-
-  g_variant_builder_init (&builder, G_VARIANT_TYPE ("a{sv}"));
-  g_variant_builder_init (&invalidated_builder, G_VARIANT_TYPE ("as"));
-  g_hash_table_iter_init (&iter, notification_queue);
-  has_changes = FALSE;
-  while (g_hash_table_iter_next (&iter, (gpointer) &property_name, (gpointer) &value))
-    {
-      _VariantBlob *cached_blob;
-      _VariantBlob *blob;
-      cached_blob = g_hash_table_lookup (pvc, property_name);
-      blob = _variant_blob_new (value);
-      if (cached_blob == NULL || !_variant_blob_equal (cached_blob, blob))
-        {
-          g_hash_table_insert (pvc, (gpointer) property_name, blob);
-          g_variant_builder_add (&builder, "{sv}", property_name, value);
-          has_changes = TRUE;
-        }
-      else
-        {
-          _variant_blob_free (blob);
-        }
-    }
-
-  if (has_changes)
-    {
-      g_dbus_connection_emit_signal (connection,
-                                     NULL,
-                                     path,
-                                     "org.freedesktop.DBus.Properties",
-                                     "PropertiesChanged",
-                                     g_variant_new ("(sa{sv}as)",
-                                                    "org.shr.phoneui.CallManagement",
-                                                    &builder,
-                                                    &invalidated_builder),
-                                     NULL);
-    }
-  else
-    {
-      g_variant_builder_clear (&builder);
-      g_variant_builder_clear (&invalidated_builder);
-    }
-
-  g_hash_table_remove_all (notification_queue);
-  g_object_set_data (object, "gdbus-codegen-notification-idle-source", NULL);
-  return FALSE;
-}
-
-static void
-queue_notification (GObject     *object,
-                    const gchar *property_name,
-                    GVariant    *value)
-{
-  GHashTable *notification_queue;
-  GSource *idle_source;
-  notification_queue = g_object_get_data (object, "gdbus-codegen-notification-queue");
-  if (notification_queue == NULL)
-    {
-      notification_queue = g_hash_table_new_full (g_str_hash, g_str_equal, NULL, (GDestroyNotify) g_variant_unref);
-      g_object_set_data_full (object, "gdbus-codegen-notification-queue", notification_queue, (GDestroyNotify) g_hash_table_unref);
-    }
-  g_hash_table_insert (notification_queue, (gpointer) property_name, (gpointer) value); /* adopts value */
-  idle_source = g_object_get_data (object, "gdbus-codegen-notification-idle-source");
-  if (idle_source == NULL)
-    {
-      idle_source = g_idle_source_new ();
-      g_source_set_priority (idle_source, G_PRIORITY_DEFAULT);
-      g_source_set_callback (idle_source,
-                             emit_notifications_in_idle,
-                             g_object_ref (object),
-                             (GDestroyNotify) g_object_unref);
-      g_source_attach (idle_source, g_main_context_get_thread_default ());
-      g_source_unref (idle_source);
-      g_object_set_data (object, "gdbus-codegen-notification-idle-source", idle_source);
-    }
-}
-
-static void
-phoneui_call_management_flush (GDBusInterface *_object)
-{
-  PhoneuiCallManagement *object = PHONEUI_CALL_MANAGEMENT (_object);
-  GSource *idle_source;
-  idle_source = g_object_get_data (G_OBJECT (object), "gdbus-codegen-notification-idle-source");
-  if (idle_source != NULL)
-    {
-      emit_notifications_in_idle (object);
-      g_source_destroy (idle_source);
-    }
-}
-
-static void
-on_notify (GObject    *object,
-           GParamSpec *pspec,
-           gpointer    user_data)
-{
-  GDBusConnection *connection;
-  const gchar *path;
-  GVariant *value;
-  const gchar *property_name;
-
-  path = g_object_get_data (object, "gdbus-codegen-path");
-  connection = g_object_get_data (object, "gdbus-codegen-connection");
-  if (connection == NULL || path == NULL)
-    goto out;
-  property_name = lookup_property_name_from_property_gname (pspec->name);
-  if (property_name == NULL)
-    goto out;
-
-  value = get_property (connection, NULL, path, "org.shr.phoneui.CallManagement", property_name, NULL, object);
-  if (value != NULL)
-    {
-      if (g_variant_is_floating (value))
-        g_variant_ref_sink (value);
-      queue_notification (object, property_name, value);
-    }
-out:
-  ;
-}
-
-static void
-on_object_unregistered (GObject *object)
-{
-  GSource *idle_source;
-  idle_source = g_object_get_data (G_OBJECT (object), "gdbus-codegen-notification-idle-source");
-  if (idle_source != NULL)
-    g_source_destroy (idle_source);
-  g_object_set_data (G_OBJECT (object), "gdbus-codegen-notification-idle-source", NULL);
-  g_object_set_data (G_OBJECT (object), "gdbus-codegen-path", NULL);
-  g_object_set_data (G_OBJECT (object), "gdbus-codegen-connection", NULL);
-  g_signal_handlers_disconnect_by_func (object, on_notify, NULL);
-}
-
-static guint
-phoneui_call_management_register_object (GDBusInterface *_object,
-           GDBusConnection *connection,
-           const gchar *object_path,
-           GError **error)
-{
-  PhoneuiCallManagement *object = PHONEUI_CALL_MANAGEMENT (_object);
-  GHashTable *pvc;
+phoneui_call_management_proxy_g_signal (GDBusProxy *proxy,
+  const gchar *sender_name,
+  const gchar *signal_name,
+  GVariant *parameters)
+{
+  _ExtendedGDBusSignalInfo *info;
+  GVariantIter iter;
+  GVariant *child;
+  GValue *paramv;
+  guint num_params;
   guint n;
-
-  pvc = g_hash_table_new_full (g_str_hash, g_str_equal, NULL, (GDestroyNotify) _variant_blob_free);
-  if (_phoneui_call_management_interface_info.properties != NULL)
-    {
-      for (n = 0; _phoneui_call_management_interface_info.properties[n] != NULL; n++)
-        {
-          GDBusPropertyInfo *prop_info = _phoneui_call_management_interface_info.properties[n];
-          if (prop_info->flags & G_DBUS_PROPERTY_INFO_FLAGS_READABLE)
-            {
-              GVariant *value;
-              value = get_property (connection, NULL, object_path, "org.shr.phoneui.CallManagement", prop_info->name, NULL, object);
-              if (value != NULL)
-                {
-                  if (g_variant_is_floating (value))
-                    g_variant_ref_sink (value);
-                  g_hash_table_insert (pvc, prop_info->name, _variant_blob_new (value));
-                  g_variant_unref (value);
-                }
-            }
-        }
-    }
-
-  g_object_set_data_full (G_OBJECT (object), "gdbus-codegen-path", (gpointer) g_strdup (object_path), g_free);
-  g_object_set_data (G_OBJECT (object), "gdbus-codegen-connection", (gpointer) connection);
-  g_object_set_data_full (G_OBJECT (object), "gdbus-codegen-pvc", (gpointer) pvc, (GDestroyNotify) g_hash_table_unref);
-  g_signal_connect (object, "notify", G_CALLBACK (on_notify), NULL);
-  return g_dbus_connection_register_object (connection,
-          object_path,
-          (GDBusInterfaceInfo *) &_phoneui_call_management_interface_info,
-          &phoneui_call_management_interface_vtable,
-          object,
-          (GDestroyNotify) on_object_unregistered,
-          error);
-}
-
-/**
- * phoneui_call_management_interface_info:
- *
- * Gets interface description for the <literal>org.shr.phoneui.CallManagement</literal> D-Bus interface.
- *
- * Returns: A #GDBusInterfaceInfo. Do not free, the object is statically allocated.
- */
-GDBusInterfaceInfo *
-phoneui_call_management_interface_info (void)
-{
-  return (GDBusInterfaceInfo *) &_phoneui_call_management_interface_info;
-}
-
-static GDBusInterfaceInfo *
-phoneui_call_management_g_dbus_interface_interface_info (GDBusInterface *object)
-{
-  return phoneui_call_management_interface_info ();
-}
-
-static GVariant *
-phoneui_call_management_get_properties (GDBusInterface *object)
-{
-  GDBusConnection *connection;
-  const gchar *object_path;
-  GVariantBuilder builder;
-  guint n;
-
-  g_variant_builder_init (&builder, G_VARIANT_TYPE ("a{sv}"));
-
-  if (_phoneui_call_management_interface_info.properties == NULL)
-    goto out;
-
-  connection = g_object_get_data (G_OBJECT (object), "gdbus-codegen-connection");
-  object_path = g_object_get_data (G_OBJECT (object), "gdbus-codegen-path");
-
-  for (n = 0; _phoneui_call_management_interface_info.properties[n] != NULL; n++)
+  guint signal_id;
+  info = (_ExtendedGDBusSignalInfo *) g_dbus_interface_info_lookup_signal ((GDBusInterfaceInfo *) &_phoneui_call_management_interface_info, signal_name);
+  if (info == NULL)
+    return;
+  num_params = g_variant_n_children (parameters);
+  paramv = g_new0 (GValue, num_params + 1);
+  g_value_init (&paramv[0], TYPE_PHONEUI_CALL_MANAGEMENT);
+  g_value_set_object (&paramv[0], proxy);
+  g_variant_iter_init (&iter, parameters);
+  n = 1;
+  while ((child = g_variant_iter_next_value (&iter)) != NULL)
     {
-      GDBusPropertyInfo *prop_info = _phoneui_call_management_interface_info.properties[n];
-      if (prop_info->flags & G_DBUS_PROPERTY_INFO_FLAGS_READABLE)
+      _ExtendedGDBusArgInfo *arg_info = (_ExtendedGDBusArgInfo *) info->parent_struct.args[n - 1];
+      if (arg_info->use_gvariant)
         {
-          GVariant *value;
-          value = get_property (connection, NULL, object_path, "org.shr.phoneui.CallManagement", prop_info->name, NULL, object);
-          if (value != NULL)
-            {
-              if (g_variant_is_floating (value))
-                g_variant_ref_sink (value);
-              g_variant_builder_add (&builder, "{sv}", prop_info->name, value);
-              g_variant_unref (value);
-            }
+          g_value_init (&paramv[n], G_TYPE_VARIANT);
+          g_value_set_variant (&paramv[n], child);
+          n++;
         }
+      else
+        g_dbus_gvariant_to_gvalue (child, &paramv[n++]);
+      g_variant_unref (child);
     }
-out:
-  return g_variant_builder_end (&builder);
-}
-
-
-/* ---------------------------------------------------------------------- */
-
-static void proxy_iface_init (PhoneuiCallManagementIface *iface);
-
-G_DEFINE_TYPE_WITH_CODE (PhoneuiCallManagementProxy, phoneui_call_management_proxy, G_TYPE_DBUS_PROXY,
-                         G_IMPLEMENT_INTERFACE (TYPE_PHONEUI_CALL_MANAGEMENT, proxy_iface_init));
-
-static void
-phoneui_call_management_proxy_init (PhoneuiCallManagementProxy *proxy)
-{
-  g_dbus_proxy_set_interface_info (G_DBUS_PROXY (proxy),
-                                   (GDBusInterfaceInfo *) &_phoneui_call_management_interface_info);
-}
-
-static void
-g_signal (GDBusProxy  *proxy,
-          const gchar *sender_name,
-          const gchar *signal_name,
-          GVariant    *parameters)
-{
-  guint signal_id;
-  signal_id = lookup_signal_id_from_signal_name (signal_name);
-  switch (signal_id)
-    {
-    }
-}
-
-static void
-phoneui_call_management_proxy_get_property (GObject      *object,
-                       guint         prop_id,
-                       GValue       *value,
-                       GParamSpec   *pspec)
-{
-  G_GNUC_UNUSED GVariant *cached;
-  switch (prop_id)
-    {
-
-    default:
-      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
-      break;
-    }
-}
-
-static void
-property_set_cb (GDBusProxy   *proxy,
-                 GAsyncResult *res,
-                 gpointer      user_data)
-{
-  const gchar *property_name = user_data;
-  GError *error;
-  GVariant *result;
-
-  error = NULL;
-  result = g_dbus_proxy_call_finish (proxy, res, &error);
-  if (result == NULL)
-    {
-      g_warning ("Error setting property `%s': %s", property_name, error->message);
-      g_error_free (error);
-    }
-  else
-    {
-      g_variant_unref (result);
-    }
-}
-
-static void
-phoneui_call_management_proxy_set_property (GObject      *object,
-                       guint         prop_id,
-                       const GValue *value,
-                       GParamSpec   *pspec)
-{
-  GVariant *new_value;
-  const gchar *property_name;
-  new_value = NULL;
-  property_name = NULL;
-  switch (prop_id)
-    {
-
-    default:
-      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
-      break;
-    }
-
-  if (new_value != NULL)
-    {
-      g_variant_ref_sink (new_value);
-      g_dbus_proxy_call (G_DBUS_PROXY (object),
-                         "org.freedesktop.DBus.Properties.Set",
-                         g_variant_new ("(ssv)",
-                                        "org.shr.phoneui.CallManagement",
-                                        property_name,
-                                        new_value),
-                         G_DBUS_CALL_FLAGS_NONE,
-                         -1,
-                         NULL,
-                         (GAsyncReadyCallback) property_set_cb,
-                         (gpointer) property_name);
-      g_variant_unref (new_value);
-    }
-
+  signal_id = g_signal_lookup (info->signal_name, TYPE_PHONEUI_CALL_MANAGEMENT);
+  g_signal_emitv (paramv, signal_id, 0, NULL);
+  for (n = 0; n < num_params + 1; n++)
+    g_value_unset (&paramv[n]);
+  g_free (paramv);
 }
 
 static void
-g_properties_changed (GDBusProxy         *proxy,
-                      GVariant           *changed_properties,
-                      const gchar* const *invalidated_properties)
+phoneui_call_management_proxy_g_properties_changed (GDBusProxy *proxy,
+  GVariant *changed_properties,
+  const gchar *const *invalidated_properties)
 {
   guint n;
   const gchar *key;
   GVariantIter *iter;
-  const gchar *gname;
-
+  _ExtendedGDBusPropertyInfo *info;
   g_variant_get (changed_properties, "a{sv}", &iter);
   while (g_variant_iter_next (iter, "{&sv}", &key, NULL))
     {
-      gname = lookup_property_gname_from_property_name (key);
-      if (gname != NULL)
-        g_object_notify (G_OBJECT (proxy), gname);
+      info = (_ExtendedGDBusPropertyInfo *) g_dbus_interface_info_lookup_property ((GDBusInterfaceInfo *) &_phoneui_call_management_interface_info, key);
+      if (info != NULL)
+        g_object_notify (G_OBJECT (proxy), info->hyphen_name);
     }
-
+  g_variant_iter_free (iter);
   for (n = 0; invalidated_properties[n] != NULL; n++)
     {
-      gname = lookup_property_gname_from_property_name (invalidated_properties[n]);
-      if (gname != NULL)
-        g_object_notify (G_OBJECT (proxy), gname);
+      info = (_ExtendedGDBusPropertyInfo *) g_dbus_interface_info_lookup_property ((GDBusInterfaceInfo *) &_phoneui_call_management_interface_info, invalidated_properties[n]);
+      if (info != NULL)
+        g_object_notify (G_OBJECT (proxy), info->hyphen_name);
     }
+}
 
+static void
+phoneui_call_management_proxy_init (PhoneuiCallManagementProxy *proxy)
+{
+  g_dbus_proxy_set_interface_info (G_DBUS_PROXY (proxy), phoneui_call_management_interface_info ());
 }
 
 static void
@@ -1664,74 +1145,62 @@ phoneui_call_management_proxy_class_init (PhoneuiCallManagementProxyClass *klass
   gobject_class->set_property = phoneui_call_management_proxy_set_property;
 
   proxy_class = G_DBUS_PROXY_CLASS (klass);
-  proxy_class->g_signal = g_signal;
-  proxy_class->g_properties_changed = g_properties_changed;
-
-}
+  proxy_class->g_signal = phoneui_call_management_proxy_g_signal;
+  proxy_class->g_properties_changed = phoneui_call_management_proxy_g_properties_changed;
 
-static void
-proxy_iface_init (PhoneuiCallManagementIface *iface)
-{
 }
 
-
 /**
  * phoneui_call_management_proxy_new:
  * @connection: A #GDBusConnection.
- * @flags: Flags used when constructing the proxy.
- * @name: A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.
+ * @flags: Flags from the #GDBusProxyFlags enumeration.
+ * @name: (allow-none): A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.
  * @object_path: An object path.
- * @cancellable: A #GCancellable or %NULL.
- * @callback: Callback function to invoke when the proxy is ready.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @callback: A #GAsyncReadyCallback to call when the request is satisfied.
  * @user_data: User data to pass to @callback.
  *
- * Like g_dbus_proxy_new() but returns a #PhoneuiCallManagementProxy.
+ * Asynchronously creates a proxy for the D-Bus interface <link linkend="gdbus-interface-org-shr-phoneui-CallManagement.top_of_page">org.shr.phoneui.CallManagement</link>. See g_dbus_proxy_new() for more details.
+ *
+ * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
+ * You can then call phoneui_call_management_proxy_new_finish() to get the result of the operation.
  *
- * This is a failable asynchronous constructor - when the proxy is ready, callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this function from. You can then call phoneui_call_management_proxy_new_finish() to get the result. See phoneui_call_management_proxy_new_sync() for the synchronous version.
+ * See phoneui_call_management_proxy_new_sync() for the synchronous, blocking version of this constructor.
  */
-void phoneui_call_management_proxy_new (GDBusConnection     *connection,
-                   GDBusProxyFlags      flags,
-                   const gchar         *name,
-                   const gchar         *object_path,
-                   GCancellable        *cancellable,
-                   GAsyncReadyCallback  callback,
-                   gpointer             user_data)
-{
-  g_async_initable_new_async (TYPE_PHONEUI_CALL_MANAGEMENT_PROXY,
-                              G_PRIORITY_DEFAULT,
-                              cancellable,
-                              callback,
-                              user_data,
-                              "g-flags", flags,
-                              "g-name", name,
-                              "g-connection", connection,
-                              "g-object-path", object_path,
-                              "g-interface-name", "org.shr.phoneui.CallManagement",
-                              NULL);
+void
+phoneui_call_management_proxy_new (
+    GDBusConnection     *connection,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GAsyncReadyCallback  callback,
+    gpointer             user_data)
+{
+  g_async_initable_new_async (TYPE_PHONEUI_CALL_MANAGEMENT_PROXY, G_PRIORITY_DEFAULT, cancellable, callback, user_data, "g-flags", flags, "g-name", name, "g-connection", connection, "g-object-path", object_path, "g-interface-name", "org.shr.phoneui.CallManagement", NULL);
 }
 
 /**
  * phoneui_call_management_proxy_new_finish:
- * @res: A #GAsyncResult obtained from the #GAsyncReadyCallback function passed to phoneui_call_management_proxy_new().
- * @error: Return location for error or %NULL.
+ * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_call_management_proxy_new().
+ * @error: Return location for error or %NULL
  *
- * Finishes creating a #PhoneuiCallManagementProxy.
+ * Finishes an operation started with phoneui_call_management_proxy_new().
  *
- * Returns: A #PhoneuiCallManagementProxy or %NULL if @error is set. Free with g_object_unref().
+ * Returns: (transfer full) (type PhoneuiCallManagementProxy): The constructed proxy object or %NULL if @error is set.
  */
-PhoneuiCallManagement *phoneui_call_management_proxy_new_finish (GAsyncResult  *res,
-                        GError       **error)
+PhoneuiCallManagement *
+phoneui_call_management_proxy_new_finish (
+    GAsyncResult        *res,
+    GError             **error)
 {
-  GObject *object;
+  GObject *ret;
   GObject *source_object;
   source_object = g_async_result_get_source_object (res);
-  g_assert (source_object != NULL);
-  object = g_async_initable_new_finish (G_ASYNC_INITABLE (source_object),
-                                        res,
-                                        error);
+  ret = g_async_initable_new_finish (G_ASYNC_INITABLE (source_object), res, error);
   g_object_unref (source_object);
-  if (object != NULL)
-    return PHONEUI_CALL_MANAGEMENT (object);
+  if (ret != NULL)
+    return PHONEUI_CALL_MANAGEMENT (ret);
   else
     return NULL;
 }
@@ -1739,37 +1208,33 @@ PhoneuiCallManagement *phoneui_call_management_proxy_new_finish (GAsyncResult  *
 /**
  * phoneui_call_management_proxy_new_sync:
  * @connection: A #GDBusConnection.
- * @flags: Flags used when constructing the proxy.
- * @name: A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.
+ * @flags: Flags from the #GDBusProxyFlags enumeration.
+ * @name: (allow-none): A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.
  * @object_path: An object path.
- * @cancellable: A #GCancellable or %NULL.
- * @error: Return location for error or %NULL.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @error: Return location for error or %NULL
  *
- * Like g_dbus_proxy_new_sync() but returns a #PhoneuiCallManagementProxy.
+ * Synchronously creates a proxy for the D-Bus interface <link linkend="gdbus-interface-org-shr-phoneui-CallManagement.top_of_page">org.shr.phoneui.CallManagement</link>. See g_dbus_proxy_new_sync() for more details.
  *
- * This is a synchronous failable constructor - the calling thread is blocked until the object is ready. See phoneui_call_management_proxy_new() for the asynchronous version.
+ * The calling thread is blocked until a reply is received.
  *
- * Returns: A #PhoneuiCallManagementProxy or %NULL if error is set. Free with g_object_unref().
+ * See phoneui_call_management_proxy_new() for the asynchronous version of this constructor.
+ *
+ * Returns: (transfer full) (type PhoneuiCallManagementProxy): The constructed proxy object or %NULL if @error is set.
  */
-PhoneuiCallManagement *phoneui_call_management_proxy_new_sync (GDBusConnection     *connection,
-                       GDBusProxyFlags      flags,
-                       const gchar         *name,
-                       const gchar         *object_path,
-                       GCancellable        *cancellable,
-                       GError             **error)
-{
-  GInitable *initable;
-  initable = g_initable_new (TYPE_PHONEUI_CALL_MANAGEMENT_PROXY,
-                             cancellable,
-                             error,
-                             "g-flags", flags,
-                             "g-name", name,
-                             "g-connection", connection,
-                             "g-object-path", object_path,
-                             "g-interface-name", "org.shr.phoneui.CallManagement",
-                             NULL);
-  if (initable != NULL)
-    return PHONEUI_CALL_MANAGEMENT (initable);
+PhoneuiCallManagement *
+phoneui_call_management_proxy_new_sync (
+    GDBusConnection     *connection,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GError             **error)
+{
+  GInitable *ret;
+  ret = g_initable_new (TYPE_PHONEUI_CALL_MANAGEMENT_PROXY, cancellable, error, "g-flags", flags, "g-name", name, "g-connection", connection, "g-object-path", object_path, "g-interface-name", "org.shr.phoneui.CallManagement", NULL);
+  if (ret != NULL)
+    return PHONEUI_CALL_MANAGEMENT (ret);
   else
     return NULL;
 }
@@ -1778,60 +1243,54 @@ PhoneuiCallManagement *phoneui_call_management_proxy_new_sync (GDBusConnection
 /**
  * phoneui_call_management_proxy_new_for_bus:
  * @bus_type: A #GBusType.
- * @flags: Flags used when constructing the proxy.
+ * @flags: Flags from the #GDBusProxyFlags enumeration.
  * @name: A bus name (well-known or unique).
  * @object_path: An object path.
- * @cancellable: A #GCancellable or %NULL.
- * @callback: Callback function to invoke when the proxy is ready.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @callback: A #GAsyncReadyCallback to call when the request is satisfied.
  * @user_data: User data to pass to @callback.
  *
- * Like g_dbus_proxy_new_for_bus() but returns a #PhoneuiCallManagementProxy.
+ * Like phoneui_call_management_proxy_new() but takes a #GBusType instead of a #GDBusConnection.
+ *
+ * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
+ * You can then call phoneui_call_management_proxy_new_for_bus_finish() to get the result of the operation.
  *
- * This is a failable asynchronous constructor - when the proxy is ready, callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this function from. You can then call phoneui_call_management_proxy_new_for_bus_finish() to get the result. See phoneui_call_management_proxy_new_for_bus_sync() for the synchronous version.
+ * See phoneui_call_management_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.
  */
-void phoneui_call_management_proxy_new_for_bus (GBusType             bus_type,
-                           GDBusProxyFlags      flags,
-                           const gchar         *name,
-                           const gchar         *object_path,
-                           GCancellable        *cancellable,
-                           GAsyncReadyCallback  callback,
-                           gpointer             user_data)
-{
-  g_async_initable_new_async (TYPE_PHONEUI_CALL_MANAGEMENT_PROXY,
-                              G_PRIORITY_DEFAULT,
-                              cancellable,
-                              callback,
-                              user_data,
-                              "g-flags", flags,
-                              "g-name", name,
-                              "g-bus-type", bus_type,
-                              "g-object-path", object_path,
-                              "g-interface-name", "org.shr.phoneui.CallManagement",
-                              NULL);
+void
+phoneui_call_management_proxy_new_for_bus (
+    GBusType             bus_type,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GAsyncReadyCallback  callback,
+    gpointer             user_data)
+{
+  g_async_initable_new_async (TYPE_PHONEUI_CALL_MANAGEMENT_PROXY, G_PRIORITY_DEFAULT, cancellable, callback, user_data, "g-flags", flags, "g-name", name, "g-bus-type", bus_type, "g-object-path", object_path, "g-interface-name", "org.shr.phoneui.CallManagement", NULL);
 }
 
 /**
  * phoneui_call_management_proxy_new_for_bus_finish:
- * @res: A #GAsyncResult obtained from the #GAsyncReadyCallback function passed to phoneui_call_management_proxy_new_for_bus().
- * @error: Return location for error or %NULL.
+ * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_call_management_proxy_new_for_bus().
+ * @error: Return location for error or %NULL
  *
- * Finishes creating a #PhoneuiCallManagementProxy.
+ * Finishes an operation started with phoneui_call_management_proxy_new_for_bus().
  *
- * Returns: A #PhoneuiCallManagementProxy or %NULL if @error is set. Free with g_object_unref().
+ * Returns: (transfer full) (type PhoneuiCallManagementProxy): The constructed proxy object or %NULL if @error is set.
  */
-PhoneuiCallManagement *phoneui_call_management_proxy_new_for_bus_finish (GAsyncResult  *res,
-                                GError       **error)
+PhoneuiCallManagement *
+phoneui_call_management_proxy_new_for_bus_finish (
+    GAsyncResult        *res,
+    GError             **error)
 {
-  GObject *object;
+  GObject *ret;
   GObject *source_object;
   source_object = g_async_result_get_source_object (res);
-  g_assert (source_object != NULL);
-  object = g_async_initable_new_finish (G_ASYNC_INITABLE (source_object),
-                                        res,
-                                        error);
+  ret = g_async_initable_new_finish (G_ASYNC_INITABLE (source_object), res, error);
   g_object_unref (source_object);
-  if (object != NULL)
-    return PHONEUI_CALL_MANAGEMENT (object);
+  if (ret != NULL)
+    return PHONEUI_CALL_MANAGEMENT (ret);
   else
     return NULL;
 }
@@ -1839,163 +1298,321 @@ PhoneuiCallManagement *phoneui_call_management_proxy_new_for_bus_finish (GAsyncR
 /**
  * phoneui_call_management_proxy_new_for_bus_sync:
  * @bus_type: A #GBusType.
- * @flags: Flags used when constructing the proxy.
+ * @flags: Flags from the #GDBusProxyFlags enumeration.
  * @name: A bus name (well-known or unique).
  * @object_path: An object path.
- * @cancellable: A #GCancellable or %NULL.
- * @error: Return location for error or %NULL.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @error: Return location for error or %NULL
  *
- * Like g_dbus_proxy_new_for_bus_sync() but returns a #PhoneuiCallManagementProxy.
+ * Like phoneui_call_management_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.
  *
- * This is a synchronous failable constructor - the calling thread is blocked until the object is ready. See phoneui_call_management_proxy_new_for_bus() for the asynchronous version.
+ * The calling thread is blocked until a reply is received.
  *
- * Returns: A #PhoneuiCallManagementProxy or %NULL if error is set. Free with g_object_unref().
+ * See phoneui_call_management_proxy_new_for_bus() for the asynchronous version of this constructor.
+ *
+ * Returns: (transfer full) (type PhoneuiCallManagementProxy): The constructed proxy object or %NULL if @error is set.
  */
-PhoneuiCallManagement *phoneui_call_management_proxy_new_for_bus_sync (GBusType             bus_type,
-                               GDBusProxyFlags      flags,
-                               const gchar         *name,
-                               const gchar         *object_path,
-                               GCancellable        *cancellable,
-                               GError             **error)
-{
-  GInitable *initable;
-  initable = g_initable_new (TYPE_PHONEUI_CALL_MANAGEMENT_PROXY,
-                             cancellable,
-                             error,
-                             "g-flags", flags,
-                             "g-name", name,
-                             "g-bus-type", bus_type,
-                             "g-object-path", object_path,
-                             "g-interface-name", "org.shr.phoneui.CallManagement",
-                             NULL);
-  if (initable != NULL)
-    return PHONEUI_CALL_MANAGEMENT (initable);
+PhoneuiCallManagement *
+phoneui_call_management_proxy_new_for_bus_sync (
+    GBusType             bus_type,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GError             **error)
+{
+  GInitable *ret;
+  ret = g_initable_new (TYPE_PHONEUI_CALL_MANAGEMENT_PROXY, cancellable, error, "g-flags", flags, "g-name", name, "g-bus-type", bus_type, "g-object-path", object_path, "g-interface-name", "org.shr.phoneui.CallManagement", NULL);
+  if (ret != NULL)
+    return PHONEUI_CALL_MANAGEMENT (ret);
   else
     return NULL;
 }
 
 
-/* ---------------------------------------------------------------------- */
+/* ------------------------------------------------------------------------ */
+
+/**
+ * PhoneuiCallManagementSkeleton:
+ *
+ * The #PhoneuiCallManagementSkeleton structure contains only private data and should only be accessed using the provided API.
+ */
+
+/**
+ * PhoneuiCallManagementSkeletonClass:
+ * @parent_class: The parent class.
+ *
+ * Class structure for #PhoneuiCallManagementSkeleton.
+ */
 
-struct _PhoneuiCallManagementStubPrivate
+struct _PhoneuiCallManagementSkeletonPrivate
 {
-  GDBusObject *enclosing_object;
-  GDBusInterfaceFlags flags;
+  GValueArray *properties;
+  GList *changed_properties;
+  GSource *changed_properties_idle_source;
+  GMainContext *context;
 };
 
-static void stub_iface_init (PhoneuiCallManagementIface *iface);
+static void
+_phoneui_call_management_skeleton_handle_method_call (
+  GDBusConnection *connection,
+  const gchar *sender,
+  const gchar *object_path,
+  const gchar *interface_name,
+  const gchar *method_name,
+  GVariant *parameters,
+  GDBusMethodInvocation *invocation,
+  gpointer user_data)
+{
+  PhoneuiCallManagementSkeleton *skeleton = PHONEUI_CALL_MANAGEMENT_SKELETON (user_data);
+  _ExtendedGDBusMethodInfo *info;
+  GVariantIter iter;
+  GVariant *child;
+  GValue *paramv;
+  guint num_params;
+  guint n;
+  guint signal_id;
+  GValue return_value = {0};
+  info = (_ExtendedGDBusMethodInfo *) g_dbus_method_invocation_get_method_info (invocation);
+  g_assert (info != NULL);
+  num_params = g_variant_n_children (parameters);
+  paramv = g_new0 (GValue, num_params + 2);
+  g_value_init (&paramv[0], TYPE_PHONEUI_CALL_MANAGEMENT);
+  g_value_set_object (&paramv[0], skeleton);
+  g_value_init (&paramv[1], G_TYPE_DBUS_METHOD_INVOCATION);
+  g_value_set_object (&paramv[1], invocation);
+  g_variant_iter_init (&iter, parameters);
+  n = 2;
+  while ((child = g_variant_iter_next_value (&iter)) != NULL)
+    {
+      _ExtendedGDBusArgInfo *arg_info = (_ExtendedGDBusArgInfo *) info->parent_struct.in_args[n - 2];
+      if (arg_info->use_gvariant)
+        {
+          g_value_init (&paramv[n], G_TYPE_VARIANT);
+          g_value_set_variant (&paramv[n], child);
+          n++;
+        }
+      else
+        g_dbus_gvariant_to_gvalue (child, &paramv[n++]);
+      g_variant_unref (child);
+    }
+  signal_id = g_signal_lookup (info->signal_name, TYPE_PHONEUI_CALL_MANAGEMENT);
+  g_value_init (&return_value, G_TYPE_BOOLEAN);
+  g_signal_emitv (paramv, signal_id, 0, &return_value);
+  if (!g_value_get_boolean (&return_value))
+    g_dbus_method_invocation_return_error (invocation, G_DBUS_ERROR, G_DBUS_ERROR_UNKNOWN_METHOD, "Method %s is not implemented on interface %s", method_name, interface_name);
+  g_value_unset (&return_value);
+  for (n = 0; n < num_params + 2; n++)
+    g_value_unset (&paramv[n]);
+  g_free (paramv);
+}
+
+static GVariant *
+_phoneui_call_management_skeleton_handle_get_property (
+  GDBusConnection *connection,
+  const gchar *sender,
+  const gchar *object_path,
+  const gchar *interface_name,
+  const gchar *property_name,
+  GError **error,
+  gpointer user_data)
+{
+  PhoneuiCallManagementSkeleton *skeleton = PHONEUI_CALL_MANAGEMENT_SKELETON (user_data);
+  GValue value = {0};
+  GParamSpec *pspec;
+  _ExtendedGDBusPropertyInfo *info;
+  GVariant *ret;
+  ret = NULL;
+  info = (_ExtendedGDBusPropertyInfo *) g_dbus_interface_info_lookup_property ((GDBusInterfaceInfo *) &_phoneui_call_management_interface_info, property_name);
+  g_assert (info != NULL);
+  pspec = g_object_class_find_property (G_OBJECT_GET_CLASS (skeleton), info->hyphen_name);
+  if (pspec == NULL)
+    {
+      g_set_error (error, G_DBUS_ERROR, G_DBUS_ERROR_INVALID_ARGS, "No property with name %s", property_name);
+    }
+  else
+    {
+      g_value_init (&value, pspec->value_type);
+      g_object_get_property (G_OBJECT (skeleton), info->hyphen_name, &value);
+      ret = g_dbus_gvalue_to_gvariant (&value, G_VARIANT_TYPE (info->parent_struct.signature));
+      g_value_unset (&value);
+    }
+  return ret;
+}
 
-G_DEFINE_TYPE_WITH_CODE (PhoneuiCallManagementStub, phoneui_call_management_stub, G_TYPE_OBJECT,
-                         G_IMPLEMENT_INTERFACE (G_TYPE_DBUS_INTERFACE, dbus_iface_init)
-                         G_IMPLEMENT_INTERFACE (TYPE_PHONEUI_CALL_MANAGEMENT, stub_iface_init));
+static gboolean
+_phoneui_call_management_skeleton_handle_set_property (
+  GDBusConnection *connection,
+  const gchar *sender,
+  const gchar *object_path,
+  const gchar *interface_name,
+  const gchar *property_name,
+  GVariant *variant,
+  GError **error,
+  gpointer user_data)
+{
+  PhoneuiCallManagementSkeleton *skeleton = PHONEUI_CALL_MANAGEMENT_SKELETON (user_data);
+  GValue value = {0};
+  GParamSpec *pspec;
+  _ExtendedGDBusPropertyInfo *info;
+  gboolean ret;
+  ret = FALSE;
+  info = (_ExtendedGDBusPropertyInfo *) g_dbus_interface_info_lookup_property ((GDBusInterfaceInfo *) &_phoneui_call_management_interface_info, property_name);
+  g_assert (info != NULL);
+  pspec = g_object_class_find_property (G_OBJECT_GET_CLASS (skeleton), info->hyphen_name);
+  if (pspec == NULL)
+    {
+      g_set_error (error, G_DBUS_ERROR, G_DBUS_ERROR_INVALID_ARGS, "No property with name %s", property_name);
+    }
+  else
+    {
+      if (info->use_gvariant)
+        g_value_set_variant (&value, variant);
+      else
+        g_dbus_gvariant_to_gvalue (variant, &value);
+      g_object_set_property (G_OBJECT (skeleton), info->hyphen_name, &value);
+      g_value_unset (&value);
+      ret = TRUE;
+    }
+  return ret;
+}
 
-static void
-phoneui_call_management_stub_finalize (GObject *object)
+static const GDBusInterfaceVTable _phoneui_call_management_skeleton_vtable =
 {
-  G_GNUC_UNUSED PhoneuiCallManagementStub *stub = (PhoneuiCallManagementStub *) object;
+  _phoneui_call_management_skeleton_handle_method_call,
+  _phoneui_call_management_skeleton_handle_get_property,
+  _phoneui_call_management_skeleton_handle_set_property
+};
 
-  if (G_OBJECT_CLASS (phoneui_call_management_stub_parent_class)->finalize != NULL)
-    G_OBJECT_CLASS (phoneui_call_management_stub_parent_class)->finalize (object);
+static GDBusInterfaceInfo *
+phoneui_call_management_skeleton_dbus_interface_get_info (GDBusInterfaceSkeleton *skeleton)
+{
+  return phoneui_call_management_interface_info ();
 }
 
-static void
-phoneui_call_management_stub_get_property (GObject      *object,
-                      guint         prop_id,
-                      GValue       *value,
-                      GParamSpec   *pspec)
+static GDBusInterfaceVTable *
+phoneui_call_management_skeleton_dbus_interface_get_vtable (GDBusInterfaceSkeleton *skeleton)
 {
-  G_GNUC_UNUSED PhoneuiCallManagementStub *stub = (PhoneuiCallManagementStub *) object;
-  switch (prop_id)
-    {
-
-    default:
-      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
-      break;
-    }
+  return (GDBusInterfaceVTable *) &_phoneui_call_management_skeleton_vtable;
 }
 
-static void
-phoneui_call_management_stub_set_property (GObject      *object,
-                      guint         prop_id,
-                      const GValue *value,
-                      GParamSpec   *pspec)
+static GVariant *
+phoneui_call_management_skeleton_dbus_interface_get_properties (GDBusInterfaceSkeleton *_skeleton)
 {
-  G_GNUC_UNUSED PhoneuiCallManagementStub *stub = (PhoneuiCallManagementStub *) object;
-  switch (prop_id)
-    {
+  PhoneuiCallManagementSkeleton *skeleton = PHONEUI_CALL_MANAGEMENT_SKELETON (_skeleton);
 
-    default:
-      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
-      break;
+  GVariantBuilder builder;
+  guint n;
+  g_variant_builder_init (&builder, G_VARIANT_TYPE ("a{sv}"));
+  if (_phoneui_call_management_interface_info.parent_struct.properties == NULL)
+    goto out;
+  for (n = 0; _phoneui_call_management_interface_info.parent_struct.properties[n] != NULL; n++)
+    {
+      GDBusPropertyInfo *info = _phoneui_call_management_interface_info.parent_struct.properties[n];
+      if (info->flags & G_DBUS_PROPERTY_INFO_FLAGS_READABLE)
+        {
+          GVariant *value;
+          value = _phoneui_call_management_skeleton_handle_get_property (g_dbus_interface_skeleton_get_connection (G_DBUS_INTERFACE_SKELETON (skeleton)), NULL, g_dbus_interface_skeleton_get_object_path (G_DBUS_INTERFACE_SKELETON (skeleton)), "org.shr.phoneui.CallManagement", info->name, NULL, skeleton);
+          if (value != NULL)
+            {
+              if (g_variant_is_floating (value))
+                g_variant_ref_sink (value);
+              g_variant_builder_add (&builder, "{sv}", info->name, value);
+              g_variant_unref (value);
+            }
+        }
     }
+out:
+  return g_variant_builder_end (&builder);
 }
 
 static void
-phoneui_call_management_stub_init (PhoneuiCallManagementStub *stub)
+phoneui_call_management_skeleton_dbus_interface_flush (GDBusInterfaceSkeleton *_skeleton)
 {
-  stub->priv = G_TYPE_INSTANCE_GET_PRIVATE (stub, TYPE_PHONEUI_CALL_MANAGEMENT_STUB, PhoneuiCallManagementStubPrivate);
 }
 
 static void
-phoneui_call_management_stub_class_init (PhoneuiCallManagementStubClass *klass)
+phoneui_call_management_skeleton_iface_init (PhoneuiCallManagementIface *iface)
 {
-  GObjectClass *gobject_class;
-
-  gobject_class = G_OBJECT_CLASS (klass);
-  gobject_class->finalize     = phoneui_call_management_stub_finalize;
-  gobject_class->get_property = phoneui_call_management_stub_get_property;
-  gobject_class->set_property = phoneui_call_management_stub_set_property;
-  g_type_class_add_private (klass, sizeof (PhoneuiCallManagementStubPrivate));
 }
 
+#define phoneui_call_management_skeleton_get_type phoneui_call_management_skeleton_get_type
+G_DEFINE_TYPE_WITH_CODE (PhoneuiCallManagementSkeleton, phoneui_call_management_skeleton, G_TYPE_DBUS_INTERFACE_SKELETON,
+                         G_IMPLEMENT_INTERFACE (TYPE_PHONEUI_CALL_MANAGEMENT, phoneui_call_management_skeleton_iface_init));
+#undef phoneui_call_management_skeleton_get_type
+
 static void
-stub_iface_init (PhoneuiCallManagementIface *iface)
-{
+phoneui_call_management_skeleton_finalize (GObject *object)
+{
+  PhoneuiCallManagementSkeleton *skeleton = PHONEUI_CALL_MANAGEMENT_SKELETON (object);
+  g_list_foreach (skeleton->priv->changed_properties, (GFunc) _changed_property_free, NULL);
+  g_list_free (skeleton->priv->changed_properties);
+  if (skeleton->priv->changed_properties_idle_source != NULL)
+    g_source_destroy (skeleton->priv->changed_properties_idle_source);
+  if (skeleton->priv->context != NULL)
+    g_main_context_unref (skeleton->priv->context);
+  G_OBJECT_CLASS (phoneui_call_management_skeleton_parent_class)->finalize (object);
 }
 
-/**
- * phoneui_call_management_stub_new:
- *
- * Creates a new stub object that can be exported via g_dbus_interface_register_object().
- *
- * Returns: A #PhoneuiCallManagementStub instance. Free with g_object_unref().
- */
-PhoneuiCallManagement *
-phoneui_call_management_stub_new (void)
-{
-  return PHONEUI_CALL_MANAGEMENT (g_object_new (TYPE_PHONEUI_CALL_MANAGEMENT_STUB, NULL));
+static void
+phoneui_call_management_skeleton_get_property (GObject      *object,
+  guint         prop_id,
+  GValue       *value,
+  GParamSpec   *pspec)
+{
+  PhoneuiCallManagementSkeleton *skeleton = PHONEUI_CALL_MANAGEMENT_SKELETON (object);
+  g_assert (prop_id - 1 >= 0 && prop_id - 1 < 0);
+  g_value_copy (&skeleton->priv->properties->values[prop_id - 1], value);
 }
 
-static GDBusObject *
-phoneui_call_management_g_dbus_interface_get_object (GDBusInterface *interface)
+static void
+phoneui_call_management_skeleton_set_property (GObject      *object,
+  guint         prop_id,
+  const GValue *value,
+  GParamSpec   *pspec)
 {
-  PhoneuiCallManagementStub *stub = G_TYPE_CHECK_INSTANCE_CAST (interface, TYPE_PHONEUI_CALL_MANAGEMENT_STUB, PhoneuiCallManagementStub);
-  if (stub->priv->enclosing_object != NULL)
-    return g_object_ref (stub->priv->enclosing_object);
-  else
-    return NULL;
 }
 
 static void
-phoneui_call_management_g_dbus_interface_set_object (GDBusInterface *interface,
-                                GDBusObject    *object)
+phoneui_call_management_skeleton_init (PhoneuiCallManagementSkeleton *skeleton)
 {
-  PhoneuiCallManagementStub *stub = G_TYPE_CHECK_INSTANCE_CAST (interface, TYPE_PHONEUI_CALL_MANAGEMENT_STUB, PhoneuiCallManagementStub);
-  stub->priv->enclosing_object = object;
+  skeleton->priv = G_TYPE_INSTANCE_GET_PRIVATE (skeleton, TYPE_PHONEUI_CALL_MANAGEMENT_SKELETON, PhoneuiCallManagementSkeletonPrivate);
+  skeleton->priv->context = g_main_context_get_thread_default ();
+  if (skeleton->priv->context != NULL)
+    g_main_context_ref (skeleton->priv->context);
 }
 
-static GDBusInterfaceFlags
-phoneui_call_management_g_dbus_interface_get_flags (GDBusInterface *interface)
+static void
+phoneui_call_management_skeleton_class_init (PhoneuiCallManagementSkeletonClass *klass)
 {
-  PhoneuiCallManagementStub *stub = G_TYPE_CHECK_INSTANCE_CAST (interface, TYPE_PHONEUI_CALL_MANAGEMENT_STUB, PhoneuiCallManagementStub);
-  return stub->priv->flags;
+  GObjectClass *gobject_class;
+  GDBusInterfaceSkeletonClass *skeleton_class;
+
+  g_type_class_add_private (klass, sizeof (PhoneuiCallManagementSkeletonPrivate));
+
+  gobject_class = G_OBJECT_CLASS (klass);
+  gobject_class->finalize = phoneui_call_management_skeleton_finalize;
+  gobject_class->get_property = phoneui_call_management_skeleton_get_property;
+  gobject_class->set_property = phoneui_call_management_skeleton_set_property;
+
+
+  skeleton_class = G_DBUS_INTERFACE_SKELETON_CLASS (klass);
+  skeleton_class->get_info = phoneui_call_management_skeleton_dbus_interface_get_info;
+  skeleton_class->get_properties = phoneui_call_management_skeleton_dbus_interface_get_properties;
+  skeleton_class->flush = phoneui_call_management_skeleton_dbus_interface_flush;
+  skeleton_class->get_vtable = phoneui_call_management_skeleton_dbus_interface_get_vtable;
 }
 
-static void
-phoneui_call_management_g_dbus_interface_set_flags (GDBusInterface      *interface,
-                               GDBusInterfaceFlags  flags)
+/**
+ * phoneui_call_management_skeleton_new:
+ *
+ * Creates a skeleton object for the D-Bus interface <link linkend="gdbus-interface-org-shr-phoneui-CallManagement.top_of_page">org.shr.phoneui.CallManagement</link>.
+ *
+ * Returns: (transfer full) (type PhoneuiCallManagementSkeleton): The skeleton object.
+ */
+PhoneuiCallManagement *
+phoneui_call_management_skeleton_new (void)
 {
-  PhoneuiCallManagementStub *stub = G_TYPE_CHECK_INSTANCE_CAST (interface, TYPE_PHONEUI_CALL_MANAGEMENT_STUB, PhoneuiCallManagementStub);
-  stub->priv->flags = flags;
+  return PHONEUI_CALL_MANAGEMENT (g_object_new (TYPE_PHONEUI_CALL_MANAGEMENT_SKELETON, NULL));
 }
 
diff --git a/src/shr-phoneuicallmanagement.h b/src/shr-phoneuicallmanagement.h
index 714a51d..d88524e 100644
--- a/src/shr-phoneuicallmanagement.h
+++ b/src/shr-phoneuicallmanagement.h
@@ -1,332 +1,260 @@
-/* File:       shr-phoneuicallmanagement.h
+/*
+ * Generated by gdbus-codegen 2.29.3. DO NOT EDIT.
  *
- * GType name: PhoneuiCallManagement
- * D-Bus name: org.shr.phoneui.CallManagement
- *
- * Generated by GDBus Binding Tool 0.1. DO NOT EDIT.
+ * The license of this code is the same as for the source it was derived from.
  */
 
-#ifndef __SHR_PHONEUI_CALL_MANAGEMENT_H__
-#define __SHR_PHONEUI_CALL_MANAGEMENT_H__
+#ifndef __SHR_PHONEUICALLMANAGEMENT_H__
+#define __SHR_PHONEUICALLMANAGEMENT_H__
 
 #include <gio/gio.h>
-#include <gdbusinterface.h>
-#include <gdbusobjectproxy.h>
-#include <gdbusproxymanager.h>
-#include <gdbusobject.h>
-#include <gdbusobjectmanager.h>
-#include <gdbuscodegen-enumtypes.h>
-#include <string.h>
-#include <shr-types.h>
 
 G_BEGIN_DECLS
 
-#define TYPE_PHONEUI_CALL_MANAGEMENT         (phoneui_call_management_get_gtype ())
-#define PHONEUI_CALL_MANAGEMENT(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_PHONEUI_CALL_MANAGEMENT, PhoneuiCallManagement))
-#define IS_PHONEUI_CALL_MANAGEMENT(o)        (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_PHONEUI_CALL_MANAGEMENT))
-#define PHONEUI_CALL_MANAGEMENT_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE((o), TYPE_PHONEUI_CALL_MANAGEMENT, PhoneuiCallManagementIface))
-
-/**
- * PhoneuiCallManagement:
- *
- * Opaque type representing a proxy or an exported object.
- */
-typedef struct _PhoneuiCallManagement PhoneuiCallManagement; /* Dummy typedef */
-/**
- * PhoneuiCallManagementIface:
- * @parent_iface: The parent interface.
- * @handle_display_incoming: Handler for the #PhoneuiCallManagement::handle-display-incoming signal.
- * @handle_hide_incoming: Handler for the #PhoneuiCallManagement::handle-hide-incoming signal.
- * @handle_display_outgoing: Handler for the #PhoneuiCallManagement::handle-display-outgoing signal.
- * @handle_hide_outgoing: Handler for the #PhoneuiCallManagement::handle-hide-outgoing signal.
- *
- * Virtual table.
- */
-typedef struct _PhoneuiCallManagementIface PhoneuiCallManagementIface;
 
-GType phoneui_call_management_get_gtype (void) G_GNUC_CONST;
-GDBusInterfaceInfo *phoneui_call_management_interface_info (void);
+/* ------------------------------------------------------------------------ */
+/* Declarations for org.shr.phoneui.CallManagement */
 
-/**
- * GET_PHONEUI_CALL_MANAGEMENT:
- * @object_proxy: A #GDBusObjectProxy.
- *
- * Convenience macro to get a #PhoneuiCallManagement interface proxy from @object_proxy.
- *
- * Returns: A #GDBusProxy object implementing the #PhoneuiCallManagement interface or %NULL if @object_proxy
- * does not implement the <literal>org.shr.phoneui.CallManagement</literal> D-Bus interface.
- * The returned reference must be released with g_object_unref().
- */
-#define GET_PHONEUI_CALL_MANAGEMENT(object_proxy) (g_dbus_object_proxy_lookup_with_typecheck (object_proxy, "org.shr.phoneui.CallManagement", TYPE_PHONEUI_CALL_MANAGEMENT))
+#define TYPE_PHONEUI_CALL_MANAGEMENT (phoneui_call_management_get_type ())
+#define PHONEUI_CALL_MANAGEMENT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_PHONEUI_CALL_MANAGEMENT, PhoneuiCallManagement))
+#define IS_PHONEUI_CALL_MANAGEMENT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_PHONEUI_CALL_MANAGEMENT))
+#define PHONEUI_CALL_MANAGEMENT_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_PHONEUI_CALL_MANAGEMENT, PhoneuiCallManagement))
 
-/**
- * PEEK_PHONEUI_CALL_MANAGEMENT:
- * @object_proxy: A #GDBusObjectProxy.
- *
- * Like GET_PHONEUI_CALL_MANAGEMENT() but doesn't increase the reference count on the returned object.
- *
- * <note><para>This macro is not safe to use outside the thread where the #GDBusProxyManager for @object_proxy was constructed in.</para></note>
- *
- * Returns: A #GDBusProxy object implementing the #PhoneuiCallManagement interface or %NULL if @object_proxy
- * does not implement the <literal>org.shr.phoneui.CallManagement</literal> D-Bus interface.
- * Do not free the returned object, it is owned by @object_proxy..
- */
-#define PEEK_PHONEUI_CALL_MANAGEMENT(object_proxy) (g_dbus_object_proxy_peek_with_typecheck (object_proxy, "org.shr.phoneui.CallManagement", TYPE_PHONEUI_CALL_MANAGEMENT))
+struct _PhoneuiCallManagement;
+typedef struct _PhoneuiCallManagement PhoneuiCallManagement;
+typedef struct _PhoneuiCallManagementIface PhoneuiCallManagementIface;
 
+struct _PhoneuiCallManagementIface
+{
+  GTypeInterface parent_iface;
 
-/* ---------------------------------------------------------------------- */
+  gboolean (*handle_display_incoming) (
+    PhoneuiCallManagement *object,
+    GDBusMethodInvocation *invocation,
+    gint call_id,
+    gint status,
+    const gchar *number);
 
-typedef struct _PhoneuiCallManagementProxy PhoneuiCallManagementProxy;
-typedef struct _PhoneuiCallManagementProxyClass PhoneuiCallManagementProxyClass;
+  gboolean (*handle_display_outgoing) (
+    PhoneuiCallManagement *object,
+    GDBusMethodInvocation *invocation,
+    gint call_id,
+    gint status,
+    const gchar *number);
 
-/**
- * PhoneuiCallManagementProxyPrivate:
- *
- * The #PhoneuiCallManagementProxyPrivate structure contains only private data.
- */
-typedef struct _PhoneuiCallManagementProxyPrivate PhoneuiCallManagementProxyPrivate;
+  gboolean (*handle_hide_incoming) (
+    PhoneuiCallManagement *object,
+    GDBusMethodInvocation *invocation,
+    gint call_id);
 
-/**
- * PhoneuiCallManagementProxy:
- *
- * The #PhoneuiCallManagementProxy structure contains only private data and
- * should only be accessed using the provided API.
- */
-struct _PhoneuiCallManagementProxy
-{
-  /*< private >*/
-  GDBusProxy parent_instance;
-  PhoneuiCallManagementProxyPrivate *priv;
-};
+  gboolean (*handle_hide_outgoing) (
+    PhoneuiCallManagement *object,
+    GDBusMethodInvocation *invocation,
+    gint call_id);
 
-/**
- * PhoneuiCallManagementProxyClass:
- *
- * Class structure for #PhoneuiCallManagementProxy.
- */
-struct _PhoneuiCallManagementProxyClass
-{
-  /*< private >*/
-  GDBusProxyClass parent_class;
 };
 
-#define TYPE_PHONEUI_CALL_MANAGEMENT_PROXY (phoneui_call_management_proxy_get_type ())
-GType phoneui_call_management_proxy_get_type (void) G_GNUC_CONST;
+GType phoneui_call_management_get_type (void) G_GNUC_CONST;
 
-void phoneui_call_management_proxy_new (GDBusConnection     *connection,
-                   GDBusProxyFlags      flags,
-                   const gchar         *name,
-                   const gchar         *object_path,
-                   GCancellable        *cancellable,
-                   GAsyncReadyCallback  callback,
-                   gpointer             user_data);
-PhoneuiCallManagement *phoneui_call_management_proxy_new_finish (GAsyncResult  *res,
-                        GError       **error);
-PhoneuiCallManagement *phoneui_call_management_proxy_new_sync (GDBusConnection     *connection,
-                       GDBusProxyFlags      flags,
-                       const gchar         *name,
-                       const gchar         *object_path,
-                       GCancellable        *cancellable,
-                       GError             **error);
-
-void phoneui_call_management_proxy_new_for_bus (GBusType             bus_type,
-                           GDBusProxyFlags      flags,
-                           const gchar         *name,
-                           const gchar         *object_path,
-                           GCancellable        *cancellable,
-                           GAsyncReadyCallback  callback,
-                           gpointer             user_data);
-PhoneuiCallManagement *phoneui_call_management_proxy_new_for_bus_finish (GAsyncResult  *res,
-                                 GError       **error);
-PhoneuiCallManagement *phoneui_call_management_proxy_new_for_bus_sync (GBusType             bus_type,
-                               GDBusProxyFlags      flags,
-                               const gchar         *name,
-                               const gchar         *object_path,
-                               GCancellable        *cancellable,
-                               GError             **error);
-
-/* ---------------------------------------------------------------------- */
-
-typedef struct _PhoneuiCallManagementStub PhoneuiCallManagementStub;
-typedef struct _PhoneuiCallManagementStubClass PhoneuiCallManagementStubClass;
-
-/**
- * PhoneuiCallManagementStubPrivate:
- *
- * The #PhoneuiCallManagementStubPrivate structure contains only private data.
- */
-typedef struct _PhoneuiCallManagementStubPrivate PhoneuiCallManagementStubPrivate;
-
-/**
- * PhoneuiCallManagementStub:
- *
- * The #PhoneuiCallManagementStub structure contains only private data and
- * should only be accessed using the provided API.
- */
-struct _PhoneuiCallManagementStub
-{
-  /*< private >*/
-  GObject parent_instance;
-  PhoneuiCallManagementStubPrivate *priv;
-};
-
-/**
- * PhoneuiCallManagementStubClass:
- *
- * Class structure for #PhoneuiCallManagementStub.
- */
-struct _PhoneuiCallManagementStubClass
-{
-  /*< private >*/
-  GObjectClass parent_class;
-};
+GDBusInterfaceInfo *phoneui_call_management_interface_info (void);
 
-#define TYPE_PHONEUI_CALL_MANAGEMENT_STUB (phoneui_call_management_stub_get_type ())
-GType phoneui_call_management_stub_get_type (void) G_GNUC_CONST;
 
-PhoneuiCallManagement *phoneui_call_management_stub_new (void);
+/* D-Bus method call completion functions: */
+void phoneui_call_management_complete_display_incoming (
+    PhoneuiCallManagement *object,
+    GDBusMethodInvocation *invocation);
 
+void phoneui_call_management_complete_hide_incoming (
+    PhoneuiCallManagement *object,
+    GDBusMethodInvocation *invocation);
 
-struct _PhoneuiCallManagementIface
-{
-  GTypeInterface parent_iface;
+void phoneui_call_management_complete_display_outgoing (
+    PhoneuiCallManagement *object,
+    GDBusMethodInvocation *invocation);
 
-  /* Signal handlers for handling D-Bus method calls: */
-  gboolean (*handle_display_incoming) (
-        PhoneuiCallManagement *object,
-        GDBusMethodInvocation *invocation,
-        gint call_id,
-        gint status,
-        const gchar *number);
-  gboolean (*handle_hide_incoming) (
-        PhoneuiCallManagement *object,
-        GDBusMethodInvocation *invocation,
-        gint call_id);
-  gboolean (*handle_display_outgoing) (
-        PhoneuiCallManagement *object,
-        GDBusMethodInvocation *invocation,
-        gint call_id,
-        gint status,
-        const gchar *number);
-  gboolean (*handle_hide_outgoing) (
-        PhoneuiCallManagement *object,
-        GDBusMethodInvocation *invocation,
-        gint call_id);
-};
+void phoneui_call_management_complete_hide_outgoing (
+    PhoneuiCallManagement *object,
+    GDBusMethodInvocation *invocation);
 
-/* C Bindings for properties */
 
 
-/* D-Bus Methods */
+/* D-Bus method calls: */
 void phoneui_call_management_call_display_incoming (
-        PhoneuiCallManagement *proxy,
-        gint call_id,
-        gint status,
-        const gchar *number,
-        GCancellable *cancellable,
-        GAsyncReadyCallback callback,
-        gpointer user_data);
+    PhoneuiCallManagement *proxy,
+    gint call_id,
+    gint status,
+    const gchar *number,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data);
 
 gboolean phoneui_call_management_call_display_incoming_finish (
-        PhoneuiCallManagement *proxy,
-        GAsyncResult *res,
-        GError **error);
+    PhoneuiCallManagement *proxy,
+    GAsyncResult *res,
+    GError **error);
 
 gboolean phoneui_call_management_call_display_incoming_sync (
-        PhoneuiCallManagement *proxy,
-        gint call_id,
-        gint status,
-        const gchar *number,
-        GCancellable *cancellable,
-        GError **error);
-
+    PhoneuiCallManagement *proxy,
+    gint call_id,
+    gint status,
+    const gchar *number,
+    GCancellable *cancellable,
+    GError **error);
 
 void phoneui_call_management_call_hide_incoming (
-        PhoneuiCallManagement *proxy,
-        gint call_id,
-        GCancellable *cancellable,
-        GAsyncReadyCallback callback,
-        gpointer user_data);
+    PhoneuiCallManagement *proxy,
+    gint call_id,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data);
 
 gboolean phoneui_call_management_call_hide_incoming_finish (
-        PhoneuiCallManagement *proxy,
-        GAsyncResult *res,
-        GError **error);
+    PhoneuiCallManagement *proxy,
+    GAsyncResult *res,
+    GError **error);
 
 gboolean phoneui_call_management_call_hide_incoming_sync (
-        PhoneuiCallManagement *proxy,
-        gint call_id,
-        GCancellable *cancellable,
-        GError **error);
-
+    PhoneuiCallManagement *proxy,
+    gint call_id,
+    GCancellable *cancellable,
+    GError **error);
 
 void phoneui_call_management_call_display_outgoing (
-        PhoneuiCallManagement *proxy,
-        gint call_id,
-        gint status,
-        const gchar *number,
-        GCancellable *cancellable,
-        GAsyncReadyCallback callback,
-        gpointer user_data);
+    PhoneuiCallManagement *proxy,
+    gint call_id,
+    gint status,
+    const gchar *number,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data);
 
 gboolean phoneui_call_management_call_display_outgoing_finish (
-        PhoneuiCallManagement *proxy,
-        GAsyncResult *res,
-        GError **error);
+    PhoneuiCallManagement *proxy,
+    GAsyncResult *res,
+    GError **error);
 
 gboolean phoneui_call_management_call_display_outgoing_sync (
-        PhoneuiCallManagement *proxy,
-        gint call_id,
-        gint status,
-        const gchar *number,
-        GCancellable *cancellable,
-        GError **error);
-
+    PhoneuiCallManagement *proxy,
+    gint call_id,
+    gint status,
+    const gchar *number,
+    GCancellable *cancellable,
+    GError **error);
 
 void phoneui_call_management_call_hide_outgoing (
-        PhoneuiCallManagement *proxy,
-        gint call_id,
-        GCancellable *cancellable,
-        GAsyncReadyCallback callback,
-        gpointer user_data);
+    PhoneuiCallManagement *proxy,
+    gint call_id,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data);
 
 gboolean phoneui_call_management_call_hide_outgoing_finish (
-        PhoneuiCallManagement *proxy,
-        GAsyncResult *res,
-        GError **error);
+    PhoneuiCallManagement *proxy,
+    GAsyncResult *res,
+    GError **error);
 
 gboolean phoneui_call_management_call_hide_outgoing_sync (
-        PhoneuiCallManagement *proxy,
-        gint call_id,
-        GCancellable *cancellable,
-        GError **error);
+    PhoneuiCallManagement *proxy,
+    gint call_id,
+    GCancellable *cancellable,
+    GError **error);
 
 
 
-/* D-Bus Methods Completion Helpers */
-void phoneui_call_management_complete_display_incoming (
-        PhoneuiCallManagement *object,
-        GDBusMethodInvocation *invocation);
+/* ---- */
 
+#define TYPE_PHONEUI_CALL_MANAGEMENT_PROXY (phoneui_call_management_proxy_get_type ())
+#define PHONEUI_CALL_MANAGEMENT_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_PHONEUI_CALL_MANAGEMENT_PROXY, PhoneuiCallManagementProxy))
+#define PHONEUI_CALL_MANAGEMENT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_PHONEUI_CALL_MANAGEMENT_PROXY, PhoneuiCallManagementProxyClass))
+#define PHONEUI_CALL_MANAGEMENT_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_PHONEUI_CALL_MANAGEMENT_PROXY, PhoneuiCallManagementProxyClass))
+#define IS_PHONEUI_CALL_MANAGEMENT_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_PHONEUI_CALL_MANAGEMENT_PROXY))
+#define IS_PHONEUI_CALL_MANAGEMENT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_PHONEUI_CALL_MANAGEMENT_PROXY))
 
-void phoneui_call_management_complete_hide_incoming (
-        PhoneuiCallManagement *object,
-        GDBusMethodInvocation *invocation);
+typedef struct _PhoneuiCallManagementProxy PhoneuiCallManagementProxy;
+typedef struct _PhoneuiCallManagementProxyClass PhoneuiCallManagementProxyClass;
+typedef struct _PhoneuiCallManagementProxyPrivate PhoneuiCallManagementProxyPrivate;
 
+struct _PhoneuiCallManagementProxy
+{
+  GDBusProxy parent_instance;
+  PhoneuiCallManagementProxyPrivate *priv;
+};
 
-void phoneui_call_management_complete_display_outgoing (
-        PhoneuiCallManagement *object,
-        GDBusMethodInvocation *invocation);
+struct _PhoneuiCallManagementProxyClass
+{
+  GDBusProxyClass parent_class;
+};
 
+GType phoneui_call_management_proxy_get_type (void) G_GNUC_CONST;
 
-void phoneui_call_management_complete_hide_outgoing (
-        PhoneuiCallManagement *object,
-        GDBusMethodInvocation *invocation);
+void phoneui_call_management_proxy_new (
+    GDBusConnection     *connection,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GAsyncReadyCallback  callback,
+    gpointer             user_data);
+PhoneuiCallManagement *phoneui_call_management_proxy_new_finish (
+    GAsyncResult        *res,
+    GError             **error);
+PhoneuiCallManagement *phoneui_call_management_proxy_new_sync (
+    GDBusConnection     *connection,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GError             **error);
+
+void phoneui_call_management_proxy_new_for_bus (
+    GBusType             bus_type,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GAsyncReadyCallback  callback,
+    gpointer             user_data);
+PhoneuiCallManagement *phoneui_call_management_proxy_new_for_bus_finish (
+    GAsyncResult        *res,
+    GError             **error);
+PhoneuiCallManagement *phoneui_call_management_proxy_new_for_bus_sync (
+    GBusType             bus_type,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GError             **error);
+
+
+/* ---- */
+
+#define TYPE_PHONEUI_CALL_MANAGEMENT_SKELETON (phoneui_call_management_skeleton_get_type ())
+#define PHONEUI_CALL_MANAGEMENT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_PHONEUI_CALL_MANAGEMENT_SKELETON, PhoneuiCallManagementSkeleton))
+#define PHONEUI_CALL_MANAGEMENT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_PHONEUI_CALL_MANAGEMENT_SKELETON, PhoneuiCallManagementSkeletonClass))
+#define PHONEUI_CALL_MANAGEMENT_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_PHONEUI_CALL_MANAGEMENT_SKELETON, PhoneuiCallManagementSkeletonClass))
+#define IS_PHONEUI_CALL_MANAGEMENT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_PHONEUI_CALL_MANAGEMENT_SKELETON))
+#define IS_PHONEUI_CALL_MANAGEMENT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_PHONEUI_CALL_MANAGEMENT_SKELETON))
+
+typedef struct _PhoneuiCallManagementSkeleton PhoneuiCallManagementSkeleton;
+typedef struct _PhoneuiCallManagementSkeletonClass PhoneuiCallManagementSkeletonClass;
+typedef struct _PhoneuiCallManagementSkeletonPrivate PhoneuiCallManagementSkeletonPrivate;
+
+struct _PhoneuiCallManagementSkeleton
+{
+  GDBusInterfaceSkeleton parent_instance;
+  PhoneuiCallManagementSkeletonPrivate *priv;
+};
+
+struct _PhoneuiCallManagementSkeletonClass
+{
+  GDBusInterfaceSkeletonClass parent_class;
+};
 
+GType phoneui_call_management_skeleton_get_type (void) G_GNUC_CONST;
 
+PhoneuiCallManagement *phoneui_call_management_skeleton_new (void);
 
-/* D-Bus Signal Emission Helpers */
 
 G_END_DECLS
 
-#endif /* __SHR_PHONEUI_CALL_MANAGEMENT_H__ */
+#endif /* __SHR_PHONEUICALLMANAGEMENT_H__ */
diff --git a/src/shr-phoneuicontacts.c b/src/shr-phoneuicontacts.c
index 67c28aa..9e72e83 100644
--- a/src/shr-phoneuicontacts.c
+++ b/src/shr-phoneuicontacts.c
@@ -1,1612 +1,1087 @@
-/* File:       shr-phoneuicontacts.c
+/*
+ * Generated by gdbus-codegen 2.29.3. DO NOT EDIT.
  *
- * GType name: PhoneuiContacts
- * D-Bus name: org.shr.phoneui.Contacts
- *
- * Generated by GDBus Binding Tool 0.1. DO NOT EDIT.
+ * The license of this code is the same as for the source it was derived from.
+ */
+
+#ifdef HAVE_CONFIG_H
+#  include "config.h"
+#endif
+
+#include "shr-phoneuicontacts.h"
+
+typedef struct
+{
+  GDBusArgInfo parent_struct;
+  gboolean use_gvariant;
+} _ExtendedGDBusArgInfo;
+
+typedef struct
+{
+  GDBusMethodInfo parent_struct;
+  const gchar *signal_name;
+} _ExtendedGDBusMethodInfo;
+
+typedef struct
+{
+  GDBusSignalInfo parent_struct;
+  const gchar *signal_name;
+} _ExtendedGDBusSignalInfo;
+
+typedef struct
+{
+  GDBusPropertyInfo parent_struct;
+  const gchar *hyphen_name;
+  gboolean use_gvariant;
+} _ExtendedGDBusPropertyInfo;
+
+typedef struct
+{
+  GDBusInterfaceInfo parent_struct;
+  const gchar *hyphen_name;
+} _ExtendedGDBusInterfaceInfo;
+
+typedef struct
+{
+  const _ExtendedGDBusPropertyInfo *info;
+  guint prop_id;
+  GValue orig_value; /* the value before the change */
+} ChangedProperty;
+
+static void
+_changed_property_free (ChangedProperty *data)
+{
+  g_value_unset (&data->orig_value);
+  g_free (data);
+}
+
+static gboolean
+_g_strv_equal0 (gchar **a, gchar **b)
+{
+  gboolean ret = FALSE;
+  guint n;
+  if (a == NULL && b == NULL)
+    {
+      ret = TRUE;
+      goto out;
+    }
+  if (a == NULL || b == NULL)
+    goto out;
+  if (g_strv_length (a) != g_strv_length (b))
+    goto out;
+  for (n = 0; a[n] != NULL; n++)
+    if (g_strcmp0 (a[n], b[n]) != 0)
+      goto out;
+  ret = TRUE;
+out:
+  return ret;
+}
+
+static gboolean
+_g_variant_equal0 (GVariant *a, GVariant *b)
+{
+  gboolean ret = FALSE;
+  if (a == NULL && b == NULL)
+    {
+      ret = TRUE;
+      goto out;
+    }
+  if (a == NULL || b == NULL)
+    goto out;
+  ret = g_variant_equal (a, b);
+out:
+  return ret;
+}
+
+G_GNUC_UNUSED static gboolean
+_g_value_equal (const GValue *a, const GValue *b)
+{
+  gboolean ret = FALSE;
+  g_assert (G_VALUE_TYPE (a) == G_VALUE_TYPE (b));
+  switch (G_VALUE_TYPE (a))
+    {
+      case G_TYPE_BOOLEAN:
+        ret = (g_value_get_boolean (a) == g_value_get_boolean (b));
+        break;
+      case G_TYPE_UCHAR:
+        ret = (g_value_get_uchar (a) == g_value_get_uchar (b));
+        break;
+      case G_TYPE_INT:
+        ret = (g_value_get_int (a) == g_value_get_int (b));
+        break;
+      case G_TYPE_UINT:
+        ret = (g_value_get_uint (a) == g_value_get_uint (b));
+        break;
+      case G_TYPE_INT64:
+        ret = (g_value_get_int64 (a) == g_value_get_int64 (b));
+        break;
+      case G_TYPE_UINT64:
+        ret = (g_value_get_uint64 (a) == g_value_get_uint64 (b));
+        break;
+      case G_TYPE_DOUBLE:
+        ret = (g_value_get_double (a) == g_value_get_double (b));
+        break;
+      case G_TYPE_STRING:
+        ret = (g_strcmp0 (g_value_get_string (a), g_value_get_string (b)) == 0);
+        break;
+      case G_TYPE_VARIANT:
+        ret = _g_variant_equal0 (g_value_get_variant (a), g_value_get_variant (b));
+        break;
+      default:
+        if (G_VALUE_TYPE (a) == G_TYPE_STRV)
+          ret = _g_strv_equal0 (g_value_get_boxed (a), g_value_get_boxed (b));
+        else
+          g_critical ("_g_value_equal() does not handle type %s", g_type_name (G_VALUE_TYPE (a)));
+        break;
+    }
+  return ret;
+}
+
+/* ------------------------------------------------------------------------
+ * Code for interface org.shr.phoneui.Contacts
+ * ------------------------------------------------------------------------
  */
 
 /**
- * SECTION:shr-phoneuicontacts
+ * SECTION:PhoneuiContacts
  * @title: PhoneuiContacts
- * @short_description: Wraps the org.shr.phoneui.Contacts D-Bus interface
- * @include: gio/gio.h
- *
- * The abstract #PhoneuiContacts interface type wraps the <literal>org.shr.phoneui.Contacts</literal> D-Bus interface. Two concrete implementations exists: #PhoneuiContactsProxy (for client-side usage) and #PhoneuiContactsStub (for service-side usage).
- *
- * This code was generated from the following D-Bus introspection XML:
- * <programlisting><![CDATA[
- * <interface name="org.shr.phoneui.Contacts">
- *   <method name="DisplayList">
- *     <annotation name="org.freedesktop.DBus.GLib.Async" value="true">
- *     </annotation>
- *     <arg type="a{sv}" name="filter" direction="in">
- *     </arg>
- *   </method>
- *   <method name="DisplayContact">
- *     <annotation name="org.freedesktop.DBus.Glib.Async" value="true">
- *     </annotation>
- *     <arg type="s" name="path" direction="in">
- *     </arg>
- *   </method>
- *   <method name="CreateContact">
- *     <annotation name="org.freedesktop.DBus.GLib.Async" value="true">
- *     </annotation>
- *     <arg type="a{sv}" name="values" direction="in">
- *     </arg>
- *     <arg type="s" name="path" direction="out">
- *     </arg>
- *   </method>
- *   <method name="EditContact">
- *     <annotation name="org.freedesktop.DBus.GLib.Async" value="true">
- *     </annotation>
- *     <arg type="s" name="path" direction="in">
- *     </arg>
- *   </method>
- * </interface>
- * ]]></programlisting>
+ * @short_description: Generated C code for the org.shr.phoneui.Contacts D-Bus interface
  *
+ * This section contains code for working with the <link linkend="gdbus-interface-org-shr-phoneui-Contacts.top_of_page">org.shr.phoneui.Contacts</link> D-Bus interface in C.
  */
 
-#include <shr-phoneuicontacts.h>
-#include <shr-types.h>
-#include <shr-bindingsprivate.h>
-#include <shr-marshallers.h>
-
-static guint phoneui_contacts_register_object (GDBusInterface *object,
-                    GDBusConnection *connection,
-                    const gchar *object_path,
-                    GError **error);
-static void phoneui_contacts_flush (GDBusInterface *object);
-static GVariant *phoneui_contacts_get_properties (GDBusInterface *object);
-static GDBusInterfaceInfo *phoneui_contacts_g_dbus_interface_interface_info (GDBusInterface *object);
-static GDBusObject *phoneui_contacts_g_dbus_interface_get_object (GDBusInterface *interface);
-static void phoneui_contacts_g_dbus_interface_set_object (GDBusInterface *interface, GDBusObject *object);
-static GDBusInterfaceFlags phoneui_contacts_g_dbus_interface_get_flags (GDBusInterface *interface);
-static void phoneui_contacts_g_dbus_interface_set_flags (GDBusInterface *interface, GDBusInterfaceFlags flags);
+/* ---- Introspection data for org.shr.phoneui.Contacts ---- */
 
-typedef PhoneuiContactsIface PhoneuiContactsInterface;
-#define phoneui_contacts_get_type phoneui_contacts_get_gtype
-G_DEFINE_INTERFACE (PhoneuiContacts, phoneui_contacts, G_TYPE_OBJECT);
-#undef phoneui_contacts_get_type
+static const _ExtendedGDBusArgInfo _phoneui_contacts_method_info_display_list_IN_ARG_filter =
+{
+  {
+    -1,
+    "filter",
+    "a{sv}",
+    NULL
+  },
+  FALSE
+};
+
+static const _ExtendedGDBusArgInfo * const _phoneui_contacts_method_info_display_list_IN_ARG_pointers[] =
+{
+  &_phoneui_contacts_method_info_display_list_IN_ARG_filter,
+  NULL
+};
 
+static const GDBusAnnotationInfo _phoneui_contacts_method_display_list_annotation_info_0 =
+{
+  -1,
+  "org.freedesktop.DBus.GLib.Async",
+  "true",
+  NULL
+};
 
-enum
+static const GDBusAnnotationInfo * const _phoneui_contacts_method_display_list_annotation_info_pointers[] =
 {
-  _0_SIGNAL,
-  __DISPLAY_LIST_METHOD,
-  __DISPLAY_CONTACT_METHOD,
-  __CREATE_CONTACT_METHOD,
-  __EDIT_CONTACT_METHOD,
-  __LAST_SIGNAL
+  &_phoneui_contacts_method_display_list_annotation_info_0,
+  NULL
 };
 
-static guint signals[__LAST_SIGNAL] = {0};
+static const _ExtendedGDBusMethodInfo _phoneui_contacts_method_info_display_list =
+{
+  {
+    -1,
+    "DisplayList",
+    (GDBusArgInfo **) &_phoneui_contacts_method_info_display_list_IN_ARG_pointers,
+    NULL,
+    (GDBusAnnotationInfo **) &_phoneui_contacts_method_display_list_annotation_info_pointers
+  },
+  "handle-display-list"
+};
 
+static const _ExtendedGDBusArgInfo _phoneui_contacts_method_info_display_contact_IN_ARG_path =
+{
+  {
+    -1,
+    "path",
+    "s",
+    NULL
+  },
+  FALSE
+};
 
-enum
+static const _ExtendedGDBusArgInfo * const _phoneui_contacts_method_info_display_contact_IN_ARG_pointers[] =
 {
-  PROP_0,
+  &_phoneui_contacts_method_info_display_contact_IN_ARG_path,
+  NULL
 };
 
-/* ------------------------------------------------------------------------- */
+static const GDBusAnnotationInfo _phoneui_contacts_method_display_contact_annotation_info_0 =
+{
+  -1,
+  "org.freedesktop.DBus.Glib.Async",
+  "true",
+  NULL
+};
 
-/* Various lookup tables */
+static const GDBusAnnotationInfo * const _phoneui_contacts_method_display_contact_annotation_info_pointers[] =
+{
+  &_phoneui_contacts_method_display_contact_annotation_info_0,
+  NULL
+};
 
-static GHashTable *_method_name_to_id = NULL;
-static GHashTable *_signal_name_to_id = NULL;
-static GHashTable *_property_name_to_id = NULL;
-static GHashTable *_property_gname_to_name = NULL;
-static GHashTable *_property_name_to_gname = NULL;
+static const _ExtendedGDBusMethodInfo _phoneui_contacts_method_info_display_contact =
+{
+  {
+    -1,
+    "DisplayContact",
+    (GDBusArgInfo **) &_phoneui_contacts_method_info_display_contact_IN_ARG_pointers,
+    NULL,
+    (GDBusAnnotationInfo **) &_phoneui_contacts_method_display_contact_annotation_info_pointers
+  },
+  "handle-display-contact"
+};
 
+static const _ExtendedGDBusArgInfo _phoneui_contacts_method_info_create_contact_IN_ARG_values =
+{
+  {
+    -1,
+    "values",
+    "a{sv}",
+    NULL
+  },
+  FALSE
+};
 
-static guint
-lookup_method_id_from_method_name (const gchar *method_name)
+static const _ExtendedGDBusArgInfo * const _phoneui_contacts_method_info_create_contact_IN_ARG_pointers[] =
 {
-  return GPOINTER_TO_UINT (g_hash_table_lookup (_method_name_to_id, method_name));
-}
+  &_phoneui_contacts_method_info_create_contact_IN_ARG_values,
+  NULL
+};
 
-static guint
-lookup_signal_id_from_signal_name (const gchar *signal_name)
+static const _ExtendedGDBusArgInfo _phoneui_contacts_method_info_create_contact_OUT_ARG_path =
 {
-  return GPOINTER_TO_UINT (g_hash_table_lookup (_signal_name_to_id, signal_name));
-}
+  {
+    -1,
+    "path",
+    "s",
+    NULL
+  },
+  FALSE
+};
 
-static guint
-lookup_property_id_from_property_name (const gchar *property_name)
+static const _ExtendedGDBusArgInfo * const _phoneui_contacts_method_info_create_contact_OUT_ARG_pointers[] =
 {
-  return GPOINTER_TO_UINT (g_hash_table_lookup (_property_name_to_id, property_name));
-}
+  &_phoneui_contacts_method_info_create_contact_OUT_ARG_path,
+  NULL
+};
 
-static const gchar *
-lookup_property_name_from_property_gname (const gchar *property_gname)
+static const GDBusAnnotationInfo _phoneui_contacts_method_create_contact_annotation_info_0 =
 {
-  return g_hash_table_lookup (_property_gname_to_name, property_gname);
-}
+  -1,
+  "org.freedesktop.DBus.GLib.Async",
+  "true",
+  NULL
+};
 
-static const gchar *
-lookup_property_gname_from_property_name (const gchar *property_name)
+static const GDBusAnnotationInfo * const _phoneui_contacts_method_create_contact_annotation_info_pointers[] =
 {
-  return g_hash_table_lookup (_property_name_to_gname, property_name);
-}
+  &_phoneui_contacts_method_create_contact_annotation_info_0,
+  NULL
+};
 
-/* ------------------------------------------------------------------------- */
-static void dbus_iface_init (GDBusInterfaceIface *iface)
-{
-  iface->get_info = phoneui_contacts_g_dbus_interface_interface_info;
-  iface->get_properties = phoneui_contacts_get_properties;
-  iface->flush = phoneui_contacts_flush;
-  iface->register_object = phoneui_contacts_register_object;
-  iface->set_object = phoneui_contacts_g_dbus_interface_set_object;
-  iface->get_object = phoneui_contacts_g_dbus_interface_get_object;
-  iface->set_flags = phoneui_contacts_g_dbus_interface_set_flags;
-  iface->get_flags = phoneui_contacts_g_dbus_interface_get_flags;
-}
+static const _ExtendedGDBusMethodInfo _phoneui_contacts_method_info_create_contact =
+{
+  {
+    -1,
+    "CreateContact",
+    (GDBusArgInfo **) &_phoneui_contacts_method_info_create_contact_IN_ARG_pointers,
+    (GDBusArgInfo **) &_phoneui_contacts_method_info_create_contact_OUT_ARG_pointers,
+    (GDBusAnnotationInfo **) &_phoneui_contacts_method_create_contact_annotation_info_pointers
+  },
+  "handle-create-contact"
+};
 
-static void
-phoneui_contacts_default_init (PhoneuiContactsIface *iface)
+static const _ExtendedGDBusArgInfo _phoneui_contacts_method_info_edit_contact_IN_ARG_path =
+{
+  {
+    -1,
+    "path",
+    "s",
+    NULL
+  },
+  FALSE
+};
+
+static const _ExtendedGDBusArgInfo * const _phoneui_contacts_method_info_edit_contact_IN_ARG_pointers[] =
+{
+  &_phoneui_contacts_method_info_edit_contact_IN_ARG_path,
+  NULL
+};
+
+static const GDBusAnnotationInfo _phoneui_contacts_method_edit_contact_annotation_info_0 =
+{
+  -1,
+  "org.freedesktop.DBus.GLib.Async",
+  "true",
+  NULL
+};
+
+static const GDBusAnnotationInfo * const _phoneui_contacts_method_edit_contact_annotation_info_pointers[] =
+{
+  &_phoneui_contacts_method_edit_contact_annotation_info_0,
+  NULL
+};
+
+static const _ExtendedGDBusMethodInfo _phoneui_contacts_method_info_edit_contact =
+{
+  {
+    -1,
+    "EditContact",
+    (GDBusArgInfo **) &_phoneui_contacts_method_info_edit_contact_IN_ARG_pointers,
+    NULL,
+    (GDBusAnnotationInfo **) &_phoneui_contacts_method_edit_contact_annotation_info_pointers
+  },
+  "handle-edit-contact"
+};
+
+static const _ExtendedGDBusMethodInfo * const _phoneui_contacts_method_info_pointers[] =
+{
+  &_phoneui_contacts_method_info_display_list,
+  &_phoneui_contacts_method_info_display_contact,
+  &_phoneui_contacts_method_info_create_contact,
+  &_phoneui_contacts_method_info_edit_contact,
+  NULL
+};
+
+static const _ExtendedGDBusInterfaceInfo _phoneui_contacts_interface_info =
 {
+  {
+    -1,
+    "org.shr.phoneui.Contacts",
+    (GDBusMethodInfo **) &_phoneui_contacts_method_info_pointers,
+    NULL,
+    NULL,
+    NULL
+  },
+  "phoneui-contacts",
+};
+
+
+/**
+ * phoneui_contacts_interface_info:
+ *
+ * Gets a machine-readable description of the <link linkend="gdbus-interface-org-shr-phoneui-Contacts.top_of_page">org.shr.phoneui.Contacts</link> D-Bus interface.
+ *
+ * Returns: (transfer none): A #GDBusInterfaceInfo. Do not free.
+ */
+GDBusInterfaceInfo *
+phoneui_contacts_interface_info (void)
+{
+  return (GDBusInterfaceInfo *) &_phoneui_contacts_interface_info;
+}
+
+
 
-  /* Build lookup structures */
-  _method_name_to_id = g_hash_table_new (g_str_hash, g_str_equal);
-  _signal_name_to_id = g_hash_table_new (g_str_hash, g_str_equal);
-  _property_name_to_id = g_hash_table_new (g_str_hash, g_str_equal);
-  _property_gname_to_name = g_hash_table_new (g_str_hash, g_str_equal);
-  _property_name_to_gname = g_hash_table_new (g_str_hash, g_str_equal);
-  g_hash_table_insert (_method_name_to_id, "DisplayList", GUINT_TO_POINTER (__DISPLAY_LIST_METHOD));
-  g_hash_table_insert (_method_name_to_id, "DisplayContact", GUINT_TO_POINTER (__DISPLAY_CONTACT_METHOD));
-  g_hash_table_insert (_method_name_to_id, "CreateContact", GUINT_TO_POINTER (__CREATE_CONTACT_METHOD));
-  g_hash_table_insert (_method_name_to_id, "EditContact", GUINT_TO_POINTER (__EDIT_CONTACT_METHOD));
+/**
+ * PhoneuiContacts:
+ *
+ * Abstract interface type for the D-Bus interface <link linkend="gdbus-interface-org-shr-phoneui-Contacts.top_of_page">org.shr.phoneui.Contacts</link>.
+ */
 
-  /* GObject signals definitions for D-Bus signals: */
+/**
+ * PhoneuiContactsIface:
+ * @parent_iface: The parent interface.
+ * @handle_create_contact: Handler for the #PhoneuiContacts::handle-create-contact signal.
+ * @handle_display_contact: Handler for the #PhoneuiContacts::handle-display-contact signal.
+ * @handle_display_list: Handler for the #PhoneuiContacts::handle-display-list signal.
+ * @handle_edit_contact: Handler for the #PhoneuiContacts::handle-edit-contact signal.
+ *
+ * Virtual table for the D-Bus interface <link linkend="gdbus-interface-org-shr-phoneui-Contacts.top_of_page">org.shr.phoneui.Contacts</link>.
+ */
 
-  /* GObject signals definitions for D-Bus methods: */
+static void
+phoneui_contacts_default_init (PhoneuiContactsIface *iface)
+{
+  /* GObject signals for incoming D-Bus method calls: */
   /**
    * PhoneuiContacts::handle-display-list:
-   * @object: The exported object emitting the signal.
-   * @invocation: A #GDBusMethodInvocation object that can be used to return a value or error.
-   * @filter: Parameter.
-   *
-   * On exported objects, this signal is emitted when a remote process (identified by @invocation) invokes the <literal>org.shr.phoneui.Contacts.DisplayList()</literal> D-Bus method on @object. Use phoneui_contacts_complete_display_list() to return a value or g_dbus_method_invocation_return_error() to return an error.
+   * @object: A #PhoneuiContacts.
+   * @invocation: A #GDBusMethodInvocation.
+   * @filter: Argument passed by remote caller.
    *
-   * The signal is emitted in the
-   * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
-   * of the thread that @object was registered in.
+   * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-shr-phoneui-Contacts.DisplayList">DisplayList()</link> D-Bus method.
    *
-   * On proxies, this signal is never emitted.
+   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phoneui_contacts_complete_display_list() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
    *
-   * Returns: %TRUE if you want to handle the method call (will stop further handlers from being called), %FALSE otherwise.
+   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
    */
-  signals[__DISPLAY_LIST_METHOD] =
-    g_signal_new ("handle-display-list",
-                  G_TYPE_FROM_INTERFACE (iface),
-                  G_SIGNAL_RUN_LAST,
-                  G_STRUCT_OFFSET (PhoneuiContactsIface, handle_display_list),
-                  g_signal_accumulator_true_handled,
-                  NULL,
-                  _shr_gdbus_cclosure_marshaller_BOOLEAN__OBJECT_VARIANT,
-                  G_TYPE_BOOLEAN,
-                  2,
-                  G_TYPE_DBUS_METHOD_INVOCATION,
-                  G_TYPE_VARIANT);
+  g_signal_new ("handle-display-list",
+    G_TYPE_FROM_INTERFACE (iface),
+    G_SIGNAL_RUN_LAST,
+    G_STRUCT_OFFSET (PhoneuiContactsIface, handle_display_list),
+    g_signal_accumulator_true_handled,
+    NULL,
+    g_cclosure_marshal_generic,
+    G_TYPE_BOOLEAN,
+    2,
+    G_TYPE_DBUS_METHOD_INVOCATION, G_TYPE_VARIANT);
+
   /**
    * PhoneuiContacts::handle-display-contact:
-   * @object: The exported object emitting the signal.
-   * @invocation: A #GDBusMethodInvocation object that can be used to return a value or error.
-   * @path: Parameter.
-   *
-   * On exported objects, this signal is emitted when a remote process (identified by @invocation) invokes the <literal>org.shr.phoneui.Contacts.DisplayContact()</literal> D-Bus method on @object. Use phoneui_contacts_complete_display_contact() to return a value or g_dbus_method_invocation_return_error() to return an error.
+   * @object: A #PhoneuiContacts.
+   * @invocation: A #GDBusMethodInvocation.
+   * @path: Argument passed by remote caller.
    *
-   * The signal is emitted in the
-   * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
-   * of the thread that @object was registered in.
+   * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-shr-phoneui-Contacts.DisplayContact">DisplayContact()</link> D-Bus method.
    *
-   * On proxies, this signal is never emitted.
+   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phoneui_contacts_complete_display_contact() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
    *
-   * Returns: %TRUE if you want to handle the method call (will stop further handlers from being called), %FALSE otherwise.
+   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
    */
-  signals[__DISPLAY_CONTACT_METHOD] =
-    g_signal_new ("handle-display-contact",
-                  G_TYPE_FROM_INTERFACE (iface),
-                  G_SIGNAL_RUN_LAST,
-                  G_STRUCT_OFFSET (PhoneuiContactsIface, handle_display_contact),
-                  g_signal_accumulator_true_handled,
-                  NULL,
-                  _shr_gdbus_cclosure_marshaller_BOOLEAN__OBJECT_STRING,
-                  G_TYPE_BOOLEAN,
-                  2,
-                  G_TYPE_DBUS_METHOD_INVOCATION,
-                  G_TYPE_STRING);
+  g_signal_new ("handle-display-contact",
+    G_TYPE_FROM_INTERFACE (iface),
+    G_SIGNAL_RUN_LAST,
+    G_STRUCT_OFFSET (PhoneuiContactsIface, handle_display_contact),
+    g_signal_accumulator_true_handled,
+    NULL,
+    g_cclosure_marshal_generic,
+    G_TYPE_BOOLEAN,
+    2,
+    G_TYPE_DBUS_METHOD_INVOCATION, G_TYPE_STRING);
+
   /**
    * PhoneuiContacts::handle-create-contact:
-   * @object: The exported object emitting the signal.
-   * @invocation: A #GDBusMethodInvocation object that can be used to return a value or error.
-   * @values: Parameter.
-   *
-   * On exported objects, this signal is emitted when a remote process (identified by @invocation) invokes the <literal>org.shr.phoneui.Contacts.CreateContact()</literal> D-Bus method on @object. Use phoneui_contacts_complete_create_contact() to return a value or g_dbus_method_invocation_return_error() to return an error.
+   * @object: A #PhoneuiContacts.
+   * @invocation: A #GDBusMethodInvocation.
+   * @values: Argument passed by remote caller.
    *
-   * The signal is emitted in the
-   * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
-   * of the thread that @object was registered in.
+   * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-shr-phoneui-Contacts.CreateContact">CreateContact()</link> D-Bus method.
    *
-   * On proxies, this signal is never emitted.
+   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phoneui_contacts_complete_create_contact() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
    *
-   * Returns: %TRUE if you want to handle the method call (will stop further handlers from being called), %FALSE otherwise.
+   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
    */
-  signals[__CREATE_CONTACT_METHOD] =
-    g_signal_new ("handle-create-contact",
-                  G_TYPE_FROM_INTERFACE (iface),
-                  G_SIGNAL_RUN_LAST,
-                  G_STRUCT_OFFSET (PhoneuiContactsIface, handle_create_contact),
-                  g_signal_accumulator_true_handled,
-                  NULL,
-                  _shr_gdbus_cclosure_marshaller_BOOLEAN__OBJECT_VARIANT,
-                  G_TYPE_BOOLEAN,
-                  2,
-                  G_TYPE_DBUS_METHOD_INVOCATION,
-                  G_TYPE_VARIANT);
+  g_signal_new ("handle-create-contact",
+    G_TYPE_FROM_INTERFACE (iface),
+    G_SIGNAL_RUN_LAST,
+    G_STRUCT_OFFSET (PhoneuiContactsIface, handle_create_contact),
+    g_signal_accumulator_true_handled,
+    NULL,
+    g_cclosure_marshal_generic,
+    G_TYPE_BOOLEAN,
+    2,
+    G_TYPE_DBUS_METHOD_INVOCATION, G_TYPE_VARIANT);
+
   /**
    * PhoneuiContacts::handle-edit-contact:
-   * @object: The exported object emitting the signal.
-   * @invocation: A #GDBusMethodInvocation object that can be used to return a value or error.
-   * @path: Parameter.
-   *
-   * On exported objects, this signal is emitted when a remote process (identified by @invocation) invokes the <literal>org.shr.phoneui.Contacts.EditContact()</literal> D-Bus method on @object. Use phoneui_contacts_complete_edit_contact() to return a value or g_dbus_method_invocation_return_error() to return an error.
+   * @object: A #PhoneuiContacts.
+   * @invocation: A #GDBusMethodInvocation.
+   * @path: Argument passed by remote caller.
    *
-   * The signal is emitted in the
-   * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
-   * of the thread that @object was registered in.
+   * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-shr-phoneui-Contacts.EditContact">EditContact()</link> D-Bus method.
    *
-   * On proxies, this signal is never emitted.
+   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phoneui_contacts_complete_edit_contact() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
    *
-   * Returns: %TRUE if you want to handle the method call (will stop further handlers from being called), %FALSE otherwise.
+   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
    */
-  signals[__EDIT_CONTACT_METHOD] =
-    g_signal_new ("handle-edit-contact",
-                  G_TYPE_FROM_INTERFACE (iface),
-                  G_SIGNAL_RUN_LAST,
-                  G_STRUCT_OFFSET (PhoneuiContactsIface, handle_edit_contact),
-                  g_signal_accumulator_true_handled,
-                  NULL,
-                  _shr_gdbus_cclosure_marshaller_BOOLEAN__OBJECT_STRING,
-                  G_TYPE_BOOLEAN,
-                  2,
-                  G_TYPE_DBUS_METHOD_INVOCATION,
-                  G_TYPE_STRING);
-
-  /* GObject property definitions for D-Bus properties: */
-}
+  g_signal_new ("handle-edit-contact",
+    G_TYPE_FROM_INTERFACE (iface),
+    G_SIGNAL_RUN_LAST,
+    G_STRUCT_OFFSET (PhoneuiContactsIface, handle_edit_contact),
+    g_signal_accumulator_true_handled,
+    NULL,
+    g_cclosure_marshal_generic,
+    G_TYPE_BOOLEAN,
+    2,
+    G_TYPE_DBUS_METHOD_INVOCATION, G_TYPE_STRING);
 
+}
 
-/* C Bindings for properties */
+typedef PhoneuiContactsIface PhoneuiContactsInterface;
+G_DEFINE_INTERFACE (PhoneuiContacts, phoneui_contacts, G_TYPE_OBJECT);
 
 /**
  * phoneui_contacts_call_display_list:
- * @proxy: A #PhoneuiContacts.
- * @filter: Method parameter.
- * @cancellable: A #GCancellable or %NULL.
- * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL if you don't care about the result of the method invocation.
- * @user_data: Data to pass to @callback.
- *
- * Invokes the <literal>org.shr.phoneui.Contacts.DisplayList()</literal>
- * D-Bus method on the remote object represented by @proxy.
- *
- * This is an asynchronous method. When the operation is finished,
- * callback will be invoked in the
- * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
- * of the thread you are calling this method from. You can then call
- * phoneui_contacts_call_display_list_finish() to get the result of the operation.
- * See phoneui_contacts_call_display_list_sync() for the synchronous version of this method.
+ * @proxy: A #PhoneuiContactsProxy.
+ * @filter: Argument to pass with the method invocation.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL.
+ * @user_data: User data to pass to @callback.
+ *
+ * Asynchronously invokes the <link linkend="gdbus-method-org-shr-phoneui-Contacts.DisplayList">DisplayList()</link> D-Bus method on @proxy.
+ * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
+ * You can then call phoneui_contacts_call_display_list_finish() to get the result of the operation.
+ *
+ * See phoneui_contacts_call_display_list_sync() for the synchronous, blocking version of this method.
  */
-void phoneui_contacts_call_display_list (
-        PhoneuiContacts *proxy,
-        GVariant *filter,
-        GCancellable *cancellable,
-        GAsyncReadyCallback callback,
-        gpointer user_data)
-{
-  GVariant *_params;
-  _params = g_variant_new ("(*)",
-                           filter);
+void
+phoneui_contacts_call_display_list (
+    PhoneuiContacts *proxy,
+    GVariant *filter,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data)
+{
   g_dbus_proxy_call (G_DBUS_PROXY (proxy),
-                     "DisplayList",
-                     _params,
-                     G_DBUS_CALL_FLAGS_NONE,
-                     -1,
-                     cancellable,
-                     callback,
-                     user_data);
+    "DisplayList",
+    g_variant_new ("(@a{sv})",
+                   filter),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    callback,
+    user_data);
 }
 
 /**
  * phoneui_contacts_call_display_list_finish:
- * @proxy: A #PhoneuiContacts.
- * @res: A #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_contacts_call_display_list().
+ * @proxy: A #PhoneuiContactsProxy.
+ * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_contacts_call_display_list().
  * @error: Return location for error or %NULL.
  *
- * Finishes invoking the <literal>org.shr.phoneui.Contacts.DisplayList()</literal>
- * D-Bus method on the remote object represented by @proxy.
+ * Finishes an operation started with phoneui_contacts_call_display_list().
  *
- * Returns: %TRUE if the call succeeded, %FALSE if @error is set.
+ * Returns: %TRUE if the call succeded, %FALSE if @error is set.
  */
-gboolean phoneui_contacts_call_display_list_finish (
-        PhoneuiContacts *proxy,
-        GAsyncResult *res,
-        GError **error)
-{
-  gboolean _ret = FALSE;
-  GVariant *_result;
-  _result = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
-  if (_result == NULL)
+gboolean
+phoneui_contacts_call_display_list_finish (
+    PhoneuiContacts *proxy,
+    GAsyncResult *res,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
+  if (_ret == NULL)
     goto _out;
-  g_variant_unref (_result);
-  _ret = TRUE;
+  g_variant_get (_ret,
+                 "()");
+  g_variant_unref (_ret);
 _out:
-  return _ret;
+  return _ret != NULL;
 }
 
 /**
  * phoneui_contacts_call_display_list_sync:
- * @proxy: A #PhoneuiContacts.
- * @filter: Method parameter.
- * @cancellable: A #GCancellable or %NULL.
+ * @proxy: A #PhoneuiContactsProxy.
+ * @filter: Argument to pass with the method invocation.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
  * @error: Return location for error or %NULL.
  *
- * Synchronously invokes the <literal>org.shr.phoneui.Contacts.DisplayList()</literal>
- * D-Bus method on the remote object represented by @proxy.
- * The calling thread is blocked until a reply is received. See
- * phoneui_contacts_call_display_list() for the asynchronous version of this method.
+ * Synchronously invokes the <link linkend="gdbus-method-org-shr-phoneui-Contacts.DisplayList">DisplayList()</link> D-Bus method on @proxy. The calling thread is blocked until a reply is received.
  *
- * Returns: %TRUE if the call succeeded, %FALSE if @error is set.
+ * See phoneui_contacts_call_display_list() for the asynchronous version of this method.
+ *
+ * Returns: %TRUE if the call succeded, %FALSE if @error is set.
  */
-gboolean phoneui_contacts_call_display_list_sync (
-        PhoneuiContacts *proxy,
-        GVariant *filter,
-        GCancellable *cancellable,
-        GError **error)
-{
-  gboolean _ret = FALSE;
-  GVariant *_params;
-  GVariant *_result;
-  _params = g_variant_new ("(*)",
-                           filter);
-  _result = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
-                                   "DisplayList",
-                                   _params,
-                                   G_DBUS_CALL_FLAGS_NONE,
-                                   -1,
-                                   cancellable,
-                                   error);
-  if (_result == NULL)
+gboolean
+phoneui_contacts_call_display_list_sync (
+    PhoneuiContacts *proxy,
+    GVariant *filter,
+    GCancellable *cancellable,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
+    "DisplayList",
+    g_variant_new ("(@a{sv})",
+                   filter),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    error);
+  if (_ret == NULL)
     goto _out;
-  g_variant_unref (_result);
-  _ret = TRUE;
+  g_variant_get (_ret,
+                 "()");
+  g_variant_unref (_ret);
 _out:
-  return _ret;
+  return _ret != NULL;
 }
 
-
 /**
  * phoneui_contacts_call_display_contact:
- * @proxy: A #PhoneuiContacts.
- * @path: Method parameter.
- * @cancellable: A #GCancellable or %NULL.
- * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL if you don't care about the result of the method invocation.
- * @user_data: Data to pass to @callback.
- *
- * Invokes the <literal>org.shr.phoneui.Contacts.DisplayContact()</literal>
- * D-Bus method on the remote object represented by @proxy.
- *
- * This is an asynchronous method. When the operation is finished,
- * callback will be invoked in the
- * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
- * of the thread you are calling this method from. You can then call
- * phoneui_contacts_call_display_contact_finish() to get the result of the operation.
- * See phoneui_contacts_call_display_contact_sync() for the synchronous version of this method.
+ * @proxy: A #PhoneuiContactsProxy.
+ * @path: Argument to pass with the method invocation.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL.
+ * @user_data: User data to pass to @callback.
+ *
+ * Asynchronously invokes the <link linkend="gdbus-method-org-shr-phoneui-Contacts.DisplayContact">DisplayContact()</link> D-Bus method on @proxy.
+ * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
+ * You can then call phoneui_contacts_call_display_contact_finish() to get the result of the operation.
+ *
+ * See phoneui_contacts_call_display_contact_sync() for the synchronous, blocking version of this method.
  */
-void phoneui_contacts_call_display_contact (
-        PhoneuiContacts *proxy,
-        const gchar *path,
-        GCancellable *cancellable,
-        GAsyncReadyCallback callback,
-        gpointer user_data)
-{
-  GVariant *_params;
-  _params = g_variant_new ("(s)",
-                           path);
+void
+phoneui_contacts_call_display_contact (
+    PhoneuiContacts *proxy,
+    const gchar *path,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data)
+{
   g_dbus_proxy_call (G_DBUS_PROXY (proxy),
-                     "DisplayContact",
-                     _params,
-                     G_DBUS_CALL_FLAGS_NONE,
-                     -1,
-                     cancellable,
-                     callback,
-                     user_data);
+    "DisplayContact",
+    g_variant_new ("(s)",
+                   path),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    callback,
+    user_data);
 }
 
 /**
  * phoneui_contacts_call_display_contact_finish:
- * @proxy: A #PhoneuiContacts.
- * @res: A #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_contacts_call_display_contact().
+ * @proxy: A #PhoneuiContactsProxy.
+ * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_contacts_call_display_contact().
  * @error: Return location for error or %NULL.
  *
- * Finishes invoking the <literal>org.shr.phoneui.Contacts.DisplayContact()</literal>
- * D-Bus method on the remote object represented by @proxy.
+ * Finishes an operation started with phoneui_contacts_call_display_contact().
  *
- * Returns: %TRUE if the call succeeded, %FALSE if @error is set.
+ * Returns: %TRUE if the call succeded, %FALSE if @error is set.
  */
-gboolean phoneui_contacts_call_display_contact_finish (
-        PhoneuiContacts *proxy,
-        GAsyncResult *res,
-        GError **error)
-{
-  gboolean _ret = FALSE;
-  GVariant *_result;
-  _result = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
-  if (_result == NULL)
+gboolean
+phoneui_contacts_call_display_contact_finish (
+    PhoneuiContacts *proxy,
+    GAsyncResult *res,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
+  if (_ret == NULL)
     goto _out;
-  g_variant_unref (_result);
-  _ret = TRUE;
+  g_variant_get (_ret,
+                 "()");
+  g_variant_unref (_ret);
 _out:
-  return _ret;
+  return _ret != NULL;
 }
 
 /**
  * phoneui_contacts_call_display_contact_sync:
- * @proxy: A #PhoneuiContacts.
- * @path: Method parameter.
- * @cancellable: A #GCancellable or %NULL.
+ * @proxy: A #PhoneuiContactsProxy.
+ * @path: Argument to pass with the method invocation.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
  * @error: Return location for error or %NULL.
  *
- * Synchronously invokes the <literal>org.shr.phoneui.Contacts.DisplayContact()</literal>
- * D-Bus method on the remote object represented by @proxy.
- * The calling thread is blocked until a reply is received. See
- * phoneui_contacts_call_display_contact() for the asynchronous version of this method.
+ * Synchronously invokes the <link linkend="gdbus-method-org-shr-phoneui-Contacts.DisplayContact">DisplayContact()</link> D-Bus method on @proxy. The calling thread is blocked until a reply is received.
  *
- * Returns: %TRUE if the call succeeded, %FALSE if @error is set.
+ * See phoneui_contacts_call_display_contact() for the asynchronous version of this method.
+ *
+ * Returns: %TRUE if the call succeded, %FALSE if @error is set.
  */
-gboolean phoneui_contacts_call_display_contact_sync (
-        PhoneuiContacts *proxy,
-        const gchar *path,
-        GCancellable *cancellable,
-        GError **error)
-{
-  gboolean _ret = FALSE;
-  GVariant *_params;
-  GVariant *_result;
-  _params = g_variant_new ("(s)",
-                           path);
-  _result = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
-                                   "DisplayContact",
-                                   _params,
-                                   G_DBUS_CALL_FLAGS_NONE,
-                                   -1,
-                                   cancellable,
-                                   error);
-  if (_result == NULL)
+gboolean
+phoneui_contacts_call_display_contact_sync (
+    PhoneuiContacts *proxy,
+    const gchar *path,
+    GCancellable *cancellable,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
+    "DisplayContact",
+    g_variant_new ("(s)",
+                   path),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    error);
+  if (_ret == NULL)
     goto _out;
-  g_variant_unref (_result);
-  _ret = TRUE;
+  g_variant_get (_ret,
+                 "()");
+  g_variant_unref (_ret);
 _out:
-  return _ret;
+  return _ret != NULL;
 }
 
-
 /**
  * phoneui_contacts_call_create_contact:
- * @proxy: A #PhoneuiContacts.
- * @values: Method parameter.
- * @cancellable: A #GCancellable or %NULL.
- * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL if you don't care about the result of the method invocation.
- * @user_data: Data to pass to @callback.
- *
- * Invokes the <literal>org.shr.phoneui.Contacts.CreateContact()</literal>
- * D-Bus method on the remote object represented by @proxy.
- *
- * This is an asynchronous method. When the operation is finished,
- * callback will be invoked in the
- * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
- * of the thread you are calling this method from. You can then call
- * phoneui_contacts_call_create_contact_finish() to get the result of the operation.
- * See phoneui_contacts_call_create_contact_sync() for the synchronous version of this method.
+ * @proxy: A #PhoneuiContactsProxy.
+ * @values: Argument to pass with the method invocation.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL.
+ * @user_data: User data to pass to @callback.
+ *
+ * Asynchronously invokes the <link linkend="gdbus-method-org-shr-phoneui-Contacts.CreateContact">CreateContact()</link> D-Bus method on @proxy.
+ * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
+ * You can then call phoneui_contacts_call_create_contact_finish() to get the result of the operation.
+ *
+ * See phoneui_contacts_call_create_contact_sync() for the synchronous, blocking version of this method.
  */
-void phoneui_contacts_call_create_contact (
-        PhoneuiContacts *proxy,
-        GVariant *values,
-        GCancellable *cancellable,
-        GAsyncReadyCallback callback,
-        gpointer user_data)
-{
-  GVariant *_params;
-  _params = g_variant_new ("(*)",
-                           values);
+void
+phoneui_contacts_call_create_contact (
+    PhoneuiContacts *proxy,
+    GVariant *values,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data)
+{
   g_dbus_proxy_call (G_DBUS_PROXY (proxy),
-                     "CreateContact",
-                     _params,
-                     G_DBUS_CALL_FLAGS_NONE,
-                     -1,
-                     cancellable,
-                     callback,
-                     user_data);
+    "CreateContact",
+    g_variant_new ("(@a{sv})",
+                   values),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    callback,
+    user_data);
 }
 
 /**
  * phoneui_contacts_call_create_contact_finish:
- * @proxy: A #PhoneuiContacts.
- * @out_path: Return location for out parameter or %NULL. Free with g_free().
- * @res: A #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_contacts_call_create_contact().
+ * @proxy: A #PhoneuiContactsProxy.
+ * @out_path: (out): Return location for return parameter or %NULL to ignore.
+ * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_contacts_call_create_contact().
  * @error: Return location for error or %NULL.
  *
- * Finishes invoking the <literal>org.shr.phoneui.Contacts.CreateContact()</literal>
- * D-Bus method on the remote object represented by @proxy.
+ * Finishes an operation started with phoneui_contacts_call_create_contact().
  *
- * Returns: %TRUE if the call succeeded, %FALSE if @error is set.
+ * Returns: %TRUE if the call succeded, %FALSE if @error is set.
  */
-gboolean phoneui_contacts_call_create_contact_finish (
-        PhoneuiContacts *proxy,
-        gchar **out_path,
-        GAsyncResult *res,
-        GError **error)
-{
-  gboolean _ret = FALSE;
-  GVariant *_result;
-  _result = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
-  if (_result == NULL)
+gboolean
+phoneui_contacts_call_create_contact_finish (
+    PhoneuiContacts *proxy,
+    gchar **out_path,
+    GAsyncResult *res,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
+  if (_ret == NULL)
     goto _out;
-  {
-    g_variant_get (_result,
-                   "(s)",
-                   out_path);
-  }
-  g_variant_unref (_result);
-  _ret = TRUE;
+  g_variant_get (_ret,
+                 "(s)",
+                 out_path);
+  g_variant_unref (_ret);
 _out:
-  return _ret;
+  return _ret != NULL;
 }
 
 /**
  * phoneui_contacts_call_create_contact_sync:
- * @proxy: A #PhoneuiContacts.
- * @values: Method parameter.
- * @out_path: Return location for out parameter or %NULL. Free with g_free().
- * @cancellable: A #GCancellable or %NULL.
+ * @proxy: A #PhoneuiContactsProxy.
+ * @values: Argument to pass with the method invocation.
+ * @out_path: (out): Return location for return parameter or %NULL to ignore.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
  * @error: Return location for error or %NULL.
  *
- * Synchronously invokes the <literal>org.shr.phoneui.Contacts.CreateContact()</literal>
- * D-Bus method on the remote object represented by @proxy.
- * The calling thread is blocked until a reply is received. See
- * phoneui_contacts_call_create_contact() for the asynchronous version of this method.
+ * Synchronously invokes the <link linkend="gdbus-method-org-shr-phoneui-Contacts.CreateContact">CreateContact()</link> D-Bus method on @proxy. The calling thread is blocked until a reply is received.
+ *
+ * See phoneui_contacts_call_create_contact() for the asynchronous version of this method.
  *
- * Returns: %TRUE if the call succeeded, %FALSE if @error is set.
+ * Returns: %TRUE if the call succeded, %FALSE if @error is set.
  */
-gboolean phoneui_contacts_call_create_contact_sync (
-        PhoneuiContacts *proxy,
-        GVariant *values,
-        gchar **out_path,
-        GCancellable *cancellable,
-        GError **error)
-{
-  gboolean _ret = FALSE;
-  GVariant *_params;
-  GVariant *_result;
-  _params = g_variant_new ("(*)",
-                           values);
-  _result = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
-                                   "CreateContact",
-                                   _params,
-                                   G_DBUS_CALL_FLAGS_NONE,
-                                   -1,
-                                   cancellable,
-                                   error);
-  if (_result == NULL)
+gboolean
+phoneui_contacts_call_create_contact_sync (
+    PhoneuiContacts *proxy,
+    GVariant *values,
+    gchar **out_path,
+    GCancellable *cancellable,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
+    "CreateContact",
+    g_variant_new ("(@a{sv})",
+                   values),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    error);
+  if (_ret == NULL)
     goto _out;
-  {
-    g_variant_get (_result,
-                   "(s)",
-                   out_path);
-  }
-  g_variant_unref (_result);
-  _ret = TRUE;
+  g_variant_get (_ret,
+                 "(s)",
+                 out_path);
+  g_variant_unref (_ret);
 _out:
-  return _ret;
+  return _ret != NULL;
 }
 
-
 /**
  * phoneui_contacts_call_edit_contact:
- * @proxy: A #PhoneuiContacts.
- * @path: Method parameter.
- * @cancellable: A #GCancellable or %NULL.
- * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL if you don't care about the result of the method invocation.
- * @user_data: Data to pass to @callback.
- *
- * Invokes the <literal>org.shr.phoneui.Contacts.EditContact()</literal>
- * D-Bus method on the remote object represented by @proxy.
- *
- * This is an asynchronous method. When the operation is finished,
- * callback will be invoked in the
- * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
- * of the thread you are calling this method from. You can then call
- * phoneui_contacts_call_edit_contact_finish() to get the result of the operation.
- * See phoneui_contacts_call_edit_contact_sync() for the synchronous version of this method.
+ * @proxy: A #PhoneuiContactsProxy.
+ * @path: Argument to pass with the method invocation.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL.
+ * @user_data: User data to pass to @callback.
+ *
+ * Asynchronously invokes the <link linkend="gdbus-method-org-shr-phoneui-Contacts.EditContact">EditContact()</link> D-Bus method on @proxy.
+ * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
+ * You can then call phoneui_contacts_call_edit_contact_finish() to get the result of the operation.
+ *
+ * See phoneui_contacts_call_edit_contact_sync() for the synchronous, blocking version of this method.
  */
-void phoneui_contacts_call_edit_contact (
-        PhoneuiContacts *proxy,
-        const gchar *path,
-        GCancellable *cancellable,
-        GAsyncReadyCallback callback,
-        gpointer user_data)
-{
-  GVariant *_params;
-  _params = g_variant_new ("(s)",
-                           path);
+void
+phoneui_contacts_call_edit_contact (
+    PhoneuiContacts *proxy,
+    const gchar *path,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data)
+{
   g_dbus_proxy_call (G_DBUS_PROXY (proxy),
-                     "EditContact",
-                     _params,
-                     G_DBUS_CALL_FLAGS_NONE,
-                     -1,
-                     cancellable,
-                     callback,
-                     user_data);
+    "EditContact",
+    g_variant_new ("(s)",
+                   path),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    callback,
+    user_data);
 }
 
 /**
  * phoneui_contacts_call_edit_contact_finish:
- * @proxy: A #PhoneuiContacts.
- * @res: A #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_contacts_call_edit_contact().
+ * @proxy: A #PhoneuiContactsProxy.
+ * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_contacts_call_edit_contact().
  * @error: Return location for error or %NULL.
  *
- * Finishes invoking the <literal>org.shr.phoneui.Contacts.EditContact()</literal>
- * D-Bus method on the remote object represented by @proxy.
+ * Finishes an operation started with phoneui_contacts_call_edit_contact().
  *
- * Returns: %TRUE if the call succeeded, %FALSE if @error is set.
+ * Returns: %TRUE if the call succeded, %FALSE if @error is set.
  */
-gboolean phoneui_contacts_call_edit_contact_finish (
-        PhoneuiContacts *proxy,
-        GAsyncResult *res,
-        GError **error)
-{
-  gboolean _ret = FALSE;
-  GVariant *_result;
-  _result = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
-  if (_result == NULL)
+gboolean
+phoneui_contacts_call_edit_contact_finish (
+    PhoneuiContacts *proxy,
+    GAsyncResult *res,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
+  if (_ret == NULL)
     goto _out;
-  g_variant_unref (_result);
-  _ret = TRUE;
+  g_variant_get (_ret,
+                 "()");
+  g_variant_unref (_ret);
 _out:
-  return _ret;
+  return _ret != NULL;
 }
 
 /**
  * phoneui_contacts_call_edit_contact_sync:
- * @proxy: A #PhoneuiContacts.
- * @path: Method parameter.
- * @cancellable: A #GCancellable or %NULL.
+ * @proxy: A #PhoneuiContactsProxy.
+ * @path: Argument to pass with the method invocation.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
  * @error: Return location for error or %NULL.
  *
- * Synchronously invokes the <literal>org.shr.phoneui.Contacts.EditContact()</literal>
- * D-Bus method on the remote object represented by @proxy.
- * The calling thread is blocked until a reply is received. See
- * phoneui_contacts_call_edit_contact() for the asynchronous version of this method.
+ * Synchronously invokes the <link linkend="gdbus-method-org-shr-phoneui-Contacts.EditContact">EditContact()</link> D-Bus method on @proxy. The calling thread is blocked until a reply is received.
  *
- * Returns: %TRUE if the call succeeded, %FALSE if @error is set.
+ * See phoneui_contacts_call_edit_contact() for the asynchronous version of this method.
+ *
+ * Returns: %TRUE if the call succeded, %FALSE if @error is set.
  */
-gboolean phoneui_contacts_call_edit_contact_sync (
-        PhoneuiContacts *proxy,
-        const gchar *path,
-        GCancellable *cancellable,
-        GError **error)
-{
-  gboolean _ret = FALSE;
-  GVariant *_params;
-  GVariant *_result;
-  _params = g_variant_new ("(s)",
-                           path);
-  _result = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
-                                   "EditContact",
-                                   _params,
-                                   G_DBUS_CALL_FLAGS_NONE,
-                                   -1,
-                                   cancellable,
-                                   error);
-  if (_result == NULL)
+gboolean
+phoneui_contacts_call_edit_contact_sync (
+    PhoneuiContacts *proxy,
+    const gchar *path,
+    GCancellable *cancellable,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
+    "EditContact",
+    g_variant_new ("(s)",
+                   path),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    error);
+  if (_ret == NULL)
     goto _out;
-  g_variant_unref (_result);
-  _ret = TRUE;
+  g_variant_get (_ret,
+                 "()");
+  g_variant_unref (_ret);
 _out:
-  return _ret;
+  return _ret != NULL;
 }
 
-
 /**
  * phoneui_contacts_complete_display_list:
  * @object: A #PhoneuiContacts.
- * @invocation: A #GDBusMethodInvocation.
+ * @invocation: (transfer full): A #GDBusMethodInvocation.
  *
- * Completes handling the <literal>org.shr.phoneui.Contacts.DisplayList()</literal>
- * D-Bus method invocation by returning a value.
- *
- * If you want to return an error, use g_dbus_method_invocation_return_error()
- * or similar instead.
+ * Helper function used in service implementations to finish handling invocations of the <link linkend="gdbus-method-org-shr-phoneui-Contacts.DisplayList">DisplayList()</link> D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.
  *
  * This method will free @invocation, you cannot use it afterwards.
  */
-void phoneui_contacts_complete_display_list (
-        PhoneuiContacts *object,
-        GDBusMethodInvocation *invocation)
+void
+phoneui_contacts_complete_display_list (
+    PhoneuiContacts *object,
+    GDBusMethodInvocation *invocation)
 {
-  g_dbus_method_invocation_return_value (invocation, NULL);
+  g_dbus_method_invocation_return_value (invocation,
+    g_variant_new ("()"));
 }
 
-
 /**
  * phoneui_contacts_complete_display_contact:
  * @object: A #PhoneuiContacts.
- * @invocation: A #GDBusMethodInvocation.
+ * @invocation: (transfer full): A #GDBusMethodInvocation.
  *
- * Completes handling the <literal>org.shr.phoneui.Contacts.DisplayContact()</literal>
- * D-Bus method invocation by returning a value.
- *
- * If you want to return an error, use g_dbus_method_invocation_return_error()
- * or similar instead.
+ * Helper function used in service implementations to finish handling invocations of the <link linkend="gdbus-method-org-shr-phoneui-Contacts.DisplayContact">DisplayContact()</link> D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.
  *
  * This method will free @invocation, you cannot use it afterwards.
  */
-void phoneui_contacts_complete_display_contact (
-        PhoneuiContacts *object,
-        GDBusMethodInvocation *invocation)
+void
+phoneui_contacts_complete_display_contact (
+    PhoneuiContacts *object,
+    GDBusMethodInvocation *invocation)
 {
-  g_dbus_method_invocation_return_value (invocation, NULL);
+  g_dbus_method_invocation_return_value (invocation,
+    g_variant_new ("()"));
 }
 
-
 /**
  * phoneui_contacts_complete_create_contact:
  * @object: A #PhoneuiContacts.
- * @invocation: A #GDBusMethodInvocation.
- * @path: Value to return.
+ * @invocation: (transfer full): A #GDBusMethodInvocation.
+ * @path: Parameter to return.
  *
- * Completes handling the <literal>org.shr.phoneui.Contacts.CreateContact()</literal>
- * D-Bus method invocation by returning a value.
- *
- * If you want to return an error, use g_dbus_method_invocation_return_error()
- * or similar instead.
+ * Helper function used in service implementations to finish handling invocations of the <link linkend="gdbus-method-org-shr-phoneui-Contacts.CreateContact">CreateContact()</link> D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.
  *
  * This method will free @invocation, you cannot use it afterwards.
  */
-void phoneui_contacts_complete_create_contact (
-        PhoneuiContacts *object,
-        GDBusMethodInvocation *invocation,
-        const gchar *path)
-{
-  GVariant *_params;
-  _params = g_variant_new ("(s)",
-                           path);
-  g_dbus_method_invocation_return_value (invocation, _params);
+void
+phoneui_contacts_complete_create_contact (
+    PhoneuiContacts *object,
+    GDBusMethodInvocation *invocation,
+    const gchar *path)
+{
+  g_dbus_method_invocation_return_value (invocation,
+    g_variant_new ("(s)",
+                   path));
 }
 
-
 /**
  * phoneui_contacts_complete_edit_contact:
  * @object: A #PhoneuiContacts.
- * @invocation: A #GDBusMethodInvocation.
+ * @invocation: (transfer full): A #GDBusMethodInvocation.
  *
- * Completes handling the <literal>org.shr.phoneui.Contacts.EditContact()</literal>
- * D-Bus method invocation by returning a value.
- *
- * If you want to return an error, use g_dbus_method_invocation_return_error()
- * or similar instead.
+ * Helper function used in service implementations to finish handling invocations of the <link linkend="gdbus-method-org-shr-phoneui-Contacts.EditContact">EditContact()</link> D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.
  *
  * This method will free @invocation, you cannot use it afterwards.
  */
-void phoneui_contacts_complete_edit_contact (
-        PhoneuiContacts *object,
-        GDBusMethodInvocation *invocation)
+void
+phoneui_contacts_complete_edit_contact (
+    PhoneuiContacts *object,
+    GDBusMethodInvocation *invocation)
 {
-  g_dbus_method_invocation_return_value (invocation, NULL);
+  g_dbus_method_invocation_return_value (invocation,
+    g_variant_new ("()"));
 }
 
+/* ------------------------------------------------------------------------ */
 
-static const GDBusArgInfo phoneui_contacts_method_in_DisplayList_filter =
-{
-  -1,
-  "filter",
-  "a{sv}",
-  (GDBusAnnotationInfo **) NULL
-};
-static const GDBusArgInfo * const phoneui_contacts_method_in_DisplayList_arg_pointers[] =
-{
-  &phoneui_contacts_method_in_DisplayList_filter,
-  NULL
-};
-
-static const GDBusAnnotationInfo DisplayList_method_annotations_annotation_0 = {
-  -1,
-  "org.freedesktop.DBus.GLib.Async",
-  "true",
-};
-
-static const GDBusAnnotationInfo *DisplayList_method_annotations[] = {
-  &DisplayList_method_annotations_annotation_0,
-  NULL
-};
+/**
+ * PhoneuiContactsProxy:
+ *
+ * The #PhoneuiContactsProxy structure contains only private data and should only be accessed using the provided API.
+ */
 
-static const GDBusMethodInfo phoneui_contacts_method_DisplayList =
-{
-  -1,
-  "DisplayList",
-  (GDBusArgInfo **) &phoneui_contacts_method_in_DisplayList_arg_pointers,
-  (GDBusArgInfo **) NULL,
-  (GDBusAnnotationInfo **) DisplayList_method_annotations,
-};
+/**
+ * PhoneuiContactsProxyClass:
+ * @parent_class: The parent class.
+ *
+ * Class structure for #PhoneuiContactsProxy.
+ */
 
-static const GDBusArgInfo phoneui_contacts_method_in_DisplayContact_path =
-{
-  -1,
-  "path",
-  "s",
-  (GDBusAnnotationInfo **) NULL
-};
-static const GDBusArgInfo * const phoneui_contacts_method_in_DisplayContact_arg_pointers[] =
+static void
+phoneui_contacts_proxy_iface_init (PhoneuiContactsIface *iface)
 {
-  &phoneui_contacts_method_in_DisplayContact_path,
-  NULL
-};
-
-static const GDBusAnnotationInfo DisplayContact_method_annotations_annotation_0 = {
-  -1,
-  "org.freedesktop.DBus.Glib.Async",
-  "true",
-};
+}
 
-static const GDBusAnnotationInfo *DisplayContact_method_annotations[] = {
-  &DisplayContact_method_annotations_annotation_0,
-  NULL
-};
+#define phoneui_contacts_proxy_get_type phoneui_contacts_proxy_get_type
+G_DEFINE_TYPE_WITH_CODE (PhoneuiContactsProxy, phoneui_contacts_proxy, G_TYPE_DBUS_PROXY,
+                         G_IMPLEMENT_INTERFACE (TYPE_PHONEUI_CONTACTS, phoneui_contacts_proxy_iface_init));
+#undef phoneui_contacts_proxy_get_type
 
-static const GDBusMethodInfo phoneui_contacts_method_DisplayContact =
+static void
+phoneui_contacts_proxy_get_property (GObject      *object,
+  guint         prop_id,
+  GValue       *value,
+  GParamSpec   *pspec)
 {
-  -1,
-  "DisplayContact",
-  (GDBusArgInfo **) &phoneui_contacts_method_in_DisplayContact_arg_pointers,
-  (GDBusArgInfo **) NULL,
-  (GDBusAnnotationInfo **) DisplayContact_method_annotations,
-};
-
-static const GDBusArgInfo phoneui_contacts_method_in_CreateContact_values =
-{
-  -1,
-  "values",
-  "a{sv}",
-  (GDBusAnnotationInfo **) NULL
-};
-static const GDBusArgInfo * const phoneui_contacts_method_in_CreateContact_arg_pointers[] =
-{
-  &phoneui_contacts_method_in_CreateContact_values,
-  NULL
-};
-
-static const GDBusArgInfo phoneui_contacts_method_out_CreateContact_path =
-{
-  -1,
-  "path",
-  "s",
-  (GDBusAnnotationInfo **) NULL
-};
-static const GDBusArgInfo * const phoneui_contacts_method_out_CreateContact_arg_pointers[] =
-{
-  &phoneui_contacts_method_out_CreateContact_path,
-  NULL
-};
-
-static const GDBusAnnotationInfo CreateContact_method_annotations_annotation_0 = {
-  -1,
-  "org.freedesktop.DBus.GLib.Async",
-  "true",
-};
-
-static const GDBusAnnotationInfo *CreateContact_method_annotations[] = {
-  &CreateContact_method_annotations_annotation_0,
-  NULL
-};
-
-static const GDBusMethodInfo phoneui_contacts_method_CreateContact =
-{
-  -1,
-  "CreateContact",
-  (GDBusArgInfo **) &phoneui_contacts_method_in_CreateContact_arg_pointers,
-  (GDBusArgInfo **) &phoneui_contacts_method_out_CreateContact_arg_pointers,
-  (GDBusAnnotationInfo **) CreateContact_method_annotations,
-};
-
-static const GDBusArgInfo phoneui_contacts_method_in_EditContact_path =
-{
-  -1,
-  "path",
-  "s",
-  (GDBusAnnotationInfo **) NULL
-};
-static const GDBusArgInfo * const phoneui_contacts_method_in_EditContact_arg_pointers[] =
-{
-  &phoneui_contacts_method_in_EditContact_path,
-  NULL
-};
-
-static const GDBusAnnotationInfo EditContact_method_annotations_annotation_0 = {
-  -1,
-  "org.freedesktop.DBus.GLib.Async",
-  "true",
-};
-
-static const GDBusAnnotationInfo *EditContact_method_annotations[] = {
-  &EditContact_method_annotations_annotation_0,
-  NULL
-};
-
-static const GDBusMethodInfo phoneui_contacts_method_EditContact =
-{
-  -1,
-  "EditContact",
-  (GDBusArgInfo **) &phoneui_contacts_method_in_EditContact_arg_pointers,
-  (GDBusArgInfo **) NULL,
-  (GDBusAnnotationInfo **) EditContact_method_annotations,
-};
-
-static const GDBusMethodInfo * const phoneui_contacts_method_info_pointers[] =
-{
-  &phoneui_contacts_method_DisplayList,
-  &phoneui_contacts_method_DisplayContact,
-  &phoneui_contacts_method_CreateContact,
-  &phoneui_contacts_method_EditContact,
-  NULL
-};
-
-static const GDBusInterfaceInfo _phoneui_contacts_interface_info =
-{
-  -1,
-  "org.shr.phoneui.Contacts",
-  (GDBusMethodInfo **) &phoneui_contacts_method_info_pointers,
-  (GDBusSignalInfo **) NULL,
-  (GDBusPropertyInfo **) NULL,
-  (GDBusAnnotationInfo **) NULL
-};
+}
 
 static void
-handle_method_call_real (GDBusConnection       *connection,
-                         const gchar           *sender,
-                         const gchar           *object_path,
-                         const gchar           *interface_name,
-                         const gchar           *method_name,
-                         GVariant              *parameters,
-                         GDBusMethodInvocation *invocation,
-                         gpointer               user_data)
-{
-  guint method_id;
-  method_id = lookup_method_id_from_method_name (method_name);
-  switch (method_id)
-    {
-    case __DISPLAY_LIST_METHOD:
-      {
-        PhoneuiContacts *object = PHONEUI_CONTACTS (user_data);
-        gboolean handled;
-        GVariant *arg_filter;
-        g_variant_get (parameters,
-                       "(*)",
-                       &arg_filter);
-        g_signal_emit (object,
-                       signals[method_id],
-                       0, invocation, arg_filter, &handled);
-        g_variant_unref ((gpointer) arg_filter);
-        if (!handled)
-          goto not_implemented;
-      }
-      break;
-
-    case __DISPLAY_CONTACT_METHOD:
-      {
-        PhoneuiContacts *object = PHONEUI_CONTACTS (user_data);
-        gboolean handled;
-        const gchar *arg_path;
-        g_variant_get (parameters,
-                       "(&s)",
-                       &arg_path);
-        g_signal_emit (object,
-                       signals[method_id],
-                       0, invocation, arg_path, &handled);
-        if (!handled)
-          goto not_implemented;
-      }
-      break;
-
-    case __CREATE_CONTACT_METHOD:
-      {
-        PhoneuiContacts *object = PHONEUI_CONTACTS (user_data);
-        gboolean handled;
-        GVariant *arg_values;
-        g_variant_get (parameters,
-                       "(*)",
-                       &arg_values);
-        g_signal_emit (object,
-                       signals[method_id],
-                       0, invocation, arg_values, &handled);
-        g_variant_unref ((gpointer) arg_values);
-        if (!handled)
-          goto not_implemented;
-      }
-      break;
-
-    case __EDIT_CONTACT_METHOD:
-      {
-        PhoneuiContacts *object = PHONEUI_CONTACTS (user_data);
-        gboolean handled;
-        const gchar *arg_path;
-        g_variant_get (parameters,
-                       "(&s)",
-                       &arg_path);
-        g_signal_emit (object,
-                       signals[method_id],
-                       0, invocation, arg_path, &handled);
-        if (!handled)
-          goto not_implemented;
-      }
-      break;
-
-    default:
-not_implemented:
-      g_dbus_method_invocation_return_error (invocation,
-                                             G_DBUS_ERROR,
-                                             G_DBUS_ERROR_NOT_SUPPORTED,
-                                             "Method `%s' is not implemented",
-                                             method_name);
-      break;
-    }
-};
-
-typedef struct
-{
-  GDBusMethodInvocation *invocation;
-  gpointer               user_data;
-} HandleMethodInThreadData;
-
-static gboolean
-handle_method_call_in_thread_func (GIOSchedulerJob *job,
-                                   GCancellable    *cancellable,
-                                   gpointer         user_data)
-{
-  HandleMethodInThreadData *data = user_data;
-
-  handle_method_call_real (g_dbus_method_invocation_get_connection (data->invocation),
-                           g_dbus_method_invocation_get_sender (data->invocation),
-                           g_dbus_method_invocation_get_object_path (data->invocation),
-                           g_dbus_method_invocation_get_interface_name (data->invocation),
-                           g_dbus_method_invocation_get_method_name (data->invocation),
-                           g_dbus_method_invocation_get_parameters (data->invocation),
-                           data->invocation,
-                           data->user_data);
-  return FALSE; /* job is complete */
-}
-
-static void
-handle_method_call (GDBusConnection       *connection,
-                    const gchar           *sender,
-                    const gchar           *object_path,
-                    const gchar           *interface_name,
-                    const gchar           *method_name,
-                    GVariant              *parameters,
-                    GDBusMethodInvocation *invocation,
-                    gpointer               user_data)
-{
-  GDBusInterface *interface = G_DBUS_INTERFACE (user_data);
-  GDBusInterfaceFlags flags;
-
-  flags = g_dbus_interface_get_flags (interface);
-  if (flags & G_DBUS_INTERFACE_FLAGS_RUN_IN_THREAD)
-    {
-      HandleMethodInThreadData *data;
-      data = g_new0 (HandleMethodInThreadData, 1);
-      data->invocation = invocation;
-      data->user_data = user_data;
-      g_io_scheduler_push_job (handle_method_call_in_thread_func,
-                               data,
-                               g_free, /* since we don't need refs on objects */
-                               G_PRIORITY_DEFAULT,
-                               NULL); /* GCancellable* */
-    }
-  else
-    {
-      handle_method_call_real (connection,
-                               sender,
-                               object_path,
-                               interface_name,
-                               method_name,
-                               parameters,
-                               invocation,
-                               user_data);
-    }
-}
-
-static GVariant *
-get_property (GDBusConnection  *connection,
-              const gchar      *sender,
-              const gchar      *object_path,
-              const gchar      *interface_name,
-              const gchar      *property_name,
-              GError          **error,
-              gpointer          user_data)
-{
-  GVariant *ret;
-  guint prop_id;
-  prop_id = lookup_property_id_from_property_name (property_name);
-  ret = NULL;
-  switch (prop_id)
-    {
-    default:
-      g_assert_not_reached ();
-      break;
-    }
-
-  if (ret == NULL)
-    {
-      GVariant *untrusted_empty;
-      GDBusPropertyInfo *property_info;
-      const GVariantType *type;
-      property_info = g_dbus_interface_info_lookup_property ((GDBusInterfaceInfo *) &_phoneui_contacts_interface_info, property_name);
-      type = G_VARIANT_TYPE (property_info->signature);
-      untrusted_empty = g_variant_new_from_data (type, NULL, 0, FALSE, NULL, NULL);
-      ret = g_variant_get_normal_form (untrusted_empty);
-      g_variant_unref (untrusted_empty);
-    }
-
-  return ret;
-};
-
-static gboolean
-set_property (GDBusConnection  *connection,
-              const gchar      *sender,
-              const gchar      *object_path,
-              const gchar      *interface_name,
-              const gchar      *property_name,
-              GVariant         *value,
-              GError          **error,
-              gpointer          user_data)
-{
-  gboolean ret;
-  guint prop_id;
-  prop_id = lookup_property_id_from_property_name (property_name);
-  ret = TRUE;
-  switch (prop_id)
-    {
-    default:
-      g_set_error (error,
-                   G_DBUS_ERROR,
-                   G_DBUS_ERROR_NOT_SUPPORTED,
-                   "This implementation does not support property `%s'",
-                   property_name);
-      ret = FALSE;
-      break;
-    }
-
-  return ret;
-};
-
-static const GDBusInterfaceVTable phoneui_contacts_interface_vtable =
-{
-  handle_method_call,
-  get_property,
-  set_property,
-};
-
-/* ---------------------------------------------------------------------- */
-
-typedef struct {
-  gpointer data;
-  gsize size;
-} _VariantBlob;
-
-static void
-_variant_blob_free (_VariantBlob *blob)
-{
-  g_free (blob->data);
-  g_free (blob);
-}
-
-static _VariantBlob *
-_variant_blob_new (GVariant *value)
-{
-  _VariantBlob *blob;
-  blob = g_new0 (_VariantBlob, 1);
-  blob->size = g_variant_get_size (value);
-  blob->data = g_malloc (blob->size);
-  g_variant_store (value, blob->data);
-  return blob;
-}
-
-static gboolean
-_variant_blob_equal (_VariantBlob *a,
-                    _VariantBlob *b)
-{
-  return (a->size == b->size) && (memcmp (a->data, b->data, a->size) == 0);
-}
-/* ---------------------------------------------------------------------- */
-
-static gboolean
-emit_notifications_in_idle (gpointer user_data)
-{
-  GObject *object = G_OBJECT (user_data);
-  GDBusConnection *connection;
-  const gchar *path;
-  GHashTable *notification_queue;
-  GHashTableIter iter;
-  const gchar *property_name;
-  GVariant *value;
-  GVariantBuilder builder;
-  GVariantBuilder invalidated_builder;
-  GHashTable *pvc;
-  gboolean has_changes;
-
-  notification_queue = g_object_get_data (object, "gdbus-codegen-notification-queue");
-  path = g_object_get_data (object, "gdbus-codegen-path");
-  connection = g_object_get_data (object, "gdbus-codegen-connection");
-  pvc = g_object_get_data (object, "gdbus-codegen-pvc");
-  g_assert (notification_queue != NULL && path != NULL && connection != NULL && pvc != NULL);
-
-  g_variant_builder_init (&builder, G_VARIANT_TYPE ("a{sv}"));
-  g_variant_builder_init (&invalidated_builder, G_VARIANT_TYPE ("as"));
-  g_hash_table_iter_init (&iter, notification_queue);
-  has_changes = FALSE;
-  while (g_hash_table_iter_next (&iter, (gpointer) &property_name, (gpointer) &value))
-    {
-      _VariantBlob *cached_blob;
-      _VariantBlob *blob;
-      cached_blob = g_hash_table_lookup (pvc, property_name);
-      blob = _variant_blob_new (value);
-      if (cached_blob == NULL || !_variant_blob_equal (cached_blob, blob))
-        {
-          g_hash_table_insert (pvc, (gpointer) property_name, blob);
-          g_variant_builder_add (&builder, "{sv}", property_name, value);
-          has_changes = TRUE;
-        }
-      else
-        {
-          _variant_blob_free (blob);
-        }
-    }
-
-  if (has_changes)
-    {
-      g_dbus_connection_emit_signal (connection,
-                                     NULL,
-                                     path,
-                                     "org.freedesktop.DBus.Properties",
-                                     "PropertiesChanged",
-                                     g_variant_new ("(sa{sv}as)",
-                                                    "org.shr.phoneui.Contacts",
-                                                    &builder,
-                                                    &invalidated_builder),
-                                     NULL);
-    }
-  else
-    {
-      g_variant_builder_clear (&builder);
-      g_variant_builder_clear (&invalidated_builder);
-    }
-
-  g_hash_table_remove_all (notification_queue);
-  g_object_set_data (object, "gdbus-codegen-notification-idle-source", NULL);
-  return FALSE;
-}
-
-static void
-queue_notification (GObject     *object,
-                    const gchar *property_name,
-                    GVariant    *value)
-{
-  GHashTable *notification_queue;
-  GSource *idle_source;
-  notification_queue = g_object_get_data (object, "gdbus-codegen-notification-queue");
-  if (notification_queue == NULL)
-    {
-      notification_queue = g_hash_table_new_full (g_str_hash, g_str_equal, NULL, (GDestroyNotify) g_variant_unref);
-      g_object_set_data_full (object, "gdbus-codegen-notification-queue", notification_queue, (GDestroyNotify) g_hash_table_unref);
-    }
-  g_hash_table_insert (notification_queue, (gpointer) property_name, (gpointer) value); /* adopts value */
-  idle_source = g_object_get_data (object, "gdbus-codegen-notification-idle-source");
-  if (idle_source == NULL)
-    {
-      idle_source = g_idle_source_new ();
-      g_source_set_priority (idle_source, G_PRIORITY_DEFAULT);
-      g_source_set_callback (idle_source,
-                             emit_notifications_in_idle,
-                             g_object_ref (object),
-                             (GDestroyNotify) g_object_unref);
-      g_source_attach (idle_source, g_main_context_get_thread_default ());
-      g_source_unref (idle_source);
-      g_object_set_data (object, "gdbus-codegen-notification-idle-source", idle_source);
-    }
-}
-
-static void
-phoneui_contacts_flush (GDBusInterface *_object)
+phoneui_contacts_proxy_set_property (GObject      *object,
+  guint         prop_id,
+  const GValue *value,
+  GParamSpec   *pspec)
 {
-  PhoneuiContacts *object = PHONEUI_CONTACTS (_object);
-  GSource *idle_source;
-  idle_source = g_object_get_data (G_OBJECT (object), "gdbus-codegen-notification-idle-source");
-  if (idle_source != NULL)
-    {
-      emit_notifications_in_idle (object);
-      g_source_destroy (idle_source);
-    }
 }
 
 static void
-on_notify (GObject    *object,
-           GParamSpec *pspec,
-           gpointer    user_data)
-{
-  GDBusConnection *connection;
-  const gchar *path;
-  GVariant *value;
-  const gchar *property_name;
-
-  path = g_object_get_data (object, "gdbus-codegen-path");
-  connection = g_object_get_data (object, "gdbus-codegen-connection");
-  if (connection == NULL || path == NULL)
-    goto out;
-  property_name = lookup_property_name_from_property_gname (pspec->name);
-  if (property_name == NULL)
-    goto out;
-
-  value = get_property (connection, NULL, path, "org.shr.phoneui.Contacts", property_name, NULL, object);
-  if (value != NULL)
-    {
-      if (g_variant_is_floating (value))
-        g_variant_ref_sink (value);
-      queue_notification (object, property_name, value);
-    }
-out:
-  ;
-}
-
-static void
-on_object_unregistered (GObject *object)
-{
-  GSource *idle_source;
-  idle_source = g_object_get_data (G_OBJECT (object), "gdbus-codegen-notification-idle-source");
-  if (idle_source != NULL)
-    g_source_destroy (idle_source);
-  g_object_set_data (G_OBJECT (object), "gdbus-codegen-notification-idle-source", NULL);
-  g_object_set_data (G_OBJECT (object), "gdbus-codegen-path", NULL);
-  g_object_set_data (G_OBJECT (object), "gdbus-codegen-connection", NULL);
-  g_signal_handlers_disconnect_by_func (object, on_notify, NULL);
-}
-
-static guint
-phoneui_contacts_register_object (GDBusInterface *_object,
-           GDBusConnection *connection,
-           const gchar *object_path,
-           GError **error)
-{
-  PhoneuiContacts *object = PHONEUI_CONTACTS (_object);
-  GHashTable *pvc;
-  guint n;
-
-  pvc = g_hash_table_new_full (g_str_hash, g_str_equal, NULL, (GDestroyNotify) _variant_blob_free);
-  if (_phoneui_contacts_interface_info.properties != NULL)
-    {
-      for (n = 0; _phoneui_contacts_interface_info.properties[n] != NULL; n++)
-        {
-          GDBusPropertyInfo *prop_info = _phoneui_contacts_interface_info.properties[n];
-          if (prop_info->flags & G_DBUS_PROPERTY_INFO_FLAGS_READABLE)
-            {
-              GVariant *value;
-              value = get_property (connection, NULL, object_path, "org.shr.phoneui.Contacts", prop_info->name, NULL, object);
-              if (value != NULL)
-                {
-                  if (g_variant_is_floating (value))
-                    g_variant_ref_sink (value);
-                  g_hash_table_insert (pvc, prop_info->name, _variant_blob_new (value));
-                  g_variant_unref (value);
-                }
-            }
-        }
-    }
-
-  g_object_set_data_full (G_OBJECT (object), "gdbus-codegen-path", (gpointer) g_strdup (object_path), g_free);
-  g_object_set_data (G_OBJECT (object), "gdbus-codegen-connection", (gpointer) connection);
-  g_object_set_data_full (G_OBJECT (object), "gdbus-codegen-pvc", (gpointer) pvc, (GDestroyNotify) g_hash_table_unref);
-  g_signal_connect (object, "notify", G_CALLBACK (on_notify), NULL);
-  return g_dbus_connection_register_object (connection,
-          object_path,
-          (GDBusInterfaceInfo *) &_phoneui_contacts_interface_info,
-          &phoneui_contacts_interface_vtable,
-          object,
-          (GDestroyNotify) on_object_unregistered,
-          error);
-}
-
-/**
- * phoneui_contacts_interface_info:
- *
- * Gets interface description for the <literal>org.shr.phoneui.Contacts</literal> D-Bus interface.
- *
- * Returns: A #GDBusInterfaceInfo. Do not free, the object is statically allocated.
- */
-GDBusInterfaceInfo *
-phoneui_contacts_interface_info (void)
-{
-  return (GDBusInterfaceInfo *) &_phoneui_contacts_interface_info;
-}
-
-static GDBusInterfaceInfo *
-phoneui_contacts_g_dbus_interface_interface_info (GDBusInterface *object)
-{
-  return phoneui_contacts_interface_info ();
-}
-
-static GVariant *
-phoneui_contacts_get_properties (GDBusInterface *object)
-{
-  GDBusConnection *connection;
-  const gchar *object_path;
-  GVariantBuilder builder;
+phoneui_contacts_proxy_g_signal (GDBusProxy *proxy,
+  const gchar *sender_name,
+  const gchar *signal_name,
+  GVariant *parameters)
+{
+  _ExtendedGDBusSignalInfo *info;
+  GVariantIter iter;
+  GVariant *child;
+  GValue *paramv;
+  guint num_params;
   guint n;
-
-  g_variant_builder_init (&builder, G_VARIANT_TYPE ("a{sv}"));
-
-  if (_phoneui_contacts_interface_info.properties == NULL)
-    goto out;
-
-  connection = g_object_get_data (G_OBJECT (object), "gdbus-codegen-connection");
-  object_path = g_object_get_data (G_OBJECT (object), "gdbus-codegen-path");
-
-  for (n = 0; _phoneui_contacts_interface_info.properties[n] != NULL; n++)
+  guint signal_id;
+  info = (_ExtendedGDBusSignalInfo *) g_dbus_interface_info_lookup_signal ((GDBusInterfaceInfo *) &_phoneui_contacts_interface_info, signal_name);
+  if (info == NULL)
+    return;
+  num_params = g_variant_n_children (parameters);
+  paramv = g_new0 (GValue, num_params + 1);
+  g_value_init (&paramv[0], TYPE_PHONEUI_CONTACTS);
+  g_value_set_object (&paramv[0], proxy);
+  g_variant_iter_init (&iter, parameters);
+  n = 1;
+  while ((child = g_variant_iter_next_value (&iter)) != NULL)
     {
-      GDBusPropertyInfo *prop_info = _phoneui_contacts_interface_info.properties[n];
-      if (prop_info->flags & G_DBUS_PROPERTY_INFO_FLAGS_READABLE)
+      _ExtendedGDBusArgInfo *arg_info = (_ExtendedGDBusArgInfo *) info->parent_struct.args[n - 1];
+      if (arg_info->use_gvariant)
         {
-          GVariant *value;
-          value = get_property (connection, NULL, object_path, "org.shr.phoneui.Contacts", prop_info->name, NULL, object);
-          if (value != NULL)
-            {
-              if (g_variant_is_floating (value))
-                g_variant_ref_sink (value);
-              g_variant_builder_add (&builder, "{sv}", prop_info->name, value);
-              g_variant_unref (value);
-            }
+          g_value_init (&paramv[n], G_TYPE_VARIANT);
+          g_value_set_variant (&paramv[n], child);
+          n++;
         }
+      else
+        g_dbus_gvariant_to_gvalue (child, &paramv[n++]);
+      g_variant_unref (child);
     }
-out:
-  return g_variant_builder_end (&builder);
-}
-
-
-/* ---------------------------------------------------------------------- */
-
-static void proxy_iface_init (PhoneuiContactsIface *iface);
-
-G_DEFINE_TYPE_WITH_CODE (PhoneuiContactsProxy, phoneui_contacts_proxy, G_TYPE_DBUS_PROXY,
-                         G_IMPLEMENT_INTERFACE (TYPE_PHONEUI_CONTACTS, proxy_iface_init));
-
-static void
-phoneui_contacts_proxy_init (PhoneuiContactsProxy *proxy)
-{
-  g_dbus_proxy_set_interface_info (G_DBUS_PROXY (proxy),
-                                   (GDBusInterfaceInfo *) &_phoneui_contacts_interface_info);
-}
-
-static void
-g_signal (GDBusProxy  *proxy,
-          const gchar *sender_name,
-          const gchar *signal_name,
-          GVariant    *parameters)
-{
-  guint signal_id;
-  signal_id = lookup_signal_id_from_signal_name (signal_name);
-  switch (signal_id)
-    {
-    }
-}
-
-static void
-phoneui_contacts_proxy_get_property (GObject      *object,
-                       guint         prop_id,
-                       GValue       *value,
-                       GParamSpec   *pspec)
-{
-  G_GNUC_UNUSED GVariant *cached;
-  switch (prop_id)
-    {
-
-    default:
-      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
-      break;
-    }
-}
-
-static void
-property_set_cb (GDBusProxy   *proxy,
-                 GAsyncResult *res,
-                 gpointer      user_data)
-{
-  const gchar *property_name = user_data;
-  GError *error;
-  GVariant *result;
-
-  error = NULL;
-  result = g_dbus_proxy_call_finish (proxy, res, &error);
-  if (result == NULL)
-    {
-      g_warning ("Error setting property `%s': %s", property_name, error->message);
-      g_error_free (error);
-    }
-  else
-    {
-      g_variant_unref (result);
-    }
-}
-
-static void
-phoneui_contacts_proxy_set_property (GObject      *object,
-                       guint         prop_id,
-                       const GValue *value,
-                       GParamSpec   *pspec)
-{
-  GVariant *new_value;
-  const gchar *property_name;
-  new_value = NULL;
-  property_name = NULL;
-  switch (prop_id)
-    {
-
-    default:
-      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
-      break;
-    }
-
-  if (new_value != NULL)
-    {
-      g_variant_ref_sink (new_value);
-      g_dbus_proxy_call (G_DBUS_PROXY (object),
-                         "org.freedesktop.DBus.Properties.Set",
-                         g_variant_new ("(ssv)",
-                                        "org.shr.phoneui.Contacts",
-                                        property_name,
-                                        new_value),
-                         G_DBUS_CALL_FLAGS_NONE,
-                         -1,
-                         NULL,
-                         (GAsyncReadyCallback) property_set_cb,
-                         (gpointer) property_name);
-      g_variant_unref (new_value);
-    }
-
+  signal_id = g_signal_lookup (info->signal_name, TYPE_PHONEUI_CONTACTS);
+  g_signal_emitv (paramv, signal_id, 0, NULL);
+  for (n = 0; n < num_params + 1; n++)
+    g_value_unset (&paramv[n]);
+  g_free (paramv);
 }
 
 static void
-g_properties_changed (GDBusProxy         *proxy,
-                      GVariant           *changed_properties,
-                      const gchar* const *invalidated_properties)
+phoneui_contacts_proxy_g_properties_changed (GDBusProxy *proxy,
+  GVariant *changed_properties,
+  const gchar *const *invalidated_properties)
 {
   guint n;
   const gchar *key;
   GVariantIter *iter;
-  const gchar *gname;
-
+  _ExtendedGDBusPropertyInfo *info;
   g_variant_get (changed_properties, "a{sv}", &iter);
   while (g_variant_iter_next (iter, "{&sv}", &key, NULL))
     {
-      gname = lookup_property_gname_from_property_name (key);
-      if (gname != NULL)
-        g_object_notify (G_OBJECT (proxy), gname);
+      info = (_ExtendedGDBusPropertyInfo *) g_dbus_interface_info_lookup_property ((GDBusInterfaceInfo *) &_phoneui_contacts_interface_info, key);
+      if (info != NULL)
+        g_object_notify (G_OBJECT (proxy), info->hyphen_name);
     }
-
+  g_variant_iter_free (iter);
   for (n = 0; invalidated_properties[n] != NULL; n++)
     {
-      gname = lookup_property_gname_from_property_name (invalidated_properties[n]);
-      if (gname != NULL)
-        g_object_notify (G_OBJECT (proxy), gname);
+      info = (_ExtendedGDBusPropertyInfo *) g_dbus_interface_info_lookup_property ((GDBusInterfaceInfo *) &_phoneui_contacts_interface_info, invalidated_properties[n]);
+      if (info != NULL)
+        g_object_notify (G_OBJECT (proxy), info->hyphen_name);
     }
+}
 
+static void
+phoneui_contacts_proxy_init (PhoneuiContactsProxy *proxy)
+{
+  g_dbus_proxy_set_interface_info (G_DBUS_PROXY (proxy), phoneui_contacts_interface_info ());
 }
 
 static void
@@ -1620,74 +1095,62 @@ phoneui_contacts_proxy_class_init (PhoneuiContactsProxyClass *klass)
   gobject_class->set_property = phoneui_contacts_proxy_set_property;
 
   proxy_class = G_DBUS_PROXY_CLASS (klass);
-  proxy_class->g_signal = g_signal;
-  proxy_class->g_properties_changed = g_properties_changed;
+  proxy_class->g_signal = phoneui_contacts_proxy_g_signal;
+  proxy_class->g_properties_changed = phoneui_contacts_proxy_g_properties_changed;
 
 }
 
-static void
-proxy_iface_init (PhoneuiContactsIface *iface)
-{
-}
-
-
 /**
  * phoneui_contacts_proxy_new:
  * @connection: A #GDBusConnection.
- * @flags: Flags used when constructing the proxy.
- * @name: A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.
+ * @flags: Flags from the #GDBusProxyFlags enumeration.
+ * @name: (allow-none): A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.
  * @object_path: An object path.
- * @cancellable: A #GCancellable or %NULL.
- * @callback: Callback function to invoke when the proxy is ready.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @callback: A #GAsyncReadyCallback to call when the request is satisfied.
  * @user_data: User data to pass to @callback.
  *
- * Like g_dbus_proxy_new() but returns a #PhoneuiContactsProxy.
+ * Asynchronously creates a proxy for the D-Bus interface <link linkend="gdbus-interface-org-shr-phoneui-Contacts.top_of_page">org.shr.phoneui.Contacts</link>. See g_dbus_proxy_new() for more details.
+ *
+ * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
+ * You can then call phoneui_contacts_proxy_new_finish() to get the result of the operation.
  *
- * This is a failable asynchronous constructor - when the proxy is ready, callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this function from. You can then call phoneui_contacts_proxy_new_finish() to get the result. See phoneui_contacts_proxy_new_sync() for the synchronous version.
+ * See phoneui_contacts_proxy_new_sync() for the synchronous, blocking version of this constructor.
  */
-void phoneui_contacts_proxy_new (GDBusConnection     *connection,
-                   GDBusProxyFlags      flags,
-                   const gchar         *name,
-                   const gchar         *object_path,
-                   GCancellable        *cancellable,
-                   GAsyncReadyCallback  callback,
-                   gpointer             user_data)
-{
-  g_async_initable_new_async (TYPE_PHONEUI_CONTACTS_PROXY,
-                              G_PRIORITY_DEFAULT,
-                              cancellable,
-                              callback,
-                              user_data,
-                              "g-flags", flags,
-                              "g-name", name,
-                              "g-connection", connection,
-                              "g-object-path", object_path,
-                              "g-interface-name", "org.shr.phoneui.Contacts",
-                              NULL);
+void
+phoneui_contacts_proxy_new (
+    GDBusConnection     *connection,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GAsyncReadyCallback  callback,
+    gpointer             user_data)
+{
+  g_async_initable_new_async (TYPE_PHONEUI_CONTACTS_PROXY, G_PRIORITY_DEFAULT, cancellable, callback, user_data, "g-flags", flags, "g-name", name, "g-connection", connection, "g-object-path", object_path, "g-interface-name", "org.shr.phoneui.Contacts", NULL);
 }
 
 /**
  * phoneui_contacts_proxy_new_finish:
- * @res: A #GAsyncResult obtained from the #GAsyncReadyCallback function passed to phoneui_contacts_proxy_new().
- * @error: Return location for error or %NULL.
+ * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_contacts_proxy_new().
+ * @error: Return location for error or %NULL
  *
- * Finishes creating a #PhoneuiContactsProxy.
+ * Finishes an operation started with phoneui_contacts_proxy_new().
  *
- * Returns: A #PhoneuiContactsProxy or %NULL if @error is set. Free with g_object_unref().
+ * Returns: (transfer full) (type PhoneuiContactsProxy): The constructed proxy object or %NULL if @error is set.
  */
-PhoneuiContacts *phoneui_contacts_proxy_new_finish (GAsyncResult  *res,
-                        GError       **error)
+PhoneuiContacts *
+phoneui_contacts_proxy_new_finish (
+    GAsyncResult        *res,
+    GError             **error)
 {
-  GObject *object;
+  GObject *ret;
   GObject *source_object;
   source_object = g_async_result_get_source_object (res);
-  g_assert (source_object != NULL);
-  object = g_async_initable_new_finish (G_ASYNC_INITABLE (source_object),
-                                        res,
-                                        error);
+  ret = g_async_initable_new_finish (G_ASYNC_INITABLE (source_object), res, error);
   g_object_unref (source_object);
-  if (object != NULL)
-    return PHONEUI_CONTACTS (object);
+  if (ret != NULL)
+    return PHONEUI_CONTACTS (ret);
   else
     return NULL;
 }
@@ -1695,37 +1158,33 @@ PhoneuiContacts *phoneui_contacts_proxy_new_finish (GAsyncResult  *res,
 /**
  * phoneui_contacts_proxy_new_sync:
  * @connection: A #GDBusConnection.
- * @flags: Flags used when constructing the proxy.
- * @name: A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.
+ * @flags: Flags from the #GDBusProxyFlags enumeration.
+ * @name: (allow-none): A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.
  * @object_path: An object path.
- * @cancellable: A #GCancellable or %NULL.
- * @error: Return location for error or %NULL.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @error: Return location for error or %NULL
  *
- * Like g_dbus_proxy_new_sync() but returns a #PhoneuiContactsProxy.
+ * Synchronously creates a proxy for the D-Bus interface <link linkend="gdbus-interface-org-shr-phoneui-Contacts.top_of_page">org.shr.phoneui.Contacts</link>. See g_dbus_proxy_new_sync() for more details.
  *
- * This is a synchronous failable constructor - the calling thread is blocked until the object is ready. See phoneui_contacts_proxy_new() for the asynchronous version.
+ * The calling thread is blocked until a reply is received.
  *
- * Returns: A #PhoneuiContactsProxy or %NULL if error is set. Free with g_object_unref().
+ * See phoneui_contacts_proxy_new() for the asynchronous version of this constructor.
+ *
+ * Returns: (transfer full) (type PhoneuiContactsProxy): The constructed proxy object or %NULL if @error is set.
  */
-PhoneuiContacts *phoneui_contacts_proxy_new_sync (GDBusConnection     *connection,
-                       GDBusProxyFlags      flags,
-                       const gchar         *name,
-                       const gchar         *object_path,
-                       GCancellable        *cancellable,
-                       GError             **error)
-{
-  GInitable *initable;
-  initable = g_initable_new (TYPE_PHONEUI_CONTACTS_PROXY,
-                             cancellable,
-                             error,
-                             "g-flags", flags,
-                             "g-name", name,
-                             "g-connection", connection,
-                             "g-object-path", object_path,
-                             "g-interface-name", "org.shr.phoneui.Contacts",
-                             NULL);
-  if (initable != NULL)
-    return PHONEUI_CONTACTS (initable);
+PhoneuiContacts *
+phoneui_contacts_proxy_new_sync (
+    GDBusConnection     *connection,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GError             **error)
+{
+  GInitable *ret;
+  ret = g_initable_new (TYPE_PHONEUI_CONTACTS_PROXY, cancellable, error, "g-flags", flags, "g-name", name, "g-connection", connection, "g-object-path", object_path, "g-interface-name", "org.shr.phoneui.Contacts", NULL);
+  if (ret != NULL)
+    return PHONEUI_CONTACTS (ret);
   else
     return NULL;
 }
@@ -1734,60 +1193,54 @@ PhoneuiContacts *phoneui_contacts_proxy_new_sync (GDBusConnection     *connectio
 /**
  * phoneui_contacts_proxy_new_for_bus:
  * @bus_type: A #GBusType.
- * @flags: Flags used when constructing the proxy.
+ * @flags: Flags from the #GDBusProxyFlags enumeration.
  * @name: A bus name (well-known or unique).
  * @object_path: An object path.
- * @cancellable: A #GCancellable or %NULL.
- * @callback: Callback function to invoke when the proxy is ready.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @callback: A #GAsyncReadyCallback to call when the request is satisfied.
  * @user_data: User data to pass to @callback.
  *
- * Like g_dbus_proxy_new_for_bus() but returns a #PhoneuiContactsProxy.
+ * Like phoneui_contacts_proxy_new() but takes a #GBusType instead of a #GDBusConnection.
+ *
+ * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
+ * You can then call phoneui_contacts_proxy_new_for_bus_finish() to get the result of the operation.
  *
- * This is a failable asynchronous constructor - when the proxy is ready, callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this function from. You can then call phoneui_contacts_proxy_new_for_bus_finish() to get the result. See phoneui_contacts_proxy_new_for_bus_sync() for the synchronous version.
+ * See phoneui_contacts_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.
  */
-void phoneui_contacts_proxy_new_for_bus (GBusType             bus_type,
-                           GDBusProxyFlags      flags,
-                           const gchar         *name,
-                           const gchar         *object_path,
-                           GCancellable        *cancellable,
-                           GAsyncReadyCallback  callback,
-                           gpointer             user_data)
-{
-  g_async_initable_new_async (TYPE_PHONEUI_CONTACTS_PROXY,
-                              G_PRIORITY_DEFAULT,
-                              cancellable,
-                              callback,
-                              user_data,
-                              "g-flags", flags,
-                              "g-name", name,
-                              "g-bus-type", bus_type,
-                              "g-object-path", object_path,
-                              "g-interface-name", "org.shr.phoneui.Contacts",
-                              NULL);
+void
+phoneui_contacts_proxy_new_for_bus (
+    GBusType             bus_type,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GAsyncReadyCallback  callback,
+    gpointer             user_data)
+{
+  g_async_initable_new_async (TYPE_PHONEUI_CONTACTS_PROXY, G_PRIORITY_DEFAULT, cancellable, callback, user_data, "g-flags", flags, "g-name", name, "g-bus-type", bus_type, "g-object-path", object_path, "g-interface-name", "org.shr.phoneui.Contacts", NULL);
 }
 
 /**
  * phoneui_contacts_proxy_new_for_bus_finish:
- * @res: A #GAsyncResult obtained from the #GAsyncReadyCallback function passed to phoneui_contacts_proxy_new_for_bus().
- * @error: Return location for error or %NULL.
+ * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_contacts_proxy_new_for_bus().
+ * @error: Return location for error or %NULL
  *
- * Finishes creating a #PhoneuiContactsProxy.
+ * Finishes an operation started with phoneui_contacts_proxy_new_for_bus().
  *
- * Returns: A #PhoneuiContactsProxy or %NULL if @error is set. Free with g_object_unref().
+ * Returns: (transfer full) (type PhoneuiContactsProxy): The constructed proxy object or %NULL if @error is set.
  */
-PhoneuiContacts *phoneui_contacts_proxy_new_for_bus_finish (GAsyncResult  *res,
-                                GError       **error)
+PhoneuiContacts *
+phoneui_contacts_proxy_new_for_bus_finish (
+    GAsyncResult        *res,
+    GError             **error)
 {
-  GObject *object;
+  GObject *ret;
   GObject *source_object;
   source_object = g_async_result_get_source_object (res);
-  g_assert (source_object != NULL);
-  object = g_async_initable_new_finish (G_ASYNC_INITABLE (source_object),
-                                        res,
-                                        error);
+  ret = g_async_initable_new_finish (G_ASYNC_INITABLE (source_object), res, error);
   g_object_unref (source_object);
-  if (object != NULL)
-    return PHONEUI_CONTACTS (object);
+  if (ret != NULL)
+    return PHONEUI_CONTACTS (ret);
   else
     return NULL;
 }
@@ -1795,163 +1248,321 @@ PhoneuiContacts *phoneui_contacts_proxy_new_for_bus_finish (GAsyncResult  *res,
 /**
  * phoneui_contacts_proxy_new_for_bus_sync:
  * @bus_type: A #GBusType.
- * @flags: Flags used when constructing the proxy.
+ * @flags: Flags from the #GDBusProxyFlags enumeration.
  * @name: A bus name (well-known or unique).
  * @object_path: An object path.
- * @cancellable: A #GCancellable or %NULL.
- * @error: Return location for error or %NULL.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @error: Return location for error or %NULL
  *
- * Like g_dbus_proxy_new_for_bus_sync() but returns a #PhoneuiContactsProxy.
+ * Like phoneui_contacts_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.
  *
- * This is a synchronous failable constructor - the calling thread is blocked until the object is ready. See phoneui_contacts_proxy_new_for_bus() for the asynchronous version.
+ * The calling thread is blocked until a reply is received.
  *
- * Returns: A #PhoneuiContactsProxy or %NULL if error is set. Free with g_object_unref().
+ * See phoneui_contacts_proxy_new_for_bus() for the asynchronous version of this constructor.
+ *
+ * Returns: (transfer full) (type PhoneuiContactsProxy): The constructed proxy object or %NULL if @error is set.
  */
-PhoneuiContacts *phoneui_contacts_proxy_new_for_bus_sync (GBusType             bus_type,
-                               GDBusProxyFlags      flags,
-                               const gchar         *name,
-                               const gchar         *object_path,
-                               GCancellable        *cancellable,
-                               GError             **error)
-{
-  GInitable *initable;
-  initable = g_initable_new (TYPE_PHONEUI_CONTACTS_PROXY,
-                             cancellable,
-                             error,
-                             "g-flags", flags,
-                             "g-name", name,
-                             "g-bus-type", bus_type,
-                             "g-object-path", object_path,
-                             "g-interface-name", "org.shr.phoneui.Contacts",
-                             NULL);
-  if (initable != NULL)
-    return PHONEUI_CONTACTS (initable);
+PhoneuiContacts *
+phoneui_contacts_proxy_new_for_bus_sync (
+    GBusType             bus_type,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GError             **error)
+{
+  GInitable *ret;
+  ret = g_initable_new (TYPE_PHONEUI_CONTACTS_PROXY, cancellable, error, "g-flags", flags, "g-name", name, "g-bus-type", bus_type, "g-object-path", object_path, "g-interface-name", "org.shr.phoneui.Contacts", NULL);
+  if (ret != NULL)
+    return PHONEUI_CONTACTS (ret);
   else
     return NULL;
 }
 
 
-/* ---------------------------------------------------------------------- */
+/* ------------------------------------------------------------------------ */
 
-struct _PhoneuiContactsStubPrivate
+/**
+ * PhoneuiContactsSkeleton:
+ *
+ * The #PhoneuiContactsSkeleton structure contains only private data and should only be accessed using the provided API.
+ */
+
+/**
+ * PhoneuiContactsSkeletonClass:
+ * @parent_class: The parent class.
+ *
+ * Class structure for #PhoneuiContactsSkeleton.
+ */
+
+struct _PhoneuiContactsSkeletonPrivate
 {
-  GDBusObject *enclosing_object;
-  GDBusInterfaceFlags flags;
+  GValueArray *properties;
+  GList *changed_properties;
+  GSource *changed_properties_idle_source;
+  GMainContext *context;
 };
 
-static void stub_iface_init (PhoneuiContactsIface *iface);
+static void
+_phoneui_contacts_skeleton_handle_method_call (
+  GDBusConnection *connection,
+  const gchar *sender,
+  const gchar *object_path,
+  const gchar *interface_name,
+  const gchar *method_name,
+  GVariant *parameters,
+  GDBusMethodInvocation *invocation,
+  gpointer user_data)
+{
+  PhoneuiContactsSkeleton *skeleton = PHONEUI_CONTACTS_SKELETON (user_data);
+  _ExtendedGDBusMethodInfo *info;
+  GVariantIter iter;
+  GVariant *child;
+  GValue *paramv;
+  guint num_params;
+  guint n;
+  guint signal_id;
+  GValue return_value = {0};
+  info = (_ExtendedGDBusMethodInfo *) g_dbus_method_invocation_get_method_info (invocation);
+  g_assert (info != NULL);
+  num_params = g_variant_n_children (parameters);
+  paramv = g_new0 (GValue, num_params + 2);
+  g_value_init (&paramv[0], TYPE_PHONEUI_CONTACTS);
+  g_value_set_object (&paramv[0], skeleton);
+  g_value_init (&paramv[1], G_TYPE_DBUS_METHOD_INVOCATION);
+  g_value_set_object (&paramv[1], invocation);
+  g_variant_iter_init (&iter, parameters);
+  n = 2;
+  while ((child = g_variant_iter_next_value (&iter)) != NULL)
+    {
+      _ExtendedGDBusArgInfo *arg_info = (_ExtendedGDBusArgInfo *) info->parent_struct.in_args[n - 2];
+      if (arg_info->use_gvariant)
+        {
+          g_value_init (&paramv[n], G_TYPE_VARIANT);
+          g_value_set_variant (&paramv[n], child);
+          n++;
+        }
+      else
+        g_dbus_gvariant_to_gvalue (child, &paramv[n++]);
+      g_variant_unref (child);
+    }
+  signal_id = g_signal_lookup (info->signal_name, TYPE_PHONEUI_CONTACTS);
+  g_value_init (&return_value, G_TYPE_BOOLEAN);
+  g_signal_emitv (paramv, signal_id, 0, &return_value);
+  if (!g_value_get_boolean (&return_value))
+    g_dbus_method_invocation_return_error (invocation, G_DBUS_ERROR, G_DBUS_ERROR_UNKNOWN_METHOD, "Method %s is not implemented on interface %s", method_name, interface_name);
+  g_value_unset (&return_value);
+  for (n = 0; n < num_params + 2; n++)
+    g_value_unset (&paramv[n]);
+  g_free (paramv);
+}
+
+static GVariant *
+_phoneui_contacts_skeleton_handle_get_property (
+  GDBusConnection *connection,
+  const gchar *sender,
+  const gchar *object_path,
+  const gchar *interface_name,
+  const gchar *property_name,
+  GError **error,
+  gpointer user_data)
+{
+  PhoneuiContactsSkeleton *skeleton = PHONEUI_CONTACTS_SKELETON (user_data);
+  GValue value = {0};
+  GParamSpec *pspec;
+  _ExtendedGDBusPropertyInfo *info;
+  GVariant *ret;
+  ret = NULL;
+  info = (_ExtendedGDBusPropertyInfo *) g_dbus_interface_info_lookup_property ((GDBusInterfaceInfo *) &_phoneui_contacts_interface_info, property_name);
+  g_assert (info != NULL);
+  pspec = g_object_class_find_property (G_OBJECT_GET_CLASS (skeleton), info->hyphen_name);
+  if (pspec == NULL)
+    {
+      g_set_error (error, G_DBUS_ERROR, G_DBUS_ERROR_INVALID_ARGS, "No property with name %s", property_name);
+    }
+  else
+    {
+      g_value_init (&value, pspec->value_type);
+      g_object_get_property (G_OBJECT (skeleton), info->hyphen_name, &value);
+      ret = g_dbus_gvalue_to_gvariant (&value, G_VARIANT_TYPE (info->parent_struct.signature));
+      g_value_unset (&value);
+    }
+  return ret;
+}
 
-G_DEFINE_TYPE_WITH_CODE (PhoneuiContactsStub, phoneui_contacts_stub, G_TYPE_OBJECT,
-                         G_IMPLEMENT_INTERFACE (G_TYPE_DBUS_INTERFACE, dbus_iface_init)
-                         G_IMPLEMENT_INTERFACE (TYPE_PHONEUI_CONTACTS, stub_iface_init));
+static gboolean
+_phoneui_contacts_skeleton_handle_set_property (
+  GDBusConnection *connection,
+  const gchar *sender,
+  const gchar *object_path,
+  const gchar *interface_name,
+  const gchar *property_name,
+  GVariant *variant,
+  GError **error,
+  gpointer user_data)
+{
+  PhoneuiContactsSkeleton *skeleton = PHONEUI_CONTACTS_SKELETON (user_data);
+  GValue value = {0};
+  GParamSpec *pspec;
+  _ExtendedGDBusPropertyInfo *info;
+  gboolean ret;
+  ret = FALSE;
+  info = (_ExtendedGDBusPropertyInfo *) g_dbus_interface_info_lookup_property ((GDBusInterfaceInfo *) &_phoneui_contacts_interface_info, property_name);
+  g_assert (info != NULL);
+  pspec = g_object_class_find_property (G_OBJECT_GET_CLASS (skeleton), info->hyphen_name);
+  if (pspec == NULL)
+    {
+      g_set_error (error, G_DBUS_ERROR, G_DBUS_ERROR_INVALID_ARGS, "No property with name %s", property_name);
+    }
+  else
+    {
+      if (info->use_gvariant)
+        g_value_set_variant (&value, variant);
+      else
+        g_dbus_gvariant_to_gvalue (variant, &value);
+      g_object_set_property (G_OBJECT (skeleton), info->hyphen_name, &value);
+      g_value_unset (&value);
+      ret = TRUE;
+    }
+  return ret;
+}
 
-static void
-phoneui_contacts_stub_finalize (GObject *object)
+static const GDBusInterfaceVTable _phoneui_contacts_skeleton_vtable =
 {
-  G_GNUC_UNUSED PhoneuiContactsStub *stub = (PhoneuiContactsStub *) object;
+  _phoneui_contacts_skeleton_handle_method_call,
+  _phoneui_contacts_skeleton_handle_get_property,
+  _phoneui_contacts_skeleton_handle_set_property
+};
 
-  if (G_OBJECT_CLASS (phoneui_contacts_stub_parent_class)->finalize != NULL)
-    G_OBJECT_CLASS (phoneui_contacts_stub_parent_class)->finalize (object);
+static GDBusInterfaceInfo *
+phoneui_contacts_skeleton_dbus_interface_get_info (GDBusInterfaceSkeleton *skeleton)
+{
+  return phoneui_contacts_interface_info ();
 }
 
-static void
-phoneui_contacts_stub_get_property (GObject      *object,
-                      guint         prop_id,
-                      GValue       *value,
-                      GParamSpec   *pspec)
+static GDBusInterfaceVTable *
+phoneui_contacts_skeleton_dbus_interface_get_vtable (GDBusInterfaceSkeleton *skeleton)
 {
-  G_GNUC_UNUSED PhoneuiContactsStub *stub = (PhoneuiContactsStub *) object;
-  switch (prop_id)
-    {
-
-    default:
-      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
-      break;
-    }
+  return (GDBusInterfaceVTable *) &_phoneui_contacts_skeleton_vtable;
 }
 
-static void
-phoneui_contacts_stub_set_property (GObject      *object,
-                      guint         prop_id,
-                      const GValue *value,
-                      GParamSpec   *pspec)
+static GVariant *
+phoneui_contacts_skeleton_dbus_interface_get_properties (GDBusInterfaceSkeleton *_skeleton)
 {
-  G_GNUC_UNUSED PhoneuiContactsStub *stub = (PhoneuiContactsStub *) object;
-  switch (prop_id)
-    {
+  PhoneuiContactsSkeleton *skeleton = PHONEUI_CONTACTS_SKELETON (_skeleton);
 
-    default:
-      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
-      break;
+  GVariantBuilder builder;
+  guint n;
+  g_variant_builder_init (&builder, G_VARIANT_TYPE ("a{sv}"));
+  if (_phoneui_contacts_interface_info.parent_struct.properties == NULL)
+    goto out;
+  for (n = 0; _phoneui_contacts_interface_info.parent_struct.properties[n] != NULL; n++)
+    {
+      GDBusPropertyInfo *info = _phoneui_contacts_interface_info.parent_struct.properties[n];
+      if (info->flags & G_DBUS_PROPERTY_INFO_FLAGS_READABLE)
+        {
+          GVariant *value;
+          value = _phoneui_contacts_skeleton_handle_get_property (g_dbus_interface_skeleton_get_connection (G_DBUS_INTERFACE_SKELETON (skeleton)), NULL, g_dbus_interface_skeleton_get_object_path (G_DBUS_INTERFACE_SKELETON (skeleton)), "org.shr.phoneui.Contacts", info->name, NULL, skeleton);
+          if (value != NULL)
+            {
+              if (g_variant_is_floating (value))
+                g_variant_ref_sink (value);
+              g_variant_builder_add (&builder, "{sv}", info->name, value);
+              g_variant_unref (value);
+            }
+        }
     }
+out:
+  return g_variant_builder_end (&builder);
 }
 
 static void
-phoneui_contacts_stub_init (PhoneuiContactsStub *stub)
+phoneui_contacts_skeleton_dbus_interface_flush (GDBusInterfaceSkeleton *_skeleton)
 {
-  stub->priv = G_TYPE_INSTANCE_GET_PRIVATE (stub, TYPE_PHONEUI_CONTACTS_STUB, PhoneuiContactsStubPrivate);
 }
 
 static void
-phoneui_contacts_stub_class_init (PhoneuiContactsStubClass *klass)
+phoneui_contacts_skeleton_iface_init (PhoneuiContactsIface *iface)
 {
-  GObjectClass *gobject_class;
-
-  gobject_class = G_OBJECT_CLASS (klass);
-  gobject_class->finalize     = phoneui_contacts_stub_finalize;
-  gobject_class->get_property = phoneui_contacts_stub_get_property;
-  gobject_class->set_property = phoneui_contacts_stub_set_property;
-  g_type_class_add_private (klass, sizeof (PhoneuiContactsStubPrivate));
 }
 
+#define phoneui_contacts_skeleton_get_type phoneui_contacts_skeleton_get_type
+G_DEFINE_TYPE_WITH_CODE (PhoneuiContactsSkeleton, phoneui_contacts_skeleton, G_TYPE_DBUS_INTERFACE_SKELETON,
+                         G_IMPLEMENT_INTERFACE (TYPE_PHONEUI_CONTACTS, phoneui_contacts_skeleton_iface_init));
+#undef phoneui_contacts_skeleton_get_type
+
 static void
-stub_iface_init (PhoneuiContactsIface *iface)
-{
+phoneui_contacts_skeleton_finalize (GObject *object)
+{
+  PhoneuiContactsSkeleton *skeleton = PHONEUI_CONTACTS_SKELETON (object);
+  g_list_foreach (skeleton->priv->changed_properties, (GFunc) _changed_property_free, NULL);
+  g_list_free (skeleton->priv->changed_properties);
+  if (skeleton->priv->changed_properties_idle_source != NULL)
+    g_source_destroy (skeleton->priv->changed_properties_idle_source);
+  if (skeleton->priv->context != NULL)
+    g_main_context_unref (skeleton->priv->context);
+  G_OBJECT_CLASS (phoneui_contacts_skeleton_parent_class)->finalize (object);
 }
 
-/**
- * phoneui_contacts_stub_new:
- *
- * Creates a new stub object that can be exported via g_dbus_interface_register_object().
- *
- * Returns: A #PhoneuiContactsStub instance. Free with g_object_unref().
- */
-PhoneuiContacts *
-phoneui_contacts_stub_new (void)
-{
-  return PHONEUI_CONTACTS (g_object_new (TYPE_PHONEUI_CONTACTS_STUB, NULL));
+static void
+phoneui_contacts_skeleton_get_property (GObject      *object,
+  guint         prop_id,
+  GValue       *value,
+  GParamSpec   *pspec)
+{
+  PhoneuiContactsSkeleton *skeleton = PHONEUI_CONTACTS_SKELETON (object);
+  g_assert (prop_id - 1 >= 0 && prop_id - 1 < 0);
+  g_value_copy (&skeleton->priv->properties->values[prop_id - 1], value);
 }
 
-static GDBusObject *
-phoneui_contacts_g_dbus_interface_get_object (GDBusInterface *interface)
+static void
+phoneui_contacts_skeleton_set_property (GObject      *object,
+  guint         prop_id,
+  const GValue *value,
+  GParamSpec   *pspec)
 {
-  PhoneuiContactsStub *stub = G_TYPE_CHECK_INSTANCE_CAST (interface, TYPE_PHONEUI_CONTACTS_STUB, PhoneuiContactsStub);
-  if (stub->priv->enclosing_object != NULL)
-    return g_object_ref (stub->priv->enclosing_object);
-  else
-    return NULL;
 }
 
 static void
-phoneui_contacts_g_dbus_interface_set_object (GDBusInterface *interface,
-                                GDBusObject    *object)
+phoneui_contacts_skeleton_init (PhoneuiContactsSkeleton *skeleton)
 {
-  PhoneuiContactsStub *stub = G_TYPE_CHECK_INSTANCE_CAST (interface, TYPE_PHONEUI_CONTACTS_STUB, PhoneuiContactsStub);
-  stub->priv->enclosing_object = object;
+  skeleton->priv = G_TYPE_INSTANCE_GET_PRIVATE (skeleton, TYPE_PHONEUI_CONTACTS_SKELETON, PhoneuiContactsSkeletonPrivate);
+  skeleton->priv->context = g_main_context_get_thread_default ();
+  if (skeleton->priv->context != NULL)
+    g_main_context_ref (skeleton->priv->context);
 }
 
-static GDBusInterfaceFlags
-phoneui_contacts_g_dbus_interface_get_flags (GDBusInterface *interface)
+static void
+phoneui_contacts_skeleton_class_init (PhoneuiContactsSkeletonClass *klass)
 {
-  PhoneuiContactsStub *stub = G_TYPE_CHECK_INSTANCE_CAST (interface, TYPE_PHONEUI_CONTACTS_STUB, PhoneuiContactsStub);
-  return stub->priv->flags;
+  GObjectClass *gobject_class;
+  GDBusInterfaceSkeletonClass *skeleton_class;
+
+  g_type_class_add_private (klass, sizeof (PhoneuiContactsSkeletonPrivate));
+
+  gobject_class = G_OBJECT_CLASS (klass);
+  gobject_class->finalize = phoneui_contacts_skeleton_finalize;
+  gobject_class->get_property = phoneui_contacts_skeleton_get_property;
+  gobject_class->set_property = phoneui_contacts_skeleton_set_property;
+
+
+  skeleton_class = G_DBUS_INTERFACE_SKELETON_CLASS (klass);
+  skeleton_class->get_info = phoneui_contacts_skeleton_dbus_interface_get_info;
+  skeleton_class->get_properties = phoneui_contacts_skeleton_dbus_interface_get_properties;
+  skeleton_class->flush = phoneui_contacts_skeleton_dbus_interface_flush;
+  skeleton_class->get_vtable = phoneui_contacts_skeleton_dbus_interface_get_vtable;
 }
 
-static void
-phoneui_contacts_g_dbus_interface_set_flags (GDBusInterface      *interface,
-                               GDBusInterfaceFlags  flags)
+/**
+ * phoneui_contacts_skeleton_new:
+ *
+ * Creates a skeleton object for the D-Bus interface <link linkend="gdbus-interface-org-shr-phoneui-Contacts.top_of_page">org.shr.phoneui.Contacts</link>.
+ *
+ * Returns: (transfer full) (type PhoneuiContactsSkeleton): The skeleton object.
+ */
+PhoneuiContacts *
+phoneui_contacts_skeleton_new (void)
 {
-  PhoneuiContactsStub *stub = G_TYPE_CHECK_INSTANCE_CAST (interface, TYPE_PHONEUI_CONTACTS_STUB, PhoneuiContactsStub);
-  stub->priv->flags = flags;
+  return PHONEUI_CONTACTS (g_object_new (TYPE_PHONEUI_CONTACTS_SKELETON, NULL));
 }
 
diff --git a/src/shr-phoneuicontacts.h b/src/shr-phoneuicontacts.h
index 6eeb6cd..4a7dac0 100644
--- a/src/shr-phoneuicontacts.h
+++ b/src/shr-phoneuicontacts.h
@@ -1,323 +1,251 @@
-/* File:       shr-phoneuicontacts.h
+/*
+ * Generated by gdbus-codegen 2.29.3. DO NOT EDIT.
  *
- * GType name: PhoneuiContacts
- * D-Bus name: org.shr.phoneui.Contacts
- *
- * Generated by GDBus Binding Tool 0.1. DO NOT EDIT.
+ * The license of this code is the same as for the source it was derived from.
  */
 
-#ifndef __SHR_PHONEUI_CONTACTS_H__
-#define __SHR_PHONEUI_CONTACTS_H__
+#ifndef __SHR_PHONEUICONTACTS_H__
+#define __SHR_PHONEUICONTACTS_H__
 
 #include <gio/gio.h>
-#include <gdbusinterface.h>
-#include <gdbusobjectproxy.h>
-#include <gdbusproxymanager.h>
-#include <gdbusobject.h>
-#include <gdbusobjectmanager.h>
-#include <gdbuscodegen-enumtypes.h>
-#include <string.h>
-#include <shr-types.h>
 
 G_BEGIN_DECLS
 
-#define TYPE_PHONEUI_CONTACTS         (phoneui_contacts_get_gtype ())
-#define PHONEUI_CONTACTS(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_PHONEUI_CONTACTS, PhoneuiContacts))
-#define IS_PHONEUI_CONTACTS(o)        (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_PHONEUI_CONTACTS))
-#define PHONEUI_CONTACTS_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE((o), TYPE_PHONEUI_CONTACTS, PhoneuiContactsIface))
-
-/**
- * PhoneuiContacts:
- *
- * Opaque type representing a proxy or an exported object.
- */
-typedef struct _PhoneuiContacts PhoneuiContacts; /* Dummy typedef */
-/**
- * PhoneuiContactsIface:
- * @parent_iface: The parent interface.
- * @handle_display_list: Handler for the #PhoneuiContacts::handle-display-list signal.
- * @handle_display_contact: Handler for the #PhoneuiContacts::handle-display-contact signal.
- * @handle_create_contact: Handler for the #PhoneuiContacts::handle-create-contact signal.
- * @handle_edit_contact: Handler for the #PhoneuiContacts::handle-edit-contact signal.
- *
- * Virtual table.
- */
-typedef struct _PhoneuiContactsIface PhoneuiContactsIface;
 
-GType phoneui_contacts_get_gtype (void) G_GNUC_CONST;
-GDBusInterfaceInfo *phoneui_contacts_interface_info (void);
+/* ------------------------------------------------------------------------ */
+/* Declarations for org.shr.phoneui.Contacts */
 
-/**
- * GET_PHONEUI_CONTACTS:
- * @object_proxy: A #GDBusObjectProxy.
- *
- * Convenience macro to get a #PhoneuiContacts interface proxy from @object_proxy.
- *
- * Returns: A #GDBusProxy object implementing the #PhoneuiContacts interface or %NULL if @object_proxy
- * does not implement the <literal>org.shr.phoneui.Contacts</literal> D-Bus interface.
- * The returned reference must be released with g_object_unref().
- */
-#define GET_PHONEUI_CONTACTS(object_proxy) (g_dbus_object_proxy_lookup_with_typecheck (object_proxy, "org.shr.phoneui.Contacts", TYPE_PHONEUI_CONTACTS))
+#define TYPE_PHONEUI_CONTACTS (phoneui_contacts_get_type ())
+#define PHONEUI_CONTACTS(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_PHONEUI_CONTACTS, PhoneuiContacts))
+#define IS_PHONEUI_CONTACTS(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_PHONEUI_CONTACTS))
+#define PHONEUI_CONTACTS_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_PHONEUI_CONTACTS, PhoneuiContacts))
 
-/**
- * PEEK_PHONEUI_CONTACTS:
- * @object_proxy: A #GDBusObjectProxy.
- *
- * Like GET_PHONEUI_CONTACTS() but doesn't increase the reference count on the returned object.
- *
- * <note><para>This macro is not safe to use outside the thread where the #GDBusProxyManager for @object_proxy was constructed in.</para></note>
- *
- * Returns: A #GDBusProxy object implementing the #PhoneuiContacts interface or %NULL if @object_proxy
- * does not implement the <literal>org.shr.phoneui.Contacts</literal> D-Bus interface.
- * Do not free the returned object, it is owned by @object_proxy..
- */
-#define PEEK_PHONEUI_CONTACTS(object_proxy) (g_dbus_object_proxy_peek_with_typecheck (object_proxy, "org.shr.phoneui.Contacts", TYPE_PHONEUI_CONTACTS))
+struct _PhoneuiContacts;
+typedef struct _PhoneuiContacts PhoneuiContacts;
+typedef struct _PhoneuiContactsIface PhoneuiContactsIface;
 
+struct _PhoneuiContactsIface
+{
+  GTypeInterface parent_iface;
 
-/* ---------------------------------------------------------------------- */
+  gboolean (*handle_create_contact) (
+    PhoneuiContacts *object,
+    GDBusMethodInvocation *invocation,
+    GVariant *values);
 
-typedef struct _PhoneuiContactsProxy PhoneuiContactsProxy;
-typedef struct _PhoneuiContactsProxyClass PhoneuiContactsProxyClass;
+  gboolean (*handle_display_contact) (
+    PhoneuiContacts *object,
+    GDBusMethodInvocation *invocation,
+    const gchar *path);
 
-/**
- * PhoneuiContactsProxyPrivate:
- *
- * The #PhoneuiContactsProxyPrivate structure contains only private data.
- */
-typedef struct _PhoneuiContactsProxyPrivate PhoneuiContactsProxyPrivate;
+  gboolean (*handle_display_list) (
+    PhoneuiContacts *object,
+    GDBusMethodInvocation *invocation,
+    GVariant *filter);
 
-/**
- * PhoneuiContactsProxy:
- *
- * The #PhoneuiContactsProxy structure contains only private data and
- * should only be accessed using the provided API.
- */
-struct _PhoneuiContactsProxy
-{
-  /*< private >*/
-  GDBusProxy parent_instance;
-  PhoneuiContactsProxyPrivate *priv;
-};
+  gboolean (*handle_edit_contact) (
+    PhoneuiContacts *object,
+    GDBusMethodInvocation *invocation,
+    const gchar *path);
 
-/**
- * PhoneuiContactsProxyClass:
- *
- * Class structure for #PhoneuiContactsProxy.
- */
-struct _PhoneuiContactsProxyClass
-{
-  /*< private >*/
-  GDBusProxyClass parent_class;
 };
 
-#define TYPE_PHONEUI_CONTACTS_PROXY (phoneui_contacts_proxy_get_type ())
-GType phoneui_contacts_proxy_get_type (void) G_GNUC_CONST;
+GType phoneui_contacts_get_type (void) G_GNUC_CONST;
 
-void phoneui_contacts_proxy_new (GDBusConnection     *connection,
-                   GDBusProxyFlags      flags,
-                   const gchar         *name,
-                   const gchar         *object_path,
-                   GCancellable        *cancellable,
-                   GAsyncReadyCallback  callback,
-                   gpointer             user_data);
-PhoneuiContacts *phoneui_contacts_proxy_new_finish (GAsyncResult  *res,
-                        GError       **error);
-PhoneuiContacts *phoneui_contacts_proxy_new_sync (GDBusConnection     *connection,
-                       GDBusProxyFlags      flags,
-                       const gchar         *name,
-                       const gchar         *object_path,
-                       GCancellable        *cancellable,
-                       GError             **error);
-
-void phoneui_contacts_proxy_new_for_bus (GBusType             bus_type,
-                           GDBusProxyFlags      flags,
-                           const gchar         *name,
-                           const gchar         *object_path,
-                           GCancellable        *cancellable,
-                           GAsyncReadyCallback  callback,
-                           gpointer             user_data);
-PhoneuiContacts *phoneui_contacts_proxy_new_for_bus_finish (GAsyncResult  *res,
-                                 GError       **error);
-PhoneuiContacts *phoneui_contacts_proxy_new_for_bus_sync (GBusType             bus_type,
-                               GDBusProxyFlags      flags,
-                               const gchar         *name,
-                               const gchar         *object_path,
-                               GCancellable        *cancellable,
-                               GError             **error);
-
-/* ---------------------------------------------------------------------- */
-
-typedef struct _PhoneuiContactsStub PhoneuiContactsStub;
-typedef struct _PhoneuiContactsStubClass PhoneuiContactsStubClass;
-
-/**
- * PhoneuiContactsStubPrivate:
- *
- * The #PhoneuiContactsStubPrivate structure contains only private data.
- */
-typedef struct _PhoneuiContactsStubPrivate PhoneuiContactsStubPrivate;
-
-/**
- * PhoneuiContactsStub:
- *
- * The #PhoneuiContactsStub structure contains only private data and
- * should only be accessed using the provided API.
- */
-struct _PhoneuiContactsStub
-{
-  /*< private >*/
-  GObject parent_instance;
-  PhoneuiContactsStubPrivate *priv;
-};
-
-/**
- * PhoneuiContactsStubClass:
- *
- * Class structure for #PhoneuiContactsStub.
- */
-struct _PhoneuiContactsStubClass
-{
-  /*< private >*/
-  GObjectClass parent_class;
-};
+GDBusInterfaceInfo *phoneui_contacts_interface_info (void);
 
-#define TYPE_PHONEUI_CONTACTS_STUB (phoneui_contacts_stub_get_type ())
-GType phoneui_contacts_stub_get_type (void) G_GNUC_CONST;
 
-PhoneuiContacts *phoneui_contacts_stub_new (void);
+/* D-Bus method call completion functions: */
+void phoneui_contacts_complete_display_list (
+    PhoneuiContacts *object,
+    GDBusMethodInvocation *invocation);
 
+void phoneui_contacts_complete_display_contact (
+    PhoneuiContacts *object,
+    GDBusMethodInvocation *invocation);
 
-struct _PhoneuiContactsIface
-{
-  GTypeInterface parent_iface;
+void phoneui_contacts_complete_create_contact (
+    PhoneuiContacts *object,
+    GDBusMethodInvocation *invocation,
+    const gchar *path);
 
-  /* Signal handlers for handling D-Bus method calls: */
-  gboolean (*handle_display_list) (
-        PhoneuiContacts *object,
-        GDBusMethodInvocation *invocation,
-        GVariant *filter);
-  gboolean (*handle_display_contact) (
-        PhoneuiContacts *object,
-        GDBusMethodInvocation *invocation,
-        const gchar *path);
-  gboolean (*handle_create_contact) (
-        PhoneuiContacts *object,
-        GDBusMethodInvocation *invocation,
-        GVariant *values);
-  gboolean (*handle_edit_contact) (
-        PhoneuiContacts *object,
-        GDBusMethodInvocation *invocation,
-        const gchar *path);
-};
+void phoneui_contacts_complete_edit_contact (
+    PhoneuiContacts *object,
+    GDBusMethodInvocation *invocation);
 
-/* C Bindings for properties */
 
 
-/* D-Bus Methods */
+/* D-Bus method calls: */
 void phoneui_contacts_call_display_list (
-        PhoneuiContacts *proxy,
-        GVariant *filter,
-        GCancellable *cancellable,
-        GAsyncReadyCallback callback,
-        gpointer user_data);
+    PhoneuiContacts *proxy,
+    GVariant *filter,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data);
 
 gboolean phoneui_contacts_call_display_list_finish (
-        PhoneuiContacts *proxy,
-        GAsyncResult *res,
-        GError **error);
+    PhoneuiContacts *proxy,
+    GAsyncResult *res,
+    GError **error);
 
 gboolean phoneui_contacts_call_display_list_sync (
-        PhoneuiContacts *proxy,
-        GVariant *filter,
-        GCancellable *cancellable,
-        GError **error);
-
+    PhoneuiContacts *proxy,
+    GVariant *filter,
+    GCancellable *cancellable,
+    GError **error);
 
 void phoneui_contacts_call_display_contact (
-        PhoneuiContacts *proxy,
-        const gchar *path,
-        GCancellable *cancellable,
-        GAsyncReadyCallback callback,
-        gpointer user_data);
+    PhoneuiContacts *proxy,
+    const gchar *path,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data);
 
 gboolean phoneui_contacts_call_display_contact_finish (
-        PhoneuiContacts *proxy,
-        GAsyncResult *res,
-        GError **error);
+    PhoneuiContacts *proxy,
+    GAsyncResult *res,
+    GError **error);
 
 gboolean phoneui_contacts_call_display_contact_sync (
-        PhoneuiContacts *proxy,
-        const gchar *path,
-        GCancellable *cancellable,
-        GError **error);
-
+    PhoneuiContacts *proxy,
+    const gchar *path,
+    GCancellable *cancellable,
+    GError **error);
 
 void phoneui_contacts_call_create_contact (
-        PhoneuiContacts *proxy,
-        GVariant *values,
-        GCancellable *cancellable,
-        GAsyncReadyCallback callback,
-        gpointer user_data);
+    PhoneuiContacts *proxy,
+    GVariant *values,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data);
 
 gboolean phoneui_contacts_call_create_contact_finish (
-        PhoneuiContacts *proxy,
-        gchar **out_path,
-        GAsyncResult *res,
-        GError **error);
+    PhoneuiContacts *proxy,
+    gchar **out_path,
+    GAsyncResult *res,
+    GError **error);
 
 gboolean phoneui_contacts_call_create_contact_sync (
-        PhoneuiContacts *proxy,
-        GVariant *values,
-        gchar **out_path,
-        GCancellable *cancellable,
-        GError **error);
-
+    PhoneuiContacts *proxy,
+    GVariant *values,
+    gchar **out_path,
+    GCancellable *cancellable,
+    GError **error);
 
 void phoneui_contacts_call_edit_contact (
-        PhoneuiContacts *proxy,
-        const gchar *path,
-        GCancellable *cancellable,
-        GAsyncReadyCallback callback,
-        gpointer user_data);
+    PhoneuiContacts *proxy,
+    const gchar *path,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data);
 
 gboolean phoneui_contacts_call_edit_contact_finish (
-        PhoneuiContacts *proxy,
-        GAsyncResult *res,
-        GError **error);
+    PhoneuiContacts *proxy,
+    GAsyncResult *res,
+    GError **error);
 
 gboolean phoneui_contacts_call_edit_contact_sync (
-        PhoneuiContacts *proxy,
-        const gchar *path,
-        GCancellable *cancellable,
-        GError **error);
+    PhoneuiContacts *proxy,
+    const gchar *path,
+    GCancellable *cancellable,
+    GError **error);
 
 
 
-/* D-Bus Methods Completion Helpers */
-void phoneui_contacts_complete_display_list (
-        PhoneuiContacts *object,
-        GDBusMethodInvocation *invocation);
+/* ---- */
 
+#define TYPE_PHONEUI_CONTACTS_PROXY (phoneui_contacts_proxy_get_type ())
+#define PHONEUI_CONTACTS_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_PHONEUI_CONTACTS_PROXY, PhoneuiContactsProxy))
+#define PHONEUI_CONTACTS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_PHONEUI_CONTACTS_PROXY, PhoneuiContactsProxyClass))
+#define PHONEUI_CONTACTS_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_PHONEUI_CONTACTS_PROXY, PhoneuiContactsProxyClass))
+#define IS_PHONEUI_CONTACTS_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_PHONEUI_CONTACTS_PROXY))
+#define IS_PHONEUI_CONTACTS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_PHONEUI_CONTACTS_PROXY))
 
-void phoneui_contacts_complete_display_contact (
-        PhoneuiContacts *object,
-        GDBusMethodInvocation *invocation);
+typedef struct _PhoneuiContactsProxy PhoneuiContactsProxy;
+typedef struct _PhoneuiContactsProxyClass PhoneuiContactsProxyClass;
+typedef struct _PhoneuiContactsProxyPrivate PhoneuiContactsProxyPrivate;
 
+struct _PhoneuiContactsProxy
+{
+  GDBusProxy parent_instance;
+  PhoneuiContactsProxyPrivate *priv;
+};
 
-void phoneui_contacts_complete_create_contact (
-        PhoneuiContacts *object,
-        GDBusMethodInvocation *invocation,
-        const gchar *path);
+struct _PhoneuiContactsProxyClass
+{
+  GDBusProxyClass parent_class;
+};
 
+GType phoneui_contacts_proxy_get_type (void) G_GNUC_CONST;
 
-void phoneui_contacts_complete_edit_contact (
-        PhoneuiContacts *object,
-        GDBusMethodInvocation *invocation);
+void phoneui_contacts_proxy_new (
+    GDBusConnection     *connection,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GAsyncReadyCallback  callback,
+    gpointer             user_data);
+PhoneuiContacts *phoneui_contacts_proxy_new_finish (
+    GAsyncResult        *res,
+    GError             **error);
+PhoneuiContacts *phoneui_contacts_proxy_new_sync (
+    GDBusConnection     *connection,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GError             **error);
+
+void phoneui_contacts_proxy_new_for_bus (
+    GBusType             bus_type,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GAsyncReadyCallback  callback,
+    gpointer             user_data);
+PhoneuiContacts *phoneui_contacts_proxy_new_for_bus_finish (
+    GAsyncResult        *res,
+    GError             **error);
+PhoneuiContacts *phoneui_contacts_proxy_new_for_bus_sync (
+    GBusType             bus_type,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GError             **error);
+
+
+/* ---- */
+
+#define TYPE_PHONEUI_CONTACTS_SKELETON (phoneui_contacts_skeleton_get_type ())
+#define PHONEUI_CONTACTS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_PHONEUI_CONTACTS_SKELETON, PhoneuiContactsSkeleton))
+#define PHONEUI_CONTACTS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_PHONEUI_CONTACTS_SKELETON, PhoneuiContactsSkeletonClass))
+#define PHONEUI_CONTACTS_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_PHONEUI_CONTACTS_SKELETON, PhoneuiContactsSkeletonClass))
+#define IS_PHONEUI_CONTACTS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_PHONEUI_CONTACTS_SKELETON))
+#define IS_PHONEUI_CONTACTS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_PHONEUI_CONTACTS_SKELETON))
+
+typedef struct _PhoneuiContactsSkeleton PhoneuiContactsSkeleton;
+typedef struct _PhoneuiContactsSkeletonClass PhoneuiContactsSkeletonClass;
+typedef struct _PhoneuiContactsSkeletonPrivate PhoneuiContactsSkeletonPrivate;
+
+struct _PhoneuiContactsSkeleton
+{
+  GDBusInterfaceSkeleton parent_instance;
+  PhoneuiContactsSkeletonPrivate *priv;
+};
+
+struct _PhoneuiContactsSkeletonClass
+{
+  GDBusInterfaceSkeletonClass parent_class;
+};
 
+GType phoneui_contacts_skeleton_get_type (void) G_GNUC_CONST;
 
+PhoneuiContacts *phoneui_contacts_skeleton_new (void);
 
-/* D-Bus Signal Emission Helpers */
 
 G_END_DECLS
 
-#endif /* __SHR_PHONEUI_CONTACTS_H__ */
+#endif /* __SHR_PHONEUICONTACTS_H__ */
diff --git a/src/shr-phoneuidialer.c b/src/shr-phoneuidialer.c
index ac6cb08..8d11251 100644
--- a/src/shr-phoneuidialer.c
+++ b/src/shr-phoneuidialer.c
@@ -1,938 +1,509 @@
-/* File:       shr-phoneuidialer.c
- *
- * GType name: PhoneuiDialer
- * D-Bus name: org.shr.phoneui.Dialer
- *
- * Generated by GDBus Binding Tool 0.1. DO NOT EDIT.
- */
-
-/**
- * SECTION:shr-phoneuidialer
- * @title: PhoneuiDialer
- * @short_description: Wraps the org.shr.phoneui.Dialer D-Bus interface
- * @include: gio/gio.h
- *
- * The abstract #PhoneuiDialer interface type wraps the <literal>org.shr.phoneui.Dialer</literal> D-Bus interface. Two concrete implementations exists: #PhoneuiDialerProxy (for client-side usage) and #PhoneuiDialerStub (for service-side usage).
- *
- * This code was generated from the following D-Bus introspection XML:
- * <programlisting><![CDATA[
- * <interface name="org.shr.phoneui.Dialer">
- *   <method name="Display">
- *     <annotation name="org.freedesktop.DBus.GLib.Async" value="true">
- *     </annotation>
- *     <arg type="a{sv}" name="values" direction="in">
- *     </arg>
- *   </method>
- * </interface>
- * ]]></programlisting>
+/*
+ * Generated by gdbus-codegen 2.29.3. DO NOT EDIT.
  *
+ * The license of this code is the same as for the source it was derived from.
  */
 
-#include <shr-phoneuidialer.h>
-#include <shr-types.h>
-#include <shr-bindingsprivate.h>
-#include <shr-marshallers.h>
-
-static guint phoneui_dialer_register_object (GDBusInterface *object,
-                    GDBusConnection *connection,
-                    const gchar *object_path,
-                    GError **error);
-static void phoneui_dialer_flush (GDBusInterface *object);
-static GVariant *phoneui_dialer_get_properties (GDBusInterface *object);
-static GDBusInterfaceInfo *phoneui_dialer_g_dbus_interface_interface_info (GDBusInterface *object);
-static GDBusObject *phoneui_dialer_g_dbus_interface_get_object (GDBusInterface *interface);
-static void phoneui_dialer_g_dbus_interface_set_object (GDBusInterface *interface, GDBusObject *object);
-static GDBusInterfaceFlags phoneui_dialer_g_dbus_interface_get_flags (GDBusInterface *interface);
-static void phoneui_dialer_g_dbus_interface_set_flags (GDBusInterface *interface, GDBusInterfaceFlags flags);
-
-typedef PhoneuiDialerIface PhoneuiDialerInterface;
-#define phoneui_dialer_get_type phoneui_dialer_get_gtype
-G_DEFINE_INTERFACE (PhoneuiDialer, phoneui_dialer, G_TYPE_OBJECT);
-#undef phoneui_dialer_get_type
-
-
-enum
-{
-  _0_SIGNAL,
-  __DISPLAY_METHOD,
-  __LAST_SIGNAL
-};
-
-static guint signals[__LAST_SIGNAL] = {0};
-
-
-enum
-{
-  PROP_0,
-};
-
-/* ------------------------------------------------------------------------- */
+#ifdef HAVE_CONFIG_H
+#  include "config.h"
+#endif
 
-/* Various lookup tables */
+#include "shr-phoneuidialer.h"
 
-static GHashTable *_method_name_to_id = NULL;
-static GHashTable *_signal_name_to_id = NULL;
-static GHashTable *_property_name_to_id = NULL;
-static GHashTable *_property_gname_to_name = NULL;
-static GHashTable *_property_name_to_gname = NULL;
-
-
-static guint
-lookup_method_id_from_method_name (const gchar *method_name)
+typedef struct
 {
-  return GPOINTER_TO_UINT (g_hash_table_lookup (_method_name_to_id, method_name));
-}
+  GDBusArgInfo parent_struct;
+  gboolean use_gvariant;
+} _ExtendedGDBusArgInfo;
 
-static guint
-lookup_signal_id_from_signal_name (const gchar *signal_name)
+typedef struct
 {
-  return GPOINTER_TO_UINT (g_hash_table_lookup (_signal_name_to_id, signal_name));
-}
+  GDBusMethodInfo parent_struct;
+  const gchar *signal_name;
+} _ExtendedGDBusMethodInfo;
 
-static guint
-lookup_property_id_from_property_name (const gchar *property_name)
+typedef struct
 {
-  return GPOINTER_TO_UINT (g_hash_table_lookup (_property_name_to_id, property_name));
-}
+  GDBusSignalInfo parent_struct;
+  const gchar *signal_name;
+} _ExtendedGDBusSignalInfo;
 
-static const gchar *
-lookup_property_name_from_property_gname (const gchar *property_gname)
+typedef struct
 {
-  return g_hash_table_lookup (_property_gname_to_name, property_gname);
-}
+  GDBusPropertyInfo parent_struct;
+  const gchar *hyphen_name;
+  gboolean use_gvariant;
+} _ExtendedGDBusPropertyInfo;
 
-static const gchar *
-lookup_property_gname_from_property_name (const gchar *property_name)
+typedef struct
 {
-  return g_hash_table_lookup (_property_name_to_gname, property_name);
-}
+  GDBusInterfaceInfo parent_struct;
+  const gchar *hyphen_name;
+} _ExtendedGDBusInterfaceInfo;
 
-/* ------------------------------------------------------------------------- */
-static void dbus_iface_init (GDBusInterfaceIface *iface)
+typedef struct
 {
-  iface->get_info = phoneui_dialer_g_dbus_interface_interface_info;
-  iface->get_properties = phoneui_dialer_get_properties;
-  iface->flush = phoneui_dialer_flush;
-  iface->register_object = phoneui_dialer_register_object;
-  iface->set_object = phoneui_dialer_g_dbus_interface_set_object;
-  iface->get_object = phoneui_dialer_g_dbus_interface_get_object;
-  iface->set_flags = phoneui_dialer_g_dbus_interface_set_flags;
-  iface->get_flags = phoneui_dialer_g_dbus_interface_get_flags;
-}
+  const _ExtendedGDBusPropertyInfo *info;
+  guint prop_id;
+  GValue orig_value; /* the value before the change */
+} ChangedProperty;
 
 static void
-phoneui_dialer_default_init (PhoneuiDialerIface *iface)
+_changed_property_free (ChangedProperty *data)
 {
-
-  /* Build lookup structures */
-  _method_name_to_id = g_hash_table_new (g_str_hash, g_str_equal);
-  _signal_name_to_id = g_hash_table_new (g_str_hash, g_str_equal);
-  _property_name_to_id = g_hash_table_new (g_str_hash, g_str_equal);
-  _property_gname_to_name = g_hash_table_new (g_str_hash, g_str_equal);
-  _property_name_to_gname = g_hash_table_new (g_str_hash, g_str_equal);
-  g_hash_table_insert (_method_name_to_id, "Display", GUINT_TO_POINTER (__DISPLAY_METHOD));
-
-  /* GObject signals definitions for D-Bus signals: */
-
-  /* GObject signals definitions for D-Bus methods: */
-  /**
-   * PhoneuiDialer::handle-display:
-   * @object: The exported object emitting the signal.
-   * @invocation: A #GDBusMethodInvocation object that can be used to return a value or error.
-   * @values: Parameter.
-   *
-   * On exported objects, this signal is emitted when a remote process (identified by @invocation) invokes the <literal>org.shr.phoneui.Dialer.Display()</literal> D-Bus method on @object. Use phoneui_dialer_complete_display() to return a value or g_dbus_method_invocation_return_error() to return an error.
-   *
-   * The signal is emitted in the
-   * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
-   * of the thread that @object was registered in.
-   *
-   * On proxies, this signal is never emitted.
-   *
-   * Returns: %TRUE if you want to handle the method call (will stop further handlers from being called), %FALSE otherwise.
-   */
-  signals[__DISPLAY_METHOD] =
-    g_signal_new ("handle-display",
-                  G_TYPE_FROM_INTERFACE (iface),
-                  G_SIGNAL_RUN_LAST,
-                  G_STRUCT_OFFSET (PhoneuiDialerIface, handle_display),
-                  g_signal_accumulator_true_handled,
-                  NULL,
-                  _shr_gdbus_cclosure_marshaller_BOOLEAN__OBJECT_VARIANT,
-                  G_TYPE_BOOLEAN,
-                  2,
-                  G_TYPE_DBUS_METHOD_INVOCATION,
-                  G_TYPE_VARIANT);
-
-  /* GObject property definitions for D-Bus properties: */
+  g_value_unset (&data->orig_value);
+  g_free (data);
 }
 
-
-/* C Bindings for properties */
-
-/**
- * phoneui_dialer_call_display:
- * @proxy: A #PhoneuiDialer.
- * @values: Method parameter.
- * @cancellable: A #GCancellable or %NULL.
- * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL if you don't care about the result of the method invocation.
- * @user_data: Data to pass to @callback.
- *
- * Invokes the <literal>org.shr.phoneui.Dialer.Display()</literal>
- * D-Bus method on the remote object represented by @proxy.
- *
- * This is an asynchronous method. When the operation is finished,
- * callback will be invoked in the
- * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
- * of the thread you are calling this method from. You can then call
- * phoneui_dialer_call_display_finish() to get the result of the operation.
- * See phoneui_dialer_call_display_sync() for the synchronous version of this method.
- */
-void phoneui_dialer_call_display (
-        PhoneuiDialer *proxy,
-        GVariant *values,
-        GCancellable *cancellable,
-        GAsyncReadyCallback callback,
-        gpointer user_data)
+static gboolean
+_g_strv_equal0 (gchar **a, gchar **b)
 {
-  GVariant *_params;
-  _params = g_variant_new ("(*)",
-                           values);
-  g_dbus_proxy_call (G_DBUS_PROXY (proxy),
-                     "Display",
-                     _params,
-                     G_DBUS_CALL_FLAGS_NONE,
-                     -1,
-                     cancellable,
-                     callback,
-                     user_data);
+  gboolean ret = FALSE;
+  guint n;
+  if (a == NULL && b == NULL)
+    {
+      ret = TRUE;
+      goto out;
+    }
+  if (a == NULL || b == NULL)
+    goto out;
+  if (g_strv_length (a) != g_strv_length (b))
+    goto out;
+  for (n = 0; a[n] != NULL; n++)
+    if (g_strcmp0 (a[n], b[n]) != 0)
+      goto out;
+  ret = TRUE;
+out:
+  return ret;
 }
 
-/**
- * phoneui_dialer_call_display_finish:
- * @proxy: A #PhoneuiDialer.
- * @res: A #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_dialer_call_display().
- * @error: Return location for error or %NULL.
- *
- * Finishes invoking the <literal>org.shr.phoneui.Dialer.Display()</literal>
- * D-Bus method on the remote object represented by @proxy.
- *
- * Returns: %TRUE if the call succeeded, %FALSE if @error is set.
- */
-gboolean phoneui_dialer_call_display_finish (
-        PhoneuiDialer *proxy,
-        GAsyncResult *res,
-        GError **error)
+static gboolean
+_g_variant_equal0 (GVariant *a, GVariant *b)
 {
-  gboolean _ret = FALSE;
-  GVariant *_result;
-  _result = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
-  if (_result == NULL)
-    goto _out;
-  g_variant_unref (_result);
-  _ret = TRUE;
-_out:
-  return _ret;
+  gboolean ret = FALSE;
+  if (a == NULL && b == NULL)
+    {
+      ret = TRUE;
+      goto out;
+    }
+  if (a == NULL || b == NULL)
+    goto out;
+  ret = g_variant_equal (a, b);
+out:
+  return ret;
 }
 
-/**
- * phoneui_dialer_call_display_sync:
- * @proxy: A #PhoneuiDialer.
- * @values: Method parameter.
- * @cancellable: A #GCancellable or %NULL.
- * @error: Return location for error or %NULL.
- *
- * Synchronously invokes the <literal>org.shr.phoneui.Dialer.Display()</literal>
- * D-Bus method on the remote object represented by @proxy.
- * The calling thread is blocked until a reply is received. See
- * phoneui_dialer_call_display() for the asynchronous version of this method.
- *
- * Returns: %TRUE if the call succeeded, %FALSE if @error is set.
- */
-gboolean phoneui_dialer_call_display_sync (
-        PhoneuiDialer *proxy,
-        GVariant *values,
-        GCancellable *cancellable,
-        GError **error)
+G_GNUC_UNUSED static gboolean
+_g_value_equal (const GValue *a, const GValue *b)
 {
-  gboolean _ret = FALSE;
-  GVariant *_params;
-  GVariant *_result;
-  _params = g_variant_new ("(*)",
-                           values);
-  _result = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
-                                   "Display",
-                                   _params,
-                                   G_DBUS_CALL_FLAGS_NONE,
-                                   -1,
-                                   cancellable,
-                                   error);
-  if (_result == NULL)
-    goto _out;
-  g_variant_unref (_result);
-  _ret = TRUE;
-_out:
-  return _ret;
+  gboolean ret = FALSE;
+  g_assert (G_VALUE_TYPE (a) == G_VALUE_TYPE (b));
+  switch (G_VALUE_TYPE (a))
+    {
+      case G_TYPE_BOOLEAN:
+        ret = (g_value_get_boolean (a) == g_value_get_boolean (b));
+        break;
+      case G_TYPE_UCHAR:
+        ret = (g_value_get_uchar (a) == g_value_get_uchar (b));
+        break;
+      case G_TYPE_INT:
+        ret = (g_value_get_int (a) == g_value_get_int (b));
+        break;
+      case G_TYPE_UINT:
+        ret = (g_value_get_uint (a) == g_value_get_uint (b));
+        break;
+      case G_TYPE_INT64:
+        ret = (g_value_get_int64 (a) == g_value_get_int64 (b));
+        break;
+      case G_TYPE_UINT64:
+        ret = (g_value_get_uint64 (a) == g_value_get_uint64 (b));
+        break;
+      case G_TYPE_DOUBLE:
+        ret = (g_value_get_double (a) == g_value_get_double (b));
+        break;
+      case G_TYPE_STRING:
+        ret = (g_strcmp0 (g_value_get_string (a), g_value_get_string (b)) == 0);
+        break;
+      case G_TYPE_VARIANT:
+        ret = _g_variant_equal0 (g_value_get_variant (a), g_value_get_variant (b));
+        break;
+      default:
+        if (G_VALUE_TYPE (a) == G_TYPE_STRV)
+          ret = _g_strv_equal0 (g_value_get_boxed (a), g_value_get_boxed (b));
+        else
+          g_critical ("_g_value_equal() does not handle type %s", g_type_name (G_VALUE_TYPE (a)));
+        break;
+    }
+  return ret;
 }
 
+/* ------------------------------------------------------------------------
+ * Code for interface org.shr.phoneui.Dialer
+ * ------------------------------------------------------------------------
+ */
 
 /**
- * phoneui_dialer_complete_display:
- * @object: A #PhoneuiDialer.
- * @invocation: A #GDBusMethodInvocation.
- *
- * Completes handling the <literal>org.shr.phoneui.Dialer.Display()</literal>
- * D-Bus method invocation by returning a value.
- *
- * If you want to return an error, use g_dbus_method_invocation_return_error()
- * or similar instead.
+ * SECTION:PhoneuiDialer
+ * @title: PhoneuiDialer
+ * @short_description: Generated C code for the org.shr.phoneui.Dialer D-Bus interface
  *
- * This method will free @invocation, you cannot use it afterwards.
+ * This section contains code for working with the <link linkend="gdbus-interface-org-shr-phoneui-Dialer.top_of_page">org.shr.phoneui.Dialer</link> D-Bus interface in C.
  */
-void phoneui_dialer_complete_display (
-        PhoneuiDialer *object,
-        GDBusMethodInvocation *invocation)
-{
-  g_dbus_method_invocation_return_value (invocation, NULL);
-}
 
+/* ---- Introspection data for org.shr.phoneui.Dialer ---- */
 
-static const GDBusArgInfo phoneui_dialer_method_in_Display_values =
+static const _ExtendedGDBusArgInfo _phoneui_dialer_method_info_display_IN_ARG_values =
 {
-  -1,
-  "values",
-  "a{sv}",
-  (GDBusAnnotationInfo **) NULL
+  {
+    -1,
+    "values",
+    "a{sv}",
+    NULL
+  },
+  FALSE
 };
-static const GDBusArgInfo * const phoneui_dialer_method_in_Display_arg_pointers[] =
+
+static const _ExtendedGDBusArgInfo * const _phoneui_dialer_method_info_display_IN_ARG_pointers[] =
 {
-  &phoneui_dialer_method_in_Display_values,
+  &_phoneui_dialer_method_info_display_IN_ARG_values,
   NULL
 };
 
-static const GDBusAnnotationInfo Display_method_annotations_annotation_0 = {
+static const GDBusAnnotationInfo _phoneui_dialer_method_display_annotation_info_0 =
+{
   -1,
   "org.freedesktop.DBus.GLib.Async",
   "true",
-};
-
-static const GDBusAnnotationInfo *Display_method_annotations[] = {
-  &Display_method_annotations_annotation_0,
   NULL
 };
 
-static const GDBusMethodInfo phoneui_dialer_method_Display =
-{
-  -1,
-  "Display",
-  (GDBusArgInfo **) &phoneui_dialer_method_in_Display_arg_pointers,
-  (GDBusArgInfo **) NULL,
-  (GDBusAnnotationInfo **) Display_method_annotations,
-};
-
-static const GDBusMethodInfo * const phoneui_dialer_method_info_pointers[] =
+static const GDBusAnnotationInfo * const _phoneui_dialer_method_display_annotation_info_pointers[] =
 {
-  &phoneui_dialer_method_Display,
+  &_phoneui_dialer_method_display_annotation_info_0,
   NULL
 };
 
-static const GDBusInterfaceInfo _phoneui_dialer_interface_info =
-{
-  -1,
-  "org.shr.phoneui.Dialer",
-  (GDBusMethodInfo **) &phoneui_dialer_method_info_pointers,
-  (GDBusSignalInfo **) NULL,
-  (GDBusPropertyInfo **) NULL,
-  (GDBusAnnotationInfo **) NULL
-};
-
-static void
-handle_method_call_real (GDBusConnection       *connection,
-                         const gchar           *sender,
-                         const gchar           *object_path,
-                         const gchar           *interface_name,
-                         const gchar           *method_name,
-                         GVariant              *parameters,
-                         GDBusMethodInvocation *invocation,
-                         gpointer               user_data)
-{
-  guint method_id;
-  method_id = lookup_method_id_from_method_name (method_name);
-  switch (method_id)
-    {
-    case __DISPLAY_METHOD:
-      {
-        PhoneuiDialer *object = PHONEUI_DIALER (user_data);
-        gboolean handled;
-        GVariant *arg_values;
-        g_variant_get (parameters,
-                       "(*)",
-                       &arg_values);
-        g_signal_emit (object,
-                       signals[method_id],
-                       0, invocation, arg_values, &handled);
-        g_variant_unref ((gpointer) arg_values);
-        if (!handled)
-          goto not_implemented;
-      }
-      break;
-
-    default:
-not_implemented:
-      g_dbus_method_invocation_return_error (invocation,
-                                             G_DBUS_ERROR,
-                                             G_DBUS_ERROR_NOT_SUPPORTED,
-                                             "Method `%s' is not implemented",
-                                             method_name);
-      break;
-    }
-};
-
-typedef struct
-{
-  GDBusMethodInvocation *invocation;
-  gpointer               user_data;
-} HandleMethodInThreadData;
-
-static gboolean
-handle_method_call_in_thread_func (GIOSchedulerJob *job,
-                                   GCancellable    *cancellable,
-                                   gpointer         user_data)
-{
-  HandleMethodInThreadData *data = user_data;
-
-  handle_method_call_real (g_dbus_method_invocation_get_connection (data->invocation),
-                           g_dbus_method_invocation_get_sender (data->invocation),
-                           g_dbus_method_invocation_get_object_path (data->invocation),
-                           g_dbus_method_invocation_get_interface_name (data->invocation),
-                           g_dbus_method_invocation_get_method_name (data->invocation),
-                           g_dbus_method_invocation_get_parameters (data->invocation),
-                           data->invocation,
-                           data->user_data);
-  return FALSE; /* job is complete */
-}
-
-static void
-handle_method_call (GDBusConnection       *connection,
-                    const gchar           *sender,
-                    const gchar           *object_path,
-                    const gchar           *interface_name,
-                    const gchar           *method_name,
-                    GVariant              *parameters,
-                    GDBusMethodInvocation *invocation,
-                    gpointer               user_data)
-{
-  GDBusInterface *interface = G_DBUS_INTERFACE (user_data);
-  GDBusInterfaceFlags flags;
-
-  flags = g_dbus_interface_get_flags (interface);
-  if (flags & G_DBUS_INTERFACE_FLAGS_RUN_IN_THREAD)
-    {
-      HandleMethodInThreadData *data;
-      data = g_new0 (HandleMethodInThreadData, 1);
-      data->invocation = invocation;
-      data->user_data = user_data;
-      g_io_scheduler_push_job (handle_method_call_in_thread_func,
-                               data,
-                               g_free, /* since we don't need refs on objects */
-                               G_PRIORITY_DEFAULT,
-                               NULL); /* GCancellable* */
-    }
-  else
-    {
-      handle_method_call_real (connection,
-                               sender,
-                               object_path,
-                               interface_name,
-                               method_name,
-                               parameters,
-                               invocation,
-                               user_data);
-    }
-}
-
-static GVariant *
-get_property (GDBusConnection  *connection,
-              const gchar      *sender,
-              const gchar      *object_path,
-              const gchar      *interface_name,
-              const gchar      *property_name,
-              GError          **error,
-              gpointer          user_data)
+static const _ExtendedGDBusMethodInfo _phoneui_dialer_method_info_display =
 {
-  GVariant *ret;
-  guint prop_id;
-  prop_id = lookup_property_id_from_property_name (property_name);
-  ret = NULL;
-  switch (prop_id)
-    {
-    default:
-      g_assert_not_reached ();
-      break;
-    }
-
-  if (ret == NULL)
-    {
-      GVariant *untrusted_empty;
-      GDBusPropertyInfo *property_info;
-      const GVariantType *type;
-      property_info = g_dbus_interface_info_lookup_property ((GDBusInterfaceInfo *) &_phoneui_dialer_interface_info, property_name);
-      type = G_VARIANT_TYPE (property_info->signature);
-      untrusted_empty = g_variant_new_from_data (type, NULL, 0, FALSE, NULL, NULL);
-      ret = g_variant_get_normal_form (untrusted_empty);
-      g_variant_unref (untrusted_empty);
-    }
-
-  return ret;
+  {
+    -1,
+    "Display",
+    (GDBusArgInfo **) &_phoneui_dialer_method_info_display_IN_ARG_pointers,
+    NULL,
+    (GDBusAnnotationInfo **) &_phoneui_dialer_method_display_annotation_info_pointers
+  },
+  "handle-display"
 };
 
-static gboolean
-set_property (GDBusConnection  *connection,
-              const gchar      *sender,
-              const gchar      *object_path,
-              const gchar      *interface_name,
-              const gchar      *property_name,
-              GVariant         *value,
-              GError          **error,
-              gpointer          user_data)
+static const _ExtendedGDBusMethodInfo * const _phoneui_dialer_method_info_pointers[] =
 {
-  gboolean ret;
-  guint prop_id;
-  prop_id = lookup_property_id_from_property_name (property_name);
-  ret = TRUE;
-  switch (prop_id)
-    {
-    default:
-      g_set_error (error,
-                   G_DBUS_ERROR,
-                   G_DBUS_ERROR_NOT_SUPPORTED,
-                   "This implementation does not support property `%s'",
-                   property_name);
-      ret = FALSE;
-      break;
-    }
-
-  return ret;
+  &_phoneui_dialer_method_info_display,
+  NULL
 };
 
-static const GDBusInterfaceVTable phoneui_dialer_interface_vtable =
-{
-  handle_method_call,
-  get_property,
-  set_property,
+static const _ExtendedGDBusInterfaceInfo _phoneui_dialer_interface_info =
+{
+  {
+    -1,
+    "org.shr.phoneui.Dialer",
+    (GDBusMethodInfo **) &_phoneui_dialer_method_info_pointers,
+    NULL,
+    NULL,
+    NULL
+  },
+  "phoneui-dialer",
 };
 
-/* ---------------------------------------------------------------------- */
-
-typedef struct {
-  gpointer data;
-  gsize size;
-} _VariantBlob;
-
-static void
-_variant_blob_free (_VariantBlob *blob)
-{
-  g_free (blob->data);
-  g_free (blob);
-}
-
-static _VariantBlob *
-_variant_blob_new (GVariant *value)
-{
-  _VariantBlob *blob;
-  blob = g_new0 (_VariantBlob, 1);
-  blob->size = g_variant_get_size (value);
-  blob->data = g_malloc (blob->size);
-  g_variant_store (value, blob->data);
-  return blob;
-}
 
-static gboolean
-_variant_blob_equal (_VariantBlob *a,
-                    _VariantBlob *b)
+/**
+ * phoneui_dialer_interface_info:
+ *
+ * Gets a machine-readable description of the <link linkend="gdbus-interface-org-shr-phoneui-Dialer.top_of_page">org.shr.phoneui.Dialer</link> D-Bus interface.
+ *
+ * Returns: (transfer none): A #GDBusInterfaceInfo. Do not free.
+ */
+GDBusInterfaceInfo *
+phoneui_dialer_interface_info (void)
 {
-  return (a->size == b->size) && (memcmp (a->data, b->data, a->size) == 0);
+  return (GDBusInterfaceInfo *) &_phoneui_dialer_interface_info;
 }
-/* ---------------------------------------------------------------------- */
-
-static gboolean
-emit_notifications_in_idle (gpointer user_data)
-{
-  GObject *object = G_OBJECT (user_data);
-  GDBusConnection *connection;
-  const gchar *path;
-  GHashTable *notification_queue;
-  GHashTableIter iter;
-  const gchar *property_name;
-  GVariant *value;
-  GVariantBuilder builder;
-  GVariantBuilder invalidated_builder;
-  GHashTable *pvc;
-  gboolean has_changes;
-
-  notification_queue = g_object_get_data (object, "gdbus-codegen-notification-queue");
-  path = g_object_get_data (object, "gdbus-codegen-path");
-  connection = g_object_get_data (object, "gdbus-codegen-connection");
-  pvc = g_object_get_data (object, "gdbus-codegen-pvc");
-  g_assert (notification_queue != NULL && path != NULL && connection != NULL && pvc != NULL);
-
-  g_variant_builder_init (&builder, G_VARIANT_TYPE ("a{sv}"));
-  g_variant_builder_init (&invalidated_builder, G_VARIANT_TYPE ("as"));
-  g_hash_table_iter_init (&iter, notification_queue);
-  has_changes = FALSE;
-  while (g_hash_table_iter_next (&iter, (gpointer) &property_name, (gpointer) &value))
-    {
-      _VariantBlob *cached_blob;
-      _VariantBlob *blob;
-      cached_blob = g_hash_table_lookup (pvc, property_name);
-      blob = _variant_blob_new (value);
-      if (cached_blob == NULL || !_variant_blob_equal (cached_blob, blob))
-        {
-          g_hash_table_insert (pvc, (gpointer) property_name, blob);
-          g_variant_builder_add (&builder, "{sv}", property_name, value);
-          has_changes = TRUE;
-        }
-      else
-        {
-          _variant_blob_free (blob);
-        }
-    }
 
-  if (has_changes)
-    {
-      g_dbus_connection_emit_signal (connection,
-                                     NULL,
-                                     path,
-                                     "org.freedesktop.DBus.Properties",
-                                     "PropertiesChanged",
-                                     g_variant_new ("(sa{sv}as)",
-                                                    "org.shr.phoneui.Dialer",
-                                                    &builder,
-                                                    &invalidated_builder),
-                                     NULL);
-    }
-  else
-    {
-      g_variant_builder_clear (&builder);
-      g_variant_builder_clear (&invalidated_builder);
-    }
 
-  g_hash_table_remove_all (notification_queue);
-  g_object_set_data (object, "gdbus-codegen-notification-idle-source", NULL);
-  return FALSE;
-}
 
-static void
-queue_notification (GObject     *object,
-                    const gchar *property_name,
-                    GVariant    *value)
-{
-  GHashTable *notification_queue;
-  GSource *idle_source;
-  notification_queue = g_object_get_data (object, "gdbus-codegen-notification-queue");
-  if (notification_queue == NULL)
-    {
-      notification_queue = g_hash_table_new_full (g_str_hash, g_str_equal, NULL, (GDestroyNotify) g_variant_unref);
-      g_object_set_data_full (object, "gdbus-codegen-notification-queue", notification_queue, (GDestroyNotify) g_hash_table_unref);
-    }
-  g_hash_table_insert (notification_queue, (gpointer) property_name, (gpointer) value); /* adopts value */
-  idle_source = g_object_get_data (object, "gdbus-codegen-notification-idle-source");
-  if (idle_source == NULL)
-    {
-      idle_source = g_idle_source_new ();
-      g_source_set_priority (idle_source, G_PRIORITY_DEFAULT);
-      g_source_set_callback (idle_source,
-                             emit_notifications_in_idle,
-                             g_object_ref (object),
-                             (GDestroyNotify) g_object_unref);
-      g_source_attach (idle_source, g_main_context_get_thread_default ());
-      g_source_unref (idle_source);
-      g_object_set_data (object, "gdbus-codegen-notification-idle-source", idle_source);
-    }
-}
+/**
+ * PhoneuiDialer:
+ *
+ * Abstract interface type for the D-Bus interface <link linkend="gdbus-interface-org-shr-phoneui-Dialer.top_of_page">org.shr.phoneui.Dialer</link>.
+ */
 
-static void
-phoneui_dialer_flush (GDBusInterface *_object)
-{
-  PhoneuiDialer *object = PHONEUI_DIALER (_object);
-  GSource *idle_source;
-  idle_source = g_object_get_data (G_OBJECT (object), "gdbus-codegen-notification-idle-source");
-  if (idle_source != NULL)
-    {
-      emit_notifications_in_idle (object);
-      g_source_destroy (idle_source);
-    }
-}
+/**
+ * PhoneuiDialerIface:
+ * @parent_iface: The parent interface.
+ * @handle_display: Handler for the #PhoneuiDialer::handle-display signal.
+ *
+ * Virtual table for the D-Bus interface <link linkend="gdbus-interface-org-shr-phoneui-Dialer.top_of_page">org.shr.phoneui.Dialer</link>.
+ */
 
 static void
-on_notify (GObject    *object,
-           GParamSpec *pspec,
-           gpointer    user_data)
+phoneui_dialer_default_init (PhoneuiDialerIface *iface)
 {
-  GDBusConnection *connection;
-  const gchar *path;
-  GVariant *value;
-  const gchar *property_name;
-
-  path = g_object_get_data (object, "gdbus-codegen-path");
-  connection = g_object_get_data (object, "gdbus-codegen-connection");
-  if (connection == NULL || path == NULL)
-    goto out;
-  property_name = lookup_property_name_from_property_gname (pspec->name);
-  if (property_name == NULL)
-    goto out;
+  /* GObject signals for incoming D-Bus method calls: */
+  /**
+   * PhoneuiDialer::handle-display:
+   * @object: A #PhoneuiDialer.
+   * @invocation: A #GDBusMethodInvocation.
+   * @values: Argument passed by remote caller.
+   *
+   * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-shr-phoneui-Dialer.Display">Display()</link> D-Bus method.
+   *
+   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phoneui_dialer_complete_display() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
+   *
+   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
+   */
+  g_signal_new ("handle-display",
+    G_TYPE_FROM_INTERFACE (iface),
+    G_SIGNAL_RUN_LAST,
+    G_STRUCT_OFFSET (PhoneuiDialerIface, handle_display),
+    g_signal_accumulator_true_handled,
+    NULL,
+    g_cclosure_marshal_generic,
+    G_TYPE_BOOLEAN,
+    2,
+    G_TYPE_DBUS_METHOD_INVOCATION, G_TYPE_VARIANT);
 
-  value = get_property (connection, NULL, path, "org.shr.phoneui.Dialer", property_name, NULL, object);
-  if (value != NULL)
-    {
-      if (g_variant_is_floating (value))
-        g_variant_ref_sink (value);
-      queue_notification (object, property_name, value);
-    }
-out:
-  ;
 }
 
-static void
-on_object_unregistered (GObject *object)
-{
-  GSource *idle_source;
-  idle_source = g_object_get_data (G_OBJECT (object), "gdbus-codegen-notification-idle-source");
-  if (idle_source != NULL)
-    g_source_destroy (idle_source);
-  g_object_set_data (G_OBJECT (object), "gdbus-codegen-notification-idle-source", NULL);
-  g_object_set_data (G_OBJECT (object), "gdbus-codegen-path", NULL);
-  g_object_set_data (G_OBJECT (object), "gdbus-codegen-connection", NULL);
-  g_signal_handlers_disconnect_by_func (object, on_notify, NULL);
-}
+typedef PhoneuiDialerIface PhoneuiDialerInterface;
+G_DEFINE_INTERFACE (PhoneuiDialer, phoneui_dialer, G_TYPE_OBJECT);
 
-static guint
-phoneui_dialer_register_object (GDBusInterface *_object,
-           GDBusConnection *connection,
-           const gchar *object_path,
-           GError **error)
+/**
+ * phoneui_dialer_call_display:
+ * @proxy: A #PhoneuiDialerProxy.
+ * @values: Argument to pass with the method invocation.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL.
+ * @user_data: User data to pass to @callback.
+ *
+ * Asynchronously invokes the <link linkend="gdbus-method-org-shr-phoneui-Dialer.Display">Display()</link> D-Bus method on @proxy.
+ * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
+ * You can then call phoneui_dialer_call_display_finish() to get the result of the operation.
+ *
+ * See phoneui_dialer_call_display_sync() for the synchronous, blocking version of this method.
+ */
+void
+phoneui_dialer_call_display (
+    PhoneuiDialer *proxy,
+    GVariant *values,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data)
 {
-  PhoneuiDialer *object = PHONEUI_DIALER (_object);
-  GHashTable *pvc;
-  guint n;
-
-  pvc = g_hash_table_new_full (g_str_hash, g_str_equal, NULL, (GDestroyNotify) _variant_blob_free);
-  if (_phoneui_dialer_interface_info.properties != NULL)
-    {
-      for (n = 0; _phoneui_dialer_interface_info.properties[n] != NULL; n++)
-        {
-          GDBusPropertyInfo *prop_info = _phoneui_dialer_interface_info.properties[n];
-          if (prop_info->flags & G_DBUS_PROPERTY_INFO_FLAGS_READABLE)
-            {
-              GVariant *value;
-              value = get_property (connection, NULL, object_path, "org.shr.phoneui.Dialer", prop_info->name, NULL, object);
-              if (value != NULL)
-                {
-                  if (g_variant_is_floating (value))
-                    g_variant_ref_sink (value);
-                  g_hash_table_insert (pvc, prop_info->name, _variant_blob_new (value));
-                  g_variant_unref (value);
-                }
-            }
-        }
-    }
-
-  g_object_set_data_full (G_OBJECT (object), "gdbus-codegen-path", (gpointer) g_strdup (object_path), g_free);
-  g_object_set_data (G_OBJECT (object), "gdbus-codegen-connection", (gpointer) connection);
-  g_object_set_data_full (G_OBJECT (object), "gdbus-codegen-pvc", (gpointer) pvc, (GDestroyNotify) g_hash_table_unref);
-  g_signal_connect (object, "notify", G_CALLBACK (on_notify), NULL);
-  return g_dbus_connection_register_object (connection,
-          object_path,
-          (GDBusInterfaceInfo *) &_phoneui_dialer_interface_info,
-          &phoneui_dialer_interface_vtable,
-          object,
-          (GDestroyNotify) on_object_unregistered,
-          error);
+  g_dbus_proxy_call (G_DBUS_PROXY (proxy),
+    "Display",
+    g_variant_new ("(@a{sv})",
+                   values),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    callback,
+    user_data);
 }
 
 /**
- * phoneui_dialer_interface_info:
+ * phoneui_dialer_call_display_finish:
+ * @proxy: A #PhoneuiDialerProxy.
+ * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_dialer_call_display().
+ * @error: Return location for error or %NULL.
  *
- * Gets interface description for the <literal>org.shr.phoneui.Dialer</literal> D-Bus interface.
+ * Finishes an operation started with phoneui_dialer_call_display().
  *
- * Returns: A #GDBusInterfaceInfo. Do not free, the object is statically allocated.
+ * Returns: %TRUE if the call succeded, %FALSE if @error is set.
  */
-GDBusInterfaceInfo *
-phoneui_dialer_interface_info (void)
-{
-  return (GDBusInterfaceInfo *) &_phoneui_dialer_interface_info;
+gboolean
+phoneui_dialer_call_display_finish (
+    PhoneuiDialer *proxy,
+    GAsyncResult *res,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
+  if (_ret == NULL)
+    goto _out;
+  g_variant_get (_ret,
+                 "()");
+  g_variant_unref (_ret);
+_out:
+  return _ret != NULL;
 }
 
-static GDBusInterfaceInfo *
-phoneui_dialer_g_dbus_interface_interface_info (GDBusInterface *object)
-{
-  return phoneui_dialer_interface_info ();
+/**
+ * phoneui_dialer_call_display_sync:
+ * @proxy: A #PhoneuiDialerProxy.
+ * @values: Argument to pass with the method invocation.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @error: Return location for error or %NULL.
+ *
+ * Synchronously invokes the <link linkend="gdbus-method-org-shr-phoneui-Dialer.Display">Display()</link> D-Bus method on @proxy. The calling thread is blocked until a reply is received.
+ *
+ * See phoneui_dialer_call_display() for the asynchronous version of this method.
+ *
+ * Returns: %TRUE if the call succeded, %FALSE if @error is set.
+ */
+gboolean
+phoneui_dialer_call_display_sync (
+    PhoneuiDialer *proxy,
+    GVariant *values,
+    GCancellable *cancellable,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
+    "Display",
+    g_variant_new ("(@a{sv})",
+                   values),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    error);
+  if (_ret == NULL)
+    goto _out;
+  g_variant_get (_ret,
+                 "()");
+  g_variant_unref (_ret);
+_out:
+  return _ret != NULL;
 }
 
-static GVariant *
-phoneui_dialer_get_properties (GDBusInterface *object)
+/**
+ * phoneui_dialer_complete_display:
+ * @object: A #PhoneuiDialer.
+ * @invocation: (transfer full): A #GDBusMethodInvocation.
+ *
+ * Helper function used in service implementations to finish handling invocations of the <link linkend="gdbus-method-org-shr-phoneui-Dialer.Display">Display()</link> D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.
+ *
+ * This method will free @invocation, you cannot use it afterwards.
+ */
+void
+phoneui_dialer_complete_display (
+    PhoneuiDialer *object,
+    GDBusMethodInvocation *invocation)
 {
-  GDBusConnection *connection;
-  const gchar *object_path;
-  GVariantBuilder builder;
-  guint n;
-
-  g_variant_builder_init (&builder, G_VARIANT_TYPE ("a{sv}"));
-
-  if (_phoneui_dialer_interface_info.properties == NULL)
-    goto out;
-
-  connection = g_object_get_data (G_OBJECT (object), "gdbus-codegen-connection");
-  object_path = g_object_get_data (G_OBJECT (object), "gdbus-codegen-path");
-
-  for (n = 0; _phoneui_dialer_interface_info.properties[n] != NULL; n++)
-    {
-      GDBusPropertyInfo *prop_info = _phoneui_dialer_interface_info.properties[n];
-      if (prop_info->flags & G_DBUS_PROPERTY_INFO_FLAGS_READABLE)
-        {
-          GVariant *value;
-          value = get_property (connection, NULL, object_path, "org.shr.phoneui.Dialer", prop_info->name, NULL, object);
-          if (value != NULL)
-            {
-              if (g_variant_is_floating (value))
-                g_variant_ref_sink (value);
-              g_variant_builder_add (&builder, "{sv}", prop_info->name, value);
-              g_variant_unref (value);
-            }
-        }
-    }
-out:
-  return g_variant_builder_end (&builder);
+  g_dbus_method_invocation_return_value (invocation,
+    g_variant_new ("()"));
 }
 
+/* ------------------------------------------------------------------------ */
 
-/* ---------------------------------------------------------------------- */
-
-static void proxy_iface_init (PhoneuiDialerIface *iface);
+/**
+ * PhoneuiDialerProxy:
+ *
+ * The #PhoneuiDialerProxy structure contains only private data and should only be accessed using the provided API.
+ */
 
-G_DEFINE_TYPE_WITH_CODE (PhoneuiDialerProxy, phoneui_dialer_proxy, G_TYPE_DBUS_PROXY,
-                         G_IMPLEMENT_INTERFACE (TYPE_PHONEUI_DIALER, proxy_iface_init));
+/**
+ * PhoneuiDialerProxyClass:
+ * @parent_class: The parent class.
+ *
+ * Class structure for #PhoneuiDialerProxy.
+ */
 
 static void
-phoneui_dialer_proxy_init (PhoneuiDialerProxy *proxy)
+phoneui_dialer_proxy_iface_init (PhoneuiDialerIface *iface)
 {
-  g_dbus_proxy_set_interface_info (G_DBUS_PROXY (proxy),
-                                   (GDBusInterfaceInfo *) &_phoneui_dialer_interface_info);
 }
 
-static void
-g_signal (GDBusProxy  *proxy,
-          const gchar *sender_name,
-          const gchar *signal_name,
-          GVariant    *parameters)
-{
-  guint signal_id;
-  signal_id = lookup_signal_id_from_signal_name (signal_name);
-  switch (signal_id)
-    {
-    }
-}
+#define phoneui_dialer_proxy_get_type phoneui_dialer_proxy_get_type
+G_DEFINE_TYPE_WITH_CODE (PhoneuiDialerProxy, phoneui_dialer_proxy, G_TYPE_DBUS_PROXY,
+                         G_IMPLEMENT_INTERFACE (TYPE_PHONEUI_DIALER, phoneui_dialer_proxy_iface_init));
+#undef phoneui_dialer_proxy_get_type
 
 static void
 phoneui_dialer_proxy_get_property (GObject      *object,
-                       guint         prop_id,
-                       GValue       *value,
-                       GParamSpec   *pspec)
+  guint         prop_id,
+  GValue       *value,
+  GParamSpec   *pspec)
 {
-  G_GNUC_UNUSED GVariant *cached;
-  switch (prop_id)
-    {
-
-    default:
-      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
-      break;
-    }
 }
 
 static void
-property_set_cb (GDBusProxy   *proxy,
-                 GAsyncResult *res,
-                 gpointer      user_data)
+phoneui_dialer_proxy_set_property (GObject      *object,
+  guint         prop_id,
+  const GValue *value,
+  GParamSpec   *pspec)
 {
-  const gchar *property_name = user_data;
-  GError *error;
-  GVariant *result;
-
-  error = NULL;
-  result = g_dbus_proxy_call_finish (proxy, res, &error);
-  if (result == NULL)
-    {
-      g_warning ("Error setting property `%s': %s", property_name, error->message);
-      g_error_free (error);
-    }
-  else
-    {
-      g_variant_unref (result);
-    }
 }
 
 static void
-phoneui_dialer_proxy_set_property (GObject      *object,
-                       guint         prop_id,
-                       const GValue *value,
-                       GParamSpec   *pspec)
-{
-  GVariant *new_value;
-  const gchar *property_name;
-  new_value = NULL;
-  property_name = NULL;
-  switch (prop_id)
-    {
-
-    default:
-      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
-      break;
-    }
-
-  if (new_value != NULL)
+phoneui_dialer_proxy_g_signal (GDBusProxy *proxy,
+  const gchar *sender_name,
+  const gchar *signal_name,
+  GVariant *parameters)
+{
+  _ExtendedGDBusSignalInfo *info;
+  GVariantIter iter;
+  GVariant *child;
+  GValue *paramv;
+  guint num_params;
+  guint n;
+  guint signal_id;
+  info = (_ExtendedGDBusSignalInfo *) g_dbus_interface_info_lookup_signal ((GDBusInterfaceInfo *) &_phoneui_dialer_interface_info, signal_name);
+  if (info == NULL)
+    return;
+  num_params = g_variant_n_children (parameters);
+  paramv = g_new0 (GValue, num_params + 1);
+  g_value_init (&paramv[0], TYPE_PHONEUI_DIALER);
+  g_value_set_object (&paramv[0], proxy);
+  g_variant_iter_init (&iter, parameters);
+  n = 1;
+  while ((child = g_variant_iter_next_value (&iter)) != NULL)
     {
-      g_variant_ref_sink (new_value);
-      g_dbus_proxy_call (G_DBUS_PROXY (object),
-                         "org.freedesktop.DBus.Properties.Set",
-                         g_variant_new ("(ssv)",
-                                        "org.shr.phoneui.Dialer",
-                                        property_name,
-                                        new_value),
-                         G_DBUS_CALL_FLAGS_NONE,
-                         -1,
-                         NULL,
-                         (GAsyncReadyCallback) property_set_cb,
-                         (gpointer) property_name);
-      g_variant_unref (new_value);
+      _ExtendedGDBusArgInfo *arg_info = (_ExtendedGDBusArgInfo *) info->parent_struct.args[n - 1];
+      if (arg_info->use_gvariant)
+        {
+          g_value_init (&paramv[n], G_TYPE_VARIANT);
+          g_value_set_variant (&paramv[n], child);
+          n++;
+        }
+      else
+        g_dbus_gvariant_to_gvalue (child, &paramv[n++]);
+      g_variant_unref (child);
     }
-
+  signal_id = g_signal_lookup (info->signal_name, TYPE_PHONEUI_DIALER);
+  g_signal_emitv (paramv, signal_id, 0, NULL);
+  for (n = 0; n < num_params + 1; n++)
+    g_value_unset (&paramv[n]);
+  g_free (paramv);
 }
 
 static void
-g_properties_changed (GDBusProxy         *proxy,
-                      GVariant           *changed_properties,
-                      const gchar* const *invalidated_properties)
+phoneui_dialer_proxy_g_properties_changed (GDBusProxy *proxy,
+  GVariant *changed_properties,
+  const gchar *const *invalidated_properties)
 {
   guint n;
   const gchar *key;
   GVariantIter *iter;
-  const gchar *gname;
-
+  _ExtendedGDBusPropertyInfo *info;
   g_variant_get (changed_properties, "a{sv}", &iter);
   while (g_variant_iter_next (iter, "{&sv}", &key, NULL))
     {
-      gname = lookup_property_gname_from_property_name (key);
-      if (gname != NULL)
-        g_object_notify (G_OBJECT (proxy), gname);
+      info = (_ExtendedGDBusPropertyInfo *) g_dbus_interface_info_lookup_property ((GDBusInterfaceInfo *) &_phoneui_dialer_interface_info, key);
+      if (info != NULL)
+        g_object_notify (G_OBJECT (proxy), info->hyphen_name);
     }
-
+  g_variant_iter_free (iter);
   for (n = 0; invalidated_properties[n] != NULL; n++)
     {
-      gname = lookup_property_gname_from_property_name (invalidated_properties[n]);
-      if (gname != NULL)
-        g_object_notify (G_OBJECT (proxy), gname);
+      info = (_ExtendedGDBusPropertyInfo *) g_dbus_interface_info_lookup_property ((GDBusInterfaceInfo *) &_phoneui_dialer_interface_info, invalidated_properties[n]);
+      if (info != NULL)
+        g_object_notify (G_OBJECT (proxy), info->hyphen_name);
     }
+}
 
+static void
+phoneui_dialer_proxy_init (PhoneuiDialerProxy *proxy)
+{
+  g_dbus_proxy_set_interface_info (G_DBUS_PROXY (proxy), phoneui_dialer_interface_info ());
 }
 
 static void
@@ -946,74 +517,62 @@ phoneui_dialer_proxy_class_init (PhoneuiDialerProxyClass *klass)
   gobject_class->set_property = phoneui_dialer_proxy_set_property;
 
   proxy_class = G_DBUS_PROXY_CLASS (klass);
-  proxy_class->g_signal = g_signal;
-  proxy_class->g_properties_changed = g_properties_changed;
+  proxy_class->g_signal = phoneui_dialer_proxy_g_signal;
+  proxy_class->g_properties_changed = phoneui_dialer_proxy_g_properties_changed;
 
 }
 
-static void
-proxy_iface_init (PhoneuiDialerIface *iface)
-{
-}
-
-
 /**
  * phoneui_dialer_proxy_new:
  * @connection: A #GDBusConnection.
- * @flags: Flags used when constructing the proxy.
- * @name: A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.
+ * @flags: Flags from the #GDBusProxyFlags enumeration.
+ * @name: (allow-none): A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.
  * @object_path: An object path.
- * @cancellable: A #GCancellable or %NULL.
- * @callback: Callback function to invoke when the proxy is ready.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @callback: A #GAsyncReadyCallback to call when the request is satisfied.
  * @user_data: User data to pass to @callback.
  *
- * Like g_dbus_proxy_new() but returns a #PhoneuiDialerProxy.
+ * Asynchronously creates a proxy for the D-Bus interface <link linkend="gdbus-interface-org-shr-phoneui-Dialer.top_of_page">org.shr.phoneui.Dialer</link>. See g_dbus_proxy_new() for more details.
+ *
+ * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
+ * You can then call phoneui_dialer_proxy_new_finish() to get the result of the operation.
  *
- * This is a failable asynchronous constructor - when the proxy is ready, callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this function from. You can then call phoneui_dialer_proxy_new_finish() to get the result. See phoneui_dialer_proxy_new_sync() for the synchronous version.
+ * See phoneui_dialer_proxy_new_sync() for the synchronous, blocking version of this constructor.
  */
-void phoneui_dialer_proxy_new (GDBusConnection     *connection,
-                   GDBusProxyFlags      flags,
-                   const gchar         *name,
-                   const gchar         *object_path,
-                   GCancellable        *cancellable,
-                   GAsyncReadyCallback  callback,
-                   gpointer             user_data)
+void
+phoneui_dialer_proxy_new (
+    GDBusConnection     *connection,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GAsyncReadyCallback  callback,
+    gpointer             user_data)
 {
-  g_async_initable_new_async (TYPE_PHONEUI_DIALER_PROXY,
-                              G_PRIORITY_DEFAULT,
-                              cancellable,
-                              callback,
-                              user_data,
-                              "g-flags", flags,
-                              "g-name", name,
-                              "g-connection", connection,
-                              "g-object-path", object_path,
-                              "g-interface-name", "org.shr.phoneui.Dialer",
-                              NULL);
+  g_async_initable_new_async (TYPE_PHONEUI_DIALER_PROXY, G_PRIORITY_DEFAULT, cancellable, callback, user_data, "g-flags", flags, "g-name", name, "g-connection", connection, "g-object-path", object_path, "g-interface-name", "org.shr.phoneui.Dialer", NULL);
 }
 
 /**
  * phoneui_dialer_proxy_new_finish:
- * @res: A #GAsyncResult obtained from the #GAsyncReadyCallback function passed to phoneui_dialer_proxy_new().
- * @error: Return location for error or %NULL.
+ * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_dialer_proxy_new().
+ * @error: Return location for error or %NULL
  *
- * Finishes creating a #PhoneuiDialerProxy.
+ * Finishes an operation started with phoneui_dialer_proxy_new().
  *
- * Returns: A #PhoneuiDialerProxy or %NULL if @error is set. Free with g_object_unref().
+ * Returns: (transfer full) (type PhoneuiDialerProxy): The constructed proxy object or %NULL if @error is set.
  */
-PhoneuiDialer *phoneui_dialer_proxy_new_finish (GAsyncResult  *res,
-                        GError       **error)
+PhoneuiDialer *
+phoneui_dialer_proxy_new_finish (
+    GAsyncResult        *res,
+    GError             **error)
 {
-  GObject *object;
+  GObject *ret;
   GObject *source_object;
   source_object = g_async_result_get_source_object (res);
-  g_assert (source_object != NULL);
-  object = g_async_initable_new_finish (G_ASYNC_INITABLE (source_object),
-                                        res,
-                                        error);
+  ret = g_async_initable_new_finish (G_ASYNC_INITABLE (source_object), res, error);
   g_object_unref (source_object);
-  if (object != NULL)
-    return PHONEUI_DIALER (object);
+  if (ret != NULL)
+    return PHONEUI_DIALER (ret);
   else
     return NULL;
 }
@@ -1021,37 +580,33 @@ PhoneuiDialer *phoneui_dialer_proxy_new_finish (GAsyncResult  *res,
 /**
  * phoneui_dialer_proxy_new_sync:
  * @connection: A #GDBusConnection.
- * @flags: Flags used when constructing the proxy.
- * @name: A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.
+ * @flags: Flags from the #GDBusProxyFlags enumeration.
+ * @name: (allow-none): A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.
  * @object_path: An object path.
- * @cancellable: A #GCancellable or %NULL.
- * @error: Return location for error or %NULL.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @error: Return location for error or %NULL
+ *
+ * Synchronously creates a proxy for the D-Bus interface <link linkend="gdbus-interface-org-shr-phoneui-Dialer.top_of_page">org.shr.phoneui.Dialer</link>. See g_dbus_proxy_new_sync() for more details.
  *
- * Like g_dbus_proxy_new_sync() but returns a #PhoneuiDialerProxy.
+ * The calling thread is blocked until a reply is received.
  *
- * This is a synchronous failable constructor - the calling thread is blocked until the object is ready. See phoneui_dialer_proxy_new() for the asynchronous version.
+ * See phoneui_dialer_proxy_new() for the asynchronous version of this constructor.
  *
- * Returns: A #PhoneuiDialerProxy or %NULL if error is set. Free with g_object_unref().
+ * Returns: (transfer full) (type PhoneuiDialerProxy): The constructed proxy object or %NULL if @error is set.
  */
-PhoneuiDialer *phoneui_dialer_proxy_new_sync (GDBusConnection     *connection,
-                       GDBusProxyFlags      flags,
-                       const gchar         *name,
-                       const gchar         *object_path,
-                       GCancellable        *cancellable,
-                       GError             **error)
-{
-  GInitable *initable;
-  initable = g_initable_new (TYPE_PHONEUI_DIALER_PROXY,
-                             cancellable,
-                             error,
-                             "g-flags", flags,
-                             "g-name", name,
-                             "g-connection", connection,
-                             "g-object-path", object_path,
-                             "g-interface-name", "org.shr.phoneui.Dialer",
-                             NULL);
-  if (initable != NULL)
-    return PHONEUI_DIALER (initable);
+PhoneuiDialer *
+phoneui_dialer_proxy_new_sync (
+    GDBusConnection     *connection,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GError             **error)
+{
+  GInitable *ret;
+  ret = g_initable_new (TYPE_PHONEUI_DIALER_PROXY, cancellable, error, "g-flags", flags, "g-name", name, "g-connection", connection, "g-object-path", object_path, "g-interface-name", "org.shr.phoneui.Dialer", NULL);
+  if (ret != NULL)
+    return PHONEUI_DIALER (ret);
   else
     return NULL;
 }
@@ -1060,60 +615,54 @@ PhoneuiDialer *phoneui_dialer_proxy_new_sync (GDBusConnection     *connection,
 /**
  * phoneui_dialer_proxy_new_for_bus:
  * @bus_type: A #GBusType.
- * @flags: Flags used when constructing the proxy.
+ * @flags: Flags from the #GDBusProxyFlags enumeration.
  * @name: A bus name (well-known or unique).
  * @object_path: An object path.
- * @cancellable: A #GCancellable or %NULL.
- * @callback: Callback function to invoke when the proxy is ready.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @callback: A #GAsyncReadyCallback to call when the request is satisfied.
  * @user_data: User data to pass to @callback.
  *
- * Like g_dbus_proxy_new_for_bus() but returns a #PhoneuiDialerProxy.
+ * Like phoneui_dialer_proxy_new() but takes a #GBusType instead of a #GDBusConnection.
+ *
+ * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
+ * You can then call phoneui_dialer_proxy_new_for_bus_finish() to get the result of the operation.
  *
- * This is a failable asynchronous constructor - when the proxy is ready, callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this function from. You can then call phoneui_dialer_proxy_new_for_bus_finish() to get the result. See phoneui_dialer_proxy_new_for_bus_sync() for the synchronous version.
+ * See phoneui_dialer_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.
  */
-void phoneui_dialer_proxy_new_for_bus (GBusType             bus_type,
-                           GDBusProxyFlags      flags,
-                           const gchar         *name,
-                           const gchar         *object_path,
-                           GCancellable        *cancellable,
-                           GAsyncReadyCallback  callback,
-                           gpointer             user_data)
+void
+phoneui_dialer_proxy_new_for_bus (
+    GBusType             bus_type,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GAsyncReadyCallback  callback,
+    gpointer             user_data)
 {
-  g_async_initable_new_async (TYPE_PHONEUI_DIALER_PROXY,
-                              G_PRIORITY_DEFAULT,
-                              cancellable,
-                              callback,
-                              user_data,
-                              "g-flags", flags,
-                              "g-name", name,
-                              "g-bus-type", bus_type,
-                              "g-object-path", object_path,
-                              "g-interface-name", "org.shr.phoneui.Dialer",
-                              NULL);
+  g_async_initable_new_async (TYPE_PHONEUI_DIALER_PROXY, G_PRIORITY_DEFAULT, cancellable, callback, user_data, "g-flags", flags, "g-name", name, "g-bus-type", bus_type, "g-object-path", object_path, "g-interface-name", "org.shr.phoneui.Dialer", NULL);
 }
 
 /**
  * phoneui_dialer_proxy_new_for_bus_finish:
- * @res: A #GAsyncResult obtained from the #GAsyncReadyCallback function passed to phoneui_dialer_proxy_new_for_bus().
- * @error: Return location for error or %NULL.
+ * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_dialer_proxy_new_for_bus().
+ * @error: Return location for error or %NULL
  *
- * Finishes creating a #PhoneuiDialerProxy.
+ * Finishes an operation started with phoneui_dialer_proxy_new_for_bus().
  *
- * Returns: A #PhoneuiDialerProxy or %NULL if @error is set. Free with g_object_unref().
+ * Returns: (transfer full) (type PhoneuiDialerProxy): The constructed proxy object or %NULL if @error is set.
  */
-PhoneuiDialer *phoneui_dialer_proxy_new_for_bus_finish (GAsyncResult  *res,
-                                GError       **error)
+PhoneuiDialer *
+phoneui_dialer_proxy_new_for_bus_finish (
+    GAsyncResult        *res,
+    GError             **error)
 {
-  GObject *object;
+  GObject *ret;
   GObject *source_object;
   source_object = g_async_result_get_source_object (res);
-  g_assert (source_object != NULL);
-  object = g_async_initable_new_finish (G_ASYNC_INITABLE (source_object),
-                                        res,
-                                        error);
+  ret = g_async_initable_new_finish (G_ASYNC_INITABLE (source_object), res, error);
   g_object_unref (source_object);
-  if (object != NULL)
-    return PHONEUI_DIALER (object);
+  if (ret != NULL)
+    return PHONEUI_DIALER (ret);
   else
     return NULL;
 }
@@ -1121,163 +670,321 @@ PhoneuiDialer *phoneui_dialer_proxy_new_for_bus_finish (GAsyncResult  *res,
 /**
  * phoneui_dialer_proxy_new_for_bus_sync:
  * @bus_type: A #GBusType.
- * @flags: Flags used when constructing the proxy.
+ * @flags: Flags from the #GDBusProxyFlags enumeration.
  * @name: A bus name (well-known or unique).
  * @object_path: An object path.
- * @cancellable: A #GCancellable or %NULL.
- * @error: Return location for error or %NULL.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @error: Return location for error or %NULL
+ *
+ * Like phoneui_dialer_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.
  *
- * Like g_dbus_proxy_new_for_bus_sync() but returns a #PhoneuiDialerProxy.
+ * The calling thread is blocked until a reply is received.
  *
- * This is a synchronous failable constructor - the calling thread is blocked until the object is ready. See phoneui_dialer_proxy_new_for_bus() for the asynchronous version.
+ * See phoneui_dialer_proxy_new_for_bus() for the asynchronous version of this constructor.
  *
- * Returns: A #PhoneuiDialerProxy or %NULL if error is set. Free with g_object_unref().
+ * Returns: (transfer full) (type PhoneuiDialerProxy): The constructed proxy object or %NULL if @error is set.
  */
-PhoneuiDialer *phoneui_dialer_proxy_new_for_bus_sync (GBusType             bus_type,
-                               GDBusProxyFlags      flags,
-                               const gchar         *name,
-                               const gchar         *object_path,
-                               GCancellable        *cancellable,
-                               GError             **error)
-{
-  GInitable *initable;
-  initable = g_initable_new (TYPE_PHONEUI_DIALER_PROXY,
-                             cancellable,
-                             error,
-                             "g-flags", flags,
-                             "g-name", name,
-                             "g-bus-type", bus_type,
-                             "g-object-path", object_path,
-                             "g-interface-name", "org.shr.phoneui.Dialer",
-                             NULL);
-  if (initable != NULL)
-    return PHONEUI_DIALER (initable);
+PhoneuiDialer *
+phoneui_dialer_proxy_new_for_bus_sync (
+    GBusType             bus_type,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GError             **error)
+{
+  GInitable *ret;
+  ret = g_initable_new (TYPE_PHONEUI_DIALER_PROXY, cancellable, error, "g-flags", flags, "g-name", name, "g-bus-type", bus_type, "g-object-path", object_path, "g-interface-name", "org.shr.phoneui.Dialer", NULL);
+  if (ret != NULL)
+    return PHONEUI_DIALER (ret);
   else
     return NULL;
 }
 
 
-/* ---------------------------------------------------------------------- */
+/* ------------------------------------------------------------------------ */
+
+/**
+ * PhoneuiDialerSkeleton:
+ *
+ * The #PhoneuiDialerSkeleton structure contains only private data and should only be accessed using the provided API.
+ */
+
+/**
+ * PhoneuiDialerSkeletonClass:
+ * @parent_class: The parent class.
+ *
+ * Class structure for #PhoneuiDialerSkeleton.
+ */
 
-struct _PhoneuiDialerStubPrivate
+struct _PhoneuiDialerSkeletonPrivate
 {
-  GDBusObject *enclosing_object;
-  GDBusInterfaceFlags flags;
+  GValueArray *properties;
+  GList *changed_properties;
+  GSource *changed_properties_idle_source;
+  GMainContext *context;
 };
 
-static void stub_iface_init (PhoneuiDialerIface *iface);
+static void
+_phoneui_dialer_skeleton_handle_method_call (
+  GDBusConnection *connection,
+  const gchar *sender,
+  const gchar *object_path,
+  const gchar *interface_name,
+  const gchar *method_name,
+  GVariant *parameters,
+  GDBusMethodInvocation *invocation,
+  gpointer user_data)
+{
+  PhoneuiDialerSkeleton *skeleton = PHONEUI_DIALER_SKELETON (user_data);
+  _ExtendedGDBusMethodInfo *info;
+  GVariantIter iter;
+  GVariant *child;
+  GValue *paramv;
+  guint num_params;
+  guint n;
+  guint signal_id;
+  GValue return_value = {0};
+  info = (_ExtendedGDBusMethodInfo *) g_dbus_method_invocation_get_method_info (invocation);
+  g_assert (info != NULL);
+  num_params = g_variant_n_children (parameters);
+  paramv = g_new0 (GValue, num_params + 2);
+  g_value_init (&paramv[0], TYPE_PHONEUI_DIALER);
+  g_value_set_object (&paramv[0], skeleton);
+  g_value_init (&paramv[1], G_TYPE_DBUS_METHOD_INVOCATION);
+  g_value_set_object (&paramv[1], invocation);
+  g_variant_iter_init (&iter, parameters);
+  n = 2;
+  while ((child = g_variant_iter_next_value (&iter)) != NULL)
+    {
+      _ExtendedGDBusArgInfo *arg_info = (_ExtendedGDBusArgInfo *) info->parent_struct.in_args[n - 2];
+      if (arg_info->use_gvariant)
+        {
+          g_value_init (&paramv[n], G_TYPE_VARIANT);
+          g_value_set_variant (&paramv[n], child);
+          n++;
+        }
+      else
+        g_dbus_gvariant_to_gvalue (child, &paramv[n++]);
+      g_variant_unref (child);
+    }
+  signal_id = g_signal_lookup (info->signal_name, TYPE_PHONEUI_DIALER);
+  g_value_init (&return_value, G_TYPE_BOOLEAN);
+  g_signal_emitv (paramv, signal_id, 0, &return_value);
+  if (!g_value_get_boolean (&return_value))
+    g_dbus_method_invocation_return_error (invocation, G_DBUS_ERROR, G_DBUS_ERROR_UNKNOWN_METHOD, "Method %s is not implemented on interface %s", method_name, interface_name);
+  g_value_unset (&return_value);
+  for (n = 0; n < num_params + 2; n++)
+    g_value_unset (&paramv[n]);
+  g_free (paramv);
+}
 
-G_DEFINE_TYPE_WITH_CODE (PhoneuiDialerStub, phoneui_dialer_stub, G_TYPE_OBJECT,
-                         G_IMPLEMENT_INTERFACE (G_TYPE_DBUS_INTERFACE, dbus_iface_init)
-                         G_IMPLEMENT_INTERFACE (TYPE_PHONEUI_DIALER, stub_iface_init));
+static GVariant *
+_phoneui_dialer_skeleton_handle_get_property (
+  GDBusConnection *connection,
+  const gchar *sender,
+  const gchar *object_path,
+  const gchar *interface_name,
+  const gchar *property_name,
+  GError **error,
+  gpointer user_data)
+{
+  PhoneuiDialerSkeleton *skeleton = PHONEUI_DIALER_SKELETON (user_data);
+  GValue value = {0};
+  GParamSpec *pspec;
+  _ExtendedGDBusPropertyInfo *info;
+  GVariant *ret;
+  ret = NULL;
+  info = (_ExtendedGDBusPropertyInfo *) g_dbus_interface_info_lookup_property ((GDBusInterfaceInfo *) &_phoneui_dialer_interface_info, property_name);
+  g_assert (info != NULL);
+  pspec = g_object_class_find_property (G_OBJECT_GET_CLASS (skeleton), info->hyphen_name);
+  if (pspec == NULL)
+    {
+      g_set_error (error, G_DBUS_ERROR, G_DBUS_ERROR_INVALID_ARGS, "No property with name %s", property_name);
+    }
+  else
+    {
+      g_value_init (&value, pspec->value_type);
+      g_object_get_property (G_OBJECT (skeleton), info->hyphen_name, &value);
+      ret = g_dbus_gvalue_to_gvariant (&value, G_VARIANT_TYPE (info->parent_struct.signature));
+      g_value_unset (&value);
+    }
+  return ret;
+}
 
-static void
-phoneui_dialer_stub_finalize (GObject *object)
+static gboolean
+_phoneui_dialer_skeleton_handle_set_property (
+  GDBusConnection *connection,
+  const gchar *sender,
+  const gchar *object_path,
+  const gchar *interface_name,
+  const gchar *property_name,
+  GVariant *variant,
+  GError **error,
+  gpointer user_data)
+{
+  PhoneuiDialerSkeleton *skeleton = PHONEUI_DIALER_SKELETON (user_data);
+  GValue value = {0};
+  GParamSpec *pspec;
+  _ExtendedGDBusPropertyInfo *info;
+  gboolean ret;
+  ret = FALSE;
+  info = (_ExtendedGDBusPropertyInfo *) g_dbus_interface_info_lookup_property ((GDBusInterfaceInfo *) &_phoneui_dialer_interface_info, property_name);
+  g_assert (info != NULL);
+  pspec = g_object_class_find_property (G_OBJECT_GET_CLASS (skeleton), info->hyphen_name);
+  if (pspec == NULL)
+    {
+      g_set_error (error, G_DBUS_ERROR, G_DBUS_ERROR_INVALID_ARGS, "No property with name %s", property_name);
+    }
+  else
+    {
+      if (info->use_gvariant)
+        g_value_set_variant (&value, variant);
+      else
+        g_dbus_gvariant_to_gvalue (variant, &value);
+      g_object_set_property (G_OBJECT (skeleton), info->hyphen_name, &value);
+      g_value_unset (&value);
+      ret = TRUE;
+    }
+  return ret;
+}
+
+static const GDBusInterfaceVTable _phoneui_dialer_skeleton_vtable =
 {
-  G_GNUC_UNUSED PhoneuiDialerStub *stub = (PhoneuiDialerStub *) object;
+  _phoneui_dialer_skeleton_handle_method_call,
+  _phoneui_dialer_skeleton_handle_get_property,
+  _phoneui_dialer_skeleton_handle_set_property
+};
 
-  if (G_OBJECT_CLASS (phoneui_dialer_stub_parent_class)->finalize != NULL)
-    G_OBJECT_CLASS (phoneui_dialer_stub_parent_class)->finalize (object);
+static GDBusInterfaceInfo *
+phoneui_dialer_skeleton_dbus_interface_get_info (GDBusInterfaceSkeleton *skeleton)
+{
+  return phoneui_dialer_interface_info ();
 }
 
-static void
-phoneui_dialer_stub_get_property (GObject      *object,
-                      guint         prop_id,
-                      GValue       *value,
-                      GParamSpec   *pspec)
+static GDBusInterfaceVTable *
+phoneui_dialer_skeleton_dbus_interface_get_vtable (GDBusInterfaceSkeleton *skeleton)
 {
-  G_GNUC_UNUSED PhoneuiDialerStub *stub = (PhoneuiDialerStub *) object;
-  switch (prop_id)
-    {
-
-    default:
-      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
-      break;
-    }
+  return (GDBusInterfaceVTable *) &_phoneui_dialer_skeleton_vtable;
 }
 
-static void
-phoneui_dialer_stub_set_property (GObject      *object,
-                      guint         prop_id,
-                      const GValue *value,
-                      GParamSpec   *pspec)
+static GVariant *
+phoneui_dialer_skeleton_dbus_interface_get_properties (GDBusInterfaceSkeleton *_skeleton)
 {
-  G_GNUC_UNUSED PhoneuiDialerStub *stub = (PhoneuiDialerStub *) object;
-  switch (prop_id)
-    {
+  PhoneuiDialerSkeleton *skeleton = PHONEUI_DIALER_SKELETON (_skeleton);
 
-    default:
-      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
-      break;
+  GVariantBuilder builder;
+  guint n;
+  g_variant_builder_init (&builder, G_VARIANT_TYPE ("a{sv}"));
+  if (_phoneui_dialer_interface_info.parent_struct.properties == NULL)
+    goto out;
+  for (n = 0; _phoneui_dialer_interface_info.parent_struct.properties[n] != NULL; n++)
+    {
+      GDBusPropertyInfo *info = _phoneui_dialer_interface_info.parent_struct.properties[n];
+      if (info->flags & G_DBUS_PROPERTY_INFO_FLAGS_READABLE)
+        {
+          GVariant *value;
+          value = _phoneui_dialer_skeleton_handle_get_property (g_dbus_interface_skeleton_get_connection (G_DBUS_INTERFACE_SKELETON (skeleton)), NULL, g_dbus_interface_skeleton_get_object_path (G_DBUS_INTERFACE_SKELETON (skeleton)), "org.shr.phoneui.Dialer", info->name, NULL, skeleton);
+          if (value != NULL)
+            {
+              if (g_variant_is_floating (value))
+                g_variant_ref_sink (value);
+              g_variant_builder_add (&builder, "{sv}", info->name, value);
+              g_variant_unref (value);
+            }
+        }
     }
+out:
+  return g_variant_builder_end (&builder);
 }
 
 static void
-phoneui_dialer_stub_init (PhoneuiDialerStub *stub)
+phoneui_dialer_skeleton_dbus_interface_flush (GDBusInterfaceSkeleton *_skeleton)
 {
-  stub->priv = G_TYPE_INSTANCE_GET_PRIVATE (stub, TYPE_PHONEUI_DIALER_STUB, PhoneuiDialerStubPrivate);
 }
 
 static void
-phoneui_dialer_stub_class_init (PhoneuiDialerStubClass *klass)
+phoneui_dialer_skeleton_iface_init (PhoneuiDialerIface *iface)
 {
-  GObjectClass *gobject_class;
-
-  gobject_class = G_OBJECT_CLASS (klass);
-  gobject_class->finalize     = phoneui_dialer_stub_finalize;
-  gobject_class->get_property = phoneui_dialer_stub_get_property;
-  gobject_class->set_property = phoneui_dialer_stub_set_property;
-  g_type_class_add_private (klass, sizeof (PhoneuiDialerStubPrivate));
 }
 
+#define phoneui_dialer_skeleton_get_type phoneui_dialer_skeleton_get_type
+G_DEFINE_TYPE_WITH_CODE (PhoneuiDialerSkeleton, phoneui_dialer_skeleton, G_TYPE_DBUS_INTERFACE_SKELETON,
+                         G_IMPLEMENT_INTERFACE (TYPE_PHONEUI_DIALER, phoneui_dialer_skeleton_iface_init));
+#undef phoneui_dialer_skeleton_get_type
+
 static void
-stub_iface_init (PhoneuiDialerIface *iface)
+phoneui_dialer_skeleton_finalize (GObject *object)
 {
+  PhoneuiDialerSkeleton *skeleton = PHONEUI_DIALER_SKELETON (object);
+  g_list_foreach (skeleton->priv->changed_properties, (GFunc) _changed_property_free, NULL);
+  g_list_free (skeleton->priv->changed_properties);
+  if (skeleton->priv->changed_properties_idle_source != NULL)
+    g_source_destroy (skeleton->priv->changed_properties_idle_source);
+  if (skeleton->priv->context != NULL)
+    g_main_context_unref (skeleton->priv->context);
+  G_OBJECT_CLASS (phoneui_dialer_skeleton_parent_class)->finalize (object);
 }
 
-/**
- * phoneui_dialer_stub_new:
- *
- * Creates a new stub object that can be exported via g_dbus_interface_register_object().
- *
- * Returns: A #PhoneuiDialerStub instance. Free with g_object_unref().
- */
-PhoneuiDialer *
-phoneui_dialer_stub_new (void)
+static void
+phoneui_dialer_skeleton_get_property (GObject      *object,
+  guint         prop_id,
+  GValue       *value,
+  GParamSpec   *pspec)
 {
-  return PHONEUI_DIALER (g_object_new (TYPE_PHONEUI_DIALER_STUB, NULL));
+  PhoneuiDialerSkeleton *skeleton = PHONEUI_DIALER_SKELETON (object);
+  g_assert (prop_id - 1 >= 0 && prop_id - 1 < 0);
+  g_value_copy (&skeleton->priv->properties->values[prop_id - 1], value);
 }
 
-static GDBusObject *
-phoneui_dialer_g_dbus_interface_get_object (GDBusInterface *interface)
+static void
+phoneui_dialer_skeleton_set_property (GObject      *object,
+  guint         prop_id,
+  const GValue *value,
+  GParamSpec   *pspec)
 {
-  PhoneuiDialerStub *stub = G_TYPE_CHECK_INSTANCE_CAST (interface, TYPE_PHONEUI_DIALER_STUB, PhoneuiDialerStub);
-  if (stub->priv->enclosing_object != NULL)
-    return g_object_ref (stub->priv->enclosing_object);
-  else
-    return NULL;
 }
 
 static void
-phoneui_dialer_g_dbus_interface_set_object (GDBusInterface *interface,
-                                GDBusObject    *object)
+phoneui_dialer_skeleton_init (PhoneuiDialerSkeleton *skeleton)
 {
-  PhoneuiDialerStub *stub = G_TYPE_CHECK_INSTANCE_CAST (interface, TYPE_PHONEUI_DIALER_STUB, PhoneuiDialerStub);
-  stub->priv->enclosing_object = object;
+  skeleton->priv = G_TYPE_INSTANCE_GET_PRIVATE (skeleton, TYPE_PHONEUI_DIALER_SKELETON, PhoneuiDialerSkeletonPrivate);
+  skeleton->priv->context = g_main_context_get_thread_default ();
+  if (skeleton->priv->context != NULL)
+    g_main_context_ref (skeleton->priv->context);
 }
 
-static GDBusInterfaceFlags
-phoneui_dialer_g_dbus_interface_get_flags (GDBusInterface *interface)
+static void
+phoneui_dialer_skeleton_class_init (PhoneuiDialerSkeletonClass *klass)
 {
-  PhoneuiDialerStub *stub = G_TYPE_CHECK_INSTANCE_CAST (interface, TYPE_PHONEUI_DIALER_STUB, PhoneuiDialerStub);
-  return stub->priv->flags;
+  GObjectClass *gobject_class;
+  GDBusInterfaceSkeletonClass *skeleton_class;
+
+  g_type_class_add_private (klass, sizeof (PhoneuiDialerSkeletonPrivate));
+
+  gobject_class = G_OBJECT_CLASS (klass);
+  gobject_class->finalize = phoneui_dialer_skeleton_finalize;
+  gobject_class->get_property = phoneui_dialer_skeleton_get_property;
+  gobject_class->set_property = phoneui_dialer_skeleton_set_property;
+
+
+  skeleton_class = G_DBUS_INTERFACE_SKELETON_CLASS (klass);
+  skeleton_class->get_info = phoneui_dialer_skeleton_dbus_interface_get_info;
+  skeleton_class->get_properties = phoneui_dialer_skeleton_dbus_interface_get_properties;
+  skeleton_class->flush = phoneui_dialer_skeleton_dbus_interface_flush;
+  skeleton_class->get_vtable = phoneui_dialer_skeleton_dbus_interface_get_vtable;
 }
 
-static void
-phoneui_dialer_g_dbus_interface_set_flags (GDBusInterface      *interface,
-                               GDBusInterfaceFlags  flags)
+/**
+ * phoneui_dialer_skeleton_new:
+ *
+ * Creates a skeleton object for the D-Bus interface <link linkend="gdbus-interface-org-shr-phoneui-Dialer.top_of_page">org.shr.phoneui.Dialer</link>.
+ *
+ * Returns: (transfer full) (type PhoneuiDialerSkeleton): The skeleton object.
+ */
+PhoneuiDialer *
+phoneui_dialer_skeleton_new (void)
 {
-  PhoneuiDialerStub *stub = G_TYPE_CHECK_INSTANCE_CAST (interface, TYPE_PHONEUI_DIALER_STUB, PhoneuiDialerStub);
-  stub->priv->flags = flags;
+  return PHONEUI_DIALER (g_object_new (TYPE_PHONEUI_DIALER_SKELETON, NULL));
 }
 
diff --git a/src/shr-phoneuidialer.h b/src/shr-phoneuidialer.h
index aa3895f..fa6cc90 100644
--- a/src/shr-phoneuidialer.h
+++ b/src/shr-phoneuidialer.h
@@ -1,233 +1,167 @@
-/* File:       shr-phoneuidialer.h
+/*
+ * Generated by gdbus-codegen 2.29.3. DO NOT EDIT.
  *
- * GType name: PhoneuiDialer
- * D-Bus name: org.shr.phoneui.Dialer
- *
- * Generated by GDBus Binding Tool 0.1. DO NOT EDIT.
+ * The license of this code is the same as for the source it was derived from.
  */
 
-#ifndef __SHR_PHONEUI_DIALER_H__
-#define __SHR_PHONEUI_DIALER_H__
+#ifndef __SHR_PHONEUIDIALER_H__
+#define __SHR_PHONEUIDIALER_H__
 
 #include <gio/gio.h>
-#include <gdbusinterface.h>
-#include <gdbusobjectproxy.h>
-#include <gdbusproxymanager.h>
-#include <gdbusobject.h>
-#include <gdbusobjectmanager.h>
-#include <gdbuscodegen-enumtypes.h>
-#include <string.h>
-#include <shr-types.h>
 
 G_BEGIN_DECLS
 
-#define TYPE_PHONEUI_DIALER         (phoneui_dialer_get_gtype ())
-#define PHONEUI_DIALER(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_PHONEUI_DIALER, PhoneuiDialer))
-#define IS_PHONEUI_DIALER(o)        (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_PHONEUI_DIALER))
-#define PHONEUI_DIALER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE((o), TYPE_PHONEUI_DIALER, PhoneuiDialerIface))
 
-/**
- * PhoneuiDialer:
- *
- * Opaque type representing a proxy or an exported object.
- */
-typedef struct _PhoneuiDialer PhoneuiDialer; /* Dummy typedef */
-/**
- * PhoneuiDialerIface:
- * @parent_iface: The parent interface.
- * @handle_display: Handler for the #PhoneuiDialer::handle-display signal.
- *
- * Virtual table.
- */
+/* ------------------------------------------------------------------------ */
+/* Declarations for org.shr.phoneui.Dialer */
+
+#define TYPE_PHONEUI_DIALER (phoneui_dialer_get_type ())
+#define PHONEUI_DIALER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_PHONEUI_DIALER, PhoneuiDialer))
+#define IS_PHONEUI_DIALER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_PHONEUI_DIALER))
+#define PHONEUI_DIALER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_PHONEUI_DIALER, PhoneuiDialer))
+
+struct _PhoneuiDialer;
+typedef struct _PhoneuiDialer PhoneuiDialer;
 typedef struct _PhoneuiDialerIface PhoneuiDialerIface;
 
-GType phoneui_dialer_get_gtype (void) G_GNUC_CONST;
+struct _PhoneuiDialerIface
+{
+  GTypeInterface parent_iface;
+
+  gboolean (*handle_display) (
+    PhoneuiDialer *object,
+    GDBusMethodInvocation *invocation,
+    GVariant *values);
+
+};
+
+GType phoneui_dialer_get_type (void) G_GNUC_CONST;
+
 GDBusInterfaceInfo *phoneui_dialer_interface_info (void);
 
-/**
- * GET_PHONEUI_DIALER:
- * @object_proxy: A #GDBusObjectProxy.
- *
- * Convenience macro to get a #PhoneuiDialer interface proxy from @object_proxy.
- *
- * Returns: A #GDBusProxy object implementing the #PhoneuiDialer interface or %NULL if @object_proxy
- * does not implement the <literal>org.shr.phoneui.Dialer</literal> D-Bus interface.
- * The returned reference must be released with g_object_unref().
- */
-#define GET_PHONEUI_DIALER(object_proxy) (g_dbus_object_proxy_lookup_with_typecheck (object_proxy, "org.shr.phoneui.Dialer", TYPE_PHONEUI_DIALER))
 
-/**
- * PEEK_PHONEUI_DIALER:
- * @object_proxy: A #GDBusObjectProxy.
- *
- * Like GET_PHONEUI_DIALER() but doesn't increase the reference count on the returned object.
- *
- * <note><para>This macro is not safe to use outside the thread where the #GDBusProxyManager for @object_proxy was constructed in.</para></note>
- *
- * Returns: A #GDBusProxy object implementing the #PhoneuiDialer interface or %NULL if @object_proxy
- * does not implement the <literal>org.shr.phoneui.Dialer</literal> D-Bus interface.
- * Do not free the returned object, it is owned by @object_proxy..
- */
-#define PEEK_PHONEUI_DIALER(object_proxy) (g_dbus_object_proxy_peek_with_typecheck (object_proxy, "org.shr.phoneui.Dialer", TYPE_PHONEUI_DIALER))
+/* D-Bus method call completion functions: */
+void phoneui_dialer_complete_display (
+    PhoneuiDialer *object,
+    GDBusMethodInvocation *invocation);
+
+
+
+/* D-Bus method calls: */
+void phoneui_dialer_call_display (
+    PhoneuiDialer *proxy,
+    GVariant *values,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data);
+
+gboolean phoneui_dialer_call_display_finish (
+    PhoneuiDialer *proxy,
+    GAsyncResult *res,
+    GError **error);
+
+gboolean phoneui_dialer_call_display_sync (
+    PhoneuiDialer *proxy,
+    GVariant *values,
+    GCancellable *cancellable,
+    GError **error);
 
 
-/* ---------------------------------------------------------------------- */
+
+/* ---- */
+
+#define TYPE_PHONEUI_DIALER_PROXY (phoneui_dialer_proxy_get_type ())
+#define PHONEUI_DIALER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_PHONEUI_DIALER_PROXY, PhoneuiDialerProxy))
+#define PHONEUI_DIALER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_PHONEUI_DIALER_PROXY, PhoneuiDialerProxyClass))
+#define PHONEUI_DIALER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_PHONEUI_DIALER_PROXY, PhoneuiDialerProxyClass))
+#define IS_PHONEUI_DIALER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_PHONEUI_DIALER_PROXY))
+#define IS_PHONEUI_DIALER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_PHONEUI_DIALER_PROXY))
 
 typedef struct _PhoneuiDialerProxy PhoneuiDialerProxy;
 typedef struct _PhoneuiDialerProxyClass PhoneuiDialerProxyClass;
-
-/**
- * PhoneuiDialerProxyPrivate:
- *
- * The #PhoneuiDialerProxyPrivate structure contains only private data.
- */
 typedef struct _PhoneuiDialerProxyPrivate PhoneuiDialerProxyPrivate;
 
-/**
- * PhoneuiDialerProxy:
- *
- * The #PhoneuiDialerProxy structure contains only private data and
- * should only be accessed using the provided API.
- */
 struct _PhoneuiDialerProxy
 {
-  /*< private >*/
   GDBusProxy parent_instance;
   PhoneuiDialerProxyPrivate *priv;
 };
 
-/**
- * PhoneuiDialerProxyClass:
- *
- * Class structure for #PhoneuiDialerProxy.
- */
 struct _PhoneuiDialerProxyClass
 {
-  /*< private >*/
   GDBusProxyClass parent_class;
 };
 
-#define TYPE_PHONEUI_DIALER_PROXY (phoneui_dialer_proxy_get_type ())
 GType phoneui_dialer_proxy_get_type (void) G_GNUC_CONST;
 
-void phoneui_dialer_proxy_new (GDBusConnection     *connection,
-                   GDBusProxyFlags      flags,
-                   const gchar         *name,
-                   const gchar         *object_path,
-                   GCancellable        *cancellable,
-                   GAsyncReadyCallback  callback,
-                   gpointer             user_data);
-PhoneuiDialer *phoneui_dialer_proxy_new_finish (GAsyncResult  *res,
-                        GError       **error);
-PhoneuiDialer *phoneui_dialer_proxy_new_sync (GDBusConnection     *connection,
-                       GDBusProxyFlags      flags,
-                       const gchar         *name,
-                       const gchar         *object_path,
-                       GCancellable        *cancellable,
-                       GError             **error);
-
-void phoneui_dialer_proxy_new_for_bus (GBusType             bus_type,
-                           GDBusProxyFlags      flags,
-                           const gchar         *name,
-                           const gchar         *object_path,
-                           GCancellable        *cancellable,
-                           GAsyncReadyCallback  callback,
-                           gpointer             user_data);
-PhoneuiDialer *phoneui_dialer_proxy_new_for_bus_finish (GAsyncResult  *res,
-                                 GError       **error);
-PhoneuiDialer *phoneui_dialer_proxy_new_for_bus_sync (GBusType             bus_type,
-                               GDBusProxyFlags      flags,
-                               const gchar         *name,
-                               const gchar         *object_path,
-                               GCancellable        *cancellable,
-                               GError             **error);
-
-/* ---------------------------------------------------------------------- */
-
-typedef struct _PhoneuiDialerStub PhoneuiDialerStub;
-typedef struct _PhoneuiDialerStubClass PhoneuiDialerStubClass;
-
-/**
- * PhoneuiDialerStubPrivate:
- *
- * The #PhoneuiDialerStubPrivate structure contains only private data.
- */
-typedef struct _PhoneuiDialerStubPrivate PhoneuiDialerStubPrivate;
-
-/**
- * PhoneuiDialerStub:
- *
- * The #PhoneuiDialerStub structure contains only private data and
- * should only be accessed using the provided API.
- */
-struct _PhoneuiDialerStub
+void phoneui_dialer_proxy_new (
+    GDBusConnection     *connection,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GAsyncReadyCallback  callback,
+    gpointer             user_data);
+PhoneuiDialer *phoneui_dialer_proxy_new_finish (
+    GAsyncResult        *res,
+    GError             **error);
+PhoneuiDialer *phoneui_dialer_proxy_new_sync (
+    GDBusConnection     *connection,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GError             **error);
+
+void phoneui_dialer_proxy_new_for_bus (
+    GBusType             bus_type,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GAsyncReadyCallback  callback,
+    gpointer             user_data);
+PhoneuiDialer *phoneui_dialer_proxy_new_for_bus_finish (
+    GAsyncResult        *res,
+    GError             **error);
+PhoneuiDialer *phoneui_dialer_proxy_new_for_bus_sync (
+    GBusType             bus_type,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GError             **error);
+
+
+/* ---- */
+
+#define TYPE_PHONEUI_DIALER_SKELETON (phoneui_dialer_skeleton_get_type ())
+#define PHONEUI_DIALER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_PHONEUI_DIALER_SKELETON, PhoneuiDialerSkeleton))
+#define PHONEUI_DIALER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_PHONEUI_DIALER_SKELETON, PhoneuiDialerSkeletonClass))
+#define PHONEUI_DIALER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_PHONEUI_DIALER_SKELETON, PhoneuiDialerSkeletonClass))
+#define IS_PHONEUI_DIALER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_PHONEUI_DIALER_SKELETON))
+#define IS_PHONEUI_DIALER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_PHONEUI_DIALER_SKELETON))
+
+typedef struct _PhoneuiDialerSkeleton PhoneuiDialerSkeleton;
+typedef struct _PhoneuiDialerSkeletonClass PhoneuiDialerSkeletonClass;
+typedef struct _PhoneuiDialerSkeletonPrivate PhoneuiDialerSkeletonPrivate;
+
+struct _PhoneuiDialerSkeleton
 {
-  /*< private >*/
-  GObject parent_instance;
-  PhoneuiDialerStubPrivate *priv;
+  GDBusInterfaceSkeleton parent_instance;
+  PhoneuiDialerSkeletonPrivate *priv;
 };
 
-/**
- * PhoneuiDialerStubClass:
- *
- * Class structure for #PhoneuiDialerStub.
- */
-struct _PhoneuiDialerStubClass
-{
-  /*< private >*/
-  GObjectClass parent_class;
-};
-
-#define TYPE_PHONEUI_DIALER_STUB (phoneui_dialer_stub_get_type ())
-GType phoneui_dialer_stub_get_type (void) G_GNUC_CONST;
-
-PhoneuiDialer *phoneui_dialer_stub_new (void);
-
-
-struct _PhoneuiDialerIface
+struct _PhoneuiDialerSkeletonClass
 {
-  GTypeInterface parent_iface;
-
-  /* Signal handlers for handling D-Bus method calls: */
-  gboolean (*handle_display) (
-        PhoneuiDialer *object,
-        GDBusMethodInvocation *invocation,
-        GVariant *values);
+  GDBusInterfaceSkeletonClass parent_class;
 };
 
-/* C Bindings for properties */
-
-
-/* D-Bus Methods */
-void phoneui_dialer_call_display (
-        PhoneuiDialer *proxy,
-        GVariant *values,
-        GCancellable *cancellable,
-        GAsyncReadyCallback callback,
-        gpointer user_data);
-
-gboolean phoneui_dialer_call_display_finish (
-        PhoneuiDialer *proxy,
-        GAsyncResult *res,
-        GError **error);
-
-gboolean phoneui_dialer_call_display_sync (
-        PhoneuiDialer *proxy,
-        GVariant *values,
-        GCancellable *cancellable,
-        GError **error);
-
-
-
-/* D-Bus Methods Completion Helpers */
-void phoneui_dialer_complete_display (
-        PhoneuiDialer *object,
-        GDBusMethodInvocation *invocation);
-
+GType phoneui_dialer_skeleton_get_type (void) G_GNUC_CONST;
 
+PhoneuiDialer *phoneui_dialer_skeleton_new (void);
 
-/* D-Bus Signal Emission Helpers */
 
 G_END_DECLS
 
-#endif /* __SHR_PHONEUI_DIALER_H__ */
+#endif /* __SHR_PHONEUIDIALER_H__ */
diff --git a/src/shr-phoneuiidlescreen.c b/src/shr-phoneuiidlescreen.c
index e68a4f0..72e6159 100644
--- a/src/shr-phoneuiidlescreen.c
+++ b/src/shr-phoneuiidlescreen.c
@@ -1,1655 +1,1126 @@
-/* File:       shr-phoneuiidlescreen.c
+/*
+ * Generated by gdbus-codegen 2.29.3. DO NOT EDIT.
  *
- * GType name: PhoneuiIdleScreen
- * D-Bus name: org.shr.phoneui.IdleScreen
- *
- * Generated by GDBus Binding Tool 0.1. DO NOT EDIT.
+ * The license of this code is the same as for the source it was derived from.
+ */
+
+#ifdef HAVE_CONFIG_H
+#  include "config.h"
+#endif
+
+#include "shr-phoneuiidlescreen.h"
+
+typedef struct
+{
+  GDBusArgInfo parent_struct;
+  gboolean use_gvariant;
+} _ExtendedGDBusArgInfo;
+
+typedef struct
+{
+  GDBusMethodInfo parent_struct;
+  const gchar *signal_name;
+} _ExtendedGDBusMethodInfo;
+
+typedef struct
+{
+  GDBusSignalInfo parent_struct;
+  const gchar *signal_name;
+} _ExtendedGDBusSignalInfo;
+
+typedef struct
+{
+  GDBusPropertyInfo parent_struct;
+  const gchar *hyphen_name;
+  gboolean use_gvariant;
+} _ExtendedGDBusPropertyInfo;
+
+typedef struct
+{
+  GDBusInterfaceInfo parent_struct;
+  const gchar *hyphen_name;
+} _ExtendedGDBusInterfaceInfo;
+
+typedef struct
+{
+  const _ExtendedGDBusPropertyInfo *info;
+  guint prop_id;
+  GValue orig_value; /* the value before the change */
+} ChangedProperty;
+
+static void
+_changed_property_free (ChangedProperty *data)
+{
+  g_value_unset (&data->orig_value);
+  g_free (data);
+}
+
+static gboolean
+_g_strv_equal0 (gchar **a, gchar **b)
+{
+  gboolean ret = FALSE;
+  guint n;
+  if (a == NULL && b == NULL)
+    {
+      ret = TRUE;
+      goto out;
+    }
+  if (a == NULL || b == NULL)
+    goto out;
+  if (g_strv_length (a) != g_strv_length (b))
+    goto out;
+  for (n = 0; a[n] != NULL; n++)
+    if (g_strcmp0 (a[n], b[n]) != 0)
+      goto out;
+  ret = TRUE;
+out:
+  return ret;
+}
+
+static gboolean
+_g_variant_equal0 (GVariant *a, GVariant *b)
+{
+  gboolean ret = FALSE;
+  if (a == NULL && b == NULL)
+    {
+      ret = TRUE;
+      goto out;
+    }
+  if (a == NULL || b == NULL)
+    goto out;
+  ret = g_variant_equal (a, b);
+out:
+  return ret;
+}
+
+G_GNUC_UNUSED static gboolean
+_g_value_equal (const GValue *a, const GValue *b)
+{
+  gboolean ret = FALSE;
+  g_assert (G_VALUE_TYPE (a) == G_VALUE_TYPE (b));
+  switch (G_VALUE_TYPE (a))
+    {
+      case G_TYPE_BOOLEAN:
+        ret = (g_value_get_boolean (a) == g_value_get_boolean (b));
+        break;
+      case G_TYPE_UCHAR:
+        ret = (g_value_get_uchar (a) == g_value_get_uchar (b));
+        break;
+      case G_TYPE_INT:
+        ret = (g_value_get_int (a) == g_value_get_int (b));
+        break;
+      case G_TYPE_UINT:
+        ret = (g_value_get_uint (a) == g_value_get_uint (b));
+        break;
+      case G_TYPE_INT64:
+        ret = (g_value_get_int64 (a) == g_value_get_int64 (b));
+        break;
+      case G_TYPE_UINT64:
+        ret = (g_value_get_uint64 (a) == g_value_get_uint64 (b));
+        break;
+      case G_TYPE_DOUBLE:
+        ret = (g_value_get_double (a) == g_value_get_double (b));
+        break;
+      case G_TYPE_STRING:
+        ret = (g_strcmp0 (g_value_get_string (a), g_value_get_string (b)) == 0);
+        break;
+      case G_TYPE_VARIANT:
+        ret = _g_variant_equal0 (g_value_get_variant (a), g_value_get_variant (b));
+        break;
+      default:
+        if (G_VALUE_TYPE (a) == G_TYPE_STRV)
+          ret = _g_strv_equal0 (g_value_get_boxed (a), g_value_get_boxed (b));
+        else
+          g_critical ("_g_value_equal() does not handle type %s", g_type_name (G_VALUE_TYPE (a)));
+        break;
+    }
+  return ret;
+}
+
+/* ------------------------------------------------------------------------
+ * Code for interface org.shr.phoneui.IdleScreen
+ * ------------------------------------------------------------------------
  */
 
 /**
- * SECTION:shr-phoneuiidlescreen
+ * SECTION:PhoneuiIdleScreen
  * @title: PhoneuiIdleScreen
- * @short_description: Wraps the org.shr.phoneui.IdleScreen D-Bus interface
- * @include: gio/gio.h
- *
- * The abstract #PhoneuiIdleScreen interface type wraps the <literal>org.shr.phoneui.IdleScreen</literal> D-Bus interface. Two concrete implementations exists: #PhoneuiIdleScreenProxy (for client-side usage) and #PhoneuiIdleScreenStub (for service-side usage).
- *
- * This code was generated from the following D-Bus introspection XML:
- * <programlisting><![CDATA[
- * <interface name="org.shr.phoneui.IdleScreen">
- *   <method name="Display">
- *     <annotation name="org.freedesktop.DBus.GLib.Async" value="true">
- *     </annotation>
- *   </method>
- *   <method name="Hide">
- *     <annotation name="org.freedesktop.DBus.GLib.Async" value="true">
- *     </annotation>
- *   </method>
- *   <method name="Toggle">
- *     <annotation name="org.freedesktop.DBus.GLib.Async" value="true">
- *     </annotation>
- *   </method>
- *   <method name="ActivateScreensaver">
- *     <annotation name="org.freedesktop.DBus.GLib.Async" value="true">
- *     </annotation>
- *   </method>
- *   <method name="DeactivateScreensaver">
- *     <annotation name="org.freedesktop.DBus.GLib.Async" value="true">
- *     </annotation>
- *   </method>
- * </interface>
- * ]]></programlisting>
+ * @short_description: Generated C code for the org.shr.phoneui.IdleScreen D-Bus interface
  *
+ * This section contains code for working with the <link linkend="gdbus-interface-org-shr-phoneui-IdleScreen.top_of_page">org.shr.phoneui.IdleScreen</link> D-Bus interface in C.
  */
 
-#include <shr-phoneuiidlescreen.h>
-#include <shr-types.h>
-#include <shr-bindingsprivate.h>
-#include <shr-marshallers.h>
-
-static guint phoneui_idle_screen_register_object (GDBusInterface *object,
-                    GDBusConnection *connection,
-                    const gchar *object_path,
-                    GError **error);
-static void phoneui_idle_screen_flush (GDBusInterface *object);
-static GVariant *phoneui_idle_screen_get_properties (GDBusInterface *object);
-static GDBusInterfaceInfo *phoneui_idle_screen_g_dbus_interface_interface_info (GDBusInterface *object);
-static GDBusObject *phoneui_idle_screen_g_dbus_interface_get_object (GDBusInterface *interface);
-static void phoneui_idle_screen_g_dbus_interface_set_object (GDBusInterface *interface, GDBusObject *object);
-static GDBusInterfaceFlags phoneui_idle_screen_g_dbus_interface_get_flags (GDBusInterface *interface);
-static void phoneui_idle_screen_g_dbus_interface_set_flags (GDBusInterface *interface, GDBusInterfaceFlags flags);
+/* ---- Introspection data for org.shr.phoneui.IdleScreen ---- */
 
-typedef PhoneuiIdleScreenIface PhoneuiIdleScreenInterface;
-#define phoneui_idle_screen_get_type phoneui_idle_screen_get_gtype
-G_DEFINE_INTERFACE (PhoneuiIdleScreen, phoneui_idle_screen, G_TYPE_OBJECT);
-#undef phoneui_idle_screen_get_type
+static const GDBusAnnotationInfo _phoneui_idle_screen_method_display_annotation_info_0 =
+{
+  -1,
+  "org.freedesktop.DBus.GLib.Async",
+  "true",
+  NULL
+};
+
+static const GDBusAnnotationInfo * const _phoneui_idle_screen_method_display_annotation_info_pointers[] =
+{
+  &_phoneui_idle_screen_method_display_annotation_info_0,
+  NULL
+};
+
+static const _ExtendedGDBusMethodInfo _phoneui_idle_screen_method_info_display =
+{
+  {
+    -1,
+    "Display",
+    NULL,
+    NULL,
+    (GDBusAnnotationInfo **) &_phoneui_idle_screen_method_display_annotation_info_pointers
+  },
+  "handle-display"
+};
 
+static const GDBusAnnotationInfo _phoneui_idle_screen_method_hide_annotation_info_0 =
+{
+  -1,
+  "org.freedesktop.DBus.GLib.Async",
+  "true",
+  NULL
+};
 
-enum
+static const GDBusAnnotationInfo * const _phoneui_idle_screen_method_hide_annotation_info_pointers[] =
 {
-  _0_SIGNAL,
-  __DISPLAY_METHOD,
-  __HIDE_METHOD,
-  __TOGGLE_METHOD,
-  __ACTIVATE_SCREENSAVER_METHOD,
-  __DEACTIVATE_SCREENSAVER_METHOD,
-  __LAST_SIGNAL
+  &_phoneui_idle_screen_method_hide_annotation_info_0,
+  NULL
 };
 
-static guint signals[__LAST_SIGNAL] = {0};
+static const _ExtendedGDBusMethodInfo _phoneui_idle_screen_method_info_hide =
+{
+  {
+    -1,
+    "Hide",
+    NULL,
+    NULL,
+    (GDBusAnnotationInfo **) &_phoneui_idle_screen_method_hide_annotation_info_pointers
+  },
+  "handle-hide"
+};
 
+static const GDBusAnnotationInfo _phoneui_idle_screen_method_toggle_annotation_info_0 =
+{
+  -1,
+  "org.freedesktop.DBus.GLib.Async",
+  "true",
+  NULL
+};
 
-enum
+static const GDBusAnnotationInfo * const _phoneui_idle_screen_method_toggle_annotation_info_pointers[] =
 {
-  PROP_0,
+  &_phoneui_idle_screen_method_toggle_annotation_info_0,
+  NULL
 };
 
-/* ------------------------------------------------------------------------- */
+static const _ExtendedGDBusMethodInfo _phoneui_idle_screen_method_info_toggle =
+{
+  {
+    -1,
+    "Toggle",
+    NULL,
+    NULL,
+    (GDBusAnnotationInfo **) &_phoneui_idle_screen_method_toggle_annotation_info_pointers
+  },
+  "handle-toggle"
+};
 
-/* Various lookup tables */
+static const GDBusAnnotationInfo _phoneui_idle_screen_method_activate_screensaver_annotation_info_0 =
+{
+  -1,
+  "org.freedesktop.DBus.GLib.Async",
+  "true",
+  NULL
+};
 
-static GHashTable *_method_name_to_id = NULL;
-static GHashTable *_signal_name_to_id = NULL;
-static GHashTable *_property_name_to_id = NULL;
-static GHashTable *_property_gname_to_name = NULL;
-static GHashTable *_property_name_to_gname = NULL;
+static const GDBusAnnotationInfo * const _phoneui_idle_screen_method_activate_screensaver_annotation_info_pointers[] =
+{
+  &_phoneui_idle_screen_method_activate_screensaver_annotation_info_0,
+  NULL
+};
 
+static const _ExtendedGDBusMethodInfo _phoneui_idle_screen_method_info_activate_screensaver =
+{
+  {
+    -1,
+    "ActivateScreensaver",
+    NULL,
+    NULL,
+    (GDBusAnnotationInfo **) &_phoneui_idle_screen_method_activate_screensaver_annotation_info_pointers
+  },
+  "handle-activate-screensaver"
+};
 
-static guint
-lookup_method_id_from_method_name (const gchar *method_name)
+static const GDBusAnnotationInfo _phoneui_idle_screen_method_deactivate_screensaver_annotation_info_0 =
 {
-  return GPOINTER_TO_UINT (g_hash_table_lookup (_method_name_to_id, method_name));
-}
+  -1,
+  "org.freedesktop.DBus.GLib.Async",
+  "true",
+  NULL
+};
 
-static guint
-lookup_signal_id_from_signal_name (const gchar *signal_name)
+static const GDBusAnnotationInfo * const _phoneui_idle_screen_method_deactivate_screensaver_annotation_info_pointers[] =
 {
-  return GPOINTER_TO_UINT (g_hash_table_lookup (_signal_name_to_id, signal_name));
-}
+  &_phoneui_idle_screen_method_deactivate_screensaver_annotation_info_0,
+  NULL
+};
 
-static guint
-lookup_property_id_from_property_name (const gchar *property_name)
+static const _ExtendedGDBusMethodInfo _phoneui_idle_screen_method_info_deactivate_screensaver =
 {
-  return GPOINTER_TO_UINT (g_hash_table_lookup (_property_name_to_id, property_name));
-}
+  {
+    -1,
+    "DeactivateScreensaver",
+    NULL,
+    NULL,
+    (GDBusAnnotationInfo **) &_phoneui_idle_screen_method_deactivate_screensaver_annotation_info_pointers
+  },
+  "handle-deactivate-screensaver"
+};
 
-static const gchar *
-lookup_property_name_from_property_gname (const gchar *property_gname)
+static const _ExtendedGDBusMethodInfo * const _phoneui_idle_screen_method_info_pointers[] =
 {
-  return g_hash_table_lookup (_property_gname_to_name, property_gname);
-}
+  &_phoneui_idle_screen_method_info_display,
+  &_phoneui_idle_screen_method_info_hide,
+  &_phoneui_idle_screen_method_info_toggle,
+  &_phoneui_idle_screen_method_info_activate_screensaver,
+  &_phoneui_idle_screen_method_info_deactivate_screensaver,
+  NULL
+};
+
+static const _ExtendedGDBusInterfaceInfo _phoneui_idle_screen_interface_info =
+{
+  {
+    -1,
+    "org.shr.phoneui.IdleScreen",
+    (GDBusMethodInfo **) &_phoneui_idle_screen_method_info_pointers,
+    NULL,
+    NULL,
+    NULL
+  },
+  "phoneui-idle-screen",
+};
+
 
-static const gchar *
-lookup_property_gname_from_property_name (const gchar *property_name)
+/**
+ * phoneui_idle_screen_interface_info:
+ *
+ * Gets a machine-readable description of the <link linkend="gdbus-interface-org-shr-phoneui-IdleScreen.top_of_page">org.shr.phoneui.IdleScreen</link> D-Bus interface.
+ *
+ * Returns: (transfer none): A #GDBusInterfaceInfo. Do not free.
+ */
+GDBusInterfaceInfo *
+phoneui_idle_screen_interface_info (void)
 {
-  return g_hash_table_lookup (_property_name_to_gname, property_name);
+  return (GDBusInterfaceInfo *) &_phoneui_idle_screen_interface_info;
 }
 
-/* ------------------------------------------------------------------------- */
-static void dbus_iface_init (GDBusInterfaceIface *iface)
-{
-  iface->get_info = phoneui_idle_screen_g_dbus_interface_interface_info;
-  iface->get_properties = phoneui_idle_screen_get_properties;
-  iface->flush = phoneui_idle_screen_flush;
-  iface->register_object = phoneui_idle_screen_register_object;
-  iface->set_object = phoneui_idle_screen_g_dbus_interface_set_object;
-  iface->get_object = phoneui_idle_screen_g_dbus_interface_get_object;
-  iface->set_flags = phoneui_idle_screen_g_dbus_interface_set_flags;
-  iface->get_flags = phoneui_idle_screen_g_dbus_interface_get_flags;
-}
 
-static void
-phoneui_idle_screen_default_init (PhoneuiIdleScreenIface *iface)
-{
 
-  /* Build lookup structures */
-  _method_name_to_id = g_hash_table_new (g_str_hash, g_str_equal);
-  _signal_name_to_id = g_hash_table_new (g_str_hash, g_str_equal);
-  _property_name_to_id = g_hash_table_new (g_str_hash, g_str_equal);
-  _property_gname_to_name = g_hash_table_new (g_str_hash, g_str_equal);
-  _property_name_to_gname = g_hash_table_new (g_str_hash, g_str_equal);
-  g_hash_table_insert (_method_name_to_id, "Display", GUINT_TO_POINTER (__DISPLAY_METHOD));
-  g_hash_table_insert (_method_name_to_id, "Hide", GUINT_TO_POINTER (__HIDE_METHOD));
-  g_hash_table_insert (_method_name_to_id, "Toggle", GUINT_TO_POINTER (__TOGGLE_METHOD));
-  g_hash_table_insert (_method_name_to_id, "ActivateScreensaver", GUINT_TO_POINTER (__ACTIVATE_SCREENSAVER_METHOD));
-  g_hash_table_insert (_method_name_to_id, "DeactivateScreensaver", GUINT_TO_POINTER (__DEACTIVATE_SCREENSAVER_METHOD));
+/**
+ * PhoneuiIdleScreen:
+ *
+ * Abstract interface type for the D-Bus interface <link linkend="gdbus-interface-org-shr-phoneui-IdleScreen.top_of_page">org.shr.phoneui.IdleScreen</link>.
+ */
 
-  /* GObject signals definitions for D-Bus signals: */
+/**
+ * PhoneuiIdleScreenIface:
+ * @parent_iface: The parent interface.
+ * @handle_activate_screensaver: Handler for the #PhoneuiIdleScreen::handle-activate-screensaver signal.
+ * @handle_deactivate_screensaver: Handler for the #PhoneuiIdleScreen::handle-deactivate-screensaver signal.
+ * @handle_display: Handler for the #PhoneuiIdleScreen::handle-display signal.
+ * @handle_hide: Handler for the #PhoneuiIdleScreen::handle-hide signal.
+ * @handle_toggle: Handler for the #PhoneuiIdleScreen::handle-toggle signal.
+ *
+ * Virtual table for the D-Bus interface <link linkend="gdbus-interface-org-shr-phoneui-IdleScreen.top_of_page">org.shr.phoneui.IdleScreen</link>.
+ */
 
-  /* GObject signals definitions for D-Bus methods: */
+static void
+phoneui_idle_screen_default_init (PhoneuiIdleScreenIface *iface)
+{
+  /* GObject signals for incoming D-Bus method calls: */
   /**
    * PhoneuiIdleScreen::handle-display:
-   * @object: The exported object emitting the signal.
-   * @invocation: A #GDBusMethodInvocation object that can be used to return a value or error.
+   * @object: A #PhoneuiIdleScreen.
+   * @invocation: A #GDBusMethodInvocation.
    *
-   * On exported objects, this signal is emitted when a remote process (identified by @invocation) invokes the <literal>org.shr.phoneui.IdleScreen.Display()</literal> D-Bus method on @object. Use phoneui_idle_screen_complete_display() to return a value or g_dbus_method_invocation_return_error() to return an error.
+   * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-shr-phoneui-IdleScreen.Display">Display()</link> D-Bus method.
    *
-   * The signal is emitted in the
-   * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
-   * of the thread that @object was registered in.
+   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phoneui_idle_screen_complete_display() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
    *
-   * On proxies, this signal is never emitted.
-   *
-   * Returns: %TRUE if you want to handle the method call (will stop further handlers from being called), %FALSE otherwise.
+   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
    */
-  signals[__DISPLAY_METHOD] =
-    g_signal_new ("handle-display",
-                  G_TYPE_FROM_INTERFACE (iface),
-                  G_SIGNAL_RUN_LAST,
-                  G_STRUCT_OFFSET (PhoneuiIdleScreenIface, handle_display),
-                  g_signal_accumulator_true_handled,
-                  NULL,
-                  _shr_gdbus_cclosure_marshaller_BOOLEAN__OBJECT,
-                  G_TYPE_BOOLEAN,
-                  1,
-                  G_TYPE_DBUS_METHOD_INVOCATION);
+  g_signal_new ("handle-display",
+    G_TYPE_FROM_INTERFACE (iface),
+    G_SIGNAL_RUN_LAST,
+    G_STRUCT_OFFSET (PhoneuiIdleScreenIface, handle_display),
+    g_signal_accumulator_true_handled,
+    NULL,
+    g_cclosure_marshal_generic,
+    G_TYPE_BOOLEAN,
+    1,
+    G_TYPE_DBUS_METHOD_INVOCATION);
+
   /**
    * PhoneuiIdleScreen::handle-hide:
-   * @object: The exported object emitting the signal.
-   * @invocation: A #GDBusMethodInvocation object that can be used to return a value or error.
+   * @object: A #PhoneuiIdleScreen.
+   * @invocation: A #GDBusMethodInvocation.
    *
-   * On exported objects, this signal is emitted when a remote process (identified by @invocation) invokes the <literal>org.shr.phoneui.IdleScreen.Hide()</literal> D-Bus method on @object. Use phoneui_idle_screen_complete_hide() to return a value or g_dbus_method_invocation_return_error() to return an error.
+   * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-shr-phoneui-IdleScreen.Hide">Hide()</link> D-Bus method.
    *
-   * The signal is emitted in the
-   * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
-   * of the thread that @object was registered in.
+   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phoneui_idle_screen_complete_hide() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
    *
-   * On proxies, this signal is never emitted.
-   *
-   * Returns: %TRUE if you want to handle the method call (will stop further handlers from being called), %FALSE otherwise.
+   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
    */
-  signals[__HIDE_METHOD] =
-    g_signal_new ("handle-hide",
-                  G_TYPE_FROM_INTERFACE (iface),
-                  G_SIGNAL_RUN_LAST,
-                  G_STRUCT_OFFSET (PhoneuiIdleScreenIface, handle_hide),
-                  g_signal_accumulator_true_handled,
-                  NULL,
-                  _shr_gdbus_cclosure_marshaller_BOOLEAN__OBJECT,
-                  G_TYPE_BOOLEAN,
-                  1,
-                  G_TYPE_DBUS_METHOD_INVOCATION);
+  g_signal_new ("handle-hide",
+    G_TYPE_FROM_INTERFACE (iface),
+    G_SIGNAL_RUN_LAST,
+    G_STRUCT_OFFSET (PhoneuiIdleScreenIface, handle_hide),
+    g_signal_accumulator_true_handled,
+    NULL,
+    g_cclosure_marshal_generic,
+    G_TYPE_BOOLEAN,
+    1,
+    G_TYPE_DBUS_METHOD_INVOCATION);
+
   /**
    * PhoneuiIdleScreen::handle-toggle:
-   * @object: The exported object emitting the signal.
-   * @invocation: A #GDBusMethodInvocation object that can be used to return a value or error.
+   * @object: A #PhoneuiIdleScreen.
+   * @invocation: A #GDBusMethodInvocation.
    *
-   * On exported objects, this signal is emitted when a remote process (identified by @invocation) invokes the <literal>org.shr.phoneui.IdleScreen.Toggle()</literal> D-Bus method on @object. Use phoneui_idle_screen_complete_toggle() to return a value or g_dbus_method_invocation_return_error() to return an error.
+   * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-shr-phoneui-IdleScreen.Toggle">Toggle()</link> D-Bus method.
    *
-   * The signal is emitted in the
-   * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
-   * of the thread that @object was registered in.
+   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phoneui_idle_screen_complete_toggle() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
    *
-   * On proxies, this signal is never emitted.
-   *
-   * Returns: %TRUE if you want to handle the method call (will stop further handlers from being called), %FALSE otherwise.
+   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
    */
-  signals[__TOGGLE_METHOD] =
-    g_signal_new ("handle-toggle",
-                  G_TYPE_FROM_INTERFACE (iface),
-                  G_SIGNAL_RUN_LAST,
-                  G_STRUCT_OFFSET (PhoneuiIdleScreenIface, handle_toggle),
-                  g_signal_accumulator_true_handled,
-                  NULL,
-                  _shr_gdbus_cclosure_marshaller_BOOLEAN__OBJECT,
-                  G_TYPE_BOOLEAN,
-                  1,
-                  G_TYPE_DBUS_METHOD_INVOCATION);
+  g_signal_new ("handle-toggle",
+    G_TYPE_FROM_INTERFACE (iface),
+    G_SIGNAL_RUN_LAST,
+    G_STRUCT_OFFSET (PhoneuiIdleScreenIface, handle_toggle),
+    g_signal_accumulator_true_handled,
+    NULL,
+    g_cclosure_marshal_generic,
+    G_TYPE_BOOLEAN,
+    1,
+    G_TYPE_DBUS_METHOD_INVOCATION);
+
   /**
    * PhoneuiIdleScreen::handle-activate-screensaver:
-   * @object: The exported object emitting the signal.
-   * @invocation: A #GDBusMethodInvocation object that can be used to return a value or error.
+   * @object: A #PhoneuiIdleScreen.
+   * @invocation: A #GDBusMethodInvocation.
    *
-   * On exported objects, this signal is emitted when a remote process (identified by @invocation) invokes the <literal>org.shr.phoneui.IdleScreen.ActivateScreensaver()</literal> D-Bus method on @object. Use phoneui_idle_screen_complete_activate_screensaver() to return a value or g_dbus_method_invocation_return_error() to return an error.
+   * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-shr-phoneui-IdleScreen.ActivateScreensaver">ActivateScreensaver()</link> D-Bus method.
    *
-   * The signal is emitted in the
-   * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
-   * of the thread that @object was registered in.
+   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phoneui_idle_screen_complete_activate_screensaver() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
    *
-   * On proxies, this signal is never emitted.
-   *
-   * Returns: %TRUE if you want to handle the method call (will stop further handlers from being called), %FALSE otherwise.
+   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
    */
-  signals[__ACTIVATE_SCREENSAVER_METHOD] =
-    g_signal_new ("handle-activate-screensaver",
-                  G_TYPE_FROM_INTERFACE (iface),
-                  G_SIGNAL_RUN_LAST,
-                  G_STRUCT_OFFSET (PhoneuiIdleScreenIface, handle_activate_screensaver),
-                  g_signal_accumulator_true_handled,
-                  NULL,
-                  _shr_gdbus_cclosure_marshaller_BOOLEAN__OBJECT,
-                  G_TYPE_BOOLEAN,
-                  1,
-                  G_TYPE_DBUS_METHOD_INVOCATION);
+  g_signal_new ("handle-activate-screensaver",
+    G_TYPE_FROM_INTERFACE (iface),
+    G_SIGNAL_RUN_LAST,
+    G_STRUCT_OFFSET (PhoneuiIdleScreenIface, handle_activate_screensaver),
+    g_signal_accumulator_true_handled,
+    NULL,
+    g_cclosure_marshal_generic,
+    G_TYPE_BOOLEAN,
+    1,
+    G_TYPE_DBUS_METHOD_INVOCATION);
+
   /**
    * PhoneuiIdleScreen::handle-deactivate-screensaver:
-   * @object: The exported object emitting the signal.
-   * @invocation: A #GDBusMethodInvocation object that can be used to return a value or error.
+   * @object: A #PhoneuiIdleScreen.
+   * @invocation: A #GDBusMethodInvocation.
    *
-   * On exported objects, this signal is emitted when a remote process (identified by @invocation) invokes the <literal>org.shr.phoneui.IdleScreen.DeactivateScreensaver()</literal> D-Bus method on @object. Use phoneui_idle_screen_complete_deactivate_screensaver() to return a value or g_dbus_method_invocation_return_error() to return an error.
+   * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-shr-phoneui-IdleScreen.DeactivateScreensaver">DeactivateScreensaver()</link> D-Bus method.
    *
-   * The signal is emitted in the
-   * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
-   * of the thread that @object was registered in.
+   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phoneui_idle_screen_complete_deactivate_screensaver() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
    *
-   * On proxies, this signal is never emitted.
-   *
-   * Returns: %TRUE if you want to handle the method call (will stop further handlers from being called), %FALSE otherwise.
+   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
    */
-  signals[__DEACTIVATE_SCREENSAVER_METHOD] =
-    g_signal_new ("handle-deactivate-screensaver",
-                  G_TYPE_FROM_INTERFACE (iface),
-                  G_SIGNAL_RUN_LAST,
-                  G_STRUCT_OFFSET (PhoneuiIdleScreenIface, handle_deactivate_screensaver),
-                  g_signal_accumulator_true_handled,
-                  NULL,
-                  _shr_gdbus_cclosure_marshaller_BOOLEAN__OBJECT,
-                  G_TYPE_BOOLEAN,
-                  1,
-                  G_TYPE_DBUS_METHOD_INVOCATION);
-
-  /* GObject property definitions for D-Bus properties: */
-}
+  g_signal_new ("handle-deactivate-screensaver",
+    G_TYPE_FROM_INTERFACE (iface),
+    G_SIGNAL_RUN_LAST,
+    G_STRUCT_OFFSET (PhoneuiIdleScreenIface, handle_deactivate_screensaver),
+    g_signal_accumulator_true_handled,
+    NULL,
+    g_cclosure_marshal_generic,
+    G_TYPE_BOOLEAN,
+    1,
+    G_TYPE_DBUS_METHOD_INVOCATION);
 
+}
 
-/* C Bindings for properties */
+typedef PhoneuiIdleScreenIface PhoneuiIdleScreenInterface;
+G_DEFINE_INTERFACE (PhoneuiIdleScreen, phoneui_idle_screen, G_TYPE_OBJECT);
 
 /**
  * phoneui_idle_screen_call_display:
- * @proxy: A #PhoneuiIdleScreen.
- * @cancellable: A #GCancellable or %NULL.
- * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL if you don't care about the result of the method invocation.
- * @user_data: Data to pass to @callback.
- *
- * Invokes the <literal>org.shr.phoneui.IdleScreen.Display()</literal>
- * D-Bus method on the remote object represented by @proxy.
- *
- * This is an asynchronous method. When the operation is finished,
- * callback will be invoked in the
- * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
- * of the thread you are calling this method from. You can then call
- * phoneui_idle_screen_call_display_finish() to get the result of the operation.
- * See phoneui_idle_screen_call_display_sync() for the synchronous version of this method.
+ * @proxy: A #PhoneuiIdleScreenProxy.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL.
+ * @user_data: User data to pass to @callback.
+ *
+ * Asynchronously invokes the <link linkend="gdbus-method-org-shr-phoneui-IdleScreen.Display">Display()</link> D-Bus method on @proxy.
+ * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
+ * You can then call phoneui_idle_screen_call_display_finish() to get the result of the operation.
+ *
+ * See phoneui_idle_screen_call_display_sync() for the synchronous, blocking version of this method.
  */
-void phoneui_idle_screen_call_display (
-        PhoneuiIdleScreen *proxy,
-        GCancellable *cancellable,
-        GAsyncReadyCallback callback,
-        gpointer user_data)
-{
-  GVariant *_params;
-  _params = NULL;
+void
+phoneui_idle_screen_call_display (
+    PhoneuiIdleScreen *proxy,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data)
+{
   g_dbus_proxy_call (G_DBUS_PROXY (proxy),
-                     "Display",
-                     _params,
-                     G_DBUS_CALL_FLAGS_NONE,
-                     -1,
-                     cancellable,
-                     callback,
-                     user_data);
+    "Display",
+    g_variant_new ("()"),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    callback,
+    user_data);
 }
 
 /**
  * phoneui_idle_screen_call_display_finish:
- * @proxy: A #PhoneuiIdleScreen.
- * @res: A #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_idle_screen_call_display().
+ * @proxy: A #PhoneuiIdleScreenProxy.
+ * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_idle_screen_call_display().
  * @error: Return location for error or %NULL.
  *
- * Finishes invoking the <literal>org.shr.phoneui.IdleScreen.Display()</literal>
- * D-Bus method on the remote object represented by @proxy.
+ * Finishes an operation started with phoneui_idle_screen_call_display().
  *
- * Returns: %TRUE if the call succeeded, %FALSE if @error is set.
+ * Returns: %TRUE if the call succeded, %FALSE if @error is set.
  */
-gboolean phoneui_idle_screen_call_display_finish (
-        PhoneuiIdleScreen *proxy,
-        GAsyncResult *res,
-        GError **error)
-{
-  gboolean _ret = FALSE;
-  GVariant *_result;
-  _result = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
-  if (_result == NULL)
+gboolean
+phoneui_idle_screen_call_display_finish (
+    PhoneuiIdleScreen *proxy,
+    GAsyncResult *res,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
+  if (_ret == NULL)
     goto _out;
-  g_variant_unref (_result);
-  _ret = TRUE;
+  g_variant_get (_ret,
+                 "()");
+  g_variant_unref (_ret);
 _out:
-  return _ret;
+  return _ret != NULL;
 }
 
 /**
  * phoneui_idle_screen_call_display_sync:
- * @proxy: A #PhoneuiIdleScreen.
- * @cancellable: A #GCancellable or %NULL.
+ * @proxy: A #PhoneuiIdleScreenProxy.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
  * @error: Return location for error or %NULL.
  *
- * Synchronously invokes the <literal>org.shr.phoneui.IdleScreen.Display()</literal>
- * D-Bus method on the remote object represented by @proxy.
- * The calling thread is blocked until a reply is received. See
- * phoneui_idle_screen_call_display() for the asynchronous version of this method.
+ * Synchronously invokes the <link linkend="gdbus-method-org-shr-phoneui-IdleScreen.Display">Display()</link> D-Bus method on @proxy. The calling thread is blocked until a reply is received.
+ *
+ * See phoneui_idle_screen_call_display() for the asynchronous version of this method.
  *
- * Returns: %TRUE if the call succeeded, %FALSE if @error is set.
+ * Returns: %TRUE if the call succeded, %FALSE if @error is set.
  */
-gboolean phoneui_idle_screen_call_display_sync (
-        PhoneuiIdleScreen *proxy,
-        GCancellable *cancellable,
-        GError **error)
-{
-  gboolean _ret = FALSE;
-  GVariant *_params;
-  GVariant *_result;
-  _params = NULL;
-  _result = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
-                                   "Display",
-                                   _params,
-                                   G_DBUS_CALL_FLAGS_NONE,
-                                   -1,
-                                   cancellable,
-                                   error);
-  if (_result == NULL)
+gboolean
+phoneui_idle_screen_call_display_sync (
+    PhoneuiIdleScreen *proxy,
+    GCancellable *cancellable,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
+    "Display",
+    g_variant_new ("()"),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    error);
+  if (_ret == NULL)
     goto _out;
-  g_variant_unref (_result);
-  _ret = TRUE;
+  g_variant_get (_ret,
+                 "()");
+  g_variant_unref (_ret);
 _out:
-  return _ret;
+  return _ret != NULL;
 }
 
-
 /**
  * phoneui_idle_screen_call_hide:
- * @proxy: A #PhoneuiIdleScreen.
- * @cancellable: A #GCancellable or %NULL.
- * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL if you don't care about the result of the method invocation.
- * @user_data: Data to pass to @callback.
- *
- * Invokes the <literal>org.shr.phoneui.IdleScreen.Hide()</literal>
- * D-Bus method on the remote object represented by @proxy.
- *
- * This is an asynchronous method. When the operation is finished,
- * callback will be invoked in the
- * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
- * of the thread you are calling this method from. You can then call
- * phoneui_idle_screen_call_hide_finish() to get the result of the operation.
- * See phoneui_idle_screen_call_hide_sync() for the synchronous version of this method.
+ * @proxy: A #PhoneuiIdleScreenProxy.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL.
+ * @user_data: User data to pass to @callback.
+ *
+ * Asynchronously invokes the <link linkend="gdbus-method-org-shr-phoneui-IdleScreen.Hide">Hide()</link> D-Bus method on @proxy.
+ * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
+ * You can then call phoneui_idle_screen_call_hide_finish() to get the result of the operation.
+ *
+ * See phoneui_idle_screen_call_hide_sync() for the synchronous, blocking version of this method.
  */
-void phoneui_idle_screen_call_hide (
-        PhoneuiIdleScreen *proxy,
-        GCancellable *cancellable,
-        GAsyncReadyCallback callback,
-        gpointer user_data)
-{
-  GVariant *_params;
-  _params = NULL;
+void
+phoneui_idle_screen_call_hide (
+    PhoneuiIdleScreen *proxy,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data)
+{
   g_dbus_proxy_call (G_DBUS_PROXY (proxy),
-                     "Hide",
-                     _params,
-                     G_DBUS_CALL_FLAGS_NONE,
-                     -1,
-                     cancellable,
-                     callback,
-                     user_data);
+    "Hide",
+    g_variant_new ("()"),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    callback,
+    user_data);
 }
 
 /**
  * phoneui_idle_screen_call_hide_finish:
- * @proxy: A #PhoneuiIdleScreen.
- * @res: A #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_idle_screen_call_hide().
+ * @proxy: A #PhoneuiIdleScreenProxy.
+ * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_idle_screen_call_hide().
  * @error: Return location for error or %NULL.
  *
- * Finishes invoking the <literal>org.shr.phoneui.IdleScreen.Hide()</literal>
- * D-Bus method on the remote object represented by @proxy.
+ * Finishes an operation started with phoneui_idle_screen_call_hide().
  *
- * Returns: %TRUE if the call succeeded, %FALSE if @error is set.
+ * Returns: %TRUE if the call succeded, %FALSE if @error is set.
  */
-gboolean phoneui_idle_screen_call_hide_finish (
-        PhoneuiIdleScreen *proxy,
-        GAsyncResult *res,
-        GError **error)
-{
-  gboolean _ret = FALSE;
-  GVariant *_result;
-  _result = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
-  if (_result == NULL)
+gboolean
+phoneui_idle_screen_call_hide_finish (
+    PhoneuiIdleScreen *proxy,
+    GAsyncResult *res,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
+  if (_ret == NULL)
     goto _out;
-  g_variant_unref (_result);
-  _ret = TRUE;
+  g_variant_get (_ret,
+                 "()");
+  g_variant_unref (_ret);
 _out:
-  return _ret;
+  return _ret != NULL;
 }
 
 /**
  * phoneui_idle_screen_call_hide_sync:
- * @proxy: A #PhoneuiIdleScreen.
- * @cancellable: A #GCancellable or %NULL.
+ * @proxy: A #PhoneuiIdleScreenProxy.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
  * @error: Return location for error or %NULL.
  *
- * Synchronously invokes the <literal>org.shr.phoneui.IdleScreen.Hide()</literal>
- * D-Bus method on the remote object represented by @proxy.
- * The calling thread is blocked until a reply is received. See
- * phoneui_idle_screen_call_hide() for the asynchronous version of this method.
+ * Synchronously invokes the <link linkend="gdbus-method-org-shr-phoneui-IdleScreen.Hide">Hide()</link> D-Bus method on @proxy. The calling thread is blocked until a reply is received.
+ *
+ * See phoneui_idle_screen_call_hide() for the asynchronous version of this method.
  *
- * Returns: %TRUE if the call succeeded, %FALSE if @error is set.
+ * Returns: %TRUE if the call succeded, %FALSE if @error is set.
  */
-gboolean phoneui_idle_screen_call_hide_sync (
-        PhoneuiIdleScreen *proxy,
-        GCancellable *cancellable,
-        GError **error)
-{
-  gboolean _ret = FALSE;
-  GVariant *_params;
-  GVariant *_result;
-  _params = NULL;
-  _result = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
-                                   "Hide",
-                                   _params,
-                                   G_DBUS_CALL_FLAGS_NONE,
-                                   -1,
-                                   cancellable,
-                                   error);
-  if (_result == NULL)
+gboolean
+phoneui_idle_screen_call_hide_sync (
+    PhoneuiIdleScreen *proxy,
+    GCancellable *cancellable,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
+    "Hide",
+    g_variant_new ("()"),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    error);
+  if (_ret == NULL)
     goto _out;
-  g_variant_unref (_result);
-  _ret = TRUE;
+  g_variant_get (_ret,
+                 "()");
+  g_variant_unref (_ret);
 _out:
-  return _ret;
+  return _ret != NULL;
 }
 
-
 /**
  * phoneui_idle_screen_call_toggle:
- * @proxy: A #PhoneuiIdleScreen.
- * @cancellable: A #GCancellable or %NULL.
- * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL if you don't care about the result of the method invocation.
- * @user_data: Data to pass to @callback.
- *
- * Invokes the <literal>org.shr.phoneui.IdleScreen.Toggle()</literal>
- * D-Bus method on the remote object represented by @proxy.
- *
- * This is an asynchronous method. When the operation is finished,
- * callback will be invoked in the
- * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
- * of the thread you are calling this method from. You can then call
- * phoneui_idle_screen_call_toggle_finish() to get the result of the operation.
- * See phoneui_idle_screen_call_toggle_sync() for the synchronous version of this method.
+ * @proxy: A #PhoneuiIdleScreenProxy.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL.
+ * @user_data: User data to pass to @callback.
+ *
+ * Asynchronously invokes the <link linkend="gdbus-method-org-shr-phoneui-IdleScreen.Toggle">Toggle()</link> D-Bus method on @proxy.
+ * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
+ * You can then call phoneui_idle_screen_call_toggle_finish() to get the result of the operation.
+ *
+ * See phoneui_idle_screen_call_toggle_sync() for the synchronous, blocking version of this method.
  */
-void phoneui_idle_screen_call_toggle (
-        PhoneuiIdleScreen *proxy,
-        GCancellable *cancellable,
-        GAsyncReadyCallback callback,
-        gpointer user_data)
-{
-  GVariant *_params;
-  _params = NULL;
+void
+phoneui_idle_screen_call_toggle (
+    PhoneuiIdleScreen *proxy,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data)
+{
   g_dbus_proxy_call (G_DBUS_PROXY (proxy),
-                     "Toggle",
-                     _params,
-                     G_DBUS_CALL_FLAGS_NONE,
-                     -1,
-                     cancellable,
-                     callback,
-                     user_data);
+    "Toggle",
+    g_variant_new ("()"),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    callback,
+    user_data);
 }
 
 /**
  * phoneui_idle_screen_call_toggle_finish:
- * @proxy: A #PhoneuiIdleScreen.
- * @res: A #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_idle_screen_call_toggle().
+ * @proxy: A #PhoneuiIdleScreenProxy.
+ * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_idle_screen_call_toggle().
  * @error: Return location for error or %NULL.
  *
- * Finishes invoking the <literal>org.shr.phoneui.IdleScreen.Toggle()</literal>
- * D-Bus method on the remote object represented by @proxy.
+ * Finishes an operation started with phoneui_idle_screen_call_toggle().
  *
- * Returns: %TRUE if the call succeeded, %FALSE if @error is set.
+ * Returns: %TRUE if the call succeded, %FALSE if @error is set.
  */
-gboolean phoneui_idle_screen_call_toggle_finish (
-        PhoneuiIdleScreen *proxy,
-        GAsyncResult *res,
-        GError **error)
-{
-  gboolean _ret = FALSE;
-  GVariant *_result;
-  _result = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
-  if (_result == NULL)
+gboolean
+phoneui_idle_screen_call_toggle_finish (
+    PhoneuiIdleScreen *proxy,
+    GAsyncResult *res,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
+  if (_ret == NULL)
     goto _out;
-  g_variant_unref (_result);
-  _ret = TRUE;
+  g_variant_get (_ret,
+                 "()");
+  g_variant_unref (_ret);
 _out:
-  return _ret;
+  return _ret != NULL;
 }
 
 /**
  * phoneui_idle_screen_call_toggle_sync:
- * @proxy: A #PhoneuiIdleScreen.
- * @cancellable: A #GCancellable or %NULL.
+ * @proxy: A #PhoneuiIdleScreenProxy.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
  * @error: Return location for error or %NULL.
  *
- * Synchronously invokes the <literal>org.shr.phoneui.IdleScreen.Toggle()</literal>
- * D-Bus method on the remote object represented by @proxy.
- * The calling thread is blocked until a reply is received. See
- * phoneui_idle_screen_call_toggle() for the asynchronous version of this method.
+ * Synchronously invokes the <link linkend="gdbus-method-org-shr-phoneui-IdleScreen.Toggle">Toggle()</link> D-Bus method on @proxy. The calling thread is blocked until a reply is received.
+ *
+ * See phoneui_idle_screen_call_toggle() for the asynchronous version of this method.
  *
- * Returns: %TRUE if the call succeeded, %FALSE if @error is set.
+ * Returns: %TRUE if the call succeded, %FALSE if @error is set.
  */
-gboolean phoneui_idle_screen_call_toggle_sync (
-        PhoneuiIdleScreen *proxy,
-        GCancellable *cancellable,
-        GError **error)
-{
-  gboolean _ret = FALSE;
-  GVariant *_params;
-  GVariant *_result;
-  _params = NULL;
-  _result = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
-                                   "Toggle",
-                                   _params,
-                                   G_DBUS_CALL_FLAGS_NONE,
-                                   -1,
-                                   cancellable,
-                                   error);
-  if (_result == NULL)
+gboolean
+phoneui_idle_screen_call_toggle_sync (
+    PhoneuiIdleScreen *proxy,
+    GCancellable *cancellable,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
+    "Toggle",
+    g_variant_new ("()"),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    error);
+  if (_ret == NULL)
     goto _out;
-  g_variant_unref (_result);
-  _ret = TRUE;
+  g_variant_get (_ret,
+                 "()");
+  g_variant_unref (_ret);
 _out:
-  return _ret;
+  return _ret != NULL;
 }
 
-
 /**
  * phoneui_idle_screen_call_activate_screensaver:
- * @proxy: A #PhoneuiIdleScreen.
- * @cancellable: A #GCancellable or %NULL.
- * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL if you don't care about the result of the method invocation.
- * @user_data: Data to pass to @callback.
- *
- * Invokes the <literal>org.shr.phoneui.IdleScreen.ActivateScreensaver()</literal>
- * D-Bus method on the remote object represented by @proxy.
- *
- * This is an asynchronous method. When the operation is finished,
- * callback will be invoked in the
- * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
- * of the thread you are calling this method from. You can then call
- * phoneui_idle_screen_call_activate_screensaver_finish() to get the result of the operation.
- * See phoneui_idle_screen_call_activate_screensaver_sync() for the synchronous version of this method.
+ * @proxy: A #PhoneuiIdleScreenProxy.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL.
+ * @user_data: User data to pass to @callback.
+ *
+ * Asynchronously invokes the <link linkend="gdbus-method-org-shr-phoneui-IdleScreen.ActivateScreensaver">ActivateScreensaver()</link> D-Bus method on @proxy.
+ * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
+ * You can then call phoneui_idle_screen_call_activate_screensaver_finish() to get the result of the operation.
+ *
+ * See phoneui_idle_screen_call_activate_screensaver_sync() for the synchronous, blocking version of this method.
  */
-void phoneui_idle_screen_call_activate_screensaver (
-        PhoneuiIdleScreen *proxy,
-        GCancellable *cancellable,
-        GAsyncReadyCallback callback,
-        gpointer user_data)
-{
-  GVariant *_params;
-  _params = NULL;
+void
+phoneui_idle_screen_call_activate_screensaver (
+    PhoneuiIdleScreen *proxy,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data)
+{
   g_dbus_proxy_call (G_DBUS_PROXY (proxy),
-                     "ActivateScreensaver",
-                     _params,
-                     G_DBUS_CALL_FLAGS_NONE,
-                     -1,
-                     cancellable,
-                     callback,
-                     user_data);
+    "ActivateScreensaver",
+    g_variant_new ("()"),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    callback,
+    user_data);
 }
 
 /**
  * phoneui_idle_screen_call_activate_screensaver_finish:
- * @proxy: A #PhoneuiIdleScreen.
- * @res: A #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_idle_screen_call_activate_screensaver().
+ * @proxy: A #PhoneuiIdleScreenProxy.
+ * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_idle_screen_call_activate_screensaver().
  * @error: Return location for error or %NULL.
  *
- * Finishes invoking the <literal>org.shr.phoneui.IdleScreen.ActivateScreensaver()</literal>
- * D-Bus method on the remote object represented by @proxy.
+ * Finishes an operation started with phoneui_idle_screen_call_activate_screensaver().
  *
- * Returns: %TRUE if the call succeeded, %FALSE if @error is set.
+ * Returns: %TRUE if the call succeded, %FALSE if @error is set.
  */
-gboolean phoneui_idle_screen_call_activate_screensaver_finish (
-        PhoneuiIdleScreen *proxy,
-        GAsyncResult *res,
-        GError **error)
-{
-  gboolean _ret = FALSE;
-  GVariant *_result;
-  _result = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
-  if (_result == NULL)
+gboolean
+phoneui_idle_screen_call_activate_screensaver_finish (
+    PhoneuiIdleScreen *proxy,
+    GAsyncResult *res,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
+  if (_ret == NULL)
     goto _out;
-  g_variant_unref (_result);
-  _ret = TRUE;
+  g_variant_get (_ret,
+                 "()");
+  g_variant_unref (_ret);
 _out:
-  return _ret;
+  return _ret != NULL;
 }
 
 /**
  * phoneui_idle_screen_call_activate_screensaver_sync:
- * @proxy: A #PhoneuiIdleScreen.
- * @cancellable: A #GCancellable or %NULL.
+ * @proxy: A #PhoneuiIdleScreenProxy.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
  * @error: Return location for error or %NULL.
  *
- * Synchronously invokes the <literal>org.shr.phoneui.IdleScreen.ActivateScreensaver()</literal>
- * D-Bus method on the remote object represented by @proxy.
- * The calling thread is blocked until a reply is received. See
- * phoneui_idle_screen_call_activate_screensaver() for the asynchronous version of this method.
+ * Synchronously invokes the <link linkend="gdbus-method-org-shr-phoneui-IdleScreen.ActivateScreensaver">ActivateScreensaver()</link> D-Bus method on @proxy. The calling thread is blocked until a reply is received.
+ *
+ * See phoneui_idle_screen_call_activate_screensaver() for the asynchronous version of this method.
  *
- * Returns: %TRUE if the call succeeded, %FALSE if @error is set.
+ * Returns: %TRUE if the call succeded, %FALSE if @error is set.
  */
-gboolean phoneui_idle_screen_call_activate_screensaver_sync (
-        PhoneuiIdleScreen *proxy,
-        GCancellable *cancellable,
-        GError **error)
-{
-  gboolean _ret = FALSE;
-  GVariant *_params;
-  GVariant *_result;
-  _params = NULL;
-  _result = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
-                                   "ActivateScreensaver",
-                                   _params,
-                                   G_DBUS_CALL_FLAGS_NONE,
-                                   -1,
-                                   cancellable,
-                                   error);
-  if (_result == NULL)
+gboolean
+phoneui_idle_screen_call_activate_screensaver_sync (
+    PhoneuiIdleScreen *proxy,
+    GCancellable *cancellable,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
+    "ActivateScreensaver",
+    g_variant_new ("()"),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    error);
+  if (_ret == NULL)
     goto _out;
-  g_variant_unref (_result);
-  _ret = TRUE;
+  g_variant_get (_ret,
+                 "()");
+  g_variant_unref (_ret);
 _out:
-  return _ret;
+  return _ret != NULL;
 }
 
-
 /**
  * phoneui_idle_screen_call_deactivate_screensaver:
- * @proxy: A #PhoneuiIdleScreen.
- * @cancellable: A #GCancellable or %NULL.
- * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL if you don't care about the result of the method invocation.
- * @user_data: Data to pass to @callback.
- *
- * Invokes the <literal>org.shr.phoneui.IdleScreen.DeactivateScreensaver()</literal>
- * D-Bus method on the remote object represented by @proxy.
- *
- * This is an asynchronous method. When the operation is finished,
- * callback will be invoked in the
- * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
- * of the thread you are calling this method from. You can then call
- * phoneui_idle_screen_call_deactivate_screensaver_finish() to get the result of the operation.
- * See phoneui_idle_screen_call_deactivate_screensaver_sync() for the synchronous version of this method.
+ * @proxy: A #PhoneuiIdleScreenProxy.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL.
+ * @user_data: User data to pass to @callback.
+ *
+ * Asynchronously invokes the <link linkend="gdbus-method-org-shr-phoneui-IdleScreen.DeactivateScreensaver">DeactivateScreensaver()</link> D-Bus method on @proxy.
+ * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
+ * You can then call phoneui_idle_screen_call_deactivate_screensaver_finish() to get the result of the operation.
+ *
+ * See phoneui_idle_screen_call_deactivate_screensaver_sync() for the synchronous, blocking version of this method.
  */
-void phoneui_idle_screen_call_deactivate_screensaver (
-        PhoneuiIdleScreen *proxy,
-        GCancellable *cancellable,
-        GAsyncReadyCallback callback,
-        gpointer user_data)
-{
-  GVariant *_params;
-  _params = NULL;
+void
+phoneui_idle_screen_call_deactivate_screensaver (
+    PhoneuiIdleScreen *proxy,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data)
+{
   g_dbus_proxy_call (G_DBUS_PROXY (proxy),
-                     "DeactivateScreensaver",
-                     _params,
-                     G_DBUS_CALL_FLAGS_NONE,
-                     -1,
-                     cancellable,
-                     callback,
-                     user_data);
+    "DeactivateScreensaver",
+    g_variant_new ("()"),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    callback,
+    user_data);
 }
 
 /**
  * phoneui_idle_screen_call_deactivate_screensaver_finish:
- * @proxy: A #PhoneuiIdleScreen.
- * @res: A #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_idle_screen_call_deactivate_screensaver().
+ * @proxy: A #PhoneuiIdleScreenProxy.
+ * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_idle_screen_call_deactivate_screensaver().
  * @error: Return location for error or %NULL.
  *
- * Finishes invoking the <literal>org.shr.phoneui.IdleScreen.DeactivateScreensaver()</literal>
- * D-Bus method on the remote object represented by @proxy.
+ * Finishes an operation started with phoneui_idle_screen_call_deactivate_screensaver().
  *
- * Returns: %TRUE if the call succeeded, %FALSE if @error is set.
+ * Returns: %TRUE if the call succeded, %FALSE if @error is set.
  */
-gboolean phoneui_idle_screen_call_deactivate_screensaver_finish (
-        PhoneuiIdleScreen *proxy,
-        GAsyncResult *res,
-        GError **error)
-{
-  gboolean _ret = FALSE;
-  GVariant *_result;
-  _result = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
-  if (_result == NULL)
+gboolean
+phoneui_idle_screen_call_deactivate_screensaver_finish (
+    PhoneuiIdleScreen *proxy,
+    GAsyncResult *res,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
+  if (_ret == NULL)
     goto _out;
-  g_variant_unref (_result);
-  _ret = TRUE;
+  g_variant_get (_ret,
+                 "()");
+  g_variant_unref (_ret);
 _out:
-  return _ret;
+  return _ret != NULL;
 }
 
 /**
  * phoneui_idle_screen_call_deactivate_screensaver_sync:
- * @proxy: A #PhoneuiIdleScreen.
- * @cancellable: A #GCancellable or %NULL.
+ * @proxy: A #PhoneuiIdleScreenProxy.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
  * @error: Return location for error or %NULL.
  *
- * Synchronously invokes the <literal>org.shr.phoneui.IdleScreen.DeactivateScreensaver()</literal>
- * D-Bus method on the remote object represented by @proxy.
- * The calling thread is blocked until a reply is received. See
- * phoneui_idle_screen_call_deactivate_screensaver() for the asynchronous version of this method.
+ * Synchronously invokes the <link linkend="gdbus-method-org-shr-phoneui-IdleScreen.DeactivateScreensaver">DeactivateScreensaver()</link> D-Bus method on @proxy. The calling thread is blocked until a reply is received.
+ *
+ * See phoneui_idle_screen_call_deactivate_screensaver() for the asynchronous version of this method.
  *
- * Returns: %TRUE if the call succeeded, %FALSE if @error is set.
+ * Returns: %TRUE if the call succeded, %FALSE if @error is set.
  */
-gboolean phoneui_idle_screen_call_deactivate_screensaver_sync (
-        PhoneuiIdleScreen *proxy,
-        GCancellable *cancellable,
-        GError **error)
-{
-  gboolean _ret = FALSE;
-  GVariant *_params;
-  GVariant *_result;
-  _params = NULL;
-  _result = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
-                                   "DeactivateScreensaver",
-                                   _params,
-                                   G_DBUS_CALL_FLAGS_NONE,
-                                   -1,
-                                   cancellable,
-                                   error);
-  if (_result == NULL)
+gboolean
+phoneui_idle_screen_call_deactivate_screensaver_sync (
+    PhoneuiIdleScreen *proxy,
+    GCancellable *cancellable,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
+    "DeactivateScreensaver",
+    g_variant_new ("()"),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    error);
+  if (_ret == NULL)
     goto _out;
-  g_variant_unref (_result);
-  _ret = TRUE;
+  g_variant_get (_ret,
+                 "()");
+  g_variant_unref (_ret);
 _out:
-  return _ret;
+  return _ret != NULL;
 }
 
-
 /**
  * phoneui_idle_screen_complete_display:
  * @object: A #PhoneuiIdleScreen.
- * @invocation: A #GDBusMethodInvocation.
- *
- * Completes handling the <literal>org.shr.phoneui.IdleScreen.Display()</literal>
- * D-Bus method invocation by returning a value.
+ * @invocation: (transfer full): A #GDBusMethodInvocation.
  *
- * If you want to return an error, use g_dbus_method_invocation_return_error()
- * or similar instead.
+ * Helper function used in service implementations to finish handling invocations of the <link linkend="gdbus-method-org-shr-phoneui-IdleScreen.Display">Display()</link> D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.
  *
  * This method will free @invocation, you cannot use it afterwards.
  */
-void phoneui_idle_screen_complete_display (
-        PhoneuiIdleScreen *object,
-        GDBusMethodInvocation *invocation)
+void
+phoneui_idle_screen_complete_display (
+    PhoneuiIdleScreen *object,
+    GDBusMethodInvocation *invocation)
 {
-  g_dbus_method_invocation_return_value (invocation, NULL);
+  g_dbus_method_invocation_return_value (invocation,
+    g_variant_new ("()"));
 }
 
-
 /**
  * phoneui_idle_screen_complete_hide:
  * @object: A #PhoneuiIdleScreen.
- * @invocation: A #GDBusMethodInvocation.
- *
- * Completes handling the <literal>org.shr.phoneui.IdleScreen.Hide()</literal>
- * D-Bus method invocation by returning a value.
+ * @invocation: (transfer full): A #GDBusMethodInvocation.
  *
- * If you want to return an error, use g_dbus_method_invocation_return_error()
- * or similar instead.
+ * Helper function used in service implementations to finish handling invocations of the <link linkend="gdbus-method-org-shr-phoneui-IdleScreen.Hide">Hide()</link> D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.
  *
  * This method will free @invocation, you cannot use it afterwards.
  */
-void phoneui_idle_screen_complete_hide (
-        PhoneuiIdleScreen *object,
-        GDBusMethodInvocation *invocation)
+void
+phoneui_idle_screen_complete_hide (
+    PhoneuiIdleScreen *object,
+    GDBusMethodInvocation *invocation)
 {
-  g_dbus_method_invocation_return_value (invocation, NULL);
+  g_dbus_method_invocation_return_value (invocation,
+    g_variant_new ("()"));
 }
 
-
 /**
  * phoneui_idle_screen_complete_toggle:
  * @object: A #PhoneuiIdleScreen.
- * @invocation: A #GDBusMethodInvocation.
- *
- * Completes handling the <literal>org.shr.phoneui.IdleScreen.Toggle()</literal>
- * D-Bus method invocation by returning a value.
+ * @invocation: (transfer full): A #GDBusMethodInvocation.
  *
- * If you want to return an error, use g_dbus_method_invocation_return_error()
- * or similar instead.
+ * Helper function used in service implementations to finish handling invocations of the <link linkend="gdbus-method-org-shr-phoneui-IdleScreen.Toggle">Toggle()</link> D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.
  *
  * This method will free @invocation, you cannot use it afterwards.
  */
-void phoneui_idle_screen_complete_toggle (
-        PhoneuiIdleScreen *object,
-        GDBusMethodInvocation *invocation)
+void
+phoneui_idle_screen_complete_toggle (
+    PhoneuiIdleScreen *object,
+    GDBusMethodInvocation *invocation)
 {
-  g_dbus_method_invocation_return_value (invocation, NULL);
+  g_dbus_method_invocation_return_value (invocation,
+    g_variant_new ("()"));
 }
 
-
 /**
  * phoneui_idle_screen_complete_activate_screensaver:
  * @object: A #PhoneuiIdleScreen.
- * @invocation: A #GDBusMethodInvocation.
- *
- * Completes handling the <literal>org.shr.phoneui.IdleScreen.ActivateScreensaver()</literal>
- * D-Bus method invocation by returning a value.
+ * @invocation: (transfer full): A #GDBusMethodInvocation.
  *
- * If you want to return an error, use g_dbus_method_invocation_return_error()
- * or similar instead.
+ * Helper function used in service implementations to finish handling invocations of the <link linkend="gdbus-method-org-shr-phoneui-IdleScreen.ActivateScreensaver">ActivateScreensaver()</link> D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.
  *
  * This method will free @invocation, you cannot use it afterwards.
  */
-void phoneui_idle_screen_complete_activate_screensaver (
-        PhoneuiIdleScreen *object,
-        GDBusMethodInvocation *invocation)
+void
+phoneui_idle_screen_complete_activate_screensaver (
+    PhoneuiIdleScreen *object,
+    GDBusMethodInvocation *invocation)
 {
-  g_dbus_method_invocation_return_value (invocation, NULL);
+  g_dbus_method_invocation_return_value (invocation,
+    g_variant_new ("()"));
 }
 
-
 /**
  * phoneui_idle_screen_complete_deactivate_screensaver:
  * @object: A #PhoneuiIdleScreen.
- * @invocation: A #GDBusMethodInvocation.
- *
- * Completes handling the <literal>org.shr.phoneui.IdleScreen.DeactivateScreensaver()</literal>
- * D-Bus method invocation by returning a value.
+ * @invocation: (transfer full): A #GDBusMethodInvocation.
  *
- * If you want to return an error, use g_dbus_method_invocation_return_error()
- * or similar instead.
+ * Helper function used in service implementations to finish handling invocations of the <link linkend="gdbus-method-org-shr-phoneui-IdleScreen.DeactivateScreensaver">DeactivateScreensaver()</link> D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.
  *
  * This method will free @invocation, you cannot use it afterwards.
  */
-void phoneui_idle_screen_complete_deactivate_screensaver (
-        PhoneuiIdleScreen *object,
-        GDBusMethodInvocation *invocation)
+void
+phoneui_idle_screen_complete_deactivate_screensaver (
+    PhoneuiIdleScreen *object,
+    GDBusMethodInvocation *invocation)
 {
-  g_dbus_method_invocation_return_value (invocation, NULL);
+  g_dbus_method_invocation_return_value (invocation,
+    g_variant_new ("()"));
 }
 
+/* ------------------------------------------------------------------------ */
 
-static const GDBusAnnotationInfo Display_method_annotations_annotation_0 = {
-  -1,
-  "org.freedesktop.DBus.GLib.Async",
-  "true",
-};
+/**
+ * PhoneuiIdleScreenProxy:
+ *
+ * The #PhoneuiIdleScreenProxy structure contains only private data and should only be accessed using the provided API.
+ */
 
-static const GDBusAnnotationInfo *Display_method_annotations[] = {
-  &Display_method_annotations_annotation_0,
-  NULL
-};
+/**
+ * PhoneuiIdleScreenProxyClass:
+ * @parent_class: The parent class.
+ *
+ * Class structure for #PhoneuiIdleScreenProxy.
+ */
 
-static const GDBusMethodInfo phoneui_idle_screen_method_Display =
+static void
+phoneui_idle_screen_proxy_iface_init (PhoneuiIdleScreenIface *iface)
 {
-  -1,
-  "Display",
-  (GDBusArgInfo **) NULL,
-  (GDBusArgInfo **) NULL,
-  (GDBusAnnotationInfo **) Display_method_annotations,
-};
+}
 
-static const GDBusAnnotationInfo Hide_method_annotations_annotation_0 = {
-  -1,
-  "org.freedesktop.DBus.GLib.Async",
-  "true",
-};
+#define phoneui_idle_screen_proxy_get_type phoneui_idle_screen_proxy_get_type
+G_DEFINE_TYPE_WITH_CODE (PhoneuiIdleScreenProxy, phoneui_idle_screen_proxy, G_TYPE_DBUS_PROXY,
+                         G_IMPLEMENT_INTERFACE (TYPE_PHONEUI_IDLE_SCREEN, phoneui_idle_screen_proxy_iface_init));
+#undef phoneui_idle_screen_proxy_get_type
 
-static const GDBusAnnotationInfo *Hide_method_annotations[] = {
-  &Hide_method_annotations_annotation_0,
-  NULL
-};
+static void
+phoneui_idle_screen_proxy_get_property (GObject      *object,
+  guint         prop_id,
+  GValue       *value,
+  GParamSpec   *pspec)
+{
+}
 
-static const GDBusMethodInfo phoneui_idle_screen_method_Hide =
+static void
+phoneui_idle_screen_proxy_set_property (GObject      *object,
+  guint         prop_id,
+  const GValue *value,
+  GParamSpec   *pspec)
 {
-  -1,
-  "Hide",
-  (GDBusArgInfo **) NULL,
-  (GDBusArgInfo **) NULL,
-  (GDBusAnnotationInfo **) Hide_method_annotations,
-};
+}
 
-static const GDBusAnnotationInfo Toggle_method_annotations_annotation_0 = {
-  -1,
-  "org.freedesktop.DBus.GLib.Async",
-  "true",
-};
+static void
+phoneui_idle_screen_proxy_g_signal (GDBusProxy *proxy,
+  const gchar *sender_name,
+  const gchar *signal_name,
+  GVariant *parameters)
+{
+  _ExtendedGDBusSignalInfo *info;
+  GVariantIter iter;
+  GVariant *child;
+  GValue *paramv;
+  guint num_params;
+  guint n;
+  guint signal_id;
+  info = (_ExtendedGDBusSignalInfo *) g_dbus_interface_info_lookup_signal ((GDBusInterfaceInfo *) &_phoneui_idle_screen_interface_info, signal_name);
+  if (info == NULL)
+    return;
+  num_params = g_variant_n_children (parameters);
+  paramv = g_new0 (GValue, num_params + 1);
+  g_value_init (&paramv[0], TYPE_PHONEUI_IDLE_SCREEN);
+  g_value_set_object (&paramv[0], proxy);
+  g_variant_iter_init (&iter, parameters);
+  n = 1;
+  while ((child = g_variant_iter_next_value (&iter)) != NULL)
+    {
+      _ExtendedGDBusArgInfo *arg_info = (_ExtendedGDBusArgInfo *) info->parent_struct.args[n - 1];
+      if (arg_info->use_gvariant)
+        {
+          g_value_init (&paramv[n], G_TYPE_VARIANT);
+          g_value_set_variant (&paramv[n], child);
+          n++;
+        }
+      else
+        g_dbus_gvariant_to_gvalue (child, &paramv[n++]);
+      g_variant_unref (child);
+    }
+  signal_id = g_signal_lookup (info->signal_name, TYPE_PHONEUI_IDLE_SCREEN);
+  g_signal_emitv (paramv, signal_id, 0, NULL);
+  for (n = 0; n < num_params + 1; n++)
+    g_value_unset (&paramv[n]);
+  g_free (paramv);
+}
 
-static const GDBusAnnotationInfo *Toggle_method_annotations[] = {
-  &Toggle_method_annotations_annotation_0,
-  NULL
-};
+static void
+phoneui_idle_screen_proxy_g_properties_changed (GDBusProxy *proxy,
+  GVariant *changed_properties,
+  const gchar *const *invalidated_properties)
+{
+  guint n;
+  const gchar *key;
+  GVariantIter *iter;
+  _ExtendedGDBusPropertyInfo *info;
+  g_variant_get (changed_properties, "a{sv}", &iter);
+  while (g_variant_iter_next (iter, "{&sv}", &key, NULL))
+    {
+      info = (_ExtendedGDBusPropertyInfo *) g_dbus_interface_info_lookup_property ((GDBusInterfaceInfo *) &_phoneui_idle_screen_interface_info, key);
+      if (info != NULL)
+        g_object_notify (G_OBJECT (proxy), info->hyphen_name);
+    }
+  g_variant_iter_free (iter);
+  for (n = 0; invalidated_properties[n] != NULL; n++)
+    {
+      info = (_ExtendedGDBusPropertyInfo *) g_dbus_interface_info_lookup_property ((GDBusInterfaceInfo *) &_phoneui_idle_screen_interface_info, invalidated_properties[n]);
+      if (info != NULL)
+        g_object_notify (G_OBJECT (proxy), info->hyphen_name);
+    }
+}
 
-static const GDBusMethodInfo phoneui_idle_screen_method_Toggle =
+static void
+phoneui_idle_screen_proxy_init (PhoneuiIdleScreenProxy *proxy)
 {
-  -1,
-  "Toggle",
-  (GDBusArgInfo **) NULL,
-  (GDBusArgInfo **) NULL,
-  (GDBusAnnotationInfo **) Toggle_method_annotations,
-};
-
-static const GDBusAnnotationInfo ActivateScreensaver_method_annotations_annotation_0 = {
-  -1,
-  "org.freedesktop.DBus.GLib.Async",
-  "true",
-};
-
-static const GDBusAnnotationInfo *ActivateScreensaver_method_annotations[] = {
-  &ActivateScreensaver_method_annotations_annotation_0,
-  NULL
-};
-
-static const GDBusMethodInfo phoneui_idle_screen_method_ActivateScreensaver =
-{
-  -1,
-  "ActivateScreensaver",
-  (GDBusArgInfo **) NULL,
-  (GDBusArgInfo **) NULL,
-  (GDBusAnnotationInfo **) ActivateScreensaver_method_annotations,
-};
-
-static const GDBusAnnotationInfo DeactivateScreensaver_method_annotations_annotation_0 = {
-  -1,
-  "org.freedesktop.DBus.GLib.Async",
-  "true",
-};
-
-static const GDBusAnnotationInfo *DeactivateScreensaver_method_annotations[] = {
-  &DeactivateScreensaver_method_annotations_annotation_0,
-  NULL
-};
-
-static const GDBusMethodInfo phoneui_idle_screen_method_DeactivateScreensaver =
-{
-  -1,
-  "DeactivateScreensaver",
-  (GDBusArgInfo **) NULL,
-  (GDBusArgInfo **) NULL,
-  (GDBusAnnotationInfo **) DeactivateScreensaver_method_annotations,
-};
-
-static const GDBusMethodInfo * const phoneui_idle_screen_method_info_pointers[] =
-{
-  &phoneui_idle_screen_method_Display,
-  &phoneui_idle_screen_method_Hide,
-  &phoneui_idle_screen_method_Toggle,
-  &phoneui_idle_screen_method_ActivateScreensaver,
-  &phoneui_idle_screen_method_DeactivateScreensaver,
-  NULL
-};
-
-static const GDBusInterfaceInfo _phoneui_idle_screen_interface_info =
-{
-  -1,
-  "org.shr.phoneui.IdleScreen",
-  (GDBusMethodInfo **) &phoneui_idle_screen_method_info_pointers,
-  (GDBusSignalInfo **) NULL,
-  (GDBusPropertyInfo **) NULL,
-  (GDBusAnnotationInfo **) NULL
-};
-
-static void
-handle_method_call_real (GDBusConnection       *connection,
-                         const gchar           *sender,
-                         const gchar           *object_path,
-                         const gchar           *interface_name,
-                         const gchar           *method_name,
-                         GVariant              *parameters,
-                         GDBusMethodInvocation *invocation,
-                         gpointer               user_data)
-{
-  guint method_id;
-  method_id = lookup_method_id_from_method_name (method_name);
-  switch (method_id)
-    {
-    case __DISPLAY_METHOD:
-      {
-        PhoneuiIdleScreen *object = PHONEUI_IDLE_SCREEN (user_data);
-        gboolean handled;
-        g_signal_emit (object,
-                       signals[method_id],
-                       0, invocation, &handled);
-        if (!handled)
-          goto not_implemented;
-      }
-      break;
-
-    case __HIDE_METHOD:
-      {
-        PhoneuiIdleScreen *object = PHONEUI_IDLE_SCREEN (user_data);
-        gboolean handled;
-        g_signal_emit (object,
-                       signals[method_id],
-                       0, invocation, &handled);
-        if (!handled)
-          goto not_implemented;
-      }
-      break;
-
-    case __TOGGLE_METHOD:
-      {
-        PhoneuiIdleScreen *object = PHONEUI_IDLE_SCREEN (user_data);
-        gboolean handled;
-        g_signal_emit (object,
-                       signals[method_id],
-                       0, invocation, &handled);
-        if (!handled)
-          goto not_implemented;
-      }
-      break;
-
-    case __ACTIVATE_SCREENSAVER_METHOD:
-      {
-        PhoneuiIdleScreen *object = PHONEUI_IDLE_SCREEN (user_data);
-        gboolean handled;
-        g_signal_emit (object,
-                       signals[method_id],
-                       0, invocation, &handled);
-        if (!handled)
-          goto not_implemented;
-      }
-      break;
-
-    case __DEACTIVATE_SCREENSAVER_METHOD:
-      {
-        PhoneuiIdleScreen *object = PHONEUI_IDLE_SCREEN (user_data);
-        gboolean handled;
-        g_signal_emit (object,
-                       signals[method_id],
-                       0, invocation, &handled);
-        if (!handled)
-          goto not_implemented;
-      }
-      break;
-
-    default:
-not_implemented:
-      g_dbus_method_invocation_return_error (invocation,
-                                             G_DBUS_ERROR,
-                                             G_DBUS_ERROR_NOT_SUPPORTED,
-                                             "Method `%s' is not implemented",
-                                             method_name);
-      break;
-    }
-};
-
-typedef struct
-{
-  GDBusMethodInvocation *invocation;
-  gpointer               user_data;
-} HandleMethodInThreadData;
-
-static gboolean
-handle_method_call_in_thread_func (GIOSchedulerJob *job,
-                                   GCancellable    *cancellable,
-                                   gpointer         user_data)
-{
-  HandleMethodInThreadData *data = user_data;
-
-  handle_method_call_real (g_dbus_method_invocation_get_connection (data->invocation),
-                           g_dbus_method_invocation_get_sender (data->invocation),
-                           g_dbus_method_invocation_get_object_path (data->invocation),
-                           g_dbus_method_invocation_get_interface_name (data->invocation),
-                           g_dbus_method_invocation_get_method_name (data->invocation),
-                           g_dbus_method_invocation_get_parameters (data->invocation),
-                           data->invocation,
-                           data->user_data);
-  return FALSE; /* job is complete */
-}
-
-static void
-handle_method_call (GDBusConnection       *connection,
-                    const gchar           *sender,
-                    const gchar           *object_path,
-                    const gchar           *interface_name,
-                    const gchar           *method_name,
-                    GVariant              *parameters,
-                    GDBusMethodInvocation *invocation,
-                    gpointer               user_data)
-{
-  GDBusInterface *interface = G_DBUS_INTERFACE (user_data);
-  GDBusInterfaceFlags flags;
-
-  flags = g_dbus_interface_get_flags (interface);
-  if (flags & G_DBUS_INTERFACE_FLAGS_RUN_IN_THREAD)
-    {
-      HandleMethodInThreadData *data;
-      data = g_new0 (HandleMethodInThreadData, 1);
-      data->invocation = invocation;
-      data->user_data = user_data;
-      g_io_scheduler_push_job (handle_method_call_in_thread_func,
-                               data,
-                               g_free, /* since we don't need refs on objects */
-                               G_PRIORITY_DEFAULT,
-                               NULL); /* GCancellable* */
-    }
-  else
-    {
-      handle_method_call_real (connection,
-                               sender,
-                               object_path,
-                               interface_name,
-                               method_name,
-                               parameters,
-                               invocation,
-                               user_data);
-    }
-}
-
-static GVariant *
-get_property (GDBusConnection  *connection,
-              const gchar      *sender,
-              const gchar      *object_path,
-              const gchar      *interface_name,
-              const gchar      *property_name,
-              GError          **error,
-              gpointer          user_data)
-{
-  GVariant *ret;
-  guint prop_id;
-  prop_id = lookup_property_id_from_property_name (property_name);
-  ret = NULL;
-  switch (prop_id)
-    {
-    default:
-      g_assert_not_reached ();
-      break;
-    }
-
-  if (ret == NULL)
-    {
-      GVariant *untrusted_empty;
-      GDBusPropertyInfo *property_info;
-      const GVariantType *type;
-      property_info = g_dbus_interface_info_lookup_property ((GDBusInterfaceInfo *) &_phoneui_idle_screen_interface_info, property_name);
-      type = G_VARIANT_TYPE (property_info->signature);
-      untrusted_empty = g_variant_new_from_data (type, NULL, 0, FALSE, NULL, NULL);
-      ret = g_variant_get_normal_form (untrusted_empty);
-      g_variant_unref (untrusted_empty);
-    }
-
-  return ret;
-};
-
-static gboolean
-set_property (GDBusConnection  *connection,
-              const gchar      *sender,
-              const gchar      *object_path,
-              const gchar      *interface_name,
-              const gchar      *property_name,
-              GVariant         *value,
-              GError          **error,
-              gpointer          user_data)
-{
-  gboolean ret;
-  guint prop_id;
-  prop_id = lookup_property_id_from_property_name (property_name);
-  ret = TRUE;
-  switch (prop_id)
-    {
-    default:
-      g_set_error (error,
-                   G_DBUS_ERROR,
-                   G_DBUS_ERROR_NOT_SUPPORTED,
-                   "This implementation does not support property `%s'",
-                   property_name);
-      ret = FALSE;
-      break;
-    }
-
-  return ret;
-};
-
-static const GDBusInterfaceVTable phoneui_idle_screen_interface_vtable =
-{
-  handle_method_call,
-  get_property,
-  set_property,
-};
-
-/* ---------------------------------------------------------------------- */
-
-typedef struct {
-  gpointer data;
-  gsize size;
-} _VariantBlob;
-
-static void
-_variant_blob_free (_VariantBlob *blob)
-{
-  g_free (blob->data);
-  g_free (blob);
-}
-
-static _VariantBlob *
-_variant_blob_new (GVariant *value)
-{
-  _VariantBlob *blob;
-  blob = g_new0 (_VariantBlob, 1);
-  blob->size = g_variant_get_size (value);
-  blob->data = g_malloc (blob->size);
-  g_variant_store (value, blob->data);
-  return blob;
-}
-
-static gboolean
-_variant_blob_equal (_VariantBlob *a,
-                    _VariantBlob *b)
-{
-  return (a->size == b->size) && (memcmp (a->data, b->data, a->size) == 0);
-}
-/* ---------------------------------------------------------------------- */
-
-static gboolean
-emit_notifications_in_idle (gpointer user_data)
-{
-  GObject *object = G_OBJECT (user_data);
-  GDBusConnection *connection;
-  const gchar *path;
-  GHashTable *notification_queue;
-  GHashTableIter iter;
-  const gchar *property_name;
-  GVariant *value;
-  GVariantBuilder builder;
-  GVariantBuilder invalidated_builder;
-  GHashTable *pvc;
-  gboolean has_changes;
-
-  notification_queue = g_object_get_data (object, "gdbus-codegen-notification-queue");
-  path = g_object_get_data (object, "gdbus-codegen-path");
-  connection = g_object_get_data (object, "gdbus-codegen-connection");
-  pvc = g_object_get_data (object, "gdbus-codegen-pvc");
-  g_assert (notification_queue != NULL && path != NULL && connection != NULL && pvc != NULL);
-
-  g_variant_builder_init (&builder, G_VARIANT_TYPE ("a{sv}"));
-  g_variant_builder_init (&invalidated_builder, G_VARIANT_TYPE ("as"));
-  g_hash_table_iter_init (&iter, notification_queue);
-  has_changes = FALSE;
-  while (g_hash_table_iter_next (&iter, (gpointer) &property_name, (gpointer) &value))
-    {
-      _VariantBlob *cached_blob;
-      _VariantBlob *blob;
-      cached_blob = g_hash_table_lookup (pvc, property_name);
-      blob = _variant_blob_new (value);
-      if (cached_blob == NULL || !_variant_blob_equal (cached_blob, blob))
-        {
-          g_hash_table_insert (pvc, (gpointer) property_name, blob);
-          g_variant_builder_add (&builder, "{sv}", property_name, value);
-          has_changes = TRUE;
-        }
-      else
-        {
-          _variant_blob_free (blob);
-        }
-    }
-
-  if (has_changes)
-    {
-      g_dbus_connection_emit_signal (connection,
-                                     NULL,
-                                     path,
-                                     "org.freedesktop.DBus.Properties",
-                                     "PropertiesChanged",
-                                     g_variant_new ("(sa{sv}as)",
-                                                    "org.shr.phoneui.IdleScreen",
-                                                    &builder,
-                                                    &invalidated_builder),
-                                     NULL);
-    }
-  else
-    {
-      g_variant_builder_clear (&builder);
-      g_variant_builder_clear (&invalidated_builder);
-    }
-
-  g_hash_table_remove_all (notification_queue);
-  g_object_set_data (object, "gdbus-codegen-notification-idle-source", NULL);
-  return FALSE;
-}
-
-static void
-queue_notification (GObject     *object,
-                    const gchar *property_name,
-                    GVariant    *value)
-{
-  GHashTable *notification_queue;
-  GSource *idle_source;
-  notification_queue = g_object_get_data (object, "gdbus-codegen-notification-queue");
-  if (notification_queue == NULL)
-    {
-      notification_queue = g_hash_table_new_full (g_str_hash, g_str_equal, NULL, (GDestroyNotify) g_variant_unref);
-      g_object_set_data_full (object, "gdbus-codegen-notification-queue", notification_queue, (GDestroyNotify) g_hash_table_unref);
-    }
-  g_hash_table_insert (notification_queue, (gpointer) property_name, (gpointer) value); /* adopts value */
-  idle_source = g_object_get_data (object, "gdbus-codegen-notification-idle-source");
-  if (idle_source == NULL)
-    {
-      idle_source = g_idle_source_new ();
-      g_source_set_priority (idle_source, G_PRIORITY_DEFAULT);
-      g_source_set_callback (idle_source,
-                             emit_notifications_in_idle,
-                             g_object_ref (object),
-                             (GDestroyNotify) g_object_unref);
-      g_source_attach (idle_source, g_main_context_get_thread_default ());
-      g_source_unref (idle_source);
-      g_object_set_data (object, "gdbus-codegen-notification-idle-source", idle_source);
-    }
-}
-
-static void
-phoneui_idle_screen_flush (GDBusInterface *_object)
-{
-  PhoneuiIdleScreen *object = PHONEUI_IDLE_SCREEN (_object);
-  GSource *idle_source;
-  idle_source = g_object_get_data (G_OBJECT (object), "gdbus-codegen-notification-idle-source");
-  if (idle_source != NULL)
-    {
-      emit_notifications_in_idle (object);
-      g_source_destroy (idle_source);
-    }
-}
-
-static void
-on_notify (GObject    *object,
-           GParamSpec *pspec,
-           gpointer    user_data)
-{
-  GDBusConnection *connection;
-  const gchar *path;
-  GVariant *value;
-  const gchar *property_name;
-
-  path = g_object_get_data (object, "gdbus-codegen-path");
-  connection = g_object_get_data (object, "gdbus-codegen-connection");
-  if (connection == NULL || path == NULL)
-    goto out;
-  property_name = lookup_property_name_from_property_gname (pspec->name);
-  if (property_name == NULL)
-    goto out;
-
-  value = get_property (connection, NULL, path, "org.shr.phoneui.IdleScreen", property_name, NULL, object);
-  if (value != NULL)
-    {
-      if (g_variant_is_floating (value))
-        g_variant_ref_sink (value);
-      queue_notification (object, property_name, value);
-    }
-out:
-  ;
-}
-
-static void
-on_object_unregistered (GObject *object)
-{
-  GSource *idle_source;
-  idle_source = g_object_get_data (G_OBJECT (object), "gdbus-codegen-notification-idle-source");
-  if (idle_source != NULL)
-    g_source_destroy (idle_source);
-  g_object_set_data (G_OBJECT (object), "gdbus-codegen-notification-idle-source", NULL);
-  g_object_set_data (G_OBJECT (object), "gdbus-codegen-path", NULL);
-  g_object_set_data (G_OBJECT (object), "gdbus-codegen-connection", NULL);
-  g_signal_handlers_disconnect_by_func (object, on_notify, NULL);
-}
-
-static guint
-phoneui_idle_screen_register_object (GDBusInterface *_object,
-           GDBusConnection *connection,
-           const gchar *object_path,
-           GError **error)
-{
-  PhoneuiIdleScreen *object = PHONEUI_IDLE_SCREEN (_object);
-  GHashTable *pvc;
-  guint n;
-
-  pvc = g_hash_table_new_full (g_str_hash, g_str_equal, NULL, (GDestroyNotify) _variant_blob_free);
-  if (_phoneui_idle_screen_interface_info.properties != NULL)
-    {
-      for (n = 0; _phoneui_idle_screen_interface_info.properties[n] != NULL; n++)
-        {
-          GDBusPropertyInfo *prop_info = _phoneui_idle_screen_interface_info.properties[n];
-          if (prop_info->flags & G_DBUS_PROPERTY_INFO_FLAGS_READABLE)
-            {
-              GVariant *value;
-              value = get_property (connection, NULL, object_path, "org.shr.phoneui.IdleScreen", prop_info->name, NULL, object);
-              if (value != NULL)
-                {
-                  if (g_variant_is_floating (value))
-                    g_variant_ref_sink (value);
-                  g_hash_table_insert (pvc, prop_info->name, _variant_blob_new (value));
-                  g_variant_unref (value);
-                }
-            }
-        }
-    }
-
-  g_object_set_data_full (G_OBJECT (object), "gdbus-codegen-path", (gpointer) g_strdup (object_path), g_free);
-  g_object_set_data (G_OBJECT (object), "gdbus-codegen-connection", (gpointer) connection);
-  g_object_set_data_full (G_OBJECT (object), "gdbus-codegen-pvc", (gpointer) pvc, (GDestroyNotify) g_hash_table_unref);
-  g_signal_connect (object, "notify", G_CALLBACK (on_notify), NULL);
-  return g_dbus_connection_register_object (connection,
-          object_path,
-          (GDBusInterfaceInfo *) &_phoneui_idle_screen_interface_info,
-          &phoneui_idle_screen_interface_vtable,
-          object,
-          (GDestroyNotify) on_object_unregistered,
-          error);
-}
-
-/**
- * phoneui_idle_screen_interface_info:
- *
- * Gets interface description for the <literal>org.shr.phoneui.IdleScreen</literal> D-Bus interface.
- *
- * Returns: A #GDBusInterfaceInfo. Do not free, the object is statically allocated.
- */
-GDBusInterfaceInfo *
-phoneui_idle_screen_interface_info (void)
-{
-  return (GDBusInterfaceInfo *) &_phoneui_idle_screen_interface_info;
-}
-
-static GDBusInterfaceInfo *
-phoneui_idle_screen_g_dbus_interface_interface_info (GDBusInterface *object)
-{
-  return phoneui_idle_screen_interface_info ();
-}
-
-static GVariant *
-phoneui_idle_screen_get_properties (GDBusInterface *object)
-{
-  GDBusConnection *connection;
-  const gchar *object_path;
-  GVariantBuilder builder;
-  guint n;
-
-  g_variant_builder_init (&builder, G_VARIANT_TYPE ("a{sv}"));
-
-  if (_phoneui_idle_screen_interface_info.properties == NULL)
-    goto out;
-
-  connection = g_object_get_data (G_OBJECT (object), "gdbus-codegen-connection");
-  object_path = g_object_get_data (G_OBJECT (object), "gdbus-codegen-path");
-
-  for (n = 0; _phoneui_idle_screen_interface_info.properties[n] != NULL; n++)
-    {
-      GDBusPropertyInfo *prop_info = _phoneui_idle_screen_interface_info.properties[n];
-      if (prop_info->flags & G_DBUS_PROPERTY_INFO_FLAGS_READABLE)
-        {
-          GVariant *value;
-          value = get_property (connection, NULL, object_path, "org.shr.phoneui.IdleScreen", prop_info->name, NULL, object);
-          if (value != NULL)
-            {
-              if (g_variant_is_floating (value))
-                g_variant_ref_sink (value);
-              g_variant_builder_add (&builder, "{sv}", prop_info->name, value);
-              g_variant_unref (value);
-            }
-        }
-    }
-out:
-  return g_variant_builder_end (&builder);
-}
-
-
-/* ---------------------------------------------------------------------- */
-
-static void proxy_iface_init (PhoneuiIdleScreenIface *iface);
-
-G_DEFINE_TYPE_WITH_CODE (PhoneuiIdleScreenProxy, phoneui_idle_screen_proxy, G_TYPE_DBUS_PROXY,
-                         G_IMPLEMENT_INTERFACE (TYPE_PHONEUI_IDLE_SCREEN, proxy_iface_init));
-
-static void
-phoneui_idle_screen_proxy_init (PhoneuiIdleScreenProxy *proxy)
-{
-  g_dbus_proxy_set_interface_info (G_DBUS_PROXY (proxy),
-                                   (GDBusInterfaceInfo *) &_phoneui_idle_screen_interface_info);
-}
-
-static void
-g_signal (GDBusProxy  *proxy,
-          const gchar *sender_name,
-          const gchar *signal_name,
-          GVariant    *parameters)
-{
-  guint signal_id;
-  signal_id = lookup_signal_id_from_signal_name (signal_name);
-  switch (signal_id)
-    {
-    }
-}
-
-static void
-phoneui_idle_screen_proxy_get_property (GObject      *object,
-                       guint         prop_id,
-                       GValue       *value,
-                       GParamSpec   *pspec)
-{
-  G_GNUC_UNUSED GVariant *cached;
-  switch (prop_id)
-    {
-
-    default:
-      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
-      break;
-    }
-}
-
-static void
-property_set_cb (GDBusProxy   *proxy,
-                 GAsyncResult *res,
-                 gpointer      user_data)
-{
-  const gchar *property_name = user_data;
-  GError *error;
-  GVariant *result;
-
-  error = NULL;
-  result = g_dbus_proxy_call_finish (proxy, res, &error);
-  if (result == NULL)
-    {
-      g_warning ("Error setting property `%s': %s", property_name, error->message);
-      g_error_free (error);
-    }
-  else
-    {
-      g_variant_unref (result);
-    }
-}
-
-static void
-phoneui_idle_screen_proxy_set_property (GObject      *object,
-                       guint         prop_id,
-                       const GValue *value,
-                       GParamSpec   *pspec)
-{
-  GVariant *new_value;
-  const gchar *property_name;
-  new_value = NULL;
-  property_name = NULL;
-  switch (prop_id)
-    {
-
-    default:
-      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
-      break;
-    }
-
-  if (new_value != NULL)
-    {
-      g_variant_ref_sink (new_value);
-      g_dbus_proxy_call (G_DBUS_PROXY (object),
-                         "org.freedesktop.DBus.Properties.Set",
-                         g_variant_new ("(ssv)",
-                                        "org.shr.phoneui.IdleScreen",
-                                        property_name,
-                                        new_value),
-                         G_DBUS_CALL_FLAGS_NONE,
-                         -1,
-                         NULL,
-                         (GAsyncReadyCallback) property_set_cb,
-                         (gpointer) property_name);
-      g_variant_unref (new_value);
-    }
-
-}
-
-static void
-g_properties_changed (GDBusProxy         *proxy,
-                      GVariant           *changed_properties,
-                      const gchar* const *invalidated_properties)
-{
-  guint n;
-  const gchar *key;
-  GVariantIter *iter;
-  const gchar *gname;
-
-  g_variant_get (changed_properties, "a{sv}", &iter);
-  while (g_variant_iter_next (iter, "{&sv}", &key, NULL))
-    {
-      gname = lookup_property_gname_from_property_name (key);
-      if (gname != NULL)
-        g_object_notify (G_OBJECT (proxy), gname);
-    }
-
-  for (n = 0; invalidated_properties[n] != NULL; n++)
-    {
-      gname = lookup_property_gname_from_property_name (invalidated_properties[n]);
-      if (gname != NULL)
-        g_object_notify (G_OBJECT (proxy), gname);
-    }
-
-}
+  g_dbus_proxy_set_interface_info (G_DBUS_PROXY (proxy), phoneui_idle_screen_interface_info ());
+}
 
 static void
 phoneui_idle_screen_proxy_class_init (PhoneuiIdleScreenProxyClass *klass)
@@ -1662,74 +1133,62 @@ phoneui_idle_screen_proxy_class_init (PhoneuiIdleScreenProxyClass *klass)
   gobject_class->set_property = phoneui_idle_screen_proxy_set_property;
 
   proxy_class = G_DBUS_PROXY_CLASS (klass);
-  proxy_class->g_signal = g_signal;
-  proxy_class->g_properties_changed = g_properties_changed;
-
-}
+  proxy_class->g_signal = phoneui_idle_screen_proxy_g_signal;
+  proxy_class->g_properties_changed = phoneui_idle_screen_proxy_g_properties_changed;
 
-static void
-proxy_iface_init (PhoneuiIdleScreenIface *iface)
-{
 }
 
-
 /**
  * phoneui_idle_screen_proxy_new:
  * @connection: A #GDBusConnection.
- * @flags: Flags used when constructing the proxy.
- * @name: A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.
+ * @flags: Flags from the #GDBusProxyFlags enumeration.
+ * @name: (allow-none): A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.
  * @object_path: An object path.
- * @cancellable: A #GCancellable or %NULL.
- * @callback: Callback function to invoke when the proxy is ready.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @callback: A #GAsyncReadyCallback to call when the request is satisfied.
  * @user_data: User data to pass to @callback.
  *
- * Like g_dbus_proxy_new() but returns a #PhoneuiIdleScreenProxy.
+ * Asynchronously creates a proxy for the D-Bus interface <link linkend="gdbus-interface-org-shr-phoneui-IdleScreen.top_of_page">org.shr.phoneui.IdleScreen</link>. See g_dbus_proxy_new() for more details.
  *
- * This is a failable asynchronous constructor - when the proxy is ready, callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this function from. You can then call phoneui_idle_screen_proxy_new_finish() to get the result. See phoneui_idle_screen_proxy_new_sync() for the synchronous version.
+ * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
+ * You can then call phoneui_idle_screen_proxy_new_finish() to get the result of the operation.
+ *
+ * See phoneui_idle_screen_proxy_new_sync() for the synchronous, blocking version of this constructor.
  */
-void phoneui_idle_screen_proxy_new (GDBusConnection     *connection,
-                   GDBusProxyFlags      flags,
-                   const gchar         *name,
-                   const gchar         *object_path,
-                   GCancellable        *cancellable,
-                   GAsyncReadyCallback  callback,
-                   gpointer             user_data)
-{
-  g_async_initable_new_async (TYPE_PHONEUI_IDLE_SCREEN_PROXY,
-                              G_PRIORITY_DEFAULT,
-                              cancellable,
-                              callback,
-                              user_data,
-                              "g-flags", flags,
-                              "g-name", name,
-                              "g-connection", connection,
-                              "g-object-path", object_path,
-                              "g-interface-name", "org.shr.phoneui.IdleScreen",
-                              NULL);
+void
+phoneui_idle_screen_proxy_new (
+    GDBusConnection     *connection,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GAsyncReadyCallback  callback,
+    gpointer             user_data)
+{
+  g_async_initable_new_async (TYPE_PHONEUI_IDLE_SCREEN_PROXY, G_PRIORITY_DEFAULT, cancellable, callback, user_data, "g-flags", flags, "g-name", name, "g-connection", connection, "g-object-path", object_path, "g-interface-name", "org.shr.phoneui.IdleScreen", NULL);
 }
 
 /**
  * phoneui_idle_screen_proxy_new_finish:
- * @res: A #GAsyncResult obtained from the #GAsyncReadyCallback function passed to phoneui_idle_screen_proxy_new().
- * @error: Return location for error or %NULL.
+ * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_idle_screen_proxy_new().
+ * @error: Return location for error or %NULL
  *
- * Finishes creating a #PhoneuiIdleScreenProxy.
+ * Finishes an operation started with phoneui_idle_screen_proxy_new().
  *
- * Returns: A #PhoneuiIdleScreenProxy or %NULL if @error is set. Free with g_object_unref().
+ * Returns: (transfer full) (type PhoneuiIdleScreenProxy): The constructed proxy object or %NULL if @error is set.
  */
-PhoneuiIdleScreen *phoneui_idle_screen_proxy_new_finish (GAsyncResult  *res,
-                        GError       **error)
+PhoneuiIdleScreen *
+phoneui_idle_screen_proxy_new_finish (
+    GAsyncResult        *res,
+    GError             **error)
 {
-  GObject *object;
+  GObject *ret;
   GObject *source_object;
   source_object = g_async_result_get_source_object (res);
-  g_assert (source_object != NULL);
-  object = g_async_initable_new_finish (G_ASYNC_INITABLE (source_object),
-                                        res,
-                                        error);
+  ret = g_async_initable_new_finish (G_ASYNC_INITABLE (source_object), res, error);
   g_object_unref (source_object);
-  if (object != NULL)
-    return PHONEUI_IDLE_SCREEN (object);
+  if (ret != NULL)
+    return PHONEUI_IDLE_SCREEN (ret);
   else
     return NULL;
 }
@@ -1737,37 +1196,33 @@ PhoneuiIdleScreen *phoneui_idle_screen_proxy_new_finish (GAsyncResult  *res,
 /**
  * phoneui_idle_screen_proxy_new_sync:
  * @connection: A #GDBusConnection.
- * @flags: Flags used when constructing the proxy.
- * @name: A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.
+ * @flags: Flags from the #GDBusProxyFlags enumeration.
+ * @name: (allow-none): A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.
  * @object_path: An object path.
- * @cancellable: A #GCancellable or %NULL.
- * @error: Return location for error or %NULL.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @error: Return location for error or %NULL
  *
- * Like g_dbus_proxy_new_sync() but returns a #PhoneuiIdleScreenProxy.
+ * Synchronously creates a proxy for the D-Bus interface <link linkend="gdbus-interface-org-shr-phoneui-IdleScreen.top_of_page">org.shr.phoneui.IdleScreen</link>. See g_dbus_proxy_new_sync() for more details.
  *
- * This is a synchronous failable constructor - the calling thread is blocked until the object is ready. See phoneui_idle_screen_proxy_new() for the asynchronous version.
+ * The calling thread is blocked until a reply is received.
  *
- * Returns: A #PhoneuiIdleScreenProxy or %NULL if error is set. Free with g_object_unref().
+ * See phoneui_idle_screen_proxy_new() for the asynchronous version of this constructor.
+ *
+ * Returns: (transfer full) (type PhoneuiIdleScreenProxy): The constructed proxy object or %NULL if @error is set.
  */
-PhoneuiIdleScreen *phoneui_idle_screen_proxy_new_sync (GDBusConnection     *connection,
-                       GDBusProxyFlags      flags,
-                       const gchar         *name,
-                       const gchar         *object_path,
-                       GCancellable        *cancellable,
-                       GError             **error)
-{
-  GInitable *initable;
-  initable = g_initable_new (TYPE_PHONEUI_IDLE_SCREEN_PROXY,
-                             cancellable,
-                             error,
-                             "g-flags", flags,
-                             "g-name", name,
-                             "g-connection", connection,
-                             "g-object-path", object_path,
-                             "g-interface-name", "org.shr.phoneui.IdleScreen",
-                             NULL);
-  if (initable != NULL)
-    return PHONEUI_IDLE_SCREEN (initable);
+PhoneuiIdleScreen *
+phoneui_idle_screen_proxy_new_sync (
+    GDBusConnection     *connection,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GError             **error)
+{
+  GInitable *ret;
+  ret = g_initable_new (TYPE_PHONEUI_IDLE_SCREEN_PROXY, cancellable, error, "g-flags", flags, "g-name", name, "g-connection", connection, "g-object-path", object_path, "g-interface-name", "org.shr.phoneui.IdleScreen", NULL);
+  if (ret != NULL)
+    return PHONEUI_IDLE_SCREEN (ret);
   else
     return NULL;
 }
@@ -1776,60 +1231,54 @@ PhoneuiIdleScreen *phoneui_idle_screen_proxy_new_sync (GDBusConnection     *conn
 /**
  * phoneui_idle_screen_proxy_new_for_bus:
  * @bus_type: A #GBusType.
- * @flags: Flags used when constructing the proxy.
+ * @flags: Flags from the #GDBusProxyFlags enumeration.
  * @name: A bus name (well-known or unique).
  * @object_path: An object path.
- * @cancellable: A #GCancellable or %NULL.
- * @callback: Callback function to invoke when the proxy is ready.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @callback: A #GAsyncReadyCallback to call when the request is satisfied.
  * @user_data: User data to pass to @callback.
  *
- * Like g_dbus_proxy_new_for_bus() but returns a #PhoneuiIdleScreenProxy.
+ * Like phoneui_idle_screen_proxy_new() but takes a #GBusType instead of a #GDBusConnection.
+ *
+ * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
+ * You can then call phoneui_idle_screen_proxy_new_for_bus_finish() to get the result of the operation.
  *
- * This is a failable asynchronous constructor - when the proxy is ready, callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this function from. You can then call phoneui_idle_screen_proxy_new_for_bus_finish() to get the result. See phoneui_idle_screen_proxy_new_for_bus_sync() for the synchronous version.
+ * See phoneui_idle_screen_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.
  */
-void phoneui_idle_screen_proxy_new_for_bus (GBusType             bus_type,
-                           GDBusProxyFlags      flags,
-                           const gchar         *name,
-                           const gchar         *object_path,
-                           GCancellable        *cancellable,
-                           GAsyncReadyCallback  callback,
-                           gpointer             user_data)
-{
-  g_async_initable_new_async (TYPE_PHONEUI_IDLE_SCREEN_PROXY,
-                              G_PRIORITY_DEFAULT,
-                              cancellable,
-                              callback,
-                              user_data,
-                              "g-flags", flags,
-                              "g-name", name,
-                              "g-bus-type", bus_type,
-                              "g-object-path", object_path,
-                              "g-interface-name", "org.shr.phoneui.IdleScreen",
-                              NULL);
+void
+phoneui_idle_screen_proxy_new_for_bus (
+    GBusType             bus_type,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GAsyncReadyCallback  callback,
+    gpointer             user_data)
+{
+  g_async_initable_new_async (TYPE_PHONEUI_IDLE_SCREEN_PROXY, G_PRIORITY_DEFAULT, cancellable, callback, user_data, "g-flags", flags, "g-name", name, "g-bus-type", bus_type, "g-object-path", object_path, "g-interface-name", "org.shr.phoneui.IdleScreen", NULL);
 }
 
 /**
  * phoneui_idle_screen_proxy_new_for_bus_finish:
- * @res: A #GAsyncResult obtained from the #GAsyncReadyCallback function passed to phoneui_idle_screen_proxy_new_for_bus().
- * @error: Return location for error or %NULL.
+ * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_idle_screen_proxy_new_for_bus().
+ * @error: Return location for error or %NULL
  *
- * Finishes creating a #PhoneuiIdleScreenProxy.
+ * Finishes an operation started with phoneui_idle_screen_proxy_new_for_bus().
  *
- * Returns: A #PhoneuiIdleScreenProxy or %NULL if @error is set. Free with g_object_unref().
+ * Returns: (transfer full) (type PhoneuiIdleScreenProxy): The constructed proxy object or %NULL if @error is set.
  */
-PhoneuiIdleScreen *phoneui_idle_screen_proxy_new_for_bus_finish (GAsyncResult  *res,
-                                GError       **error)
+PhoneuiIdleScreen *
+phoneui_idle_screen_proxy_new_for_bus_finish (
+    GAsyncResult        *res,
+    GError             **error)
 {
-  GObject *object;
+  GObject *ret;
   GObject *source_object;
   source_object = g_async_result_get_source_object (res);
-  g_assert (source_object != NULL);
-  object = g_async_initable_new_finish (G_ASYNC_INITABLE (source_object),
-                                        res,
-                                        error);
+  ret = g_async_initable_new_finish (G_ASYNC_INITABLE (source_object), res, error);
   g_object_unref (source_object);
-  if (object != NULL)
-    return PHONEUI_IDLE_SCREEN (object);
+  if (ret != NULL)
+    return PHONEUI_IDLE_SCREEN (ret);
   else
     return NULL;
 }
@@ -1837,163 +1286,321 @@ PhoneuiIdleScreen *phoneui_idle_screen_proxy_new_for_bus_finish (GAsyncResult  *
 /**
  * phoneui_idle_screen_proxy_new_for_bus_sync:
  * @bus_type: A #GBusType.
- * @flags: Flags used when constructing the proxy.
+ * @flags: Flags from the #GDBusProxyFlags enumeration.
  * @name: A bus name (well-known or unique).
  * @object_path: An object path.
- * @cancellable: A #GCancellable or %NULL.
- * @error: Return location for error or %NULL.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @error: Return location for error or %NULL
+ *
+ * Like phoneui_idle_screen_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.
  *
- * Like g_dbus_proxy_new_for_bus_sync() but returns a #PhoneuiIdleScreenProxy.
+ * The calling thread is blocked until a reply is received.
  *
- * This is a synchronous failable constructor - the calling thread is blocked until the object is ready. See phoneui_idle_screen_proxy_new_for_bus() for the asynchronous version.
+ * See phoneui_idle_screen_proxy_new_for_bus() for the asynchronous version of this constructor.
  *
- * Returns: A #PhoneuiIdleScreenProxy or %NULL if error is set. Free with g_object_unref().
+ * Returns: (transfer full) (type PhoneuiIdleScreenProxy): The constructed proxy object or %NULL if @error is set.
  */
-PhoneuiIdleScreen *phoneui_idle_screen_proxy_new_for_bus_sync (GBusType             bus_type,
-                               GDBusProxyFlags      flags,
-                               const gchar         *name,
-                               const gchar         *object_path,
-                               GCancellable        *cancellable,
-                               GError             **error)
-{
-  GInitable *initable;
-  initable = g_initable_new (TYPE_PHONEUI_IDLE_SCREEN_PROXY,
-                             cancellable,
-                             error,
-                             "g-flags", flags,
-                             "g-name", name,
-                             "g-bus-type", bus_type,
-                             "g-object-path", object_path,
-                             "g-interface-name", "org.shr.phoneui.IdleScreen",
-                             NULL);
-  if (initable != NULL)
-    return PHONEUI_IDLE_SCREEN (initable);
+PhoneuiIdleScreen *
+phoneui_idle_screen_proxy_new_for_bus_sync (
+    GBusType             bus_type,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GError             **error)
+{
+  GInitable *ret;
+  ret = g_initable_new (TYPE_PHONEUI_IDLE_SCREEN_PROXY, cancellable, error, "g-flags", flags, "g-name", name, "g-bus-type", bus_type, "g-object-path", object_path, "g-interface-name", "org.shr.phoneui.IdleScreen", NULL);
+  if (ret != NULL)
+    return PHONEUI_IDLE_SCREEN (ret);
   else
     return NULL;
 }
 
 
-/* ---------------------------------------------------------------------- */
+/* ------------------------------------------------------------------------ */
 
-struct _PhoneuiIdleScreenStubPrivate
+/**
+ * PhoneuiIdleScreenSkeleton:
+ *
+ * The #PhoneuiIdleScreenSkeleton structure contains only private data and should only be accessed using the provided API.
+ */
+
+/**
+ * PhoneuiIdleScreenSkeletonClass:
+ * @parent_class: The parent class.
+ *
+ * Class structure for #PhoneuiIdleScreenSkeleton.
+ */
+
+struct _PhoneuiIdleScreenSkeletonPrivate
 {
-  GDBusObject *enclosing_object;
-  GDBusInterfaceFlags flags;
+  GValueArray *properties;
+  GList *changed_properties;
+  GSource *changed_properties_idle_source;
+  GMainContext *context;
 };
 
-static void stub_iface_init (PhoneuiIdleScreenIface *iface);
+static void
+_phoneui_idle_screen_skeleton_handle_method_call (
+  GDBusConnection *connection,
+  const gchar *sender,
+  const gchar *object_path,
+  const gchar *interface_name,
+  const gchar *method_name,
+  GVariant *parameters,
+  GDBusMethodInvocation *invocation,
+  gpointer user_data)
+{
+  PhoneuiIdleScreenSkeleton *skeleton = PHONEUI_IDLE_SCREEN_SKELETON (user_data);
+  _ExtendedGDBusMethodInfo *info;
+  GVariantIter iter;
+  GVariant *child;
+  GValue *paramv;
+  guint num_params;
+  guint n;
+  guint signal_id;
+  GValue return_value = {0};
+  info = (_ExtendedGDBusMethodInfo *) g_dbus_method_invocation_get_method_info (invocation);
+  g_assert (info != NULL);
+  num_params = g_variant_n_children (parameters);
+  paramv = g_new0 (GValue, num_params + 2);
+  g_value_init (&paramv[0], TYPE_PHONEUI_IDLE_SCREEN);
+  g_value_set_object (&paramv[0], skeleton);
+  g_value_init (&paramv[1], G_TYPE_DBUS_METHOD_INVOCATION);
+  g_value_set_object (&paramv[1], invocation);
+  g_variant_iter_init (&iter, parameters);
+  n = 2;
+  while ((child = g_variant_iter_next_value (&iter)) != NULL)
+    {
+      _ExtendedGDBusArgInfo *arg_info = (_ExtendedGDBusArgInfo *) info->parent_struct.in_args[n - 2];
+      if (arg_info->use_gvariant)
+        {
+          g_value_init (&paramv[n], G_TYPE_VARIANT);
+          g_value_set_variant (&paramv[n], child);
+          n++;
+        }
+      else
+        g_dbus_gvariant_to_gvalue (child, &paramv[n++]);
+      g_variant_unref (child);
+    }
+  signal_id = g_signal_lookup (info->signal_name, TYPE_PHONEUI_IDLE_SCREEN);
+  g_value_init (&return_value, G_TYPE_BOOLEAN);
+  g_signal_emitv (paramv, signal_id, 0, &return_value);
+  if (!g_value_get_boolean (&return_value))
+    g_dbus_method_invocation_return_error (invocation, G_DBUS_ERROR, G_DBUS_ERROR_UNKNOWN_METHOD, "Method %s is not implemented on interface %s", method_name, interface_name);
+  g_value_unset (&return_value);
+  for (n = 0; n < num_params + 2; n++)
+    g_value_unset (&paramv[n]);
+  g_free (paramv);
+}
 
-G_DEFINE_TYPE_WITH_CODE (PhoneuiIdleScreenStub, phoneui_idle_screen_stub, G_TYPE_OBJECT,
-                         G_IMPLEMENT_INTERFACE (G_TYPE_DBUS_INTERFACE, dbus_iface_init)
-                         G_IMPLEMENT_INTERFACE (TYPE_PHONEUI_IDLE_SCREEN, stub_iface_init));
+static GVariant *
+_phoneui_idle_screen_skeleton_handle_get_property (
+  GDBusConnection *connection,
+  const gchar *sender,
+  const gchar *object_path,
+  const gchar *interface_name,
+  const gchar *property_name,
+  GError **error,
+  gpointer user_data)
+{
+  PhoneuiIdleScreenSkeleton *skeleton = PHONEUI_IDLE_SCREEN_SKELETON (user_data);
+  GValue value = {0};
+  GParamSpec *pspec;
+  _ExtendedGDBusPropertyInfo *info;
+  GVariant *ret;
+  ret = NULL;
+  info = (_ExtendedGDBusPropertyInfo *) g_dbus_interface_info_lookup_property ((GDBusInterfaceInfo *) &_phoneui_idle_screen_interface_info, property_name);
+  g_assert (info != NULL);
+  pspec = g_object_class_find_property (G_OBJECT_GET_CLASS (skeleton), info->hyphen_name);
+  if (pspec == NULL)
+    {
+      g_set_error (error, G_DBUS_ERROR, G_DBUS_ERROR_INVALID_ARGS, "No property with name %s", property_name);
+    }
+  else
+    {
+      g_value_init (&value, pspec->value_type);
+      g_object_get_property (G_OBJECT (skeleton), info->hyphen_name, &value);
+      ret = g_dbus_gvalue_to_gvariant (&value, G_VARIANT_TYPE (info->parent_struct.signature));
+      g_value_unset (&value);
+    }
+  return ret;
+}
 
-static void
-phoneui_idle_screen_stub_finalize (GObject *object)
+static gboolean
+_phoneui_idle_screen_skeleton_handle_set_property (
+  GDBusConnection *connection,
+  const gchar *sender,
+  const gchar *object_path,
+  const gchar *interface_name,
+  const gchar *property_name,
+  GVariant *variant,
+  GError **error,
+  gpointer user_data)
+{
+  PhoneuiIdleScreenSkeleton *skeleton = PHONEUI_IDLE_SCREEN_SKELETON (user_data);
+  GValue value = {0};
+  GParamSpec *pspec;
+  _ExtendedGDBusPropertyInfo *info;
+  gboolean ret;
+  ret = FALSE;
+  info = (_ExtendedGDBusPropertyInfo *) g_dbus_interface_info_lookup_property ((GDBusInterfaceInfo *) &_phoneui_idle_screen_interface_info, property_name);
+  g_assert (info != NULL);
+  pspec = g_object_class_find_property (G_OBJECT_GET_CLASS (skeleton), info->hyphen_name);
+  if (pspec == NULL)
+    {
+      g_set_error (error, G_DBUS_ERROR, G_DBUS_ERROR_INVALID_ARGS, "No property with name %s", property_name);
+    }
+  else
+    {
+      if (info->use_gvariant)
+        g_value_set_variant (&value, variant);
+      else
+        g_dbus_gvariant_to_gvalue (variant, &value);
+      g_object_set_property (G_OBJECT (skeleton), info->hyphen_name, &value);
+      g_value_unset (&value);
+      ret = TRUE;
+    }
+  return ret;
+}
+
+static const GDBusInterfaceVTable _phoneui_idle_screen_skeleton_vtable =
 {
-  G_GNUC_UNUSED PhoneuiIdleScreenStub *stub = (PhoneuiIdleScreenStub *) object;
+  _phoneui_idle_screen_skeleton_handle_method_call,
+  _phoneui_idle_screen_skeleton_handle_get_property,
+  _phoneui_idle_screen_skeleton_handle_set_property
+};
 
-  if (G_OBJECT_CLASS (phoneui_idle_screen_stub_parent_class)->finalize != NULL)
-    G_OBJECT_CLASS (phoneui_idle_screen_stub_parent_class)->finalize (object);
+static GDBusInterfaceInfo *
+phoneui_idle_screen_skeleton_dbus_interface_get_info (GDBusInterfaceSkeleton *skeleton)
+{
+  return phoneui_idle_screen_interface_info ();
 }
 
-static void
-phoneui_idle_screen_stub_get_property (GObject      *object,
-                      guint         prop_id,
-                      GValue       *value,
-                      GParamSpec   *pspec)
+static GDBusInterfaceVTable *
+phoneui_idle_screen_skeleton_dbus_interface_get_vtable (GDBusInterfaceSkeleton *skeleton)
 {
-  G_GNUC_UNUSED PhoneuiIdleScreenStub *stub = (PhoneuiIdleScreenStub *) object;
-  switch (prop_id)
-    {
-
-    default:
-      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
-      break;
-    }
+  return (GDBusInterfaceVTable *) &_phoneui_idle_screen_skeleton_vtable;
 }
 
-static void
-phoneui_idle_screen_stub_set_property (GObject      *object,
-                      guint         prop_id,
-                      const GValue *value,
-                      GParamSpec   *pspec)
+static GVariant *
+phoneui_idle_screen_skeleton_dbus_interface_get_properties (GDBusInterfaceSkeleton *_skeleton)
 {
-  G_GNUC_UNUSED PhoneuiIdleScreenStub *stub = (PhoneuiIdleScreenStub *) object;
-  switch (prop_id)
-    {
+  PhoneuiIdleScreenSkeleton *skeleton = PHONEUI_IDLE_SCREEN_SKELETON (_skeleton);
 
-    default:
-      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
-      break;
+  GVariantBuilder builder;
+  guint n;
+  g_variant_builder_init (&builder, G_VARIANT_TYPE ("a{sv}"));
+  if (_phoneui_idle_screen_interface_info.parent_struct.properties == NULL)
+    goto out;
+  for (n = 0; _phoneui_idle_screen_interface_info.parent_struct.properties[n] != NULL; n++)
+    {
+      GDBusPropertyInfo *info = _phoneui_idle_screen_interface_info.parent_struct.properties[n];
+      if (info->flags & G_DBUS_PROPERTY_INFO_FLAGS_READABLE)
+        {
+          GVariant *value;
+          value = _phoneui_idle_screen_skeleton_handle_get_property (g_dbus_interface_skeleton_get_connection (G_DBUS_INTERFACE_SKELETON (skeleton)), NULL, g_dbus_interface_skeleton_get_object_path (G_DBUS_INTERFACE_SKELETON (skeleton)), "org.shr.phoneui.IdleScreen", info->name, NULL, skeleton);
+          if (value != NULL)
+            {
+              if (g_variant_is_floating (value))
+                g_variant_ref_sink (value);
+              g_variant_builder_add (&builder, "{sv}", info->name, value);
+              g_variant_unref (value);
+            }
+        }
     }
+out:
+  return g_variant_builder_end (&builder);
 }
 
 static void
-phoneui_idle_screen_stub_init (PhoneuiIdleScreenStub *stub)
+phoneui_idle_screen_skeleton_dbus_interface_flush (GDBusInterfaceSkeleton *_skeleton)
 {
-  stub->priv = G_TYPE_INSTANCE_GET_PRIVATE (stub, TYPE_PHONEUI_IDLE_SCREEN_STUB, PhoneuiIdleScreenStubPrivate);
 }
 
 static void
-phoneui_idle_screen_stub_class_init (PhoneuiIdleScreenStubClass *klass)
+phoneui_idle_screen_skeleton_iface_init (PhoneuiIdleScreenIface *iface)
 {
-  GObjectClass *gobject_class;
-
-  gobject_class = G_OBJECT_CLASS (klass);
-  gobject_class->finalize     = phoneui_idle_screen_stub_finalize;
-  gobject_class->get_property = phoneui_idle_screen_stub_get_property;
-  gobject_class->set_property = phoneui_idle_screen_stub_set_property;
-  g_type_class_add_private (klass, sizeof (PhoneuiIdleScreenStubPrivate));
 }
 
+#define phoneui_idle_screen_skeleton_get_type phoneui_idle_screen_skeleton_get_type
+G_DEFINE_TYPE_WITH_CODE (PhoneuiIdleScreenSkeleton, phoneui_idle_screen_skeleton, G_TYPE_DBUS_INTERFACE_SKELETON,
+                         G_IMPLEMENT_INTERFACE (TYPE_PHONEUI_IDLE_SCREEN, phoneui_idle_screen_skeleton_iface_init));
+#undef phoneui_idle_screen_skeleton_get_type
+
 static void
-stub_iface_init (PhoneuiIdleScreenIface *iface)
+phoneui_idle_screen_skeleton_finalize (GObject *object)
 {
+  PhoneuiIdleScreenSkeleton *skeleton = PHONEUI_IDLE_SCREEN_SKELETON (object);
+  g_list_foreach (skeleton->priv->changed_properties, (GFunc) _changed_property_free, NULL);
+  g_list_free (skeleton->priv->changed_properties);
+  if (skeleton->priv->changed_properties_idle_source != NULL)
+    g_source_destroy (skeleton->priv->changed_properties_idle_source);
+  if (skeleton->priv->context != NULL)
+    g_main_context_unref (skeleton->priv->context);
+  G_OBJECT_CLASS (phoneui_idle_screen_skeleton_parent_class)->finalize (object);
 }
 
-/**
- * phoneui_idle_screen_stub_new:
- *
- * Creates a new stub object that can be exported via g_dbus_interface_register_object().
- *
- * Returns: A #PhoneuiIdleScreenStub instance. Free with g_object_unref().
- */
-PhoneuiIdleScreen *
-phoneui_idle_screen_stub_new (void)
+static void
+phoneui_idle_screen_skeleton_get_property (GObject      *object,
+  guint         prop_id,
+  GValue       *value,
+  GParamSpec   *pspec)
 {
-  return PHONEUI_IDLE_SCREEN (g_object_new (TYPE_PHONEUI_IDLE_SCREEN_STUB, NULL));
+  PhoneuiIdleScreenSkeleton *skeleton = PHONEUI_IDLE_SCREEN_SKELETON (object);
+  g_assert (prop_id - 1 >= 0 && prop_id - 1 < 0);
+  g_value_copy (&skeleton->priv->properties->values[prop_id - 1], value);
 }
 
-static GDBusObject *
-phoneui_idle_screen_g_dbus_interface_get_object (GDBusInterface *interface)
+static void
+phoneui_idle_screen_skeleton_set_property (GObject      *object,
+  guint         prop_id,
+  const GValue *value,
+  GParamSpec   *pspec)
 {
-  PhoneuiIdleScreenStub *stub = G_TYPE_CHECK_INSTANCE_CAST (interface, TYPE_PHONEUI_IDLE_SCREEN_STUB, PhoneuiIdleScreenStub);
-  if (stub->priv->enclosing_object != NULL)
-    return g_object_ref (stub->priv->enclosing_object);
-  else
-    return NULL;
 }
 
 static void
-phoneui_idle_screen_g_dbus_interface_set_object (GDBusInterface *interface,
-                                GDBusObject    *object)
+phoneui_idle_screen_skeleton_init (PhoneuiIdleScreenSkeleton *skeleton)
 {
-  PhoneuiIdleScreenStub *stub = G_TYPE_CHECK_INSTANCE_CAST (interface, TYPE_PHONEUI_IDLE_SCREEN_STUB, PhoneuiIdleScreenStub);
-  stub->priv->enclosing_object = object;
+  skeleton->priv = G_TYPE_INSTANCE_GET_PRIVATE (skeleton, TYPE_PHONEUI_IDLE_SCREEN_SKELETON, PhoneuiIdleScreenSkeletonPrivate);
+  skeleton->priv->context = g_main_context_get_thread_default ();
+  if (skeleton->priv->context != NULL)
+    g_main_context_ref (skeleton->priv->context);
 }
 
-static GDBusInterfaceFlags
-phoneui_idle_screen_g_dbus_interface_get_flags (GDBusInterface *interface)
+static void
+phoneui_idle_screen_skeleton_class_init (PhoneuiIdleScreenSkeletonClass *klass)
 {
-  PhoneuiIdleScreenStub *stub = G_TYPE_CHECK_INSTANCE_CAST (interface, TYPE_PHONEUI_IDLE_SCREEN_STUB, PhoneuiIdleScreenStub);
-  return stub->priv->flags;
+  GObjectClass *gobject_class;
+  GDBusInterfaceSkeletonClass *skeleton_class;
+
+  g_type_class_add_private (klass, sizeof (PhoneuiIdleScreenSkeletonPrivate));
+
+  gobject_class = G_OBJECT_CLASS (klass);
+  gobject_class->finalize = phoneui_idle_screen_skeleton_finalize;
+  gobject_class->get_property = phoneui_idle_screen_skeleton_get_property;
+  gobject_class->set_property = phoneui_idle_screen_skeleton_set_property;
+
+
+  skeleton_class = G_DBUS_INTERFACE_SKELETON_CLASS (klass);
+  skeleton_class->get_info = phoneui_idle_screen_skeleton_dbus_interface_get_info;
+  skeleton_class->get_properties = phoneui_idle_screen_skeleton_dbus_interface_get_properties;
+  skeleton_class->flush = phoneui_idle_screen_skeleton_dbus_interface_flush;
+  skeleton_class->get_vtable = phoneui_idle_screen_skeleton_dbus_interface_get_vtable;
 }
 
-static void
-phoneui_idle_screen_g_dbus_interface_set_flags (GDBusInterface      *interface,
-                               GDBusInterfaceFlags  flags)
+/**
+ * phoneui_idle_screen_skeleton_new:
+ *
+ * Creates a skeleton object for the D-Bus interface <link linkend="gdbus-interface-org-shr-phoneui-IdleScreen.top_of_page">org.shr.phoneui.IdleScreen</link>.
+ *
+ * Returns: (transfer full) (type PhoneuiIdleScreenSkeleton): The skeleton object.
+ */
+PhoneuiIdleScreen *
+phoneui_idle_screen_skeleton_new (void)
 {
-  PhoneuiIdleScreenStub *stub = G_TYPE_CHECK_INSTANCE_CAST (interface, TYPE_PHONEUI_IDLE_SCREEN_STUB, PhoneuiIdleScreenStub);
-  stub->priv->flags = flags;
+  return PHONEUI_IDLE_SCREEN (g_object_new (TYPE_PHONEUI_IDLE_SCREEN_SKELETON, NULL));
 }
 
diff --git a/src/shr-phoneuiidlescreen.h b/src/shr-phoneuiidlescreen.h
index bbca96c..2af7436 100644
--- a/src/shr-phoneuiidlescreen.h
+++ b/src/shr-phoneuiidlescreen.h
@@ -1,334 +1,260 @@
-/* File:       shr-phoneuiidlescreen.h
+/*
+ * Generated by gdbus-codegen 2.29.3. DO NOT EDIT.
  *
- * GType name: PhoneuiIdleScreen
- * D-Bus name: org.shr.phoneui.IdleScreen
- *
- * Generated by GDBus Binding Tool 0.1. DO NOT EDIT.
+ * The license of this code is the same as for the source it was derived from.
  */
 
-#ifndef __SHR_PHONEUI_IDLE_SCREEN_H__
-#define __SHR_PHONEUI_IDLE_SCREEN_H__
+#ifndef __SHR_PHONEUIIDLESCREEN_H__
+#define __SHR_PHONEUIIDLESCREEN_H__
 
 #include <gio/gio.h>
-#include <gdbusinterface.h>
-#include <gdbusobjectproxy.h>
-#include <gdbusproxymanager.h>
-#include <gdbusobject.h>
-#include <gdbusobjectmanager.h>
-#include <gdbuscodegen-enumtypes.h>
-#include <string.h>
-#include <shr-types.h>
 
 G_BEGIN_DECLS
 
-#define TYPE_PHONEUI_IDLE_SCREEN         (phoneui_idle_screen_get_gtype ())
-#define PHONEUI_IDLE_SCREEN(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_PHONEUI_IDLE_SCREEN, PhoneuiIdleScreen))
-#define IS_PHONEUI_IDLE_SCREEN(o)        (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_PHONEUI_IDLE_SCREEN))
-#define PHONEUI_IDLE_SCREEN_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE((o), TYPE_PHONEUI_IDLE_SCREEN, PhoneuiIdleScreenIface))
 
-/**
- * PhoneuiIdleScreen:
- *
- * Opaque type representing a proxy or an exported object.
- */
-typedef struct _PhoneuiIdleScreen PhoneuiIdleScreen; /* Dummy typedef */
-/**
- * PhoneuiIdleScreenIface:
- * @parent_iface: The parent interface.
- * @handle_display: Handler for the #PhoneuiIdleScreen::handle-display signal.
- * @handle_hide: Handler for the #PhoneuiIdleScreen::handle-hide signal.
- * @handle_toggle: Handler for the #PhoneuiIdleScreen::handle-toggle signal.
- * @handle_activate_screensaver: Handler for the #PhoneuiIdleScreen::handle-activate-screensaver signal.
- * @handle_deactivate_screensaver: Handler for the #PhoneuiIdleScreen::handle-deactivate-screensaver signal.
- *
- * Virtual table.
- */
-typedef struct _PhoneuiIdleScreenIface PhoneuiIdleScreenIface;
+/* ------------------------------------------------------------------------ */
+/* Declarations for org.shr.phoneui.IdleScreen */
 
-GType phoneui_idle_screen_get_gtype (void) G_GNUC_CONST;
-GDBusInterfaceInfo *phoneui_idle_screen_interface_info (void);
+#define TYPE_PHONEUI_IDLE_SCREEN (phoneui_idle_screen_get_type ())
+#define PHONEUI_IDLE_SCREEN(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_PHONEUI_IDLE_SCREEN, PhoneuiIdleScreen))
+#define IS_PHONEUI_IDLE_SCREEN(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_PHONEUI_IDLE_SCREEN))
+#define PHONEUI_IDLE_SCREEN_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_PHONEUI_IDLE_SCREEN, PhoneuiIdleScreen))
 
-/**
- * GET_PHONEUI_IDLE_SCREEN:
- * @object_proxy: A #GDBusObjectProxy.
- *
- * Convenience macro to get a #PhoneuiIdleScreen interface proxy from @object_proxy.
- *
- * Returns: A #GDBusProxy object implementing the #PhoneuiIdleScreen interface or %NULL if @object_proxy
- * does not implement the <literal>org.shr.phoneui.IdleScreen</literal> D-Bus interface.
- * The returned reference must be released with g_object_unref().
- */
-#define GET_PHONEUI_IDLE_SCREEN(object_proxy) (g_dbus_object_proxy_lookup_with_typecheck (object_proxy, "org.shr.phoneui.IdleScreen", TYPE_PHONEUI_IDLE_SCREEN))
+struct _PhoneuiIdleScreen;
+typedef struct _PhoneuiIdleScreen PhoneuiIdleScreen;
+typedef struct _PhoneuiIdleScreenIface PhoneuiIdleScreenIface;
 
-/**
- * PEEK_PHONEUI_IDLE_SCREEN:
- * @object_proxy: A #GDBusObjectProxy.
- *
- * Like GET_PHONEUI_IDLE_SCREEN() but doesn't increase the reference count on the returned object.
- *
- * <note><para>This macro is not safe to use outside the thread where the #GDBusProxyManager for @object_proxy was constructed in.</para></note>
- *
- * Returns: A #GDBusProxy object implementing the #PhoneuiIdleScreen interface or %NULL if @object_proxy
- * does not implement the <literal>org.shr.phoneui.IdleScreen</literal> D-Bus interface.
- * Do not free the returned object, it is owned by @object_proxy..
- */
-#define PEEK_PHONEUI_IDLE_SCREEN(object_proxy) (g_dbus_object_proxy_peek_with_typecheck (object_proxy, "org.shr.phoneui.IdleScreen", TYPE_PHONEUI_IDLE_SCREEN))
+struct _PhoneuiIdleScreenIface
+{
+  GTypeInterface parent_iface;
 
+  gboolean (*handle_activate_screensaver) (
+    PhoneuiIdleScreen *object,
+    GDBusMethodInvocation *invocation);
 
-/* ---------------------------------------------------------------------- */
+  gboolean (*handle_deactivate_screensaver) (
+    PhoneuiIdleScreen *object,
+    GDBusMethodInvocation *invocation);
 
-typedef struct _PhoneuiIdleScreenProxy PhoneuiIdleScreenProxy;
-typedef struct _PhoneuiIdleScreenProxyClass PhoneuiIdleScreenProxyClass;
+  gboolean (*handle_display) (
+    PhoneuiIdleScreen *object,
+    GDBusMethodInvocation *invocation);
 
-/**
- * PhoneuiIdleScreenProxyPrivate:
- *
- * The #PhoneuiIdleScreenProxyPrivate structure contains only private data.
- */
-typedef struct _PhoneuiIdleScreenProxyPrivate PhoneuiIdleScreenProxyPrivate;
+  gboolean (*handle_hide) (
+    PhoneuiIdleScreen *object,
+    GDBusMethodInvocation *invocation);
 
-/**
- * PhoneuiIdleScreenProxy:
- *
- * The #PhoneuiIdleScreenProxy structure contains only private data and
- * should only be accessed using the provided API.
- */
-struct _PhoneuiIdleScreenProxy
-{
-  /*< private >*/
-  GDBusProxy parent_instance;
-  PhoneuiIdleScreenProxyPrivate *priv;
-};
+  gboolean (*handle_toggle) (
+    PhoneuiIdleScreen *object,
+    GDBusMethodInvocation *invocation);
 
-/**
- * PhoneuiIdleScreenProxyClass:
- *
- * Class structure for #PhoneuiIdleScreenProxy.
- */
-struct _PhoneuiIdleScreenProxyClass
-{
-  /*< private >*/
-  GDBusProxyClass parent_class;
 };
 
-#define TYPE_PHONEUI_IDLE_SCREEN_PROXY (phoneui_idle_screen_proxy_get_type ())
-GType phoneui_idle_screen_proxy_get_type (void) G_GNUC_CONST;
-
-void phoneui_idle_screen_proxy_new (GDBusConnection     *connection,
-                   GDBusProxyFlags      flags,
-                   const gchar         *name,
-                   const gchar         *object_path,
-                   GCancellable        *cancellable,
-                   GAsyncReadyCallback  callback,
-                   gpointer             user_data);
-PhoneuiIdleScreen *phoneui_idle_screen_proxy_new_finish (GAsyncResult  *res,
-                        GError       **error);
-PhoneuiIdleScreen *phoneui_idle_screen_proxy_new_sync (GDBusConnection     *connection,
-                       GDBusProxyFlags      flags,
-                       const gchar         *name,
-                       const gchar         *object_path,
-                       GCancellable        *cancellable,
-                       GError             **error);
-
-void phoneui_idle_screen_proxy_new_for_bus (GBusType             bus_type,
-                           GDBusProxyFlags      flags,
-                           const gchar         *name,
-                           const gchar         *object_path,
-                           GCancellable        *cancellable,
-                           GAsyncReadyCallback  callback,
-                           gpointer             user_data);
-PhoneuiIdleScreen *phoneui_idle_screen_proxy_new_for_bus_finish (GAsyncResult  *res,
-                                 GError       **error);
-PhoneuiIdleScreen *phoneui_idle_screen_proxy_new_for_bus_sync (GBusType             bus_type,
-                               GDBusProxyFlags      flags,
-                               const gchar         *name,
-                               const gchar         *object_path,
-                               GCancellable        *cancellable,
-                               GError             **error);
-
-/* ---------------------------------------------------------------------- */
-
-typedef struct _PhoneuiIdleScreenStub PhoneuiIdleScreenStub;
-typedef struct _PhoneuiIdleScreenStubClass PhoneuiIdleScreenStubClass;
-
-/**
- * PhoneuiIdleScreenStubPrivate:
- *
- * The #PhoneuiIdleScreenStubPrivate structure contains only private data.
- */
-typedef struct _PhoneuiIdleScreenStubPrivate PhoneuiIdleScreenStubPrivate;
+GType phoneui_idle_screen_get_type (void) G_GNUC_CONST;
 
-/**
- * PhoneuiIdleScreenStub:
- *
- * The #PhoneuiIdleScreenStub structure contains only private data and
- * should only be accessed using the provided API.
- */
-struct _PhoneuiIdleScreenStub
-{
-  /*< private >*/
-  GObject parent_instance;
-  PhoneuiIdleScreenStubPrivate *priv;
-};
+GDBusInterfaceInfo *phoneui_idle_screen_interface_info (void);
 
-/**
- * PhoneuiIdleScreenStubClass:
- *
- * Class structure for #PhoneuiIdleScreenStub.
- */
-struct _PhoneuiIdleScreenStubClass
-{
-  /*< private >*/
-  GObjectClass parent_class;
-};
 
-#define TYPE_PHONEUI_IDLE_SCREEN_STUB (phoneui_idle_screen_stub_get_type ())
-GType phoneui_idle_screen_stub_get_type (void) G_GNUC_CONST;
+/* D-Bus method call completion functions: */
+void phoneui_idle_screen_complete_display (
+    PhoneuiIdleScreen *object,
+    GDBusMethodInvocation *invocation);
 
-PhoneuiIdleScreen *phoneui_idle_screen_stub_new (void);
+void phoneui_idle_screen_complete_hide (
+    PhoneuiIdleScreen *object,
+    GDBusMethodInvocation *invocation);
 
+void phoneui_idle_screen_complete_toggle (
+    PhoneuiIdleScreen *object,
+    GDBusMethodInvocation *invocation);
 
-struct _PhoneuiIdleScreenIface
-{
-  GTypeInterface parent_iface;
+void phoneui_idle_screen_complete_activate_screensaver (
+    PhoneuiIdleScreen *object,
+    GDBusMethodInvocation *invocation);
 
-  /* Signal handlers for handling D-Bus method calls: */
-  gboolean (*handle_display) (
-        PhoneuiIdleScreen *object,
-        GDBusMethodInvocation *invocation);
-  gboolean (*handle_hide) (
-        PhoneuiIdleScreen *object,
-        GDBusMethodInvocation *invocation);
-  gboolean (*handle_toggle) (
-        PhoneuiIdleScreen *object,
-        GDBusMethodInvocation *invocation);
-  gboolean (*handle_activate_screensaver) (
-        PhoneuiIdleScreen *object,
-        GDBusMethodInvocation *invocation);
-  gboolean (*handle_deactivate_screensaver) (
-        PhoneuiIdleScreen *object,
-        GDBusMethodInvocation *invocation);
-};
+void phoneui_idle_screen_complete_deactivate_screensaver (
+    PhoneuiIdleScreen *object,
+    GDBusMethodInvocation *invocation);
 
-/* C Bindings for properties */
 
 
-/* D-Bus Methods */
+/* D-Bus method calls: */
 void phoneui_idle_screen_call_display (
-        PhoneuiIdleScreen *proxy,
-        GCancellable *cancellable,
-        GAsyncReadyCallback callback,
-        gpointer user_data);
+    PhoneuiIdleScreen *proxy,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data);
 
 gboolean phoneui_idle_screen_call_display_finish (
-        PhoneuiIdleScreen *proxy,
-        GAsyncResult *res,
-        GError **error);
+    PhoneuiIdleScreen *proxy,
+    GAsyncResult *res,
+    GError **error);
 
 gboolean phoneui_idle_screen_call_display_sync (
-        PhoneuiIdleScreen *proxy,
-        GCancellable *cancellable,
-        GError **error);
-
+    PhoneuiIdleScreen *proxy,
+    GCancellable *cancellable,
+    GError **error);
 
 void phoneui_idle_screen_call_hide (
-        PhoneuiIdleScreen *proxy,
-        GCancellable *cancellable,
-        GAsyncReadyCallback callback,
-        gpointer user_data);
+    PhoneuiIdleScreen *proxy,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data);
 
 gboolean phoneui_idle_screen_call_hide_finish (
-        PhoneuiIdleScreen *proxy,
-        GAsyncResult *res,
-        GError **error);
+    PhoneuiIdleScreen *proxy,
+    GAsyncResult *res,
+    GError **error);
 
 gboolean phoneui_idle_screen_call_hide_sync (
-        PhoneuiIdleScreen *proxy,
-        GCancellable *cancellable,
-        GError **error);
-
+    PhoneuiIdleScreen *proxy,
+    GCancellable *cancellable,
+    GError **error);
 
 void phoneui_idle_screen_call_toggle (
-        PhoneuiIdleScreen *proxy,
-        GCancellable *cancellable,
-        GAsyncReadyCallback callback,
-        gpointer user_data);
+    PhoneuiIdleScreen *proxy,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data);
 
 gboolean phoneui_idle_screen_call_toggle_finish (
-        PhoneuiIdleScreen *proxy,
-        GAsyncResult *res,
-        GError **error);
+    PhoneuiIdleScreen *proxy,
+    GAsyncResult *res,
+    GError **error);
 
 gboolean phoneui_idle_screen_call_toggle_sync (
-        PhoneuiIdleScreen *proxy,
-        GCancellable *cancellable,
-        GError **error);
-
+    PhoneuiIdleScreen *proxy,
+    GCancellable *cancellable,
+    GError **error);
 
 void phoneui_idle_screen_call_activate_screensaver (
-        PhoneuiIdleScreen *proxy,
-        GCancellable *cancellable,
-        GAsyncReadyCallback callback,
-        gpointer user_data);
+    PhoneuiIdleScreen *proxy,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data);
 
 gboolean phoneui_idle_screen_call_activate_screensaver_finish (
-        PhoneuiIdleScreen *proxy,
-        GAsyncResult *res,
-        GError **error);
+    PhoneuiIdleScreen *proxy,
+    GAsyncResult *res,
+    GError **error);
 
 gboolean phoneui_idle_screen_call_activate_screensaver_sync (
-        PhoneuiIdleScreen *proxy,
-        GCancellable *cancellable,
-        GError **error);
-
+    PhoneuiIdleScreen *proxy,
+    GCancellable *cancellable,
+    GError **error);
 
 void phoneui_idle_screen_call_deactivate_screensaver (
-        PhoneuiIdleScreen *proxy,
-        GCancellable *cancellable,
-        GAsyncReadyCallback callback,
-        gpointer user_data);
+    PhoneuiIdleScreen *proxy,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data);
 
 gboolean phoneui_idle_screen_call_deactivate_screensaver_finish (
-        PhoneuiIdleScreen *proxy,
-        GAsyncResult *res,
-        GError **error);
+    PhoneuiIdleScreen *proxy,
+    GAsyncResult *res,
+    GError **error);
 
 gboolean phoneui_idle_screen_call_deactivate_screensaver_sync (
-        PhoneuiIdleScreen *proxy,
-        GCancellable *cancellable,
-        GError **error);
+    PhoneuiIdleScreen *proxy,
+    GCancellable *cancellable,
+    GError **error);
 
 
 
-/* D-Bus Methods Completion Helpers */
-void phoneui_idle_screen_complete_display (
-        PhoneuiIdleScreen *object,
-        GDBusMethodInvocation *invocation);
-
+/* ---- */
 
-void phoneui_idle_screen_complete_hide (
-        PhoneuiIdleScreen *object,
-        GDBusMethodInvocation *invocation);
+#define TYPE_PHONEUI_IDLE_SCREEN_PROXY (phoneui_idle_screen_proxy_get_type ())
+#define PHONEUI_IDLE_SCREEN_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_PHONEUI_IDLE_SCREEN_PROXY, PhoneuiIdleScreenProxy))
+#define PHONEUI_IDLE_SCREEN_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_PHONEUI_IDLE_SCREEN_PROXY, PhoneuiIdleScreenProxyClass))
+#define PHONEUI_IDLE_SCREEN_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_PHONEUI_IDLE_SCREEN_PROXY, PhoneuiIdleScreenProxyClass))
+#define IS_PHONEUI_IDLE_SCREEN_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_PHONEUI_IDLE_SCREEN_PROXY))
+#define IS_PHONEUI_IDLE_SCREEN_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_PHONEUI_IDLE_SCREEN_PROXY))
 
+typedef struct _PhoneuiIdleScreenProxy PhoneuiIdleScreenProxy;
+typedef struct _PhoneuiIdleScreenProxyClass PhoneuiIdleScreenProxyClass;
+typedef struct _PhoneuiIdleScreenProxyPrivate PhoneuiIdleScreenProxyPrivate;
 
-void phoneui_idle_screen_complete_toggle (
-        PhoneuiIdleScreen *object,
-        GDBusMethodInvocation *invocation);
+struct _PhoneuiIdleScreenProxy
+{
+  GDBusProxy parent_instance;
+  PhoneuiIdleScreenProxyPrivate *priv;
+};
 
+struct _PhoneuiIdleScreenProxyClass
+{
+  GDBusProxyClass parent_class;
+};
 
-void phoneui_idle_screen_complete_activate_screensaver (
-        PhoneuiIdleScreen *object,
-        GDBusMethodInvocation *invocation);
+GType phoneui_idle_screen_proxy_get_type (void) G_GNUC_CONST;
 
+void phoneui_idle_screen_proxy_new (
+    GDBusConnection     *connection,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GAsyncReadyCallback  callback,
+    gpointer             user_data);
+PhoneuiIdleScreen *phoneui_idle_screen_proxy_new_finish (
+    GAsyncResult        *res,
+    GError             **error);
+PhoneuiIdleScreen *phoneui_idle_screen_proxy_new_sync (
+    GDBusConnection     *connection,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GError             **error);
+
+void phoneui_idle_screen_proxy_new_for_bus (
+    GBusType             bus_type,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GAsyncReadyCallback  callback,
+    gpointer             user_data);
+PhoneuiIdleScreen *phoneui_idle_screen_proxy_new_for_bus_finish (
+    GAsyncResult        *res,
+    GError             **error);
+PhoneuiIdleScreen *phoneui_idle_screen_proxy_new_for_bus_sync (
+    GBusType             bus_type,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GError             **error);
+
+
+/* ---- */
+
+#define TYPE_PHONEUI_IDLE_SCREEN_SKELETON (phoneui_idle_screen_skeleton_get_type ())
+#define PHONEUI_IDLE_SCREEN_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_PHONEUI_IDLE_SCREEN_SKELETON, PhoneuiIdleScreenSkeleton))
+#define PHONEUI_IDLE_SCREEN_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_PHONEUI_IDLE_SCREEN_SKELETON, PhoneuiIdleScreenSkeletonClass))
+#define PHONEUI_IDLE_SCREEN_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_PHONEUI_IDLE_SCREEN_SKELETON, PhoneuiIdleScreenSkeletonClass))
+#define IS_PHONEUI_IDLE_SCREEN_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_PHONEUI_IDLE_SCREEN_SKELETON))
+#define IS_PHONEUI_IDLE_SCREEN_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_PHONEUI_IDLE_SCREEN_SKELETON))
+
+typedef struct _PhoneuiIdleScreenSkeleton PhoneuiIdleScreenSkeleton;
+typedef struct _PhoneuiIdleScreenSkeletonClass PhoneuiIdleScreenSkeletonClass;
+typedef struct _PhoneuiIdleScreenSkeletonPrivate PhoneuiIdleScreenSkeletonPrivate;
+
+struct _PhoneuiIdleScreenSkeleton
+{
+  GDBusInterfaceSkeleton parent_instance;
+  PhoneuiIdleScreenSkeletonPrivate *priv;
+};
 
-void phoneui_idle_screen_complete_deactivate_screensaver (
-        PhoneuiIdleScreen *object,
-        GDBusMethodInvocation *invocation);
+struct _PhoneuiIdleScreenSkeletonClass
+{
+  GDBusInterfaceSkeletonClass parent_class;
+};
 
+GType phoneui_idle_screen_skeleton_get_type (void) G_GNUC_CONST;
 
+PhoneuiIdleScreen *phoneui_idle_screen_skeleton_new (void);
 
-/* D-Bus Signal Emission Helpers */
 
 G_END_DECLS
 
-#endif /* __SHR_PHONEUI_IDLE_SCREEN_H__ */
+#endif /* __SHR_PHONEUIIDLESCREEN_H__ */
diff --git a/src/shr-phoneuimessages.c b/src/shr-phoneuimessages.c
index 0084338..df3adf9 100644
--- a/src/shr-phoneuimessages.c
+++ b/src/shr-phoneuimessages.c
@@ -1,1365 +1,877 @@
-/* File:       shr-phoneuimessages.c
+/*
+ * Generated by gdbus-codegen 2.29.3. DO NOT EDIT.
  *
- * GType name: PhoneuiMessages
- * D-Bus name: org.shr.phoneui.Messages
- *
- * Generated by GDBus Binding Tool 0.1. DO NOT EDIT.
+ * The license of this code is the same as for the source it was derived from.
+ */
+
+#ifdef HAVE_CONFIG_H
+#  include "config.h"
+#endif
+
+#include "shr-phoneuimessages.h"
+
+typedef struct
+{
+  GDBusArgInfo parent_struct;
+  gboolean use_gvariant;
+} _ExtendedGDBusArgInfo;
+
+typedef struct
+{
+  GDBusMethodInfo parent_struct;
+  const gchar *signal_name;
+} _ExtendedGDBusMethodInfo;
+
+typedef struct
+{
+  GDBusSignalInfo parent_struct;
+  const gchar *signal_name;
+} _ExtendedGDBusSignalInfo;
+
+typedef struct
+{
+  GDBusPropertyInfo parent_struct;
+  const gchar *hyphen_name;
+  gboolean use_gvariant;
+} _ExtendedGDBusPropertyInfo;
+
+typedef struct
+{
+  GDBusInterfaceInfo parent_struct;
+  const gchar *hyphen_name;
+} _ExtendedGDBusInterfaceInfo;
+
+typedef struct
+{
+  const _ExtendedGDBusPropertyInfo *info;
+  guint prop_id;
+  GValue orig_value; /* the value before the change */
+} ChangedProperty;
+
+static void
+_changed_property_free (ChangedProperty *data)
+{
+  g_value_unset (&data->orig_value);
+  g_free (data);
+}
+
+static gboolean
+_g_strv_equal0 (gchar **a, gchar **b)
+{
+  gboolean ret = FALSE;
+  guint n;
+  if (a == NULL && b == NULL)
+    {
+      ret = TRUE;
+      goto out;
+    }
+  if (a == NULL || b == NULL)
+    goto out;
+  if (g_strv_length (a) != g_strv_length (b))
+    goto out;
+  for (n = 0; a[n] != NULL; n++)
+    if (g_strcmp0 (a[n], b[n]) != 0)
+      goto out;
+  ret = TRUE;
+out:
+  return ret;
+}
+
+static gboolean
+_g_variant_equal0 (GVariant *a, GVariant *b)
+{
+  gboolean ret = FALSE;
+  if (a == NULL && b == NULL)
+    {
+      ret = TRUE;
+      goto out;
+    }
+  if (a == NULL || b == NULL)
+    goto out;
+  ret = g_variant_equal (a, b);
+out:
+  return ret;
+}
+
+G_GNUC_UNUSED static gboolean
+_g_value_equal (const GValue *a, const GValue *b)
+{
+  gboolean ret = FALSE;
+  g_assert (G_VALUE_TYPE (a) == G_VALUE_TYPE (b));
+  switch (G_VALUE_TYPE (a))
+    {
+      case G_TYPE_BOOLEAN:
+        ret = (g_value_get_boolean (a) == g_value_get_boolean (b));
+        break;
+      case G_TYPE_UCHAR:
+        ret = (g_value_get_uchar (a) == g_value_get_uchar (b));
+        break;
+      case G_TYPE_INT:
+        ret = (g_value_get_int (a) == g_value_get_int (b));
+        break;
+      case G_TYPE_UINT:
+        ret = (g_value_get_uint (a) == g_value_get_uint (b));
+        break;
+      case G_TYPE_INT64:
+        ret = (g_value_get_int64 (a) == g_value_get_int64 (b));
+        break;
+      case G_TYPE_UINT64:
+        ret = (g_value_get_uint64 (a) == g_value_get_uint64 (b));
+        break;
+      case G_TYPE_DOUBLE:
+        ret = (g_value_get_double (a) == g_value_get_double (b));
+        break;
+      case G_TYPE_STRING:
+        ret = (g_strcmp0 (g_value_get_string (a), g_value_get_string (b)) == 0);
+        break;
+      case G_TYPE_VARIANT:
+        ret = _g_variant_equal0 (g_value_get_variant (a), g_value_get_variant (b));
+        break;
+      default:
+        if (G_VALUE_TYPE (a) == G_TYPE_STRV)
+          ret = _g_strv_equal0 (g_value_get_boxed (a), g_value_get_boxed (b));
+        else
+          g_critical ("_g_value_equal() does not handle type %s", g_type_name (G_VALUE_TYPE (a)));
+        break;
+    }
+  return ret;
+}
+
+/* ------------------------------------------------------------------------
+ * Code for interface org.shr.phoneui.Messages
+ * ------------------------------------------------------------------------
  */
 
 /**
- * SECTION:shr-phoneuimessages
+ * SECTION:PhoneuiMessages
  * @title: PhoneuiMessages
- * @short_description: Wraps the org.shr.phoneui.Messages D-Bus interface
- * @include: gio/gio.h
- *
- * The abstract #PhoneuiMessages interface type wraps the <literal>org.shr.phoneui.Messages</literal> D-Bus interface. Two concrete implementations exists: #PhoneuiMessagesProxy (for client-side usage) and #PhoneuiMessagesStub (for service-side usage).
- *
- * This code was generated from the following D-Bus introspection XML:
- * <programlisting><![CDATA[
- * <interface name="org.shr.phoneui.Messages">
- *   <method name="DisplayList">
- *     <annotation name="org.freedesktop.DBus.GLib.Async" value="true">
- *     </annotation>
- *     <arg type="a{sv}" name="filter" direction="in">
- *     </arg>
- *   </method>
- *   <method name="DisplayMessage">
- *     <annotation name="org.freedesktop.DBus.GLib.Async" value="true">
- *     </annotation>
- *     <arg type="s" name="path" direction="in">
- *     </arg>
- *   </method>
- *   <method name="CreateMessage">
- *     <annotation name="org.freedesktop.DBus.GLib.Async" value="true">
- *     </annotation>
- *     <arg type="a{sv}" name="values" direction="in">
- *     </arg>
- *   </method>
- * </interface>
- * ]]></programlisting>
+ * @short_description: Generated C code for the org.shr.phoneui.Messages D-Bus interface
  *
+ * This section contains code for working with the <link linkend="gdbus-interface-org-shr-phoneui-Messages.top_of_page">org.shr.phoneui.Messages</link> D-Bus interface in C.
  */
 
-#include <shr-phoneuimessages.h>
-#include <shr-types.h>
-#include <shr-bindingsprivate.h>
-#include <shr-marshallers.h>
-
-static guint phoneui_messages_register_object (GDBusInterface *object,
-                    GDBusConnection *connection,
-                    const gchar *object_path,
-                    GError **error);
-static void phoneui_messages_flush (GDBusInterface *object);
-static GVariant *phoneui_messages_get_properties (GDBusInterface *object);
-static GDBusInterfaceInfo *phoneui_messages_g_dbus_interface_interface_info (GDBusInterface *object);
-static GDBusObject *phoneui_messages_g_dbus_interface_get_object (GDBusInterface *interface);
-static void phoneui_messages_g_dbus_interface_set_object (GDBusInterface *interface, GDBusObject *object);
-static GDBusInterfaceFlags phoneui_messages_g_dbus_interface_get_flags (GDBusInterface *interface);
-static void phoneui_messages_g_dbus_interface_set_flags (GDBusInterface *interface, GDBusInterfaceFlags flags);
+/* ---- Introspection data for org.shr.phoneui.Messages ---- */
 
-typedef PhoneuiMessagesIface PhoneuiMessagesInterface;
-#define phoneui_messages_get_type phoneui_messages_get_gtype
-G_DEFINE_INTERFACE (PhoneuiMessages, phoneui_messages, G_TYPE_OBJECT);
-#undef phoneui_messages_get_type
+static const _ExtendedGDBusArgInfo _phoneui_messages_method_info_display_list_IN_ARG_filter =
+{
+  {
+    -1,
+    "filter",
+    "a{sv}",
+    NULL
+  },
+  FALSE
+};
+
+static const _ExtendedGDBusArgInfo * const _phoneui_messages_method_info_display_list_IN_ARG_pointers[] =
+{
+  &_phoneui_messages_method_info_display_list_IN_ARG_filter,
+  NULL
+};
 
+static const GDBusAnnotationInfo _phoneui_messages_method_display_list_annotation_info_0 =
+{
+  -1,
+  "org.freedesktop.DBus.GLib.Async",
+  "true",
+  NULL
+};
 
-enum
+static const GDBusAnnotationInfo * const _phoneui_messages_method_display_list_annotation_info_pointers[] =
 {
-  _0_SIGNAL,
-  __DISPLAY_LIST_METHOD,
-  __DISPLAY_MESSAGE_METHOD,
-  __CREATE_MESSAGE_METHOD,
-  __LAST_SIGNAL
+  &_phoneui_messages_method_display_list_annotation_info_0,
+  NULL
 };
 
-static guint signals[__LAST_SIGNAL] = {0};
+static const _ExtendedGDBusMethodInfo _phoneui_messages_method_info_display_list =
+{
+  {
+    -1,
+    "DisplayList",
+    (GDBusArgInfo **) &_phoneui_messages_method_info_display_list_IN_ARG_pointers,
+    NULL,
+    (GDBusAnnotationInfo **) &_phoneui_messages_method_display_list_annotation_info_pointers
+  },
+  "handle-display-list"
+};
 
+static const _ExtendedGDBusArgInfo _phoneui_messages_method_info_display_message_IN_ARG_path =
+{
+  {
+    -1,
+    "path",
+    "s",
+    NULL
+  },
+  FALSE
+};
 
-enum
+static const _ExtendedGDBusArgInfo * const _phoneui_messages_method_info_display_message_IN_ARG_pointers[] =
 {
-  PROP_0,
+  &_phoneui_messages_method_info_display_message_IN_ARG_path,
+  NULL
 };
 
-/* ------------------------------------------------------------------------- */
+static const GDBusAnnotationInfo _phoneui_messages_method_display_message_annotation_info_0 =
+{
+  -1,
+  "org.freedesktop.DBus.GLib.Async",
+  "true",
+  NULL
+};
 
-/* Various lookup tables */
+static const GDBusAnnotationInfo * const _phoneui_messages_method_display_message_annotation_info_pointers[] =
+{
+  &_phoneui_messages_method_display_message_annotation_info_0,
+  NULL
+};
 
-static GHashTable *_method_name_to_id = NULL;
-static GHashTable *_signal_name_to_id = NULL;
-static GHashTable *_property_name_to_id = NULL;
-static GHashTable *_property_gname_to_name = NULL;
-static GHashTable *_property_name_to_gname = NULL;
+static const _ExtendedGDBusMethodInfo _phoneui_messages_method_info_display_message =
+{
+  {
+    -1,
+    "DisplayMessage",
+    (GDBusArgInfo **) &_phoneui_messages_method_info_display_message_IN_ARG_pointers,
+    NULL,
+    (GDBusAnnotationInfo **) &_phoneui_messages_method_display_message_annotation_info_pointers
+  },
+  "handle-display-message"
+};
 
+static const _ExtendedGDBusArgInfo _phoneui_messages_method_info_create_message_IN_ARG_values =
+{
+  {
+    -1,
+    "values",
+    "a{sv}",
+    NULL
+  },
+  FALSE
+};
 
-static guint
-lookup_method_id_from_method_name (const gchar *method_name)
+static const _ExtendedGDBusArgInfo * const _phoneui_messages_method_info_create_message_IN_ARG_pointers[] =
 {
-  return GPOINTER_TO_UINT (g_hash_table_lookup (_method_name_to_id, method_name));
-}
+  &_phoneui_messages_method_info_create_message_IN_ARG_values,
+  NULL
+};
 
-static guint
-lookup_signal_id_from_signal_name (const gchar *signal_name)
+static const GDBusAnnotationInfo _phoneui_messages_method_create_message_annotation_info_0 =
 {
-  return GPOINTER_TO_UINT (g_hash_table_lookup (_signal_name_to_id, signal_name));
-}
+  -1,
+  "org.freedesktop.DBus.GLib.Async",
+  "true",
+  NULL
+};
 
-static guint
-lookup_property_id_from_property_name (const gchar *property_name)
+static const GDBusAnnotationInfo * const _phoneui_messages_method_create_message_annotation_info_pointers[] =
 {
-  return GPOINTER_TO_UINT (g_hash_table_lookup (_property_name_to_id, property_name));
-}
+  &_phoneui_messages_method_create_message_annotation_info_0,
+  NULL
+};
 
-static const gchar *
-lookup_property_name_from_property_gname (const gchar *property_gname)
+static const _ExtendedGDBusMethodInfo _phoneui_messages_method_info_create_message =
 {
-  return g_hash_table_lookup (_property_gname_to_name, property_gname);
-}
+  {
+    -1,
+    "CreateMessage",
+    (GDBusArgInfo **) &_phoneui_messages_method_info_create_message_IN_ARG_pointers,
+    NULL,
+    (GDBusAnnotationInfo **) &_phoneui_messages_method_create_message_annotation_info_pointers
+  },
+  "handle-create-message"
+};
 
-static const gchar *
-lookup_property_gname_from_property_name (const gchar *property_name)
+static const _ExtendedGDBusMethodInfo * const _phoneui_messages_method_info_pointers[] =
 {
-  return g_hash_table_lookup (_property_name_to_gname, property_name);
-}
+  &_phoneui_messages_method_info_display_list,
+  &_phoneui_messages_method_info_display_message,
+  &_phoneui_messages_method_info_create_message,
+  NULL
+};
 
-/* ------------------------------------------------------------------------- */
-static void dbus_iface_init (GDBusInterfaceIface *iface)
-{
-  iface->get_info = phoneui_messages_g_dbus_interface_interface_info;
-  iface->get_properties = phoneui_messages_get_properties;
-  iface->flush = phoneui_messages_flush;
-  iface->register_object = phoneui_messages_register_object;
-  iface->set_object = phoneui_messages_g_dbus_interface_set_object;
-  iface->get_object = phoneui_messages_g_dbus_interface_get_object;
-  iface->set_flags = phoneui_messages_g_dbus_interface_set_flags;
-  iface->get_flags = phoneui_messages_g_dbus_interface_get_flags;
-}
+static const _ExtendedGDBusInterfaceInfo _phoneui_messages_interface_info =
+{
+  {
+    -1,
+    "org.shr.phoneui.Messages",
+    (GDBusMethodInfo **) &_phoneui_messages_method_info_pointers,
+    NULL,
+    NULL,
+    NULL
+  },
+  "phoneui-messages",
+};
 
-static void
-phoneui_messages_default_init (PhoneuiMessagesIface *iface)
+
+/**
+ * phoneui_messages_interface_info:
+ *
+ * Gets a machine-readable description of the <link linkend="gdbus-interface-org-shr-phoneui-Messages.top_of_page">org.shr.phoneui.Messages</link> D-Bus interface.
+ *
+ * Returns: (transfer none): A #GDBusInterfaceInfo. Do not free.
+ */
+GDBusInterfaceInfo *
+phoneui_messages_interface_info (void)
 {
+  return (GDBusInterfaceInfo *) &_phoneui_messages_interface_info;
+}
+
 
-  /* Build lookup structures */
-  _method_name_to_id = g_hash_table_new (g_str_hash, g_str_equal);
-  _signal_name_to_id = g_hash_table_new (g_str_hash, g_str_equal);
-  _property_name_to_id = g_hash_table_new (g_str_hash, g_str_equal);
-  _property_gname_to_name = g_hash_table_new (g_str_hash, g_str_equal);
-  _property_name_to_gname = g_hash_table_new (g_str_hash, g_str_equal);
-  g_hash_table_insert (_method_name_to_id, "DisplayList", GUINT_TO_POINTER (__DISPLAY_LIST_METHOD));
-  g_hash_table_insert (_method_name_to_id, "DisplayMessage", GUINT_TO_POINTER (__DISPLAY_MESSAGE_METHOD));
-  g_hash_table_insert (_method_name_to_id, "CreateMessage", GUINT_TO_POINTER (__CREATE_MESSAGE_METHOD));
 
-  /* GObject signals definitions for D-Bus signals: */
+/**
+ * PhoneuiMessages:
+ *
+ * Abstract interface type for the D-Bus interface <link linkend="gdbus-interface-org-shr-phoneui-Messages.top_of_page">org.shr.phoneui.Messages</link>.
+ */
+
+/**
+ * PhoneuiMessagesIface:
+ * @parent_iface: The parent interface.
+ * @handle_create_message: Handler for the #PhoneuiMessages::handle-create-message signal.
+ * @handle_display_list: Handler for the #PhoneuiMessages::handle-display-list signal.
+ * @handle_display_message: Handler for the #PhoneuiMessages::handle-display-message signal.
+ *
+ * Virtual table for the D-Bus interface <link linkend="gdbus-interface-org-shr-phoneui-Messages.top_of_page">org.shr.phoneui.Messages</link>.
+ */
 
-  /* GObject signals definitions for D-Bus methods: */
+static void
+phoneui_messages_default_init (PhoneuiMessagesIface *iface)
+{
+  /* GObject signals for incoming D-Bus method calls: */
   /**
    * PhoneuiMessages::handle-display-list:
-   * @object: The exported object emitting the signal.
-   * @invocation: A #GDBusMethodInvocation object that can be used to return a value or error.
-   * @filter: Parameter.
+   * @object: A #PhoneuiMessages.
+   * @invocation: A #GDBusMethodInvocation.
+   * @filter: Argument passed by remote caller.
    *
-   * On exported objects, this signal is emitted when a remote process (identified by @invocation) invokes the <literal>org.shr.phoneui.Messages.DisplayList()</literal> D-Bus method on @object. Use phoneui_messages_complete_display_list() to return a value or g_dbus_method_invocation_return_error() to return an error.
+   * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-shr-phoneui-Messages.DisplayList">DisplayList()</link> D-Bus method.
    *
-   * The signal is emitted in the
-   * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
-   * of the thread that @object was registered in.
+   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phoneui_messages_complete_display_list() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
    *
-   * On proxies, this signal is never emitted.
-   *
-   * Returns: %TRUE if you want to handle the method call (will stop further handlers from being called), %FALSE otherwise.
+   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
    */
-  signals[__DISPLAY_LIST_METHOD] =
-    g_signal_new ("handle-display-list",
-                  G_TYPE_FROM_INTERFACE (iface),
-                  G_SIGNAL_RUN_LAST,
-                  G_STRUCT_OFFSET (PhoneuiMessagesIface, handle_display_list),
-                  g_signal_accumulator_true_handled,
-                  NULL,
-                  _shr_gdbus_cclosure_marshaller_BOOLEAN__OBJECT_VARIANT,
-                  G_TYPE_BOOLEAN,
-                  2,
-                  G_TYPE_DBUS_METHOD_INVOCATION,
-                  G_TYPE_VARIANT);
+  g_signal_new ("handle-display-list",
+    G_TYPE_FROM_INTERFACE (iface),
+    G_SIGNAL_RUN_LAST,
+    G_STRUCT_OFFSET (PhoneuiMessagesIface, handle_display_list),
+    g_signal_accumulator_true_handled,
+    NULL,
+    g_cclosure_marshal_generic,
+    G_TYPE_BOOLEAN,
+    2,
+    G_TYPE_DBUS_METHOD_INVOCATION, G_TYPE_VARIANT);
+
   /**
    * PhoneuiMessages::handle-display-message:
-   * @object: The exported object emitting the signal.
-   * @invocation: A #GDBusMethodInvocation object that can be used to return a value or error.
-   * @path: Parameter.
+   * @object: A #PhoneuiMessages.
+   * @invocation: A #GDBusMethodInvocation.
+   * @path: Argument passed by remote caller.
    *
-   * On exported objects, this signal is emitted when a remote process (identified by @invocation) invokes the <literal>org.shr.phoneui.Messages.DisplayMessage()</literal> D-Bus method on @object. Use phoneui_messages_complete_display_message() to return a value or g_dbus_method_invocation_return_error() to return an error.
+   * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-shr-phoneui-Messages.DisplayMessage">DisplayMessage()</link> D-Bus method.
    *
-   * The signal is emitted in the
-   * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
-   * of the thread that @object was registered in.
+   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phoneui_messages_complete_display_message() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
    *
-   * On proxies, this signal is never emitted.
-   *
-   * Returns: %TRUE if you want to handle the method call (will stop further handlers from being called), %FALSE otherwise.
+   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
    */
-  signals[__DISPLAY_MESSAGE_METHOD] =
-    g_signal_new ("handle-display-message",
-                  G_TYPE_FROM_INTERFACE (iface),
-                  G_SIGNAL_RUN_LAST,
-                  G_STRUCT_OFFSET (PhoneuiMessagesIface, handle_display_message),
-                  g_signal_accumulator_true_handled,
-                  NULL,
-                  _shr_gdbus_cclosure_marshaller_BOOLEAN__OBJECT_STRING,
-                  G_TYPE_BOOLEAN,
-                  2,
-                  G_TYPE_DBUS_METHOD_INVOCATION,
-                  G_TYPE_STRING);
+  g_signal_new ("handle-display-message",
+    G_TYPE_FROM_INTERFACE (iface),
+    G_SIGNAL_RUN_LAST,
+    G_STRUCT_OFFSET (PhoneuiMessagesIface, handle_display_message),
+    g_signal_accumulator_true_handled,
+    NULL,
+    g_cclosure_marshal_generic,
+    G_TYPE_BOOLEAN,
+    2,
+    G_TYPE_DBUS_METHOD_INVOCATION, G_TYPE_STRING);
+
   /**
    * PhoneuiMessages::handle-create-message:
-   * @object: The exported object emitting the signal.
-   * @invocation: A #GDBusMethodInvocation object that can be used to return a value or error.
-   * @values: Parameter.
+   * @object: A #PhoneuiMessages.
+   * @invocation: A #GDBusMethodInvocation.
+   * @values: Argument passed by remote caller.
    *
-   * On exported objects, this signal is emitted when a remote process (identified by @invocation) invokes the <literal>org.shr.phoneui.Messages.CreateMessage()</literal> D-Bus method on @object. Use phoneui_messages_complete_create_message() to return a value or g_dbus_method_invocation_return_error() to return an error.
+   * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-shr-phoneui-Messages.CreateMessage">CreateMessage()</link> D-Bus method.
    *
-   * The signal is emitted in the
-   * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
-   * of the thread that @object was registered in.
+   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phoneui_messages_complete_create_message() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
    *
-   * On proxies, this signal is never emitted.
-   *
-   * Returns: %TRUE if you want to handle the method call (will stop further handlers from being called), %FALSE otherwise.
+   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
    */
-  signals[__CREATE_MESSAGE_METHOD] =
-    g_signal_new ("handle-create-message",
-                  G_TYPE_FROM_INTERFACE (iface),
-                  G_SIGNAL_RUN_LAST,
-                  G_STRUCT_OFFSET (PhoneuiMessagesIface, handle_create_message),
-                  g_signal_accumulator_true_handled,
-                  NULL,
-                  _shr_gdbus_cclosure_marshaller_BOOLEAN__OBJECT_VARIANT,
-                  G_TYPE_BOOLEAN,
-                  2,
-                  G_TYPE_DBUS_METHOD_INVOCATION,
-                  G_TYPE_VARIANT);
-
-  /* GObject property definitions for D-Bus properties: */
-}
+  g_signal_new ("handle-create-message",
+    G_TYPE_FROM_INTERFACE (iface),
+    G_SIGNAL_RUN_LAST,
+    G_STRUCT_OFFSET (PhoneuiMessagesIface, handle_create_message),
+    g_signal_accumulator_true_handled,
+    NULL,
+    g_cclosure_marshal_generic,
+    G_TYPE_BOOLEAN,
+    2,
+    G_TYPE_DBUS_METHOD_INVOCATION, G_TYPE_VARIANT);
 
+}
 
-/* C Bindings for properties */
+typedef PhoneuiMessagesIface PhoneuiMessagesInterface;
+G_DEFINE_INTERFACE (PhoneuiMessages, phoneui_messages, G_TYPE_OBJECT);
 
 /**
  * phoneui_messages_call_display_list:
- * @proxy: A #PhoneuiMessages.
- * @filter: Method parameter.
- * @cancellable: A #GCancellable or %NULL.
- * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL if you don't care about the result of the method invocation.
- * @user_data: Data to pass to @callback.
+ * @proxy: A #PhoneuiMessagesProxy.
+ * @filter: Argument to pass with the method invocation.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL.
+ * @user_data: User data to pass to @callback.
  *
- * Invokes the <literal>org.shr.phoneui.Messages.DisplayList()</literal>
- * D-Bus method on the remote object represented by @proxy.
+ * Asynchronously invokes the <link linkend="gdbus-method-org-shr-phoneui-Messages.DisplayList">DisplayList()</link> D-Bus method on @proxy.
+ * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
+ * You can then call phoneui_messages_call_display_list_finish() to get the result of the operation.
  *
- * This is an asynchronous method. When the operation is finished,
- * callback will be invoked in the
- * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
- * of the thread you are calling this method from. You can then call
- * phoneui_messages_call_display_list_finish() to get the result of the operation.
- * See phoneui_messages_call_display_list_sync() for the synchronous version of this method.
+ * See phoneui_messages_call_display_list_sync() for the synchronous, blocking version of this method.
  */
-void phoneui_messages_call_display_list (
-        PhoneuiMessages *proxy,
-        GVariant *filter,
-        GCancellable *cancellable,
-        GAsyncReadyCallback callback,
-        gpointer user_data)
-{
-  GVariant *_params;
-  _params = g_variant_new ("(*)",
-                           filter);
+void
+phoneui_messages_call_display_list (
+    PhoneuiMessages *proxy,
+    GVariant *filter,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data)
+{
   g_dbus_proxy_call (G_DBUS_PROXY (proxy),
-                     "DisplayList",
-                     _params,
-                     G_DBUS_CALL_FLAGS_NONE,
-                     -1,
-                     cancellable,
-                     callback,
-                     user_data);
+    "DisplayList",
+    g_variant_new ("(@a{sv})",
+                   filter),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    callback,
+    user_data);
 }
 
 /**
  * phoneui_messages_call_display_list_finish:
- * @proxy: A #PhoneuiMessages.
- * @res: A #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_messages_call_display_list().
+ * @proxy: A #PhoneuiMessagesProxy.
+ * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_messages_call_display_list().
  * @error: Return location for error or %NULL.
  *
- * Finishes invoking the <literal>org.shr.phoneui.Messages.DisplayList()</literal>
- * D-Bus method on the remote object represented by @proxy.
+ * Finishes an operation started with phoneui_messages_call_display_list().
  *
- * Returns: %TRUE if the call succeeded, %FALSE if @error is set.
+ * Returns: %TRUE if the call succeded, %FALSE if @error is set.
  */
-gboolean phoneui_messages_call_display_list_finish (
-        PhoneuiMessages *proxy,
-        GAsyncResult *res,
-        GError **error)
-{
-  gboolean _ret = FALSE;
-  GVariant *_result;
-  _result = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
-  if (_result == NULL)
+gboolean
+phoneui_messages_call_display_list_finish (
+    PhoneuiMessages *proxy,
+    GAsyncResult *res,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
+  if (_ret == NULL)
     goto _out;
-  g_variant_unref (_result);
-  _ret = TRUE;
+  g_variant_get (_ret,
+                 "()");
+  g_variant_unref (_ret);
 _out:
-  return _ret;
+  return _ret != NULL;
 }
 
 /**
  * phoneui_messages_call_display_list_sync:
- * @proxy: A #PhoneuiMessages.
- * @filter: Method parameter.
- * @cancellable: A #GCancellable or %NULL.
+ * @proxy: A #PhoneuiMessagesProxy.
+ * @filter: Argument to pass with the method invocation.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
  * @error: Return location for error or %NULL.
  *
- * Synchronously invokes the <literal>org.shr.phoneui.Messages.DisplayList()</literal>
- * D-Bus method on the remote object represented by @proxy.
- * The calling thread is blocked until a reply is received. See
- * phoneui_messages_call_display_list() for the asynchronous version of this method.
+ * Synchronously invokes the <link linkend="gdbus-method-org-shr-phoneui-Messages.DisplayList">DisplayList()</link> D-Bus method on @proxy. The calling thread is blocked until a reply is received.
+ *
+ * See phoneui_messages_call_display_list() for the asynchronous version of this method.
  *
- * Returns: %TRUE if the call succeeded, %FALSE if @error is set.
+ * Returns: %TRUE if the call succeded, %FALSE if @error is set.
  */
-gboolean phoneui_messages_call_display_list_sync (
-        PhoneuiMessages *proxy,
-        GVariant *filter,
-        GCancellable *cancellable,
-        GError **error)
-{
-  gboolean _ret = FALSE;
-  GVariant *_params;
-  GVariant *_result;
-  _params = g_variant_new ("(*)",
-                           filter);
-  _result = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
-                                   "DisplayList",
-                                   _params,
-                                   G_DBUS_CALL_FLAGS_NONE,
-                                   -1,
-                                   cancellable,
-                                   error);
-  if (_result == NULL)
+gboolean
+phoneui_messages_call_display_list_sync (
+    PhoneuiMessages *proxy,
+    GVariant *filter,
+    GCancellable *cancellable,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
+    "DisplayList",
+    g_variant_new ("(@a{sv})",
+                   filter),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    error);
+  if (_ret == NULL)
     goto _out;
-  g_variant_unref (_result);
-  _ret = TRUE;
+  g_variant_get (_ret,
+                 "()");
+  g_variant_unref (_ret);
 _out:
-  return _ret;
+  return _ret != NULL;
 }
 
-
 /**
  * phoneui_messages_call_display_message:
- * @proxy: A #PhoneuiMessages.
- * @path: Method parameter.
- * @cancellable: A #GCancellable or %NULL.
- * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL if you don't care about the result of the method invocation.
- * @user_data: Data to pass to @callback.
+ * @proxy: A #PhoneuiMessagesProxy.
+ * @path: Argument to pass with the method invocation.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL.
+ * @user_data: User data to pass to @callback.
  *
- * Invokes the <literal>org.shr.phoneui.Messages.DisplayMessage()</literal>
- * D-Bus method on the remote object represented by @proxy.
+ * Asynchronously invokes the <link linkend="gdbus-method-org-shr-phoneui-Messages.DisplayMessage">DisplayMessage()</link> D-Bus method on @proxy.
+ * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
+ * You can then call phoneui_messages_call_display_message_finish() to get the result of the operation.
  *
- * This is an asynchronous method. When the operation is finished,
- * callback will be invoked in the
- * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
- * of the thread you are calling this method from. You can then call
- * phoneui_messages_call_display_message_finish() to get the result of the operation.
- * See phoneui_messages_call_display_message_sync() for the synchronous version of this method.
+ * See phoneui_messages_call_display_message_sync() for the synchronous, blocking version of this method.
  */
-void phoneui_messages_call_display_message (
-        PhoneuiMessages *proxy,
-        const gchar *path,
-        GCancellable *cancellable,
-        GAsyncReadyCallback callback,
-        gpointer user_data)
-{
-  GVariant *_params;
-  _params = g_variant_new ("(s)",
-                           path);
+void
+phoneui_messages_call_display_message (
+    PhoneuiMessages *proxy,
+    const gchar *path,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data)
+{
   g_dbus_proxy_call (G_DBUS_PROXY (proxy),
-                     "DisplayMessage",
-                     _params,
-                     G_DBUS_CALL_FLAGS_NONE,
-                     -1,
-                     cancellable,
-                     callback,
-                     user_data);
+    "DisplayMessage",
+    g_variant_new ("(s)",
+                   path),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    callback,
+    user_data);
 }
 
 /**
  * phoneui_messages_call_display_message_finish:
- * @proxy: A #PhoneuiMessages.
- * @res: A #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_messages_call_display_message().
+ * @proxy: A #PhoneuiMessagesProxy.
+ * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_messages_call_display_message().
  * @error: Return location for error or %NULL.
  *
- * Finishes invoking the <literal>org.shr.phoneui.Messages.DisplayMessage()</literal>
- * D-Bus method on the remote object represented by @proxy.
+ * Finishes an operation started with phoneui_messages_call_display_message().
  *
- * Returns: %TRUE if the call succeeded, %FALSE if @error is set.
+ * Returns: %TRUE if the call succeded, %FALSE if @error is set.
  */
-gboolean phoneui_messages_call_display_message_finish (
-        PhoneuiMessages *proxy,
-        GAsyncResult *res,
-        GError **error)
-{
-  gboolean _ret = FALSE;
-  GVariant *_result;
-  _result = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
-  if (_result == NULL)
+gboolean
+phoneui_messages_call_display_message_finish (
+    PhoneuiMessages *proxy,
+    GAsyncResult *res,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
+  if (_ret == NULL)
     goto _out;
-  g_variant_unref (_result);
-  _ret = TRUE;
+  g_variant_get (_ret,
+                 "()");
+  g_variant_unref (_ret);
 _out:
-  return _ret;
+  return _ret != NULL;
 }
 
 /**
  * phoneui_messages_call_display_message_sync:
- * @proxy: A #PhoneuiMessages.
- * @path: Method parameter.
- * @cancellable: A #GCancellable or %NULL.
+ * @proxy: A #PhoneuiMessagesProxy.
+ * @path: Argument to pass with the method invocation.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
  * @error: Return location for error or %NULL.
  *
- * Synchronously invokes the <literal>org.shr.phoneui.Messages.DisplayMessage()</literal>
- * D-Bus method on the remote object represented by @proxy.
- * The calling thread is blocked until a reply is received. See
- * phoneui_messages_call_display_message() for the asynchronous version of this method.
+ * Synchronously invokes the <link linkend="gdbus-method-org-shr-phoneui-Messages.DisplayMessage">DisplayMessage()</link> D-Bus method on @proxy. The calling thread is blocked until a reply is received.
+ *
+ * See phoneui_messages_call_display_message() for the asynchronous version of this method.
  *
- * Returns: %TRUE if the call succeeded, %FALSE if @error is set.
+ * Returns: %TRUE if the call succeded, %FALSE if @error is set.
  */
-gboolean phoneui_messages_call_display_message_sync (
-        PhoneuiMessages *proxy,
-        const gchar *path,
-        GCancellable *cancellable,
-        GError **error)
-{
-  gboolean _ret = FALSE;
-  GVariant *_params;
-  GVariant *_result;
-  _params = g_variant_new ("(s)",
-                           path);
-  _result = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
-                                   "DisplayMessage",
-                                   _params,
-                                   G_DBUS_CALL_FLAGS_NONE,
-                                   -1,
-                                   cancellable,
-                                   error);
-  if (_result == NULL)
+gboolean
+phoneui_messages_call_display_message_sync (
+    PhoneuiMessages *proxy,
+    const gchar *path,
+    GCancellable *cancellable,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
+    "DisplayMessage",
+    g_variant_new ("(s)",
+                   path),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    error);
+  if (_ret == NULL)
     goto _out;
-  g_variant_unref (_result);
-  _ret = TRUE;
+  g_variant_get (_ret,
+                 "()");
+  g_variant_unref (_ret);
 _out:
-  return _ret;
+  return _ret != NULL;
 }
 
-
 /**
  * phoneui_messages_call_create_message:
- * @proxy: A #PhoneuiMessages.
- * @values: Method parameter.
- * @cancellable: A #GCancellable or %NULL.
- * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL if you don't care about the result of the method invocation.
- * @user_data: Data to pass to @callback.
+ * @proxy: A #PhoneuiMessagesProxy.
+ * @values: Argument to pass with the method invocation.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL.
+ * @user_data: User data to pass to @callback.
  *
- * Invokes the <literal>org.shr.phoneui.Messages.CreateMessage()</literal>
- * D-Bus method on the remote object represented by @proxy.
+ * Asynchronously invokes the <link linkend="gdbus-method-org-shr-phoneui-Messages.CreateMessage">CreateMessage()</link> D-Bus method on @proxy.
+ * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
+ * You can then call phoneui_messages_call_create_message_finish() to get the result of the operation.
  *
- * This is an asynchronous method. When the operation is finished,
- * callback will be invoked in the
- * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
- * of the thread you are calling this method from. You can then call
- * phoneui_messages_call_create_message_finish() to get the result of the operation.
- * See phoneui_messages_call_create_message_sync() for the synchronous version of this method.
+ * See phoneui_messages_call_create_message_sync() for the synchronous, blocking version of this method.
  */
-void phoneui_messages_call_create_message (
-        PhoneuiMessages *proxy,
-        GVariant *values,
-        GCancellable *cancellable,
-        GAsyncReadyCallback callback,
-        gpointer user_data)
-{
-  GVariant *_params;
-  _params = g_variant_new ("(*)",
-                           values);
+void
+phoneui_messages_call_create_message (
+    PhoneuiMessages *proxy,
+    GVariant *values,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data)
+{
   g_dbus_proxy_call (G_DBUS_PROXY (proxy),
-                     "CreateMessage",
-                     _params,
-                     G_DBUS_CALL_FLAGS_NONE,
-                     -1,
-                     cancellable,
-                     callback,
-                     user_data);
+    "CreateMessage",
+    g_variant_new ("(@a{sv})",
+                   values),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    callback,
+    user_data);
 }
 
 /**
  * phoneui_messages_call_create_message_finish:
- * @proxy: A #PhoneuiMessages.
- * @res: A #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_messages_call_create_message().
+ * @proxy: A #PhoneuiMessagesProxy.
+ * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_messages_call_create_message().
  * @error: Return location for error or %NULL.
  *
- * Finishes invoking the <literal>org.shr.phoneui.Messages.CreateMessage()</literal>
- * D-Bus method on the remote object represented by @proxy.
+ * Finishes an operation started with phoneui_messages_call_create_message().
  *
- * Returns: %TRUE if the call succeeded, %FALSE if @error is set.
+ * Returns: %TRUE if the call succeded, %FALSE if @error is set.
  */
-gboolean phoneui_messages_call_create_message_finish (
-        PhoneuiMessages *proxy,
-        GAsyncResult *res,
-        GError **error)
-{
-  gboolean _ret = FALSE;
-  GVariant *_result;
-  _result = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
-  if (_result == NULL)
+gboolean
+phoneui_messages_call_create_message_finish (
+    PhoneuiMessages *proxy,
+    GAsyncResult *res,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
+  if (_ret == NULL)
     goto _out;
-  g_variant_unref (_result);
-  _ret = TRUE;
+  g_variant_get (_ret,
+                 "()");
+  g_variant_unref (_ret);
 _out:
-  return _ret;
+  return _ret != NULL;
 }
 
 /**
  * phoneui_messages_call_create_message_sync:
- * @proxy: A #PhoneuiMessages.
- * @values: Method parameter.
- * @cancellable: A #GCancellable or %NULL.
+ * @proxy: A #PhoneuiMessagesProxy.
+ * @values: Argument to pass with the method invocation.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
  * @error: Return location for error or %NULL.
  *
- * Synchronously invokes the <literal>org.shr.phoneui.Messages.CreateMessage()</literal>
- * D-Bus method on the remote object represented by @proxy.
- * The calling thread is blocked until a reply is received. See
- * phoneui_messages_call_create_message() for the asynchronous version of this method.
+ * Synchronously invokes the <link linkend="gdbus-method-org-shr-phoneui-Messages.CreateMessage">CreateMessage()</link> D-Bus method on @proxy. The calling thread is blocked until a reply is received.
+ *
+ * See phoneui_messages_call_create_message() for the asynchronous version of this method.
  *
- * Returns: %TRUE if the call succeeded, %FALSE if @error is set.
+ * Returns: %TRUE if the call succeded, %FALSE if @error is set.
  */
-gboolean phoneui_messages_call_create_message_sync (
-        PhoneuiMessages *proxy,
-        GVariant *values,
-        GCancellable *cancellable,
-        GError **error)
-{
-  gboolean _ret = FALSE;
-  GVariant *_params;
-  GVariant *_result;
-  _params = g_variant_new ("(*)",
-                           values);
-  _result = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
-                                   "CreateMessage",
-                                   _params,
-                                   G_DBUS_CALL_FLAGS_NONE,
-                                   -1,
-                                   cancellable,
-                                   error);
-  if (_result == NULL)
+gboolean
+phoneui_messages_call_create_message_sync (
+    PhoneuiMessages *proxy,
+    GVariant *values,
+    GCancellable *cancellable,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
+    "CreateMessage",
+    g_variant_new ("(@a{sv})",
+                   values),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    error);
+  if (_ret == NULL)
     goto _out;
-  g_variant_unref (_result);
-  _ret = TRUE;
+  g_variant_get (_ret,
+                 "()");
+  g_variant_unref (_ret);
 _out:
-  return _ret;
+  return _ret != NULL;
 }
 
-
 /**
  * phoneui_messages_complete_display_list:
  * @object: A #PhoneuiMessages.
- * @invocation: A #GDBusMethodInvocation.
- *
- * Completes handling the <literal>org.shr.phoneui.Messages.DisplayList()</literal>
- * D-Bus method invocation by returning a value.
+ * @invocation: (transfer full): A #GDBusMethodInvocation.
  *
- * If you want to return an error, use g_dbus_method_invocation_return_error()
- * or similar instead.
+ * Helper function used in service implementations to finish handling invocations of the <link linkend="gdbus-method-org-shr-phoneui-Messages.DisplayList">DisplayList()</link> D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.
  *
  * This method will free @invocation, you cannot use it afterwards.
  */
-void phoneui_messages_complete_display_list (
-        PhoneuiMessages *object,
-        GDBusMethodInvocation *invocation)
+void
+phoneui_messages_complete_display_list (
+    PhoneuiMessages *object,
+    GDBusMethodInvocation *invocation)
 {
-  g_dbus_method_invocation_return_value (invocation, NULL);
+  g_dbus_method_invocation_return_value (invocation,
+    g_variant_new ("()"));
 }
 
-
 /**
  * phoneui_messages_complete_display_message:
  * @object: A #PhoneuiMessages.
- * @invocation: A #GDBusMethodInvocation.
- *
- * Completes handling the <literal>org.shr.phoneui.Messages.DisplayMessage()</literal>
- * D-Bus method invocation by returning a value.
+ * @invocation: (transfer full): A #GDBusMethodInvocation.
  *
- * If you want to return an error, use g_dbus_method_invocation_return_error()
- * or similar instead.
+ * Helper function used in service implementations to finish handling invocations of the <link linkend="gdbus-method-org-shr-phoneui-Messages.DisplayMessage">DisplayMessage()</link> D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.
  *
  * This method will free @invocation, you cannot use it afterwards.
  */
-void phoneui_messages_complete_display_message (
-        PhoneuiMessages *object,
-        GDBusMethodInvocation *invocation)
+void
+phoneui_messages_complete_display_message (
+    PhoneuiMessages *object,
+    GDBusMethodInvocation *invocation)
 {
-  g_dbus_method_invocation_return_value (invocation, NULL);
+  g_dbus_method_invocation_return_value (invocation,
+    g_variant_new ("()"));
 }
 
-
 /**
  * phoneui_messages_complete_create_message:
  * @object: A #PhoneuiMessages.
- * @invocation: A #GDBusMethodInvocation.
- *
- * Completes handling the <literal>org.shr.phoneui.Messages.CreateMessage()</literal>
- * D-Bus method invocation by returning a value.
+ * @invocation: (transfer full): A #GDBusMethodInvocation.
  *
- * If you want to return an error, use g_dbus_method_invocation_return_error()
- * or similar instead.
+ * Helper function used in service implementations to finish handling invocations of the <link linkend="gdbus-method-org-shr-phoneui-Messages.CreateMessage">CreateMessage()</link> D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.
  *
  * This method will free @invocation, you cannot use it afterwards.
  */
-void phoneui_messages_complete_create_message (
-        PhoneuiMessages *object,
-        GDBusMethodInvocation *invocation)
+void
+phoneui_messages_complete_create_message (
+    PhoneuiMessages *object,
+    GDBusMethodInvocation *invocation)
 {
-  g_dbus_method_invocation_return_value (invocation, NULL);
+  g_dbus_method_invocation_return_value (invocation,
+    g_variant_new ("()"));
 }
 
+/* ------------------------------------------------------------------------ */
 
-static const GDBusArgInfo phoneui_messages_method_in_DisplayList_filter =
-{
-  -1,
-  "filter",
-  "a{sv}",
-  (GDBusAnnotationInfo **) NULL
-};
-static const GDBusArgInfo * const phoneui_messages_method_in_DisplayList_arg_pointers[] =
-{
-  &phoneui_messages_method_in_DisplayList_filter,
-  NULL
-};
-
-static const GDBusAnnotationInfo DisplayList_method_annotations_annotation_0 = {
-  -1,
-  "org.freedesktop.DBus.GLib.Async",
-  "true",
-};
-
-static const GDBusAnnotationInfo *DisplayList_method_annotations[] = {
-  &DisplayList_method_annotations_annotation_0,
-  NULL
-};
-
-static const GDBusMethodInfo phoneui_messages_method_DisplayList =
-{
-  -1,
-  "DisplayList",
-  (GDBusArgInfo **) &phoneui_messages_method_in_DisplayList_arg_pointers,
-  (GDBusArgInfo **) NULL,
-  (GDBusAnnotationInfo **) DisplayList_method_annotations,
-};
-
-static const GDBusArgInfo phoneui_messages_method_in_DisplayMessage_path =
-{
-  -1,
-  "path",
-  "s",
-  (GDBusAnnotationInfo **) NULL
-};
-static const GDBusArgInfo * const phoneui_messages_method_in_DisplayMessage_arg_pointers[] =
-{
-  &phoneui_messages_method_in_DisplayMessage_path,
-  NULL
-};
-
-static const GDBusAnnotationInfo DisplayMessage_method_annotations_annotation_0 = {
-  -1,
-  "org.freedesktop.DBus.GLib.Async",
-  "true",
-};
-
-static const GDBusAnnotationInfo *DisplayMessage_method_annotations[] = {
-  &DisplayMessage_method_annotations_annotation_0,
-  NULL
-};
+/**
+ * PhoneuiMessagesProxy:
+ *
+ * The #PhoneuiMessagesProxy structure contains only private data and should only be accessed using the provided API.
+ */
 
-static const GDBusMethodInfo phoneui_messages_method_DisplayMessage =
-{
-  -1,
-  "DisplayMessage",
-  (GDBusArgInfo **) &phoneui_messages_method_in_DisplayMessage_arg_pointers,
-  (GDBusArgInfo **) NULL,
-  (GDBusAnnotationInfo **) DisplayMessage_method_annotations,
-};
+/**
+ * PhoneuiMessagesProxyClass:
+ * @parent_class: The parent class.
+ *
+ * Class structure for #PhoneuiMessagesProxy.
+ */
 
-static const GDBusArgInfo phoneui_messages_method_in_CreateMessage_values =
-{
-  -1,
-  "values",
-  "a{sv}",
-  (GDBusAnnotationInfo **) NULL
-};
-static const GDBusArgInfo * const phoneui_messages_method_in_CreateMessage_arg_pointers[] =
+static void
+phoneui_messages_proxy_iface_init (PhoneuiMessagesIface *iface)
 {
-  &phoneui_messages_method_in_CreateMessage_values,
-  NULL
-};
-
-static const GDBusAnnotationInfo CreateMessage_method_annotations_annotation_0 = {
-  -1,
-  "org.freedesktop.DBus.GLib.Async",
-  "true",
-};
-
-static const GDBusAnnotationInfo *CreateMessage_method_annotations[] = {
-  &CreateMessage_method_annotations_annotation_0,
-  NULL
-};
+}
 
-static const GDBusMethodInfo phoneui_messages_method_CreateMessage =
-{
-  -1,
-  "CreateMessage",
-  (GDBusArgInfo **) &phoneui_messages_method_in_CreateMessage_arg_pointers,
-  (GDBusArgInfo **) NULL,
-  (GDBusAnnotationInfo **) CreateMessage_method_annotations,
-};
+#define phoneui_messages_proxy_get_type phoneui_messages_proxy_get_type
+G_DEFINE_TYPE_WITH_CODE (PhoneuiMessagesProxy, phoneui_messages_proxy, G_TYPE_DBUS_PROXY,
+                         G_IMPLEMENT_INTERFACE (TYPE_PHONEUI_MESSAGES, phoneui_messages_proxy_iface_init));
+#undef phoneui_messages_proxy_get_type
 
-static const GDBusMethodInfo * const phoneui_messages_method_info_pointers[] =
+static void
+phoneui_messages_proxy_get_property (GObject      *object,
+  guint         prop_id,
+  GValue       *value,
+  GParamSpec   *pspec)
 {
-  &phoneui_messages_method_DisplayList,
-  &phoneui_messages_method_DisplayMessage,
-  &phoneui_messages_method_CreateMessage,
-  NULL
-};
+}
 
-static const GDBusInterfaceInfo _phoneui_messages_interface_info =
+static void
+phoneui_messages_proxy_set_property (GObject      *object,
+  guint         prop_id,
+  const GValue *value,
+  GParamSpec   *pspec)
 {
-  -1,
-  "org.shr.phoneui.Messages",
-  (GDBusMethodInfo **) &phoneui_messages_method_info_pointers,
-  (GDBusSignalInfo **) NULL,
-  (GDBusPropertyInfo **) NULL,
-  (GDBusAnnotationInfo **) NULL
-};
+}
 
 static void
-handle_method_call_real (GDBusConnection       *connection,
-                         const gchar           *sender,
-                         const gchar           *object_path,
-                         const gchar           *interface_name,
-                         const gchar           *method_name,
-                         GVariant              *parameters,
-                         GDBusMethodInvocation *invocation,
-                         gpointer               user_data)
-{
-  guint method_id;
-  method_id = lookup_method_id_from_method_name (method_name);
-  switch (method_id)
+phoneui_messages_proxy_g_signal (GDBusProxy *proxy,
+  const gchar *sender_name,
+  const gchar *signal_name,
+  GVariant *parameters)
+{
+  _ExtendedGDBusSignalInfo *info;
+  GVariantIter iter;
+  GVariant *child;
+  GValue *paramv;
+  guint num_params;
+  guint n;
+  guint signal_id;
+  info = (_ExtendedGDBusSignalInfo *) g_dbus_interface_info_lookup_signal ((GDBusInterfaceInfo *) &_phoneui_messages_interface_info, signal_name);
+  if (info == NULL)
+    return;
+  num_params = g_variant_n_children (parameters);
+  paramv = g_new0 (GValue, num_params + 1);
+  g_value_init (&paramv[0], TYPE_PHONEUI_MESSAGES);
+  g_value_set_object (&paramv[0], proxy);
+  g_variant_iter_init (&iter, parameters);
+  n = 1;
+  while ((child = g_variant_iter_next_value (&iter)) != NULL)
     {
-    case __DISPLAY_LIST_METHOD:
-      {
-        PhoneuiMessages *object = PHONEUI_MESSAGES (user_data);
-        gboolean handled;
-        GVariant *arg_filter;
-        g_variant_get (parameters,
-                       "(*)",
-                       &arg_filter);
-        g_signal_emit (object,
-                       signals[method_id],
-                       0, invocation, arg_filter, &handled);
-        g_variant_unref ((gpointer) arg_filter);
-        if (!handled)
-          goto not_implemented;
-      }
-      break;
-
-    case __DISPLAY_MESSAGE_METHOD:
-      {
-        PhoneuiMessages *object = PHONEUI_MESSAGES (user_data);
-        gboolean handled;
-        const gchar *arg_path;
-        g_variant_get (parameters,
-                       "(&s)",
-                       &arg_path);
-        g_signal_emit (object,
-                       signals[method_id],
-                       0, invocation, arg_path, &handled);
-        if (!handled)
-          goto not_implemented;
-      }
-      break;
-
-    case __CREATE_MESSAGE_METHOD:
-      {
-        PhoneuiMessages *object = PHONEUI_MESSAGES (user_data);
-        gboolean handled;
-        GVariant *arg_values;
-        g_variant_get (parameters,
-                       "(*)",
-                       &arg_values);
-        g_signal_emit (object,
-                       signals[method_id],
-                       0, invocation, arg_values, &handled);
-        g_variant_unref ((gpointer) arg_values);
-        if (!handled)
-          goto not_implemented;
-      }
-      break;
-
-    default:
-not_implemented:
-      g_dbus_method_invocation_return_error (invocation,
-                                             G_DBUS_ERROR,
-                                             G_DBUS_ERROR_NOT_SUPPORTED,
-                                             "Method `%s' is not implemented",
-                                             method_name);
-      break;
+      _ExtendedGDBusArgInfo *arg_info = (_ExtendedGDBusArgInfo *) info->parent_struct.args[n - 1];
+      if (arg_info->use_gvariant)
+        {
+          g_value_init (&paramv[n], G_TYPE_VARIANT);
+          g_value_set_variant (&paramv[n], child);
+          n++;
+        }
+      else
+        g_dbus_gvariant_to_gvalue (child, &paramv[n++]);
+      g_variant_unref (child);
     }
-};
-
-typedef struct
-{
-  GDBusMethodInvocation *invocation;
-  gpointer               user_data;
-} HandleMethodInThreadData;
-
-static gboolean
-handle_method_call_in_thread_func (GIOSchedulerJob *job,
-                                   GCancellable    *cancellable,
-                                   gpointer         user_data)
-{
-  HandleMethodInThreadData *data = user_data;
-
-  handle_method_call_real (g_dbus_method_invocation_get_connection (data->invocation),
-                           g_dbus_method_invocation_get_sender (data->invocation),
-                           g_dbus_method_invocation_get_object_path (data->invocation),
-                           g_dbus_method_invocation_get_interface_name (data->invocation),
-                           g_dbus_method_invocation_get_method_name (data->invocation),
-                           g_dbus_method_invocation_get_parameters (data->invocation),
-                           data->invocation,
-                           data->user_data);
-  return FALSE; /* job is complete */
+  signal_id = g_signal_lookup (info->signal_name, TYPE_PHONEUI_MESSAGES);
+  g_signal_emitv (paramv, signal_id, 0, NULL);
+  for (n = 0; n < num_params + 1; n++)
+    g_value_unset (&paramv[n]);
+  g_free (paramv);
 }
 
 static void
-handle_method_call (GDBusConnection       *connection,
-                    const gchar           *sender,
-                    const gchar           *object_path,
-                    const gchar           *interface_name,
-                    const gchar           *method_name,
-                    GVariant              *parameters,
-                    GDBusMethodInvocation *invocation,
-                    gpointer               user_data)
-{
-  GDBusInterface *interface = G_DBUS_INTERFACE (user_data);
-  GDBusInterfaceFlags flags;
-
-  flags = g_dbus_interface_get_flags (interface);
-  if (flags & G_DBUS_INTERFACE_FLAGS_RUN_IN_THREAD)
+phoneui_messages_proxy_g_properties_changed (GDBusProxy *proxy,
+  GVariant *changed_properties,
+  const gchar *const *invalidated_properties)
+{
+  guint n;
+  const gchar *key;
+  GVariantIter *iter;
+  _ExtendedGDBusPropertyInfo *info;
+  g_variant_get (changed_properties, "a{sv}", &iter);
+  while (g_variant_iter_next (iter, "{&sv}", &key, NULL))
     {
-      HandleMethodInThreadData *data;
-      data = g_new0 (HandleMethodInThreadData, 1);
-      data->invocation = invocation;
-      data->user_data = user_data;
-      g_io_scheduler_push_job (handle_method_call_in_thread_func,
-                               data,
-                               g_free, /* since we don't need refs on objects */
-                               G_PRIORITY_DEFAULT,
-                               NULL); /* GCancellable* */
+      info = (_ExtendedGDBusPropertyInfo *) g_dbus_interface_info_lookup_property ((GDBusInterfaceInfo *) &_phoneui_messages_interface_info, key);
+      if (info != NULL)
+        g_object_notify (G_OBJECT (proxy), info->hyphen_name);
     }
-  else
+  g_variant_iter_free (iter);
+  for (n = 0; invalidated_properties[n] != NULL; n++)
     {
-      handle_method_call_real (connection,
-                               sender,
-                               object_path,
-                               interface_name,
-                               method_name,
-                               parameters,
-                               invocation,
-                               user_data);
+      info = (_ExtendedGDBusPropertyInfo *) g_dbus_interface_info_lookup_property ((GDBusInterfaceInfo *) &_phoneui_messages_interface_info, invalidated_properties[n]);
+      if (info != NULL)
+        g_object_notify (G_OBJECT (proxy), info->hyphen_name);
     }
 }
 
-static GVariant *
-get_property (GDBusConnection  *connection,
-              const gchar      *sender,
-              const gchar      *object_path,
-              const gchar      *interface_name,
-              const gchar      *property_name,
-              GError          **error,
-              gpointer          user_data)
+static void
+phoneui_messages_proxy_init (PhoneuiMessagesProxy *proxy)
 {
-  GVariant *ret;
-  guint prop_id;
-  prop_id = lookup_property_id_from_property_name (property_name);
-  ret = NULL;
-  switch (prop_id)
-    {
-    default:
-      g_assert_not_reached ();
-      break;
-    }
-
-  if (ret == NULL)
-    {
-      GVariant *untrusted_empty;
-      GDBusPropertyInfo *property_info;
-      const GVariantType *type;
-      property_info = g_dbus_interface_info_lookup_property ((GDBusInterfaceInfo *) &_phoneui_messages_interface_info, property_name);
-      type = G_VARIANT_TYPE (property_info->signature);
-      untrusted_empty = g_variant_new_from_data (type, NULL, 0, FALSE, NULL, NULL);
-      ret = g_variant_get_normal_form (untrusted_empty);
-      g_variant_unref (untrusted_empty);
-    }
-
-  return ret;
-};
-
-static gboolean
-set_property (GDBusConnection  *connection,
-              const gchar      *sender,
-              const gchar      *object_path,
-              const gchar      *interface_name,
-              const gchar      *property_name,
-              GVariant         *value,
-              GError          **error,
-              gpointer          user_data)
-{
-  gboolean ret;
-  guint prop_id;
-  prop_id = lookup_property_id_from_property_name (property_name);
-  ret = TRUE;
-  switch (prop_id)
-    {
-    default:
-      g_set_error (error,
-                   G_DBUS_ERROR,
-                   G_DBUS_ERROR_NOT_SUPPORTED,
-                   "This implementation does not support property `%s'",
-                   property_name);
-      ret = FALSE;
-      break;
-    }
-
-  return ret;
-};
-
-static const GDBusInterfaceVTable phoneui_messages_interface_vtable =
-{
-  handle_method_call,
-  get_property,
-  set_property,
-};
-
-/* ---------------------------------------------------------------------- */
-
-typedef struct {
-  gpointer data;
-  gsize size;
-} _VariantBlob;
-
-static void
-_variant_blob_free (_VariantBlob *blob)
-{
-  g_free (blob->data);
-  g_free (blob);
-}
-
-static _VariantBlob *
-_variant_blob_new (GVariant *value)
-{
-  _VariantBlob *blob;
-  blob = g_new0 (_VariantBlob, 1);
-  blob->size = g_variant_get_size (value);
-  blob->data = g_malloc (blob->size);
-  g_variant_store (value, blob->data);
-  return blob;
-}
-
-static gboolean
-_variant_blob_equal (_VariantBlob *a,
-                    _VariantBlob *b)
-{
-  return (a->size == b->size) && (memcmp (a->data, b->data, a->size) == 0);
-}
-/* ---------------------------------------------------------------------- */
-
-static gboolean
-emit_notifications_in_idle (gpointer user_data)
-{
-  GObject *object = G_OBJECT (user_data);
-  GDBusConnection *connection;
-  const gchar *path;
-  GHashTable *notification_queue;
-  GHashTableIter iter;
-  const gchar *property_name;
-  GVariant *value;
-  GVariantBuilder builder;
-  GVariantBuilder invalidated_builder;
-  GHashTable *pvc;
-  gboolean has_changes;
-
-  notification_queue = g_object_get_data (object, "gdbus-codegen-notification-queue");
-  path = g_object_get_data (object, "gdbus-codegen-path");
-  connection = g_object_get_data (object, "gdbus-codegen-connection");
-  pvc = g_object_get_data (object, "gdbus-codegen-pvc");
-  g_assert (notification_queue != NULL && path != NULL && connection != NULL && pvc != NULL);
-
-  g_variant_builder_init (&builder, G_VARIANT_TYPE ("a{sv}"));
-  g_variant_builder_init (&invalidated_builder, G_VARIANT_TYPE ("as"));
-  g_hash_table_iter_init (&iter, notification_queue);
-  has_changes = FALSE;
-  while (g_hash_table_iter_next (&iter, (gpointer) &property_name, (gpointer) &value))
-    {
-      _VariantBlob *cached_blob;
-      _VariantBlob *blob;
-      cached_blob = g_hash_table_lookup (pvc, property_name);
-      blob = _variant_blob_new (value);
-      if (cached_blob == NULL || !_variant_blob_equal (cached_blob, blob))
-        {
-          g_hash_table_insert (pvc, (gpointer) property_name, blob);
-          g_variant_builder_add (&builder, "{sv}", property_name, value);
-          has_changes = TRUE;
-        }
-      else
-        {
-          _variant_blob_free (blob);
-        }
-    }
-
-  if (has_changes)
-    {
-      g_dbus_connection_emit_signal (connection,
-                                     NULL,
-                                     path,
-                                     "org.freedesktop.DBus.Properties",
-                                     "PropertiesChanged",
-                                     g_variant_new ("(sa{sv}as)",
-                                                    "org.shr.phoneui.Messages",
-                                                    &builder,
-                                                    &invalidated_builder),
-                                     NULL);
-    }
-  else
-    {
-      g_variant_builder_clear (&builder);
-      g_variant_builder_clear (&invalidated_builder);
-    }
-
-  g_hash_table_remove_all (notification_queue);
-  g_object_set_data (object, "gdbus-codegen-notification-idle-source", NULL);
-  return FALSE;
-}
-
-static void
-queue_notification (GObject     *object,
-                    const gchar *property_name,
-                    GVariant    *value)
-{
-  GHashTable *notification_queue;
-  GSource *idle_source;
-  notification_queue = g_object_get_data (object, "gdbus-codegen-notification-queue");
-  if (notification_queue == NULL)
-    {
-      notification_queue = g_hash_table_new_full (g_str_hash, g_str_equal, NULL, (GDestroyNotify) g_variant_unref);
-      g_object_set_data_full (object, "gdbus-codegen-notification-queue", notification_queue, (GDestroyNotify) g_hash_table_unref);
-    }
-  g_hash_table_insert (notification_queue, (gpointer) property_name, (gpointer) value); /* adopts value */
-  idle_source = g_object_get_data (object, "gdbus-codegen-notification-idle-source");
-  if (idle_source == NULL)
-    {
-      idle_source = g_idle_source_new ();
-      g_source_set_priority (idle_source, G_PRIORITY_DEFAULT);
-      g_source_set_callback (idle_source,
-                             emit_notifications_in_idle,
-                             g_object_ref (object),
-                             (GDestroyNotify) g_object_unref);
-      g_source_attach (idle_source, g_main_context_get_thread_default ());
-      g_source_unref (idle_source);
-      g_object_set_data (object, "gdbus-codegen-notification-idle-source", idle_source);
-    }
-}
-
-static void
-phoneui_messages_flush (GDBusInterface *_object)
-{
-  PhoneuiMessages *object = PHONEUI_MESSAGES (_object);
-  GSource *idle_source;
-  idle_source = g_object_get_data (G_OBJECT (object), "gdbus-codegen-notification-idle-source");
-  if (idle_source != NULL)
-    {
-      emit_notifications_in_idle (object);
-      g_source_destroy (idle_source);
-    }
-}
-
-static void
-on_notify (GObject    *object,
-           GParamSpec *pspec,
-           gpointer    user_data)
-{
-  GDBusConnection *connection;
-  const gchar *path;
-  GVariant *value;
-  const gchar *property_name;
-
-  path = g_object_get_data (object, "gdbus-codegen-path");
-  connection = g_object_get_data (object, "gdbus-codegen-connection");
-  if (connection == NULL || path == NULL)
-    goto out;
-  property_name = lookup_property_name_from_property_gname (pspec->name);
-  if (property_name == NULL)
-    goto out;
-
-  value = get_property (connection, NULL, path, "org.shr.phoneui.Messages", property_name, NULL, object);
-  if (value != NULL)
-    {
-      if (g_variant_is_floating (value))
-        g_variant_ref_sink (value);
-      queue_notification (object, property_name, value);
-    }
-out:
-  ;
-}
-
-static void
-on_object_unregistered (GObject *object)
-{
-  GSource *idle_source;
-  idle_source = g_object_get_data (G_OBJECT (object), "gdbus-codegen-notification-idle-source");
-  if (idle_source != NULL)
-    g_source_destroy (idle_source);
-  g_object_set_data (G_OBJECT (object), "gdbus-codegen-notification-idle-source", NULL);
-  g_object_set_data (G_OBJECT (object), "gdbus-codegen-path", NULL);
-  g_object_set_data (G_OBJECT (object), "gdbus-codegen-connection", NULL);
-  g_signal_handlers_disconnect_by_func (object, on_notify, NULL);
-}
-
-static guint
-phoneui_messages_register_object (GDBusInterface *_object,
-           GDBusConnection *connection,
-           const gchar *object_path,
-           GError **error)
-{
-  PhoneuiMessages *object = PHONEUI_MESSAGES (_object);
-  GHashTable *pvc;
-  guint n;
-
-  pvc = g_hash_table_new_full (g_str_hash, g_str_equal, NULL, (GDestroyNotify) _variant_blob_free);
-  if (_phoneui_messages_interface_info.properties != NULL)
-    {
-      for (n = 0; _phoneui_messages_interface_info.properties[n] != NULL; n++)
-        {
-          GDBusPropertyInfo *prop_info = _phoneui_messages_interface_info.properties[n];
-          if (prop_info->flags & G_DBUS_PROPERTY_INFO_FLAGS_READABLE)
-            {
-              GVariant *value;
-              value = get_property (connection, NULL, object_path, "org.shr.phoneui.Messages", prop_info->name, NULL, object);
-              if (value != NULL)
-                {
-                  if (g_variant_is_floating (value))
-                    g_variant_ref_sink (value);
-                  g_hash_table_insert (pvc, prop_info->name, _variant_blob_new (value));
-                  g_variant_unref (value);
-                }
-            }
-        }
-    }
-
-  g_object_set_data_full (G_OBJECT (object), "gdbus-codegen-path", (gpointer) g_strdup (object_path), g_free);
-  g_object_set_data (G_OBJECT (object), "gdbus-codegen-connection", (gpointer) connection);
-  g_object_set_data_full (G_OBJECT (object), "gdbus-codegen-pvc", (gpointer) pvc, (GDestroyNotify) g_hash_table_unref);
-  g_signal_connect (object, "notify", G_CALLBACK (on_notify), NULL);
-  return g_dbus_connection_register_object (connection,
-          object_path,
-          (GDBusInterfaceInfo *) &_phoneui_messages_interface_info,
-          &phoneui_messages_interface_vtable,
-          object,
-          (GDestroyNotify) on_object_unregistered,
-          error);
-}
-
-/**
- * phoneui_messages_interface_info:
- *
- * Gets interface description for the <literal>org.shr.phoneui.Messages</literal> D-Bus interface.
- *
- * Returns: A #GDBusInterfaceInfo. Do not free, the object is statically allocated.
- */
-GDBusInterfaceInfo *
-phoneui_messages_interface_info (void)
-{
-  return (GDBusInterfaceInfo *) &_phoneui_messages_interface_info;
-}
-
-static GDBusInterfaceInfo *
-phoneui_messages_g_dbus_interface_interface_info (GDBusInterface *object)
-{
-  return phoneui_messages_interface_info ();
-}
-
-static GVariant *
-phoneui_messages_get_properties (GDBusInterface *object)
-{
-  GDBusConnection *connection;
-  const gchar *object_path;
-  GVariantBuilder builder;
-  guint n;
-
-  g_variant_builder_init (&builder, G_VARIANT_TYPE ("a{sv}"));
-
-  if (_phoneui_messages_interface_info.properties == NULL)
-    goto out;
-
-  connection = g_object_get_data (G_OBJECT (object), "gdbus-codegen-connection");
-  object_path = g_object_get_data (G_OBJECT (object), "gdbus-codegen-path");
-
-  for (n = 0; _phoneui_messages_interface_info.properties[n] != NULL; n++)
-    {
-      GDBusPropertyInfo *prop_info = _phoneui_messages_interface_info.properties[n];
-      if (prop_info->flags & G_DBUS_PROPERTY_INFO_FLAGS_READABLE)
-        {
-          GVariant *value;
-          value = get_property (connection, NULL, object_path, "org.shr.phoneui.Messages", prop_info->name, NULL, object);
-          if (value != NULL)
-            {
-              if (g_variant_is_floating (value))
-                g_variant_ref_sink (value);
-              g_variant_builder_add (&builder, "{sv}", prop_info->name, value);
-              g_variant_unref (value);
-            }
-        }
-    }
-out:
-  return g_variant_builder_end (&builder);
-}
-
-
-/* ---------------------------------------------------------------------- */
-
-static void proxy_iface_init (PhoneuiMessagesIface *iface);
-
-G_DEFINE_TYPE_WITH_CODE (PhoneuiMessagesProxy, phoneui_messages_proxy, G_TYPE_DBUS_PROXY,
-                         G_IMPLEMENT_INTERFACE (TYPE_PHONEUI_MESSAGES, proxy_iface_init));
-
-static void
-phoneui_messages_proxy_init (PhoneuiMessagesProxy *proxy)
-{
-  g_dbus_proxy_set_interface_info (G_DBUS_PROXY (proxy),
-                                   (GDBusInterfaceInfo *) &_phoneui_messages_interface_info);
-}
-
-static void
-g_signal (GDBusProxy  *proxy,
-          const gchar *sender_name,
-          const gchar *signal_name,
-          GVariant    *parameters)
-{
-  guint signal_id;
-  signal_id = lookup_signal_id_from_signal_name (signal_name);
-  switch (signal_id)
-    {
-    }
-}
-
-static void
-phoneui_messages_proxy_get_property (GObject      *object,
-                       guint         prop_id,
-                       GValue       *value,
-                       GParamSpec   *pspec)
-{
-  G_GNUC_UNUSED GVariant *cached;
-  switch (prop_id)
-    {
-
-    default:
-      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
-      break;
-    }
-}
-
-static void
-property_set_cb (GDBusProxy   *proxy,
-                 GAsyncResult *res,
-                 gpointer      user_data)
-{
-  const gchar *property_name = user_data;
-  GError *error;
-  GVariant *result;
-
-  error = NULL;
-  result = g_dbus_proxy_call_finish (proxy, res, &error);
-  if (result == NULL)
-    {
-      g_warning ("Error setting property `%s': %s", property_name, error->message);
-      g_error_free (error);
-    }
-  else
-    {
-      g_variant_unref (result);
-    }
-}
-
-static void
-phoneui_messages_proxy_set_property (GObject      *object,
-                       guint         prop_id,
-                       const GValue *value,
-                       GParamSpec   *pspec)
-{
-  GVariant *new_value;
-  const gchar *property_name;
-  new_value = NULL;
-  property_name = NULL;
-  switch (prop_id)
-    {
-
-    default:
-      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
-      break;
-    }
-
-  if (new_value != NULL)
-    {
-      g_variant_ref_sink (new_value);
-      g_dbus_proxy_call (G_DBUS_PROXY (object),
-                         "org.freedesktop.DBus.Properties.Set",
-                         g_variant_new ("(ssv)",
-                                        "org.shr.phoneui.Messages",
-                                        property_name,
-                                        new_value),
-                         G_DBUS_CALL_FLAGS_NONE,
-                         -1,
-                         NULL,
-                         (GAsyncReadyCallback) property_set_cb,
-                         (gpointer) property_name);
-      g_variant_unref (new_value);
-    }
-
-}
-
-static void
-g_properties_changed (GDBusProxy         *proxy,
-                      GVariant           *changed_properties,
-                      const gchar* const *invalidated_properties)
-{
-  guint n;
-  const gchar *key;
-  GVariantIter *iter;
-  const gchar *gname;
-
-  g_variant_get (changed_properties, "a{sv}", &iter);
-  while (g_variant_iter_next (iter, "{&sv}", &key, NULL))
-    {
-      gname = lookup_property_gname_from_property_name (key);
-      if (gname != NULL)
-        g_object_notify (G_OBJECT (proxy), gname);
-    }
-
-  for (n = 0; invalidated_properties[n] != NULL; n++)
-    {
-      gname = lookup_property_gname_from_property_name (invalidated_properties[n]);
-      if (gname != NULL)
-        g_object_notify (G_OBJECT (proxy), gname);
-    }
-
+  g_dbus_proxy_set_interface_info (G_DBUS_PROXY (proxy), phoneui_messages_interface_info ());
 }
 
 static void
@@ -1373,74 +885,62 @@ phoneui_messages_proxy_class_init (PhoneuiMessagesProxyClass *klass)
   gobject_class->set_property = phoneui_messages_proxy_set_property;
 
   proxy_class = G_DBUS_PROXY_CLASS (klass);
-  proxy_class->g_signal = g_signal;
-  proxy_class->g_properties_changed = g_properties_changed;
-
-}
+  proxy_class->g_signal = phoneui_messages_proxy_g_signal;
+  proxy_class->g_properties_changed = phoneui_messages_proxy_g_properties_changed;
 
-static void
-proxy_iface_init (PhoneuiMessagesIface *iface)
-{
 }
 
-
 /**
  * phoneui_messages_proxy_new:
  * @connection: A #GDBusConnection.
- * @flags: Flags used when constructing the proxy.
- * @name: A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.
+ * @flags: Flags from the #GDBusProxyFlags enumeration.
+ * @name: (allow-none): A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.
  * @object_path: An object path.
- * @cancellable: A #GCancellable or %NULL.
- * @callback: Callback function to invoke when the proxy is ready.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @callback: A #GAsyncReadyCallback to call when the request is satisfied.
  * @user_data: User data to pass to @callback.
  *
- * Like g_dbus_proxy_new() but returns a #PhoneuiMessagesProxy.
+ * Asynchronously creates a proxy for the D-Bus interface <link linkend="gdbus-interface-org-shr-phoneui-Messages.top_of_page">org.shr.phoneui.Messages</link>. See g_dbus_proxy_new() for more details.
  *
- * This is a failable asynchronous constructor - when the proxy is ready, callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this function from. You can then call phoneui_messages_proxy_new_finish() to get the result. See phoneui_messages_proxy_new_sync() for the synchronous version.
+ * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
+ * You can then call phoneui_messages_proxy_new_finish() to get the result of the operation.
+ *
+ * See phoneui_messages_proxy_new_sync() for the synchronous, blocking version of this constructor.
  */
-void phoneui_messages_proxy_new (GDBusConnection     *connection,
-                   GDBusProxyFlags      flags,
-                   const gchar         *name,
-                   const gchar         *object_path,
-                   GCancellable        *cancellable,
-                   GAsyncReadyCallback  callback,
-                   gpointer             user_data)
-{
-  g_async_initable_new_async (TYPE_PHONEUI_MESSAGES_PROXY,
-                              G_PRIORITY_DEFAULT,
-                              cancellable,
-                              callback,
-                              user_data,
-                              "g-flags", flags,
-                              "g-name", name,
-                              "g-connection", connection,
-                              "g-object-path", object_path,
-                              "g-interface-name", "org.shr.phoneui.Messages",
-                              NULL);
+void
+phoneui_messages_proxy_new (
+    GDBusConnection     *connection,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GAsyncReadyCallback  callback,
+    gpointer             user_data)
+{
+  g_async_initable_new_async (TYPE_PHONEUI_MESSAGES_PROXY, G_PRIORITY_DEFAULT, cancellable, callback, user_data, "g-flags", flags, "g-name", name, "g-connection", connection, "g-object-path", object_path, "g-interface-name", "org.shr.phoneui.Messages", NULL);
 }
 
 /**
  * phoneui_messages_proxy_new_finish:
- * @res: A #GAsyncResult obtained from the #GAsyncReadyCallback function passed to phoneui_messages_proxy_new().
- * @error: Return location for error or %NULL.
+ * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_messages_proxy_new().
+ * @error: Return location for error or %NULL
  *
- * Finishes creating a #PhoneuiMessagesProxy.
+ * Finishes an operation started with phoneui_messages_proxy_new().
  *
- * Returns: A #PhoneuiMessagesProxy or %NULL if @error is set. Free with g_object_unref().
+ * Returns: (transfer full) (type PhoneuiMessagesProxy): The constructed proxy object or %NULL if @error is set.
  */
-PhoneuiMessages *phoneui_messages_proxy_new_finish (GAsyncResult  *res,
-                        GError       **error)
+PhoneuiMessages *
+phoneui_messages_proxy_new_finish (
+    GAsyncResult        *res,
+    GError             **error)
 {
-  GObject *object;
+  GObject *ret;
   GObject *source_object;
   source_object = g_async_result_get_source_object (res);
-  g_assert (source_object != NULL);
-  object = g_async_initable_new_finish (G_ASYNC_INITABLE (source_object),
-                                        res,
-                                        error);
+  ret = g_async_initable_new_finish (G_ASYNC_INITABLE (source_object), res, error);
   g_object_unref (source_object);
-  if (object != NULL)
-    return PHONEUI_MESSAGES (object);
+  if (ret != NULL)
+    return PHONEUI_MESSAGES (ret);
   else
     return NULL;
 }
@@ -1448,37 +948,33 @@ PhoneuiMessages *phoneui_messages_proxy_new_finish (GAsyncResult  *res,
 /**
  * phoneui_messages_proxy_new_sync:
  * @connection: A #GDBusConnection.
- * @flags: Flags used when constructing the proxy.
- * @name: A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.
+ * @flags: Flags from the #GDBusProxyFlags enumeration.
+ * @name: (allow-none): A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.
  * @object_path: An object path.
- * @cancellable: A #GCancellable or %NULL.
- * @error: Return location for error or %NULL.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @error: Return location for error or %NULL
+ *
+ * Synchronously creates a proxy for the D-Bus interface <link linkend="gdbus-interface-org-shr-phoneui-Messages.top_of_page">org.shr.phoneui.Messages</link>. See g_dbus_proxy_new_sync() for more details.
  *
- * Like g_dbus_proxy_new_sync() but returns a #PhoneuiMessagesProxy.
+ * The calling thread is blocked until a reply is received.
  *
- * This is a synchronous failable constructor - the calling thread is blocked until the object is ready. See phoneui_messages_proxy_new() for the asynchronous version.
+ * See phoneui_messages_proxy_new() for the asynchronous version of this constructor.
  *
- * Returns: A #PhoneuiMessagesProxy or %NULL if error is set. Free with g_object_unref().
+ * Returns: (transfer full) (type PhoneuiMessagesProxy): The constructed proxy object or %NULL if @error is set.
  */
-PhoneuiMessages *phoneui_messages_proxy_new_sync (GDBusConnection     *connection,
-                       GDBusProxyFlags      flags,
-                       const gchar         *name,
-                       const gchar         *object_path,
-                       GCancellable        *cancellable,
-                       GError             **error)
-{
-  GInitable *initable;
-  initable = g_initable_new (TYPE_PHONEUI_MESSAGES_PROXY,
-                             cancellable,
-                             error,
-                             "g-flags", flags,
-                             "g-name", name,
-                             "g-connection", connection,
-                             "g-object-path", object_path,
-                             "g-interface-name", "org.shr.phoneui.Messages",
-                             NULL);
-  if (initable != NULL)
-    return PHONEUI_MESSAGES (initable);
+PhoneuiMessages *
+phoneui_messages_proxy_new_sync (
+    GDBusConnection     *connection,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GError             **error)
+{
+  GInitable *ret;
+  ret = g_initable_new (TYPE_PHONEUI_MESSAGES_PROXY, cancellable, error, "g-flags", flags, "g-name", name, "g-connection", connection, "g-object-path", object_path, "g-interface-name", "org.shr.phoneui.Messages", NULL);
+  if (ret != NULL)
+    return PHONEUI_MESSAGES (ret);
   else
     return NULL;
 }
@@ -1487,60 +983,54 @@ PhoneuiMessages *phoneui_messages_proxy_new_sync (GDBusConnection     *connectio
 /**
  * phoneui_messages_proxy_new_for_bus:
  * @bus_type: A #GBusType.
- * @flags: Flags used when constructing the proxy.
+ * @flags: Flags from the #GDBusProxyFlags enumeration.
  * @name: A bus name (well-known or unique).
  * @object_path: An object path.
- * @cancellable: A #GCancellable or %NULL.
- * @callback: Callback function to invoke when the proxy is ready.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @callback: A #GAsyncReadyCallback to call when the request is satisfied.
  * @user_data: User data to pass to @callback.
  *
- * Like g_dbus_proxy_new_for_bus() but returns a #PhoneuiMessagesProxy.
+ * Like phoneui_messages_proxy_new() but takes a #GBusType instead of a #GDBusConnection.
+ *
+ * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
+ * You can then call phoneui_messages_proxy_new_for_bus_finish() to get the result of the operation.
  *
- * This is a failable asynchronous constructor - when the proxy is ready, callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this function from. You can then call phoneui_messages_proxy_new_for_bus_finish() to get the result. See phoneui_messages_proxy_new_for_bus_sync() for the synchronous version.
+ * See phoneui_messages_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.
  */
-void phoneui_messages_proxy_new_for_bus (GBusType             bus_type,
-                           GDBusProxyFlags      flags,
-                           const gchar         *name,
-                           const gchar         *object_path,
-                           GCancellable        *cancellable,
-                           GAsyncReadyCallback  callback,
-                           gpointer             user_data)
-{
-  g_async_initable_new_async (TYPE_PHONEUI_MESSAGES_PROXY,
-                              G_PRIORITY_DEFAULT,
-                              cancellable,
-                              callback,
-                              user_data,
-                              "g-flags", flags,
-                              "g-name", name,
-                              "g-bus-type", bus_type,
-                              "g-object-path", object_path,
-                              "g-interface-name", "org.shr.phoneui.Messages",
-                              NULL);
+void
+phoneui_messages_proxy_new_for_bus (
+    GBusType             bus_type,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GAsyncReadyCallback  callback,
+    gpointer             user_data)
+{
+  g_async_initable_new_async (TYPE_PHONEUI_MESSAGES_PROXY, G_PRIORITY_DEFAULT, cancellable, callback, user_data, "g-flags", flags, "g-name", name, "g-bus-type", bus_type, "g-object-path", object_path, "g-interface-name", "org.shr.phoneui.Messages", NULL);
 }
 
 /**
  * phoneui_messages_proxy_new_for_bus_finish:
- * @res: A #GAsyncResult obtained from the #GAsyncReadyCallback function passed to phoneui_messages_proxy_new_for_bus().
- * @error: Return location for error or %NULL.
+ * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_messages_proxy_new_for_bus().
+ * @error: Return location for error or %NULL
  *
- * Finishes creating a #PhoneuiMessagesProxy.
+ * Finishes an operation started with phoneui_messages_proxy_new_for_bus().
  *
- * Returns: A #PhoneuiMessagesProxy or %NULL if @error is set. Free with g_object_unref().
+ * Returns: (transfer full) (type PhoneuiMessagesProxy): The constructed proxy object or %NULL if @error is set.
  */
-PhoneuiMessages *phoneui_messages_proxy_new_for_bus_finish (GAsyncResult  *res,
-                                GError       **error)
+PhoneuiMessages *
+phoneui_messages_proxy_new_for_bus_finish (
+    GAsyncResult        *res,
+    GError             **error)
 {
-  GObject *object;
+  GObject *ret;
   GObject *source_object;
   source_object = g_async_result_get_source_object (res);
-  g_assert (source_object != NULL);
-  object = g_async_initable_new_finish (G_ASYNC_INITABLE (source_object),
-                                        res,
-                                        error);
+  ret = g_async_initable_new_finish (G_ASYNC_INITABLE (source_object), res, error);
   g_object_unref (source_object);
-  if (object != NULL)
-    return PHONEUI_MESSAGES (object);
+  if (ret != NULL)
+    return PHONEUI_MESSAGES (ret);
   else
     return NULL;
 }
@@ -1548,163 +1038,321 @@ PhoneuiMessages *phoneui_messages_proxy_new_for_bus_finish (GAsyncResult  *res,
 /**
  * phoneui_messages_proxy_new_for_bus_sync:
  * @bus_type: A #GBusType.
- * @flags: Flags used when constructing the proxy.
+ * @flags: Flags from the #GDBusProxyFlags enumeration.
  * @name: A bus name (well-known or unique).
  * @object_path: An object path.
- * @cancellable: A #GCancellable or %NULL.
- * @error: Return location for error or %NULL.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @error: Return location for error or %NULL
+ *
+ * Like phoneui_messages_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.
  *
- * Like g_dbus_proxy_new_for_bus_sync() but returns a #PhoneuiMessagesProxy.
+ * The calling thread is blocked until a reply is received.
  *
- * This is a synchronous failable constructor - the calling thread is blocked until the object is ready. See phoneui_messages_proxy_new_for_bus() for the asynchronous version.
+ * See phoneui_messages_proxy_new_for_bus() for the asynchronous version of this constructor.
  *
- * Returns: A #PhoneuiMessagesProxy or %NULL if error is set. Free with g_object_unref().
+ * Returns: (transfer full) (type PhoneuiMessagesProxy): The constructed proxy object or %NULL if @error is set.
  */
-PhoneuiMessages *phoneui_messages_proxy_new_for_bus_sync (GBusType             bus_type,
-                               GDBusProxyFlags      flags,
-                               const gchar         *name,
-                               const gchar         *object_path,
-                               GCancellable        *cancellable,
-                               GError             **error)
-{
-  GInitable *initable;
-  initable = g_initable_new (TYPE_PHONEUI_MESSAGES_PROXY,
-                             cancellable,
-                             error,
-                             "g-flags", flags,
-                             "g-name", name,
-                             "g-bus-type", bus_type,
-                             "g-object-path", object_path,
-                             "g-interface-name", "org.shr.phoneui.Messages",
-                             NULL);
-  if (initable != NULL)
-    return PHONEUI_MESSAGES (initable);
+PhoneuiMessages *
+phoneui_messages_proxy_new_for_bus_sync (
+    GBusType             bus_type,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GError             **error)
+{
+  GInitable *ret;
+  ret = g_initable_new (TYPE_PHONEUI_MESSAGES_PROXY, cancellable, error, "g-flags", flags, "g-name", name, "g-bus-type", bus_type, "g-object-path", object_path, "g-interface-name", "org.shr.phoneui.Messages", NULL);
+  if (ret != NULL)
+    return PHONEUI_MESSAGES (ret);
   else
     return NULL;
 }
 
 
-/* ---------------------------------------------------------------------- */
+/* ------------------------------------------------------------------------ */
+
+/**
+ * PhoneuiMessagesSkeleton:
+ *
+ * The #PhoneuiMessagesSkeleton structure contains only private data and should only be accessed using the provided API.
+ */
+
+/**
+ * PhoneuiMessagesSkeletonClass:
+ * @parent_class: The parent class.
+ *
+ * Class structure for #PhoneuiMessagesSkeleton.
+ */
 
-struct _PhoneuiMessagesStubPrivate
+struct _PhoneuiMessagesSkeletonPrivate
 {
-  GDBusObject *enclosing_object;
-  GDBusInterfaceFlags flags;
+  GValueArray *properties;
+  GList *changed_properties;
+  GSource *changed_properties_idle_source;
+  GMainContext *context;
 };
 
-static void stub_iface_init (PhoneuiMessagesIface *iface);
+static void
+_phoneui_messages_skeleton_handle_method_call (
+  GDBusConnection *connection,
+  const gchar *sender,
+  const gchar *object_path,
+  const gchar *interface_name,
+  const gchar *method_name,
+  GVariant *parameters,
+  GDBusMethodInvocation *invocation,
+  gpointer user_data)
+{
+  PhoneuiMessagesSkeleton *skeleton = PHONEUI_MESSAGES_SKELETON (user_data);
+  _ExtendedGDBusMethodInfo *info;
+  GVariantIter iter;
+  GVariant *child;
+  GValue *paramv;
+  guint num_params;
+  guint n;
+  guint signal_id;
+  GValue return_value = {0};
+  info = (_ExtendedGDBusMethodInfo *) g_dbus_method_invocation_get_method_info (invocation);
+  g_assert (info != NULL);
+  num_params = g_variant_n_children (parameters);
+  paramv = g_new0 (GValue, num_params + 2);
+  g_value_init (&paramv[0], TYPE_PHONEUI_MESSAGES);
+  g_value_set_object (&paramv[0], skeleton);
+  g_value_init (&paramv[1], G_TYPE_DBUS_METHOD_INVOCATION);
+  g_value_set_object (&paramv[1], invocation);
+  g_variant_iter_init (&iter, parameters);
+  n = 2;
+  while ((child = g_variant_iter_next_value (&iter)) != NULL)
+    {
+      _ExtendedGDBusArgInfo *arg_info = (_ExtendedGDBusArgInfo *) info->parent_struct.in_args[n - 2];
+      if (arg_info->use_gvariant)
+        {
+          g_value_init (&paramv[n], G_TYPE_VARIANT);
+          g_value_set_variant (&paramv[n], child);
+          n++;
+        }
+      else
+        g_dbus_gvariant_to_gvalue (child, &paramv[n++]);
+      g_variant_unref (child);
+    }
+  signal_id = g_signal_lookup (info->signal_name, TYPE_PHONEUI_MESSAGES);
+  g_value_init (&return_value, G_TYPE_BOOLEAN);
+  g_signal_emitv (paramv, signal_id, 0, &return_value);
+  if (!g_value_get_boolean (&return_value))
+    g_dbus_method_invocation_return_error (invocation, G_DBUS_ERROR, G_DBUS_ERROR_UNKNOWN_METHOD, "Method %s is not implemented on interface %s", method_name, interface_name);
+  g_value_unset (&return_value);
+  for (n = 0; n < num_params + 2; n++)
+    g_value_unset (&paramv[n]);
+  g_free (paramv);
+}
+
+static GVariant *
+_phoneui_messages_skeleton_handle_get_property (
+  GDBusConnection *connection,
+  const gchar *sender,
+  const gchar *object_path,
+  const gchar *interface_name,
+  const gchar *property_name,
+  GError **error,
+  gpointer user_data)
+{
+  PhoneuiMessagesSkeleton *skeleton = PHONEUI_MESSAGES_SKELETON (user_data);
+  GValue value = {0};
+  GParamSpec *pspec;
+  _ExtendedGDBusPropertyInfo *info;
+  GVariant *ret;
+  ret = NULL;
+  info = (_ExtendedGDBusPropertyInfo *) g_dbus_interface_info_lookup_property ((GDBusInterfaceInfo *) &_phoneui_messages_interface_info, property_name);
+  g_assert (info != NULL);
+  pspec = g_object_class_find_property (G_OBJECT_GET_CLASS (skeleton), info->hyphen_name);
+  if (pspec == NULL)
+    {
+      g_set_error (error, G_DBUS_ERROR, G_DBUS_ERROR_INVALID_ARGS, "No property with name %s", property_name);
+    }
+  else
+    {
+      g_value_init (&value, pspec->value_type);
+      g_object_get_property (G_OBJECT (skeleton), info->hyphen_name, &value);
+      ret = g_dbus_gvalue_to_gvariant (&value, G_VARIANT_TYPE (info->parent_struct.signature));
+      g_value_unset (&value);
+    }
+  return ret;
+}
 
-G_DEFINE_TYPE_WITH_CODE (PhoneuiMessagesStub, phoneui_messages_stub, G_TYPE_OBJECT,
-                         G_IMPLEMENT_INTERFACE (G_TYPE_DBUS_INTERFACE, dbus_iface_init)
-                         G_IMPLEMENT_INTERFACE (TYPE_PHONEUI_MESSAGES, stub_iface_init));
+static gboolean
+_phoneui_messages_skeleton_handle_set_property (
+  GDBusConnection *connection,
+  const gchar *sender,
+  const gchar *object_path,
+  const gchar *interface_name,
+  const gchar *property_name,
+  GVariant *variant,
+  GError **error,
+  gpointer user_data)
+{
+  PhoneuiMessagesSkeleton *skeleton = PHONEUI_MESSAGES_SKELETON (user_data);
+  GValue value = {0};
+  GParamSpec *pspec;
+  _ExtendedGDBusPropertyInfo *info;
+  gboolean ret;
+  ret = FALSE;
+  info = (_ExtendedGDBusPropertyInfo *) g_dbus_interface_info_lookup_property ((GDBusInterfaceInfo *) &_phoneui_messages_interface_info, property_name);
+  g_assert (info != NULL);
+  pspec = g_object_class_find_property (G_OBJECT_GET_CLASS (skeleton), info->hyphen_name);
+  if (pspec == NULL)
+    {
+      g_set_error (error, G_DBUS_ERROR, G_DBUS_ERROR_INVALID_ARGS, "No property with name %s", property_name);
+    }
+  else
+    {
+      if (info->use_gvariant)
+        g_value_set_variant (&value, variant);
+      else
+        g_dbus_gvariant_to_gvalue (variant, &value);
+      g_object_set_property (G_OBJECT (skeleton), info->hyphen_name, &value);
+      g_value_unset (&value);
+      ret = TRUE;
+    }
+  return ret;
+}
 
-static void
-phoneui_messages_stub_finalize (GObject *object)
+static const GDBusInterfaceVTable _phoneui_messages_skeleton_vtable =
 {
-  G_GNUC_UNUSED PhoneuiMessagesStub *stub = (PhoneuiMessagesStub *) object;
+  _phoneui_messages_skeleton_handle_method_call,
+  _phoneui_messages_skeleton_handle_get_property,
+  _phoneui_messages_skeleton_handle_set_property
+};
 
-  if (G_OBJECT_CLASS (phoneui_messages_stub_parent_class)->finalize != NULL)
-    G_OBJECT_CLASS (phoneui_messages_stub_parent_class)->finalize (object);
+static GDBusInterfaceInfo *
+phoneui_messages_skeleton_dbus_interface_get_info (GDBusInterfaceSkeleton *skeleton)
+{
+  return phoneui_messages_interface_info ();
 }
 
-static void
-phoneui_messages_stub_get_property (GObject      *object,
-                      guint         prop_id,
-                      GValue       *value,
-                      GParamSpec   *pspec)
+static GDBusInterfaceVTable *
+phoneui_messages_skeleton_dbus_interface_get_vtable (GDBusInterfaceSkeleton *skeleton)
 {
-  G_GNUC_UNUSED PhoneuiMessagesStub *stub = (PhoneuiMessagesStub *) object;
-  switch (prop_id)
-    {
-
-    default:
-      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
-      break;
-    }
+  return (GDBusInterfaceVTable *) &_phoneui_messages_skeleton_vtable;
 }
 
-static void
-phoneui_messages_stub_set_property (GObject      *object,
-                      guint         prop_id,
-                      const GValue *value,
-                      GParamSpec   *pspec)
+static GVariant *
+phoneui_messages_skeleton_dbus_interface_get_properties (GDBusInterfaceSkeleton *_skeleton)
 {
-  G_GNUC_UNUSED PhoneuiMessagesStub *stub = (PhoneuiMessagesStub *) object;
-  switch (prop_id)
-    {
+  PhoneuiMessagesSkeleton *skeleton = PHONEUI_MESSAGES_SKELETON (_skeleton);
 
-    default:
-      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
-      break;
+  GVariantBuilder builder;
+  guint n;
+  g_variant_builder_init (&builder, G_VARIANT_TYPE ("a{sv}"));
+  if (_phoneui_messages_interface_info.parent_struct.properties == NULL)
+    goto out;
+  for (n = 0; _phoneui_messages_interface_info.parent_struct.properties[n] != NULL; n++)
+    {
+      GDBusPropertyInfo *info = _phoneui_messages_interface_info.parent_struct.properties[n];
+      if (info->flags & G_DBUS_PROPERTY_INFO_FLAGS_READABLE)
+        {
+          GVariant *value;
+          value = _phoneui_messages_skeleton_handle_get_property (g_dbus_interface_skeleton_get_connection (G_DBUS_INTERFACE_SKELETON (skeleton)), NULL, g_dbus_interface_skeleton_get_object_path (G_DBUS_INTERFACE_SKELETON (skeleton)), "org.shr.phoneui.Messages", info->name, NULL, skeleton);
+          if (value != NULL)
+            {
+              if (g_variant_is_floating (value))
+                g_variant_ref_sink (value);
+              g_variant_builder_add (&builder, "{sv}", info->name, value);
+              g_variant_unref (value);
+            }
+        }
     }
+out:
+  return g_variant_builder_end (&builder);
 }
 
 static void
-phoneui_messages_stub_init (PhoneuiMessagesStub *stub)
+phoneui_messages_skeleton_dbus_interface_flush (GDBusInterfaceSkeleton *_skeleton)
 {
-  stub->priv = G_TYPE_INSTANCE_GET_PRIVATE (stub, TYPE_PHONEUI_MESSAGES_STUB, PhoneuiMessagesStubPrivate);
 }
 
 static void
-phoneui_messages_stub_class_init (PhoneuiMessagesStubClass *klass)
+phoneui_messages_skeleton_iface_init (PhoneuiMessagesIface *iface)
 {
-  GObjectClass *gobject_class;
-
-  gobject_class = G_OBJECT_CLASS (klass);
-  gobject_class->finalize     = phoneui_messages_stub_finalize;
-  gobject_class->get_property = phoneui_messages_stub_get_property;
-  gobject_class->set_property = phoneui_messages_stub_set_property;
-  g_type_class_add_private (klass, sizeof (PhoneuiMessagesStubPrivate));
 }
 
+#define phoneui_messages_skeleton_get_type phoneui_messages_skeleton_get_type
+G_DEFINE_TYPE_WITH_CODE (PhoneuiMessagesSkeleton, phoneui_messages_skeleton, G_TYPE_DBUS_INTERFACE_SKELETON,
+                         G_IMPLEMENT_INTERFACE (TYPE_PHONEUI_MESSAGES, phoneui_messages_skeleton_iface_init));
+#undef phoneui_messages_skeleton_get_type
+
 static void
-stub_iface_init (PhoneuiMessagesIface *iface)
-{
+phoneui_messages_skeleton_finalize (GObject *object)
+{
+  PhoneuiMessagesSkeleton *skeleton = PHONEUI_MESSAGES_SKELETON (object);
+  g_list_foreach (skeleton->priv->changed_properties, (GFunc) _changed_property_free, NULL);
+  g_list_free (skeleton->priv->changed_properties);
+  if (skeleton->priv->changed_properties_idle_source != NULL)
+    g_source_destroy (skeleton->priv->changed_properties_idle_source);
+  if (skeleton->priv->context != NULL)
+    g_main_context_unref (skeleton->priv->context);
+  G_OBJECT_CLASS (phoneui_messages_skeleton_parent_class)->finalize (object);
 }
 
-/**
- * phoneui_messages_stub_new:
- *
- * Creates a new stub object that can be exported via g_dbus_interface_register_object().
- *
- * Returns: A #PhoneuiMessagesStub instance. Free with g_object_unref().
- */
-PhoneuiMessages *
-phoneui_messages_stub_new (void)
-{
-  return PHONEUI_MESSAGES (g_object_new (TYPE_PHONEUI_MESSAGES_STUB, NULL));
+static void
+phoneui_messages_skeleton_get_property (GObject      *object,
+  guint         prop_id,
+  GValue       *value,
+  GParamSpec   *pspec)
+{
+  PhoneuiMessagesSkeleton *skeleton = PHONEUI_MESSAGES_SKELETON (object);
+  g_assert (prop_id - 1 >= 0 && prop_id - 1 < 0);
+  g_value_copy (&skeleton->priv->properties->values[prop_id - 1], value);
 }
 
-static GDBusObject *
-phoneui_messages_g_dbus_interface_get_object (GDBusInterface *interface)
+static void
+phoneui_messages_skeleton_set_property (GObject      *object,
+  guint         prop_id,
+  const GValue *value,
+  GParamSpec   *pspec)
 {
-  PhoneuiMessagesStub *stub = G_TYPE_CHECK_INSTANCE_CAST (interface, TYPE_PHONEUI_MESSAGES_STUB, PhoneuiMessagesStub);
-  if (stub->priv->enclosing_object != NULL)
-    return g_object_ref (stub->priv->enclosing_object);
-  else
-    return NULL;
 }
 
 static void
-phoneui_messages_g_dbus_interface_set_object (GDBusInterface *interface,
-                                GDBusObject    *object)
+phoneui_messages_skeleton_init (PhoneuiMessagesSkeleton *skeleton)
 {
-  PhoneuiMessagesStub *stub = G_TYPE_CHECK_INSTANCE_CAST (interface, TYPE_PHONEUI_MESSAGES_STUB, PhoneuiMessagesStub);
-  stub->priv->enclosing_object = object;
+  skeleton->priv = G_TYPE_INSTANCE_GET_PRIVATE (skeleton, TYPE_PHONEUI_MESSAGES_SKELETON, PhoneuiMessagesSkeletonPrivate);
+  skeleton->priv->context = g_main_context_get_thread_default ();
+  if (skeleton->priv->context != NULL)
+    g_main_context_ref (skeleton->priv->context);
 }
 
-static GDBusInterfaceFlags
-phoneui_messages_g_dbus_interface_get_flags (GDBusInterface *interface)
+static void
+phoneui_messages_skeleton_class_init (PhoneuiMessagesSkeletonClass *klass)
 {
-  PhoneuiMessagesStub *stub = G_TYPE_CHECK_INSTANCE_CAST (interface, TYPE_PHONEUI_MESSAGES_STUB, PhoneuiMessagesStub);
-  return stub->priv->flags;
+  GObjectClass *gobject_class;
+  GDBusInterfaceSkeletonClass *skeleton_class;
+
+  g_type_class_add_private (klass, sizeof (PhoneuiMessagesSkeletonPrivate));
+
+  gobject_class = G_OBJECT_CLASS (klass);
+  gobject_class->finalize = phoneui_messages_skeleton_finalize;
+  gobject_class->get_property = phoneui_messages_skeleton_get_property;
+  gobject_class->set_property = phoneui_messages_skeleton_set_property;
+
+
+  skeleton_class = G_DBUS_INTERFACE_SKELETON_CLASS (klass);
+  skeleton_class->get_info = phoneui_messages_skeleton_dbus_interface_get_info;
+  skeleton_class->get_properties = phoneui_messages_skeleton_dbus_interface_get_properties;
+  skeleton_class->flush = phoneui_messages_skeleton_dbus_interface_flush;
+  skeleton_class->get_vtable = phoneui_messages_skeleton_dbus_interface_get_vtable;
 }
 
-static void
-phoneui_messages_g_dbus_interface_set_flags (GDBusInterface      *interface,
-                               GDBusInterfaceFlags  flags)
+/**
+ * phoneui_messages_skeleton_new:
+ *
+ * Creates a skeleton object for the D-Bus interface <link linkend="gdbus-interface-org-shr-phoneui-Messages.top_of_page">org.shr.phoneui.Messages</link>.
+ *
+ * Returns: (transfer full) (type PhoneuiMessagesSkeleton): The skeleton object.
+ */
+PhoneuiMessages *
+phoneui_messages_skeleton_new (void)
 {
-  PhoneuiMessagesStub *stub = G_TYPE_CHECK_INSTANCE_CAST (interface, TYPE_PHONEUI_MESSAGES_STUB, PhoneuiMessagesStub);
-  stub->priv->flags = flags;
+  return PHONEUI_MESSAGES (g_object_new (TYPE_PHONEUI_MESSAGES_SKELETON, NULL));
 }
 
diff --git a/src/shr-phoneuimessages.h b/src/shr-phoneuimessages.h
index 984a7b4..85a4f12 100644
--- a/src/shr-phoneuimessages.h
+++ b/src/shr-phoneuimessages.h
@@ -1,291 +1,221 @@
-/* File:       shr-phoneuimessages.h
+/*
+ * Generated by gdbus-codegen 2.29.3. DO NOT EDIT.
  *
- * GType name: PhoneuiMessages
- * D-Bus name: org.shr.phoneui.Messages
- *
- * Generated by GDBus Binding Tool 0.1. DO NOT EDIT.
+ * The license of this code is the same as for the source it was derived from.
  */
 
-#ifndef __SHR_PHONEUI_MESSAGES_H__
-#define __SHR_PHONEUI_MESSAGES_H__
+#ifndef __SHR_PHONEUIMESSAGES_H__
+#define __SHR_PHONEUIMESSAGES_H__
 
 #include <gio/gio.h>
-#include <gdbusinterface.h>
-#include <gdbusobjectproxy.h>
-#include <gdbusproxymanager.h>
-#include <gdbusobject.h>
-#include <gdbusobjectmanager.h>
-#include <gdbuscodegen-enumtypes.h>
-#include <string.h>
-#include <shr-types.h>
 
 G_BEGIN_DECLS
 
-#define TYPE_PHONEUI_MESSAGES         (phoneui_messages_get_gtype ())
-#define PHONEUI_MESSAGES(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_PHONEUI_MESSAGES, PhoneuiMessages))
-#define IS_PHONEUI_MESSAGES(o)        (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_PHONEUI_MESSAGES))
-#define PHONEUI_MESSAGES_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE((o), TYPE_PHONEUI_MESSAGES, PhoneuiMessagesIface))
-
-/**
- * PhoneuiMessages:
- *
- * Opaque type representing a proxy or an exported object.
- */
-typedef struct _PhoneuiMessages PhoneuiMessages; /* Dummy typedef */
-/**
- * PhoneuiMessagesIface:
- * @parent_iface: The parent interface.
- * @handle_display_list: Handler for the #PhoneuiMessages::handle-display-list signal.
- * @handle_display_message: Handler for the #PhoneuiMessages::handle-display-message signal.
- * @handle_create_message: Handler for the #PhoneuiMessages::handle-create-message signal.
- *
- * Virtual table.
- */
-typedef struct _PhoneuiMessagesIface PhoneuiMessagesIface;
 
-GType phoneui_messages_get_gtype (void) G_GNUC_CONST;
-GDBusInterfaceInfo *phoneui_messages_interface_info (void);
+/* ------------------------------------------------------------------------ */
+/* Declarations for org.shr.phoneui.Messages */
 
-/**
- * GET_PHONEUI_MESSAGES:
- * @object_proxy: A #GDBusObjectProxy.
- *
- * Convenience macro to get a #PhoneuiMessages interface proxy from @object_proxy.
- *
- * Returns: A #GDBusProxy object implementing the #PhoneuiMessages interface or %NULL if @object_proxy
- * does not implement the <literal>org.shr.phoneui.Messages</literal> D-Bus interface.
- * The returned reference must be released with g_object_unref().
- */
-#define GET_PHONEUI_MESSAGES(object_proxy) (g_dbus_object_proxy_lookup_with_typecheck (object_proxy, "org.shr.phoneui.Messages", TYPE_PHONEUI_MESSAGES))
+#define TYPE_PHONEUI_MESSAGES (phoneui_messages_get_type ())
+#define PHONEUI_MESSAGES(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_PHONEUI_MESSAGES, PhoneuiMessages))
+#define IS_PHONEUI_MESSAGES(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_PHONEUI_MESSAGES))
+#define PHONEUI_MESSAGES_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_PHONEUI_MESSAGES, PhoneuiMessages))
 
-/**
- * PEEK_PHONEUI_MESSAGES:
- * @object_proxy: A #GDBusObjectProxy.
- *
- * Like GET_PHONEUI_MESSAGES() but doesn't increase the reference count on the returned object.
- *
- * <note><para>This macro is not safe to use outside the thread where the #GDBusProxyManager for @object_proxy was constructed in.</para></note>
- *
- * Returns: A #GDBusProxy object implementing the #PhoneuiMessages interface or %NULL if @object_proxy
- * does not implement the <literal>org.shr.phoneui.Messages</literal> D-Bus interface.
- * Do not free the returned object, it is owned by @object_proxy..
- */
-#define PEEK_PHONEUI_MESSAGES(object_proxy) (g_dbus_object_proxy_peek_with_typecheck (object_proxy, "org.shr.phoneui.Messages", TYPE_PHONEUI_MESSAGES))
-
-
-/* ---------------------------------------------------------------------- */
-
-typedef struct _PhoneuiMessagesProxy PhoneuiMessagesProxy;
-typedef struct _PhoneuiMessagesProxyClass PhoneuiMessagesProxyClass;
-
-/**
- * PhoneuiMessagesProxyPrivate:
- *
- * The #PhoneuiMessagesProxyPrivate structure contains only private data.
- */
-typedef struct _PhoneuiMessagesProxyPrivate PhoneuiMessagesProxyPrivate;
+struct _PhoneuiMessages;
+typedef struct _PhoneuiMessages PhoneuiMessages;
+typedef struct _PhoneuiMessagesIface PhoneuiMessagesIface;
 
-/**
- * PhoneuiMessagesProxy:
- *
- * The #PhoneuiMessagesProxy structure contains only private data and
- * should only be accessed using the provided API.
- */
-struct _PhoneuiMessagesProxy
+struct _PhoneuiMessagesIface
 {
-  /*< private >*/
-  GDBusProxy parent_instance;
-  PhoneuiMessagesProxyPrivate *priv;
-};
+  GTypeInterface parent_iface;
 
-/**
- * PhoneuiMessagesProxyClass:
- *
- * Class structure for #PhoneuiMessagesProxy.
- */
-struct _PhoneuiMessagesProxyClass
-{
-  /*< private >*/
-  GDBusProxyClass parent_class;
-};
+  gboolean (*handle_create_message) (
+    PhoneuiMessages *object,
+    GDBusMethodInvocation *invocation,
+    GVariant *values);
 
-#define TYPE_PHONEUI_MESSAGES_PROXY (phoneui_messages_proxy_get_type ())
-GType phoneui_messages_proxy_get_type (void) G_GNUC_CONST;
+  gboolean (*handle_display_list) (
+    PhoneuiMessages *object,
+    GDBusMethodInvocation *invocation,
+    GVariant *filter);
 
-void phoneui_messages_proxy_new (GDBusConnection     *connection,
-                   GDBusProxyFlags      flags,
-                   const gchar         *name,
-                   const gchar         *object_path,
-                   GCancellable        *cancellable,
-                   GAsyncReadyCallback  callback,
-                   gpointer             user_data);
-PhoneuiMessages *phoneui_messages_proxy_new_finish (GAsyncResult  *res,
-                        GError       **error);
-PhoneuiMessages *phoneui_messages_proxy_new_sync (GDBusConnection     *connection,
-                       GDBusProxyFlags      flags,
-                       const gchar         *name,
-                       const gchar         *object_path,
-                       GCancellable        *cancellable,
-                       GError             **error);
-
-void phoneui_messages_proxy_new_for_bus (GBusType             bus_type,
-                           GDBusProxyFlags      flags,
-                           const gchar         *name,
-                           const gchar         *object_path,
-                           GCancellable        *cancellable,
-                           GAsyncReadyCallback  callback,
-                           gpointer             user_data);
-PhoneuiMessages *phoneui_messages_proxy_new_for_bus_finish (GAsyncResult  *res,
-                                 GError       **error);
-PhoneuiMessages *phoneui_messages_proxy_new_for_bus_sync (GBusType             bus_type,
-                               GDBusProxyFlags      flags,
-                               const gchar         *name,
-                               const gchar         *object_path,
-                               GCancellable        *cancellable,
-                               GError             **error);
-
-/* ---------------------------------------------------------------------- */
-
-typedef struct _PhoneuiMessagesStub PhoneuiMessagesStub;
-typedef struct _PhoneuiMessagesStubClass PhoneuiMessagesStubClass;
-
-/**
- * PhoneuiMessagesStubPrivate:
- *
- * The #PhoneuiMessagesStubPrivate structure contains only private data.
- */
-typedef struct _PhoneuiMessagesStubPrivate PhoneuiMessagesStubPrivate;
+  gboolean (*handle_display_message) (
+    PhoneuiMessages *object,
+    GDBusMethodInvocation *invocation,
+    const gchar *path);
 
-/**
- * PhoneuiMessagesStub:
- *
- * The #PhoneuiMessagesStub structure contains only private data and
- * should only be accessed using the provided API.
- */
-struct _PhoneuiMessagesStub
-{
-  /*< private >*/
-  GObject parent_instance;
-  PhoneuiMessagesStubPrivate *priv;
 };
 
-/**
- * PhoneuiMessagesStubClass:
- *
- * Class structure for #PhoneuiMessagesStub.
- */
-struct _PhoneuiMessagesStubClass
-{
-  /*< private >*/
-  GObjectClass parent_class;
-};
+GType phoneui_messages_get_type (void) G_GNUC_CONST;
 
-#define TYPE_PHONEUI_MESSAGES_STUB (phoneui_messages_stub_get_type ())
-GType phoneui_messages_stub_get_type (void) G_GNUC_CONST;
+GDBusInterfaceInfo *phoneui_messages_interface_info (void);
 
-PhoneuiMessages *phoneui_messages_stub_new (void);
 
+/* D-Bus method call completion functions: */
+void phoneui_messages_complete_display_list (
+    PhoneuiMessages *object,
+    GDBusMethodInvocation *invocation);
 
-struct _PhoneuiMessagesIface
-{
-  GTypeInterface parent_iface;
+void phoneui_messages_complete_display_message (
+    PhoneuiMessages *object,
+    GDBusMethodInvocation *invocation);
 
-  /* Signal handlers for handling D-Bus method calls: */
-  gboolean (*handle_display_list) (
-        PhoneuiMessages *object,
-        GDBusMethodInvocation *invocation,
-        GVariant *filter);
-  gboolean (*handle_display_message) (
-        PhoneuiMessages *object,
-        GDBusMethodInvocation *invocation,
-        const gchar *path);
-  gboolean (*handle_create_message) (
-        PhoneuiMessages *object,
-        GDBusMethodInvocation *invocation,
-        GVariant *values);
-};
+void phoneui_messages_complete_create_message (
+    PhoneuiMessages *object,
+    GDBusMethodInvocation *invocation);
 
-/* C Bindings for properties */
 
 
-/* D-Bus Methods */
+/* D-Bus method calls: */
 void phoneui_messages_call_display_list (
-        PhoneuiMessages *proxy,
-        GVariant *filter,
-        GCancellable *cancellable,
-        GAsyncReadyCallback callback,
-        gpointer user_data);
+    PhoneuiMessages *proxy,
+    GVariant *filter,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data);
 
 gboolean phoneui_messages_call_display_list_finish (
-        PhoneuiMessages *proxy,
-        GAsyncResult *res,
-        GError **error);
+    PhoneuiMessages *proxy,
+    GAsyncResult *res,
+    GError **error);
 
 gboolean phoneui_messages_call_display_list_sync (
-        PhoneuiMessages *proxy,
-        GVariant *filter,
-        GCancellable *cancellable,
-        GError **error);
-
+    PhoneuiMessages *proxy,
+    GVariant *filter,
+    GCancellable *cancellable,
+    GError **error);
 
 void phoneui_messages_call_display_message (
-        PhoneuiMessages *proxy,
-        const gchar *path,
-        GCancellable *cancellable,
-        GAsyncReadyCallback callback,
-        gpointer user_data);
+    PhoneuiMessages *proxy,
+    const gchar *path,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data);
 
 gboolean phoneui_messages_call_display_message_finish (
-        PhoneuiMessages *proxy,
-        GAsyncResult *res,
-        GError **error);
+    PhoneuiMessages *proxy,
+    GAsyncResult *res,
+    GError **error);
 
 gboolean phoneui_messages_call_display_message_sync (
-        PhoneuiMessages *proxy,
-        const gchar *path,
-        GCancellable *cancellable,
-        GError **error);
-
+    PhoneuiMessages *proxy,
+    const gchar *path,
+    GCancellable *cancellable,
+    GError **error);
 
 void phoneui_messages_call_create_message (
-        PhoneuiMessages *proxy,
-        GVariant *values,
-        GCancellable *cancellable,
-        GAsyncReadyCallback callback,
-        gpointer user_data);
+    PhoneuiMessages *proxy,
+    GVariant *values,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data);
 
 gboolean phoneui_messages_call_create_message_finish (
-        PhoneuiMessages *proxy,
-        GAsyncResult *res,
-        GError **error);
+    PhoneuiMessages *proxy,
+    GAsyncResult *res,
+    GError **error);
 
 gboolean phoneui_messages_call_create_message_sync (
-        PhoneuiMessages *proxy,
-        GVariant *values,
-        GCancellable *cancellable,
-        GError **error);
+    PhoneuiMessages *proxy,
+    GVariant *values,
+    GCancellable *cancellable,
+    GError **error);
 
 
 
-/* D-Bus Methods Completion Helpers */
-void phoneui_messages_complete_display_list (
-        PhoneuiMessages *object,
-        GDBusMethodInvocation *invocation);
+/* ---- */
 
+#define TYPE_PHONEUI_MESSAGES_PROXY (phoneui_messages_proxy_get_type ())
+#define PHONEUI_MESSAGES_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_PHONEUI_MESSAGES_PROXY, PhoneuiMessagesProxy))
+#define PHONEUI_MESSAGES_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_PHONEUI_MESSAGES_PROXY, PhoneuiMessagesProxyClass))
+#define PHONEUI_MESSAGES_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_PHONEUI_MESSAGES_PROXY, PhoneuiMessagesProxyClass))
+#define IS_PHONEUI_MESSAGES_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_PHONEUI_MESSAGES_PROXY))
+#define IS_PHONEUI_MESSAGES_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_PHONEUI_MESSAGES_PROXY))
 
-void phoneui_messages_complete_display_message (
-        PhoneuiMessages *object,
-        GDBusMethodInvocation *invocation);
+typedef struct _PhoneuiMessagesProxy PhoneuiMessagesProxy;
+typedef struct _PhoneuiMessagesProxyClass PhoneuiMessagesProxyClass;
+typedef struct _PhoneuiMessagesProxyPrivate PhoneuiMessagesProxyPrivate;
 
+struct _PhoneuiMessagesProxy
+{
+  GDBusProxy parent_instance;
+  PhoneuiMessagesProxyPrivate *priv;
+};
 
-void phoneui_messages_complete_create_message (
-        PhoneuiMessages *object,
-        GDBusMethodInvocation *invocation);
+struct _PhoneuiMessagesProxyClass
+{
+  GDBusProxyClass parent_class;
+};
+
+GType phoneui_messages_proxy_get_type (void) G_GNUC_CONST;
+
+void phoneui_messages_proxy_new (
+    GDBusConnection     *connection,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GAsyncReadyCallback  callback,
+    gpointer             user_data);
+PhoneuiMessages *phoneui_messages_proxy_new_finish (
+    GAsyncResult        *res,
+    GError             **error);
+PhoneuiMessages *phoneui_messages_proxy_new_sync (
+    GDBusConnection     *connection,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GError             **error);
+
+void phoneui_messages_proxy_new_for_bus (
+    GBusType             bus_type,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GAsyncReadyCallback  callback,
+    gpointer             user_data);
+PhoneuiMessages *phoneui_messages_proxy_new_for_bus_finish (
+    GAsyncResult        *res,
+    GError             **error);
+PhoneuiMessages *phoneui_messages_proxy_new_for_bus_sync (
+    GBusType             bus_type,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GError             **error);
+
+
+/* ---- */
+
+#define TYPE_PHONEUI_MESSAGES_SKELETON (phoneui_messages_skeleton_get_type ())
+#define PHONEUI_MESSAGES_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_PHONEUI_MESSAGES_SKELETON, PhoneuiMessagesSkeleton))
+#define PHONEUI_MESSAGES_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_PHONEUI_MESSAGES_SKELETON, PhoneuiMessagesSkeletonClass))
+#define PHONEUI_MESSAGES_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_PHONEUI_MESSAGES_SKELETON, PhoneuiMessagesSkeletonClass))
+#define IS_PHONEUI_MESSAGES_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_PHONEUI_MESSAGES_SKELETON))
+#define IS_PHONEUI_MESSAGES_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_PHONEUI_MESSAGES_SKELETON))
+
+typedef struct _PhoneuiMessagesSkeleton PhoneuiMessagesSkeleton;
+typedef struct _PhoneuiMessagesSkeletonClass PhoneuiMessagesSkeletonClass;
+typedef struct _PhoneuiMessagesSkeletonPrivate PhoneuiMessagesSkeletonPrivate;
+
+struct _PhoneuiMessagesSkeleton
+{
+  GDBusInterfaceSkeleton parent_instance;
+  PhoneuiMessagesSkeletonPrivate *priv;
+};
+
+struct _PhoneuiMessagesSkeletonClass
+{
+  GDBusInterfaceSkeletonClass parent_class;
+};
 
+GType phoneui_messages_skeleton_get_type (void) G_GNUC_CONST;
 
+PhoneuiMessages *phoneui_messages_skeleton_new (void);
 
-/* D-Bus Signal Emission Helpers */
 
 G_END_DECLS
 
-#endif /* __SHR_PHONEUI_MESSAGES_H__ */
+#endif /* __SHR_PHONEUIMESSAGES_H__ */
diff --git a/src/shr-phoneuinotification.c b/src/shr-phoneuinotification.c
index 0466c89..50e198f 100644
--- a/src/shr-phoneuinotification.c
+++ b/src/shr-phoneuinotification.c
@@ -1,1829 +1,1283 @@
-/* File:       shr-phoneuinotification.c
+/*
+ * Generated by gdbus-codegen 2.29.3. DO NOT EDIT.
  *
- * GType name: PhoneuiNotification
- * D-Bus name: org.shr.phoneui.Notification
- *
- * Generated by GDBus Binding Tool 0.1. DO NOT EDIT.
+ * The license of this code is the same as for the source it was derived from.
+ */
+
+#ifdef HAVE_CONFIG_H
+#  include "config.h"
+#endif
+
+#include "shr-phoneuinotification.h"
+
+typedef struct
+{
+  GDBusArgInfo parent_struct;
+  gboolean use_gvariant;
+} _ExtendedGDBusArgInfo;
+
+typedef struct
+{
+  GDBusMethodInfo parent_struct;
+  const gchar *signal_name;
+} _ExtendedGDBusMethodInfo;
+
+typedef struct
+{
+  GDBusSignalInfo parent_struct;
+  const gchar *signal_name;
+} _ExtendedGDBusSignalInfo;
+
+typedef struct
+{
+  GDBusPropertyInfo parent_struct;
+  const gchar *hyphen_name;
+  gboolean use_gvariant;
+} _ExtendedGDBusPropertyInfo;
+
+typedef struct
+{
+  GDBusInterfaceInfo parent_struct;
+  const gchar *hyphen_name;
+} _ExtendedGDBusInterfaceInfo;
+
+typedef struct
+{
+  const _ExtendedGDBusPropertyInfo *info;
+  guint prop_id;
+  GValue orig_value; /* the value before the change */
+} ChangedProperty;
+
+static void
+_changed_property_free (ChangedProperty *data)
+{
+  g_value_unset (&data->orig_value);
+  g_free (data);
+}
+
+static gboolean
+_g_strv_equal0 (gchar **a, gchar **b)
+{
+  gboolean ret = FALSE;
+  guint n;
+  if (a == NULL && b == NULL)
+    {
+      ret = TRUE;
+      goto out;
+    }
+  if (a == NULL || b == NULL)
+    goto out;
+  if (g_strv_length (a) != g_strv_length (b))
+    goto out;
+  for (n = 0; a[n] != NULL; n++)
+    if (g_strcmp0 (a[n], b[n]) != 0)
+      goto out;
+  ret = TRUE;
+out:
+  return ret;
+}
+
+static gboolean
+_g_variant_equal0 (GVariant *a, GVariant *b)
+{
+  gboolean ret = FALSE;
+  if (a == NULL && b == NULL)
+    {
+      ret = TRUE;
+      goto out;
+    }
+  if (a == NULL || b == NULL)
+    goto out;
+  ret = g_variant_equal (a, b);
+out:
+  return ret;
+}
+
+G_GNUC_UNUSED static gboolean
+_g_value_equal (const GValue *a, const GValue *b)
+{
+  gboolean ret = FALSE;
+  g_assert (G_VALUE_TYPE (a) == G_VALUE_TYPE (b));
+  switch (G_VALUE_TYPE (a))
+    {
+      case G_TYPE_BOOLEAN:
+        ret = (g_value_get_boolean (a) == g_value_get_boolean (b));
+        break;
+      case G_TYPE_UCHAR:
+        ret = (g_value_get_uchar (a) == g_value_get_uchar (b));
+        break;
+      case G_TYPE_INT:
+        ret = (g_value_get_int (a) == g_value_get_int (b));
+        break;
+      case G_TYPE_UINT:
+        ret = (g_value_get_uint (a) == g_value_get_uint (b));
+        break;
+      case G_TYPE_INT64:
+        ret = (g_value_get_int64 (a) == g_value_get_int64 (b));
+        break;
+      case G_TYPE_UINT64:
+        ret = (g_value_get_uint64 (a) == g_value_get_uint64 (b));
+        break;
+      case G_TYPE_DOUBLE:
+        ret = (g_value_get_double (a) == g_value_get_double (b));
+        break;
+      case G_TYPE_STRING:
+        ret = (g_strcmp0 (g_value_get_string (a), g_value_get_string (b)) == 0);
+        break;
+      case G_TYPE_VARIANT:
+        ret = _g_variant_equal0 (g_value_get_variant (a), g_value_get_variant (b));
+        break;
+      default:
+        if (G_VALUE_TYPE (a) == G_TYPE_STRV)
+          ret = _g_strv_equal0 (g_value_get_boxed (a), g_value_get_boxed (b));
+        else
+          g_critical ("_g_value_equal() does not handle type %s", g_type_name (G_VALUE_TYPE (a)));
+        break;
+    }
+  return ret;
+}
+
+/* ------------------------------------------------------------------------
+ * Code for interface org.shr.phoneui.Notification
+ * ------------------------------------------------------------------------
  */
 
 /**
- * SECTION:shr-phoneuinotification
+ * SECTION:PhoneuiNotification
  * @title: PhoneuiNotification
- * @short_description: Wraps the org.shr.phoneui.Notification D-Bus interface
- * @include: gio/gio.h
- *
- * The abstract #PhoneuiNotification interface type wraps the <literal>org.shr.phoneui.Notification</literal> D-Bus interface. Two concrete implementations exists: #PhoneuiNotificationProxy (for client-side usage) and #PhoneuiNotificationStub (for service-side usage).
- *
- * This code was generated from the following D-Bus introspection XML:
- * <programlisting><![CDATA[
- * <interface name="org.shr.phoneui.Notification">
- *   <method name="DisplaySimAuth">
- *     <annotation name="org.freedesktop.DBus.GLib.Async" value="true">
- *     </annotation>
- *     <arg type="i" name="status" direction="in">
- *     </arg>
- *   </method>
- *   <method name="HideSimAuth">
- *     <annotation name="org.freedesktop.DBus.GLib.Async" value="true">
- *     </annotation>
- *     <arg type="i" name="status" direction="in">
- *     </arg>
- *   </method>
- *   <method name="DisplayUssd">
- *     <annotation name="org.freedesktop.DBus.GLib.Async" value="true">
- *     </annotation>
- *     <arg type="i" name="mode" direction="in">
- *     </arg>
- *     <arg type="s" name="message" direction="in">
- *     </arg>
- *   </method>
- *   <method name="DisplayDialog">
- *     <annotation name="org.freedesktop.DBus.GLib.Async" value="true">
- *     </annotation>
- *     <arg type="i" name="dialog" direction="in">
- *     </arg>
- *   </method>
- *   <method name="FeedbackAction">
- *     <annotation name="org.freedesktop.DBus.GLib.Async" value="true">
- *     </annotation>
- *     <arg type="s" name="action" direction="in">
- *     </arg>
- *     <arg type="s" name="level" direction="in">
- *     </arg>
- *   </method>
- * </interface>
- * ]]></programlisting>
+ * @short_description: Generated C code for the org.shr.phoneui.Notification D-Bus interface
  *
+ * This section contains code for working with the <link linkend="gdbus-interface-org-shr-phoneui-Notification.top_of_page">org.shr.phoneui.Notification</link> D-Bus interface in C.
  */
 
-#include <shr-phoneuinotification.h>
-#include <shr-types.h>
-#include <shr-bindingsprivate.h>
-#include <shr-marshallers.h>
-
-static guint phoneui_notification_register_object (GDBusInterface *object,
-                    GDBusConnection *connection,
-                    const gchar *object_path,
-                    GError **error);
-static void phoneui_notification_flush (GDBusInterface *object);
-static GVariant *phoneui_notification_get_properties (GDBusInterface *object);
-static GDBusInterfaceInfo *phoneui_notification_g_dbus_interface_interface_info (GDBusInterface *object);
-static GDBusObject *phoneui_notification_g_dbus_interface_get_object (GDBusInterface *interface);
-static void phoneui_notification_g_dbus_interface_set_object (GDBusInterface *interface, GDBusObject *object);
-static GDBusInterfaceFlags phoneui_notification_g_dbus_interface_get_flags (GDBusInterface *interface);
-static void phoneui_notification_g_dbus_interface_set_flags (GDBusInterface *interface, GDBusInterfaceFlags flags);
+/* ---- Introspection data for org.shr.phoneui.Notification ---- */
 
-typedef PhoneuiNotificationIface PhoneuiNotificationInterface;
-#define phoneui_notification_get_type phoneui_notification_get_gtype
-G_DEFINE_INTERFACE (PhoneuiNotification, phoneui_notification, G_TYPE_OBJECT);
-#undef phoneui_notification_get_type
+static const _ExtendedGDBusArgInfo _phoneui_notification_method_info_display_sim_auth_IN_ARG_status =
+{
+  {
+    -1,
+    "status",
+    "i",
+    NULL
+  },
+  FALSE
+};
+
+static const _ExtendedGDBusArgInfo * const _phoneui_notification_method_info_display_sim_auth_IN_ARG_pointers[] =
+{
+  &_phoneui_notification_method_info_display_sim_auth_IN_ARG_status,
+  NULL
+};
+
+static const GDBusAnnotationInfo _phoneui_notification_method_display_sim_auth_annotation_info_0 =
+{
+  -1,
+  "org.freedesktop.DBus.GLib.Async",
+  "true",
+  NULL
+};
 
+static const GDBusAnnotationInfo * const _phoneui_notification_method_display_sim_auth_annotation_info_pointers[] =
+{
+  &_phoneui_notification_method_display_sim_auth_annotation_info_0,
+  NULL
+};
 
-enum
+static const _ExtendedGDBusMethodInfo _phoneui_notification_method_info_display_sim_auth =
 {
-  _0_SIGNAL,
-  __DISPLAY_SIM_AUTH_METHOD,
-  __HIDE_SIM_AUTH_METHOD,
-  __DISPLAY_USSD_METHOD,
-  __DISPLAY_DIALOG_METHOD,
-  __FEEDBACK_ACTION_METHOD,
-  __LAST_SIGNAL
+  {
+    -1,
+    "DisplaySimAuth",
+    (GDBusArgInfo **) &_phoneui_notification_method_info_display_sim_auth_IN_ARG_pointers,
+    NULL,
+    (GDBusAnnotationInfo **) &_phoneui_notification_method_display_sim_auth_annotation_info_pointers
+  },
+  "handle-display-sim-auth"
 };
 
-static guint signals[__LAST_SIGNAL] = {0};
+static const _ExtendedGDBusArgInfo _phoneui_notification_method_info_hide_sim_auth_IN_ARG_status =
+{
+  {
+    -1,
+    "status",
+    "i",
+    NULL
+  },
+  FALSE
+};
 
+static const _ExtendedGDBusArgInfo * const _phoneui_notification_method_info_hide_sim_auth_IN_ARG_pointers[] =
+{
+  &_phoneui_notification_method_info_hide_sim_auth_IN_ARG_status,
+  NULL
+};
 
-enum
+static const GDBusAnnotationInfo _phoneui_notification_method_hide_sim_auth_annotation_info_0 =
 {
-  PROP_0,
+  -1,
+  "org.freedesktop.DBus.GLib.Async",
+  "true",
+  NULL
 };
 
-/* ------------------------------------------------------------------------- */
+static const GDBusAnnotationInfo * const _phoneui_notification_method_hide_sim_auth_annotation_info_pointers[] =
+{
+  &_phoneui_notification_method_hide_sim_auth_annotation_info_0,
+  NULL
+};
 
-/* Various lookup tables */
+static const _ExtendedGDBusMethodInfo _phoneui_notification_method_info_hide_sim_auth =
+{
+  {
+    -1,
+    "HideSimAuth",
+    (GDBusArgInfo **) &_phoneui_notification_method_info_hide_sim_auth_IN_ARG_pointers,
+    NULL,
+    (GDBusAnnotationInfo **) &_phoneui_notification_method_hide_sim_auth_annotation_info_pointers
+  },
+  "handle-hide-sim-auth"
+};
 
-static GHashTable *_method_name_to_id = NULL;
-static GHashTable *_signal_name_to_id = NULL;
-static GHashTable *_property_name_to_id = NULL;
-static GHashTable *_property_gname_to_name = NULL;
-static GHashTable *_property_name_to_gname = NULL;
+static const _ExtendedGDBusArgInfo _phoneui_notification_method_info_display_ussd_IN_ARG_mode =
+{
+  {
+    -1,
+    "mode",
+    "i",
+    NULL
+  },
+  FALSE
+};
 
+static const _ExtendedGDBusArgInfo _phoneui_notification_method_info_display_ussd_IN_ARG_message =
+{
+  {
+    -1,
+    "message",
+    "s",
+    NULL
+  },
+  FALSE
+};
 
-static guint
-lookup_method_id_from_method_name (const gchar *method_name)
+static const _ExtendedGDBusArgInfo * const _phoneui_notification_method_info_display_ussd_IN_ARG_pointers[] =
 {
-  return GPOINTER_TO_UINT (g_hash_table_lookup (_method_name_to_id, method_name));
-}
+  &_phoneui_notification_method_info_display_ussd_IN_ARG_mode,
+  &_phoneui_notification_method_info_display_ussd_IN_ARG_message,
+  NULL
+};
 
-static guint
-lookup_signal_id_from_signal_name (const gchar *signal_name)
+static const GDBusAnnotationInfo _phoneui_notification_method_display_ussd_annotation_info_0 =
 {
-  return GPOINTER_TO_UINT (g_hash_table_lookup (_signal_name_to_id, signal_name));
-}
+  -1,
+  "org.freedesktop.DBus.GLib.Async",
+  "true",
+  NULL
+};
 
-static guint
-lookup_property_id_from_property_name (const gchar *property_name)
+static const GDBusAnnotationInfo * const _phoneui_notification_method_display_ussd_annotation_info_pointers[] =
 {
-  return GPOINTER_TO_UINT (g_hash_table_lookup (_property_name_to_id, property_name));
-}
+  &_phoneui_notification_method_display_ussd_annotation_info_0,
+  NULL
+};
 
-static const gchar *
-lookup_property_name_from_property_gname (const gchar *property_gname)
+static const _ExtendedGDBusMethodInfo _phoneui_notification_method_info_display_ussd =
 {
-  return g_hash_table_lookup (_property_gname_to_name, property_gname);
-}
+  {
+    -1,
+    "DisplayUssd",
+    (GDBusArgInfo **) &_phoneui_notification_method_info_display_ussd_IN_ARG_pointers,
+    NULL,
+    (GDBusAnnotationInfo **) &_phoneui_notification_method_display_ussd_annotation_info_pointers
+  },
+  "handle-display-ussd"
+};
 
-static const gchar *
-lookup_property_gname_from_property_name (const gchar *property_name)
+static const _ExtendedGDBusArgInfo _phoneui_notification_method_info_display_dialog_IN_ARG_dialog =
 {
-  return g_hash_table_lookup (_property_name_to_gname, property_name);
-}
+  {
+    -1,
+    "dialog",
+    "i",
+    NULL
+  },
+  FALSE
+};
 
-/* ------------------------------------------------------------------------- */
-static void dbus_iface_init (GDBusInterfaceIface *iface)
-{
-  iface->get_info = phoneui_notification_g_dbus_interface_interface_info;
-  iface->get_properties = phoneui_notification_get_properties;
-  iface->flush = phoneui_notification_flush;
-  iface->register_object = phoneui_notification_register_object;
-  iface->set_object = phoneui_notification_g_dbus_interface_set_object;
-  iface->get_object = phoneui_notification_g_dbus_interface_get_object;
-  iface->set_flags = phoneui_notification_g_dbus_interface_set_flags;
-  iface->get_flags = phoneui_notification_g_dbus_interface_get_flags;
-}
+static const _ExtendedGDBusArgInfo * const _phoneui_notification_method_info_display_dialog_IN_ARG_pointers[] =
+{
+  &_phoneui_notification_method_info_display_dialog_IN_ARG_dialog,
+  NULL
+};
 
-static void
-phoneui_notification_default_init (PhoneuiNotificationIface *iface)
+static const GDBusAnnotationInfo _phoneui_notification_method_display_dialog_annotation_info_0 =
+{
+  -1,
+  "org.freedesktop.DBus.GLib.Async",
+  "true",
+  NULL
+};
+
+static const GDBusAnnotationInfo * const _phoneui_notification_method_display_dialog_annotation_info_pointers[] =
+{
+  &_phoneui_notification_method_display_dialog_annotation_info_0,
+  NULL
+};
+
+static const _ExtendedGDBusMethodInfo _phoneui_notification_method_info_display_dialog =
+{
+  {
+    -1,
+    "DisplayDialog",
+    (GDBusArgInfo **) &_phoneui_notification_method_info_display_dialog_IN_ARG_pointers,
+    NULL,
+    (GDBusAnnotationInfo **) &_phoneui_notification_method_display_dialog_annotation_info_pointers
+  },
+  "handle-display-dialog"
+};
+
+static const _ExtendedGDBusArgInfo _phoneui_notification_method_info_feedback_action_IN_ARG_action =
+{
+  {
+    -1,
+    "action",
+    "s",
+    NULL
+  },
+  FALSE
+};
+
+static const _ExtendedGDBusArgInfo _phoneui_notification_method_info_feedback_action_IN_ARG_level =
+{
+  {
+    -1,
+    "level",
+    "s",
+    NULL
+  },
+  FALSE
+};
+
+static const _ExtendedGDBusArgInfo * const _phoneui_notification_method_info_feedback_action_IN_ARG_pointers[] =
+{
+  &_phoneui_notification_method_info_feedback_action_IN_ARG_action,
+  &_phoneui_notification_method_info_feedback_action_IN_ARG_level,
+  NULL
+};
+
+static const GDBusAnnotationInfo _phoneui_notification_method_feedback_action_annotation_info_0 =
+{
+  -1,
+  "org.freedesktop.DBus.GLib.Async",
+  "true",
+  NULL
+};
+
+static const GDBusAnnotationInfo * const _phoneui_notification_method_feedback_action_annotation_info_pointers[] =
+{
+  &_phoneui_notification_method_feedback_action_annotation_info_0,
+  NULL
+};
+
+static const _ExtendedGDBusMethodInfo _phoneui_notification_method_info_feedback_action =
+{
+  {
+    -1,
+    "FeedbackAction",
+    (GDBusArgInfo **) &_phoneui_notification_method_info_feedback_action_IN_ARG_pointers,
+    NULL,
+    (GDBusAnnotationInfo **) &_phoneui_notification_method_feedback_action_annotation_info_pointers
+  },
+  "handle-feedback-action"
+};
+
+static const _ExtendedGDBusMethodInfo * const _phoneui_notification_method_info_pointers[] =
+{
+  &_phoneui_notification_method_info_display_sim_auth,
+  &_phoneui_notification_method_info_hide_sim_auth,
+  &_phoneui_notification_method_info_display_ussd,
+  &_phoneui_notification_method_info_display_dialog,
+  &_phoneui_notification_method_info_feedback_action,
+  NULL
+};
+
+static const _ExtendedGDBusInterfaceInfo _phoneui_notification_interface_info =
+{
+  {
+    -1,
+    "org.shr.phoneui.Notification",
+    (GDBusMethodInfo **) &_phoneui_notification_method_info_pointers,
+    NULL,
+    NULL,
+    NULL
+  },
+  "phoneui-notification",
+};
+
+
+/**
+ * phoneui_notification_interface_info:
+ *
+ * Gets a machine-readable description of the <link linkend="gdbus-interface-org-shr-phoneui-Notification.top_of_page">org.shr.phoneui.Notification</link> D-Bus interface.
+ *
+ * Returns: (transfer none): A #GDBusInterfaceInfo. Do not free.
+ */
+GDBusInterfaceInfo *
+phoneui_notification_interface_info (void)
 {
+  return (GDBusInterfaceInfo *) &_phoneui_notification_interface_info;
+}
+
 
-  /* Build lookup structures */
-  _method_name_to_id = g_hash_table_new (g_str_hash, g_str_equal);
-  _signal_name_to_id = g_hash_table_new (g_str_hash, g_str_equal);
-  _property_name_to_id = g_hash_table_new (g_str_hash, g_str_equal);
-  _property_gname_to_name = g_hash_table_new (g_str_hash, g_str_equal);
-  _property_name_to_gname = g_hash_table_new (g_str_hash, g_str_equal);
-  g_hash_table_insert (_method_name_to_id, "DisplaySimAuth", GUINT_TO_POINTER (__DISPLAY_SIM_AUTH_METHOD));
-  g_hash_table_insert (_method_name_to_id, "HideSimAuth", GUINT_TO_POINTER (__HIDE_SIM_AUTH_METHOD));
-  g_hash_table_insert (_method_name_to_id, "DisplayUssd", GUINT_TO_POINTER (__DISPLAY_USSD_METHOD));
-  g_hash_table_insert (_method_name_to_id, "DisplayDialog", GUINT_TO_POINTER (__DISPLAY_DIALOG_METHOD));
-  g_hash_table_insert (_method_name_to_id, "FeedbackAction", GUINT_TO_POINTER (__FEEDBACK_ACTION_METHOD));
 
-  /* GObject signals definitions for D-Bus signals: */
+/**
+ * PhoneuiNotification:
+ *
+ * Abstract interface type for the D-Bus interface <link linkend="gdbus-interface-org-shr-phoneui-Notification.top_of_page">org.shr.phoneui.Notification</link>.
+ */
+
+/**
+ * PhoneuiNotificationIface:
+ * @parent_iface: The parent interface.
+ * @handle_display_dialog: Handler for the #PhoneuiNotification::handle-display-dialog signal.
+ * @handle_display_sim_auth: Handler for the #PhoneuiNotification::handle-display-sim-auth signal.
+ * @handle_display_ussd: Handler for the #PhoneuiNotification::handle-display-ussd signal.
+ * @handle_feedback_action: Handler for the #PhoneuiNotification::handle-feedback-action signal.
+ * @handle_hide_sim_auth: Handler for the #PhoneuiNotification::handle-hide-sim-auth signal.
+ *
+ * Virtual table for the D-Bus interface <link linkend="gdbus-interface-org-shr-phoneui-Notification.top_of_page">org.shr.phoneui.Notification</link>.
+ */
 
-  /* GObject signals definitions for D-Bus methods: */
+static void
+phoneui_notification_default_init (PhoneuiNotificationIface *iface)
+{
+  /* GObject signals for incoming D-Bus method calls: */
   /**
    * PhoneuiNotification::handle-display-sim-auth:
-   * @object: The exported object emitting the signal.
-   * @invocation: A #GDBusMethodInvocation object that can be used to return a value or error.
-   * @status: Parameter.
-   *
-   * On exported objects, this signal is emitted when a remote process (identified by @invocation) invokes the <literal>org.shr.phoneui.Notification.DisplaySimAuth()</literal> D-Bus method on @object. Use phoneui_notification_complete_display_sim_auth() to return a value or g_dbus_method_invocation_return_error() to return an error.
+   * @object: A #PhoneuiNotification.
+   * @invocation: A #GDBusMethodInvocation.
+   * @status: Argument passed by remote caller.
    *
-   * The signal is emitted in the
-   * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
-   * of the thread that @object was registered in.
+   * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-shr-phoneui-Notification.DisplaySimAuth">DisplaySimAuth()</link> D-Bus method.
    *
-   * On proxies, this signal is never emitted.
+   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phoneui_notification_complete_display_sim_auth() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
    *
-   * Returns: %TRUE if you want to handle the method call (will stop further handlers from being called), %FALSE otherwise.
+   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
    */
-  signals[__DISPLAY_SIM_AUTH_METHOD] =
-    g_signal_new ("handle-display-sim-auth",
-                  G_TYPE_FROM_INTERFACE (iface),
-                  G_SIGNAL_RUN_LAST,
-                  G_STRUCT_OFFSET (PhoneuiNotificationIface, handle_display_sim_auth),
-                  g_signal_accumulator_true_handled,
-                  NULL,
-                  _shr_gdbus_cclosure_marshaller_BOOLEAN__OBJECT_INT,
-                  G_TYPE_BOOLEAN,
-                  2,
-                  G_TYPE_DBUS_METHOD_INVOCATION,
-                  G_TYPE_INT);
+  g_signal_new ("handle-display-sim-auth",
+    G_TYPE_FROM_INTERFACE (iface),
+    G_SIGNAL_RUN_LAST,
+    G_STRUCT_OFFSET (PhoneuiNotificationIface, handle_display_sim_auth),
+    g_signal_accumulator_true_handled,
+    NULL,
+    g_cclosure_marshal_generic,
+    G_TYPE_BOOLEAN,
+    2,
+    G_TYPE_DBUS_METHOD_INVOCATION, G_TYPE_INT);
+
   /**
    * PhoneuiNotification::handle-hide-sim-auth:
-   * @object: The exported object emitting the signal.
-   * @invocation: A #GDBusMethodInvocation object that can be used to return a value or error.
-   * @status: Parameter.
-   *
-   * On exported objects, this signal is emitted when a remote process (identified by @invocation) invokes the <literal>org.shr.phoneui.Notification.HideSimAuth()</literal> D-Bus method on @object. Use phoneui_notification_complete_hide_sim_auth() to return a value or g_dbus_method_invocation_return_error() to return an error.
+   * @object: A #PhoneuiNotification.
+   * @invocation: A #GDBusMethodInvocation.
+   * @status: Argument passed by remote caller.
    *
-   * The signal is emitted in the
-   * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
-   * of the thread that @object was registered in.
+   * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-shr-phoneui-Notification.HideSimAuth">HideSimAuth()</link> D-Bus method.
    *
-   * On proxies, this signal is never emitted.
+   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phoneui_notification_complete_hide_sim_auth() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
    *
-   * Returns: %TRUE if you want to handle the method call (will stop further handlers from being called), %FALSE otherwise.
+   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
    */
-  signals[__HIDE_SIM_AUTH_METHOD] =
-    g_signal_new ("handle-hide-sim-auth",
-                  G_TYPE_FROM_INTERFACE (iface),
-                  G_SIGNAL_RUN_LAST,
-                  G_STRUCT_OFFSET (PhoneuiNotificationIface, handle_hide_sim_auth),
-                  g_signal_accumulator_true_handled,
-                  NULL,
-                  _shr_gdbus_cclosure_marshaller_BOOLEAN__OBJECT_INT,
-                  G_TYPE_BOOLEAN,
-                  2,
-                  G_TYPE_DBUS_METHOD_INVOCATION,
-                  G_TYPE_INT);
+  g_signal_new ("handle-hide-sim-auth",
+    G_TYPE_FROM_INTERFACE (iface),
+    G_SIGNAL_RUN_LAST,
+    G_STRUCT_OFFSET (PhoneuiNotificationIface, handle_hide_sim_auth),
+    g_signal_accumulator_true_handled,
+    NULL,
+    g_cclosure_marshal_generic,
+    G_TYPE_BOOLEAN,
+    2,
+    G_TYPE_DBUS_METHOD_INVOCATION, G_TYPE_INT);
+
   /**
    * PhoneuiNotification::handle-display-ussd:
-   * @object: The exported object emitting the signal.
-   * @invocation: A #GDBusMethodInvocation object that can be used to return a value or error.
-   * @mode: Parameter.
-   * @message: Parameter.
-   *
-   * On exported objects, this signal is emitted when a remote process (identified by @invocation) invokes the <literal>org.shr.phoneui.Notification.DisplayUssd()</literal> D-Bus method on @object. Use phoneui_notification_complete_display_ussd() to return a value or g_dbus_method_invocation_return_error() to return an error.
+   * @object: A #PhoneuiNotification.
+   * @invocation: A #GDBusMethodInvocation.
+   * @mode: Argument passed by remote caller.
+   * @message: Argument passed by remote caller.
    *
-   * The signal is emitted in the
-   * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
-   * of the thread that @object was registered in.
+   * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-shr-phoneui-Notification.DisplayUssd">DisplayUssd()</link> D-Bus method.
    *
-   * On proxies, this signal is never emitted.
+   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phoneui_notification_complete_display_ussd() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
    *
-   * Returns: %TRUE if you want to handle the method call (will stop further handlers from being called), %FALSE otherwise.
+   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
    */
-  signals[__DISPLAY_USSD_METHOD] =
-    g_signal_new ("handle-display-ussd",
-                  G_TYPE_FROM_INTERFACE (iface),
-                  G_SIGNAL_RUN_LAST,
-                  G_STRUCT_OFFSET (PhoneuiNotificationIface, handle_display_ussd),
-                  g_signal_accumulator_true_handled,
-                  NULL,
-                  _shr_gdbus_cclosure_marshaller_BOOLEAN__OBJECT_INT_STRING,
-                  G_TYPE_BOOLEAN,
-                  3,
-                  G_TYPE_DBUS_METHOD_INVOCATION,
-                  G_TYPE_INT,
-                  G_TYPE_STRING);
+  g_signal_new ("handle-display-ussd",
+    G_TYPE_FROM_INTERFACE (iface),
+    G_SIGNAL_RUN_LAST,
+    G_STRUCT_OFFSET (PhoneuiNotificationIface, handle_display_ussd),
+    g_signal_accumulator_true_handled,
+    NULL,
+    g_cclosure_marshal_generic,
+    G_TYPE_BOOLEAN,
+    3,
+    G_TYPE_DBUS_METHOD_INVOCATION, G_TYPE_INT, G_TYPE_STRING);
+
   /**
    * PhoneuiNotification::handle-display-dialog:
-   * @object: The exported object emitting the signal.
-   * @invocation: A #GDBusMethodInvocation object that can be used to return a value or error.
-   * @dialog: Parameter.
-   *
-   * On exported objects, this signal is emitted when a remote process (identified by @invocation) invokes the <literal>org.shr.phoneui.Notification.DisplayDialog()</literal> D-Bus method on @object. Use phoneui_notification_complete_display_dialog() to return a value or g_dbus_method_invocation_return_error() to return an error.
+   * @object: A #PhoneuiNotification.
+   * @invocation: A #GDBusMethodInvocation.
+   * @dialog: Argument passed by remote caller.
    *
-   * The signal is emitted in the
-   * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
-   * of the thread that @object was registered in.
+   * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-shr-phoneui-Notification.DisplayDialog">DisplayDialog()</link> D-Bus method.
    *
-   * On proxies, this signal is never emitted.
+   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phoneui_notification_complete_display_dialog() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
    *
-   * Returns: %TRUE if you want to handle the method call (will stop further handlers from being called), %FALSE otherwise.
+   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
    */
-  signals[__DISPLAY_DIALOG_METHOD] =
-    g_signal_new ("handle-display-dialog",
-                  G_TYPE_FROM_INTERFACE (iface),
-                  G_SIGNAL_RUN_LAST,
-                  G_STRUCT_OFFSET (PhoneuiNotificationIface, handle_display_dialog),
-                  g_signal_accumulator_true_handled,
-                  NULL,
-                  _shr_gdbus_cclosure_marshaller_BOOLEAN__OBJECT_INT,
-                  G_TYPE_BOOLEAN,
-                  2,
-                  G_TYPE_DBUS_METHOD_INVOCATION,
-                  G_TYPE_INT);
+  g_signal_new ("handle-display-dialog",
+    G_TYPE_FROM_INTERFACE (iface),
+    G_SIGNAL_RUN_LAST,
+    G_STRUCT_OFFSET (PhoneuiNotificationIface, handle_display_dialog),
+    g_signal_accumulator_true_handled,
+    NULL,
+    g_cclosure_marshal_generic,
+    G_TYPE_BOOLEAN,
+    2,
+    G_TYPE_DBUS_METHOD_INVOCATION, G_TYPE_INT);
+
   /**
    * PhoneuiNotification::handle-feedback-action:
-   * @object: The exported object emitting the signal.
-   * @invocation: A #GDBusMethodInvocation object that can be used to return a value or error.
-   * @action: Parameter.
-   * @level: Parameter.
-   *
-   * On exported objects, this signal is emitted when a remote process (identified by @invocation) invokes the <literal>org.shr.phoneui.Notification.FeedbackAction()</literal> D-Bus method on @object. Use phoneui_notification_complete_feedback_action() to return a value or g_dbus_method_invocation_return_error() to return an error.
+   * @object: A #PhoneuiNotification.
+   * @invocation: A #GDBusMethodInvocation.
+   * @action: Argument passed by remote caller.
+   * @level: Argument passed by remote caller.
    *
-   * The signal is emitted in the
-   * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
-   * of the thread that @object was registered in.
+   * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-shr-phoneui-Notification.FeedbackAction">FeedbackAction()</link> D-Bus method.
    *
-   * On proxies, this signal is never emitted.
+   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phoneui_notification_complete_feedback_action() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
    *
-   * Returns: %TRUE if you want to handle the method call (will stop further handlers from being called), %FALSE otherwise.
+   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
    */
-  signals[__FEEDBACK_ACTION_METHOD] =
-    g_signal_new ("handle-feedback-action",
-                  G_TYPE_FROM_INTERFACE (iface),
-                  G_SIGNAL_RUN_LAST,
-                  G_STRUCT_OFFSET (PhoneuiNotificationIface, handle_feedback_action),
-                  g_signal_accumulator_true_handled,
-                  NULL,
-                  _shr_gdbus_cclosure_marshaller_BOOLEAN__OBJECT_STRING_STRING,
-                  G_TYPE_BOOLEAN,
-                  3,
-                  G_TYPE_DBUS_METHOD_INVOCATION,
-                  G_TYPE_STRING,
-                  G_TYPE_STRING);
-
-  /* GObject property definitions for D-Bus properties: */
-}
+  g_signal_new ("handle-feedback-action",
+    G_TYPE_FROM_INTERFACE (iface),
+    G_SIGNAL_RUN_LAST,
+    G_STRUCT_OFFSET (PhoneuiNotificationIface, handle_feedback_action),
+    g_signal_accumulator_true_handled,
+    NULL,
+    g_cclosure_marshal_generic,
+    G_TYPE_BOOLEAN,
+    3,
+    G_TYPE_DBUS_METHOD_INVOCATION, G_TYPE_STRING, G_TYPE_STRING);
 
+}
 
-/* C Bindings for properties */
+typedef PhoneuiNotificationIface PhoneuiNotificationInterface;
+G_DEFINE_INTERFACE (PhoneuiNotification, phoneui_notification, G_TYPE_OBJECT);
 
 /**
  * phoneui_notification_call_display_sim_auth:
- * @proxy: A #PhoneuiNotification.
- * @status: Method parameter.
- * @cancellable: A #GCancellable or %NULL.
- * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL if you don't care about the result of the method invocation.
- * @user_data: Data to pass to @callback.
- *
- * Invokes the <literal>org.shr.phoneui.Notification.DisplaySimAuth()</literal>
- * D-Bus method on the remote object represented by @proxy.
- *
- * This is an asynchronous method. When the operation is finished,
- * callback will be invoked in the
- * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
- * of the thread you are calling this method from. You can then call
- * phoneui_notification_call_display_sim_auth_finish() to get the result of the operation.
- * See phoneui_notification_call_display_sim_auth_sync() for the synchronous version of this method.
+ * @proxy: A #PhoneuiNotificationProxy.
+ * @status: Argument to pass with the method invocation.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL.
+ * @user_data: User data to pass to @callback.
+ *
+ * Asynchronously invokes the <link linkend="gdbus-method-org-shr-phoneui-Notification.DisplaySimAuth">DisplaySimAuth()</link> D-Bus method on @proxy.
+ * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
+ * You can then call phoneui_notification_call_display_sim_auth_finish() to get the result of the operation.
+ *
+ * See phoneui_notification_call_display_sim_auth_sync() for the synchronous, blocking version of this method.
  */
-void phoneui_notification_call_display_sim_auth (
-        PhoneuiNotification *proxy,
-        gint status,
-        GCancellable *cancellable,
-        GAsyncReadyCallback callback,
-        gpointer user_data)
-{
-  GVariant *_params;
-  _params = g_variant_new ("(i)",
-                           status);
+void
+phoneui_notification_call_display_sim_auth (
+    PhoneuiNotification *proxy,
+    gint status,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data)
+{
   g_dbus_proxy_call (G_DBUS_PROXY (proxy),
-                     "DisplaySimAuth",
-                     _params,
-                     G_DBUS_CALL_FLAGS_NONE,
-                     -1,
-                     cancellable,
-                     callback,
-                     user_data);
+    "DisplaySimAuth",
+    g_variant_new ("(i)",
+                   status),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    callback,
+    user_data);
 }
 
 /**
  * phoneui_notification_call_display_sim_auth_finish:
- * @proxy: A #PhoneuiNotification.
- * @res: A #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_notification_call_display_sim_auth().
+ * @proxy: A #PhoneuiNotificationProxy.
+ * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_notification_call_display_sim_auth().
  * @error: Return location for error or %NULL.
  *
- * Finishes invoking the <literal>org.shr.phoneui.Notification.DisplaySimAuth()</literal>
- * D-Bus method on the remote object represented by @proxy.
+ * Finishes an operation started with phoneui_notification_call_display_sim_auth().
  *
- * Returns: %TRUE if the call succeeded, %FALSE if @error is set.
+ * Returns: %TRUE if the call succeded, %FALSE if @error is set.
  */
-gboolean phoneui_notification_call_display_sim_auth_finish (
-        PhoneuiNotification *proxy,
-        GAsyncResult *res,
-        GError **error)
-{
-  gboolean _ret = FALSE;
-  GVariant *_result;
-  _result = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
-  if (_result == NULL)
+gboolean
+phoneui_notification_call_display_sim_auth_finish (
+    PhoneuiNotification *proxy,
+    GAsyncResult *res,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
+  if (_ret == NULL)
     goto _out;
-  g_variant_unref (_result);
-  _ret = TRUE;
+  g_variant_get (_ret,
+                 "()");
+  g_variant_unref (_ret);
 _out:
-  return _ret;
+  return _ret != NULL;
 }
 
 /**
  * phoneui_notification_call_display_sim_auth_sync:
- * @proxy: A #PhoneuiNotification.
- * @status: Method parameter.
- * @cancellable: A #GCancellable or %NULL.
+ * @proxy: A #PhoneuiNotificationProxy.
+ * @status: Argument to pass with the method invocation.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
  * @error: Return location for error or %NULL.
  *
- * Synchronously invokes the <literal>org.shr.phoneui.Notification.DisplaySimAuth()</literal>
- * D-Bus method on the remote object represented by @proxy.
- * The calling thread is blocked until a reply is received. See
- * phoneui_notification_call_display_sim_auth() for the asynchronous version of this method.
+ * Synchronously invokes the <link linkend="gdbus-method-org-shr-phoneui-Notification.DisplaySimAuth">DisplaySimAuth()</link> D-Bus method on @proxy. The calling thread is blocked until a reply is received.
  *
- * Returns: %TRUE if the call succeeded, %FALSE if @error is set.
+ * See phoneui_notification_call_display_sim_auth() for the asynchronous version of this method.
+ *
+ * Returns: %TRUE if the call succeded, %FALSE if @error is set.
  */
-gboolean phoneui_notification_call_display_sim_auth_sync (
-        PhoneuiNotification *proxy,
-        gint status,
-        GCancellable *cancellable,
-        GError **error)
-{
-  gboolean _ret = FALSE;
-  GVariant *_params;
-  GVariant *_result;
-  _params = g_variant_new ("(i)",
-                           status);
-  _result = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
-                                   "DisplaySimAuth",
-                                   _params,
-                                   G_DBUS_CALL_FLAGS_NONE,
-                                   -1,
-                                   cancellable,
-                                   error);
-  if (_result == NULL)
+gboolean
+phoneui_notification_call_display_sim_auth_sync (
+    PhoneuiNotification *proxy,
+    gint status,
+    GCancellable *cancellable,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
+    "DisplaySimAuth",
+    g_variant_new ("(i)",
+                   status),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    error);
+  if (_ret == NULL)
     goto _out;
-  g_variant_unref (_result);
-  _ret = TRUE;
+  g_variant_get (_ret,
+                 "()");
+  g_variant_unref (_ret);
 _out:
-  return _ret;
+  return _ret != NULL;
 }
 
-
 /**
  * phoneui_notification_call_hide_sim_auth:
- * @proxy: A #PhoneuiNotification.
- * @status: Method parameter.
- * @cancellable: A #GCancellable or %NULL.
- * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL if you don't care about the result of the method invocation.
- * @user_data: Data to pass to @callback.
- *
- * Invokes the <literal>org.shr.phoneui.Notification.HideSimAuth()</literal>
- * D-Bus method on the remote object represented by @proxy.
- *
- * This is an asynchronous method. When the operation is finished,
- * callback will be invoked in the
- * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
- * of the thread you are calling this method from. You can then call
- * phoneui_notification_call_hide_sim_auth_finish() to get the result of the operation.
- * See phoneui_notification_call_hide_sim_auth_sync() for the synchronous version of this method.
+ * @proxy: A #PhoneuiNotificationProxy.
+ * @status: Argument to pass with the method invocation.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL.
+ * @user_data: User data to pass to @callback.
+ *
+ * Asynchronously invokes the <link linkend="gdbus-method-org-shr-phoneui-Notification.HideSimAuth">HideSimAuth()</link> D-Bus method on @proxy.
+ * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
+ * You can then call phoneui_notification_call_hide_sim_auth_finish() to get the result of the operation.
+ *
+ * See phoneui_notification_call_hide_sim_auth_sync() for the synchronous, blocking version of this method.
  */
-void phoneui_notification_call_hide_sim_auth (
-        PhoneuiNotification *proxy,
-        gint status,
-        GCancellable *cancellable,
-        GAsyncReadyCallback callback,
-        gpointer user_data)
-{
-  GVariant *_params;
-  _params = g_variant_new ("(i)",
-                           status);
+void
+phoneui_notification_call_hide_sim_auth (
+    PhoneuiNotification *proxy,
+    gint status,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data)
+{
   g_dbus_proxy_call (G_DBUS_PROXY (proxy),
-                     "HideSimAuth",
-                     _params,
-                     G_DBUS_CALL_FLAGS_NONE,
-                     -1,
-                     cancellable,
-                     callback,
-                     user_data);
+    "HideSimAuth",
+    g_variant_new ("(i)",
+                   status),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    callback,
+    user_data);
 }
 
 /**
  * phoneui_notification_call_hide_sim_auth_finish:
- * @proxy: A #PhoneuiNotification.
- * @res: A #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_notification_call_hide_sim_auth().
+ * @proxy: A #PhoneuiNotificationProxy.
+ * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_notification_call_hide_sim_auth().
  * @error: Return location for error or %NULL.
  *
- * Finishes invoking the <literal>org.shr.phoneui.Notification.HideSimAuth()</literal>
- * D-Bus method on the remote object represented by @proxy.
+ * Finishes an operation started with phoneui_notification_call_hide_sim_auth().
  *
- * Returns: %TRUE if the call succeeded, %FALSE if @error is set.
+ * Returns: %TRUE if the call succeded, %FALSE if @error is set.
  */
-gboolean phoneui_notification_call_hide_sim_auth_finish (
-        PhoneuiNotification *proxy,
-        GAsyncResult *res,
-        GError **error)
-{
-  gboolean _ret = FALSE;
-  GVariant *_result;
-  _result = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
-  if (_result == NULL)
+gboolean
+phoneui_notification_call_hide_sim_auth_finish (
+    PhoneuiNotification *proxy,
+    GAsyncResult *res,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
+  if (_ret == NULL)
     goto _out;
-  g_variant_unref (_result);
-  _ret = TRUE;
+  g_variant_get (_ret,
+                 "()");
+  g_variant_unref (_ret);
 _out:
-  return _ret;
+  return _ret != NULL;
 }
 
 /**
  * phoneui_notification_call_hide_sim_auth_sync:
- * @proxy: A #PhoneuiNotification.
- * @status: Method parameter.
- * @cancellable: A #GCancellable or %NULL.
+ * @proxy: A #PhoneuiNotificationProxy.
+ * @status: Argument to pass with the method invocation.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
  * @error: Return location for error or %NULL.
  *
- * Synchronously invokes the <literal>org.shr.phoneui.Notification.HideSimAuth()</literal>
- * D-Bus method on the remote object represented by @proxy.
- * The calling thread is blocked until a reply is received. See
- * phoneui_notification_call_hide_sim_auth() for the asynchronous version of this method.
+ * Synchronously invokes the <link linkend="gdbus-method-org-shr-phoneui-Notification.HideSimAuth">HideSimAuth()</link> D-Bus method on @proxy. The calling thread is blocked until a reply is received.
  *
- * Returns: %TRUE if the call succeeded, %FALSE if @error is set.
+ * See phoneui_notification_call_hide_sim_auth() for the asynchronous version of this method.
+ *
+ * Returns: %TRUE if the call succeded, %FALSE if @error is set.
  */
-gboolean phoneui_notification_call_hide_sim_auth_sync (
-        PhoneuiNotification *proxy,
-        gint status,
-        GCancellable *cancellable,
-        GError **error)
-{
-  gboolean _ret = FALSE;
-  GVariant *_params;
-  GVariant *_result;
-  _params = g_variant_new ("(i)",
-                           status);
-  _result = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
-                                   "HideSimAuth",
-                                   _params,
-                                   G_DBUS_CALL_FLAGS_NONE,
-                                   -1,
-                                   cancellable,
-                                   error);
-  if (_result == NULL)
+gboolean
+phoneui_notification_call_hide_sim_auth_sync (
+    PhoneuiNotification *proxy,
+    gint status,
+    GCancellable *cancellable,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
+    "HideSimAuth",
+    g_variant_new ("(i)",
+                   status),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    error);
+  if (_ret == NULL)
     goto _out;
-  g_variant_unref (_result);
-  _ret = TRUE;
+  g_variant_get (_ret,
+                 "()");
+  g_variant_unref (_ret);
 _out:
-  return _ret;
+  return _ret != NULL;
 }
 
-
 /**
  * phoneui_notification_call_display_ussd:
- * @proxy: A #PhoneuiNotification.
- * @mode: Method parameter.
- * @message: Method parameter.
- * @cancellable: A #GCancellable or %NULL.
- * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL if you don't care about the result of the method invocation.
- * @user_data: Data to pass to @callback.
- *
- * Invokes the <literal>org.shr.phoneui.Notification.DisplayUssd()</literal>
- * D-Bus method on the remote object represented by @proxy.
- *
- * This is an asynchronous method. When the operation is finished,
- * callback will be invoked in the
- * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
- * of the thread you are calling this method from. You can then call
- * phoneui_notification_call_display_ussd_finish() to get the result of the operation.
- * See phoneui_notification_call_display_ussd_sync() for the synchronous version of this method.
+ * @proxy: A #PhoneuiNotificationProxy.
+ * @mode: Argument to pass with the method invocation.
+ * @message: Argument to pass with the method invocation.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL.
+ * @user_data: User data to pass to @callback.
+ *
+ * Asynchronously invokes the <link linkend="gdbus-method-org-shr-phoneui-Notification.DisplayUssd">DisplayUssd()</link> D-Bus method on @proxy.
+ * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
+ * You can then call phoneui_notification_call_display_ussd_finish() to get the result of the operation.
+ *
+ * See phoneui_notification_call_display_ussd_sync() for the synchronous, blocking version of this method.
  */
-void phoneui_notification_call_display_ussd (
-        PhoneuiNotification *proxy,
-        gint mode,
-        const gchar *message,
-        GCancellable *cancellable,
-        GAsyncReadyCallback callback,
-        gpointer user_data)
-{
-  GVariant *_params;
-  _params = g_variant_new ("(is)",
-                           mode,
-                           message);
+void
+phoneui_notification_call_display_ussd (
+    PhoneuiNotification *proxy,
+    gint mode,
+    const gchar *message,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data)
+{
   g_dbus_proxy_call (G_DBUS_PROXY (proxy),
-                     "DisplayUssd",
-                     _params,
-                     G_DBUS_CALL_FLAGS_NONE,
-                     -1,
-                     cancellable,
-                     callback,
-                     user_data);
+    "DisplayUssd",
+    g_variant_new ("(is)",
+                   mode,
+                   message),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    callback,
+    user_data);
 }
 
 /**
  * phoneui_notification_call_display_ussd_finish:
- * @proxy: A #PhoneuiNotification.
- * @res: A #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_notification_call_display_ussd().
+ * @proxy: A #PhoneuiNotificationProxy.
+ * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_notification_call_display_ussd().
  * @error: Return location for error or %NULL.
  *
- * Finishes invoking the <literal>org.shr.phoneui.Notification.DisplayUssd()</literal>
- * D-Bus method on the remote object represented by @proxy.
+ * Finishes an operation started with phoneui_notification_call_display_ussd().
  *
- * Returns: %TRUE if the call succeeded, %FALSE if @error is set.
+ * Returns: %TRUE if the call succeded, %FALSE if @error is set.
  */
-gboolean phoneui_notification_call_display_ussd_finish (
-        PhoneuiNotification *proxy,
-        GAsyncResult *res,
-        GError **error)
-{
-  gboolean _ret = FALSE;
-  GVariant *_result;
-  _result = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
-  if (_result == NULL)
+gboolean
+phoneui_notification_call_display_ussd_finish (
+    PhoneuiNotification *proxy,
+    GAsyncResult *res,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
+  if (_ret == NULL)
     goto _out;
-  g_variant_unref (_result);
-  _ret = TRUE;
+  g_variant_get (_ret,
+                 "()");
+  g_variant_unref (_ret);
 _out:
-  return _ret;
+  return _ret != NULL;
 }
 
 /**
  * phoneui_notification_call_display_ussd_sync:
- * @proxy: A #PhoneuiNotification.
- * @mode: Method parameter.
- * @message: Method parameter.
- * @cancellable: A #GCancellable or %NULL.
+ * @proxy: A #PhoneuiNotificationProxy.
+ * @mode: Argument to pass with the method invocation.
+ * @message: Argument to pass with the method invocation.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
  * @error: Return location for error or %NULL.
  *
- * Synchronously invokes the <literal>org.shr.phoneui.Notification.DisplayUssd()</literal>
- * D-Bus method on the remote object represented by @proxy.
- * The calling thread is blocked until a reply is received. See
- * phoneui_notification_call_display_ussd() for the asynchronous version of this method.
+ * Synchronously invokes the <link linkend="gdbus-method-org-shr-phoneui-Notification.DisplayUssd">DisplayUssd()</link> D-Bus method on @proxy. The calling thread is blocked until a reply is received.
  *
- * Returns: %TRUE if the call succeeded, %FALSE if @error is set.
+ * See phoneui_notification_call_display_ussd() for the asynchronous version of this method.
+ *
+ * Returns: %TRUE if the call succeded, %FALSE if @error is set.
  */
-gboolean phoneui_notification_call_display_ussd_sync (
-        PhoneuiNotification *proxy,
-        gint mode,
-        const gchar *message,
-        GCancellable *cancellable,
-        GError **error)
-{
-  gboolean _ret = FALSE;
-  GVariant *_params;
-  GVariant *_result;
-  _params = g_variant_new ("(is)",
-                           mode,
-                           message);
-  _result = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
-                                   "DisplayUssd",
-                                   _params,
-                                   G_DBUS_CALL_FLAGS_NONE,
-                                   -1,
-                                   cancellable,
-                                   error);
-  if (_result == NULL)
+gboolean
+phoneui_notification_call_display_ussd_sync (
+    PhoneuiNotification *proxy,
+    gint mode,
+    const gchar *message,
+    GCancellable *cancellable,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
+    "DisplayUssd",
+    g_variant_new ("(is)",
+                   mode,
+                   message),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    error);
+  if (_ret == NULL)
     goto _out;
-  g_variant_unref (_result);
-  _ret = TRUE;
+  g_variant_get (_ret,
+                 "()");
+  g_variant_unref (_ret);
 _out:
-  return _ret;
+  return _ret != NULL;
 }
 
-
 /**
  * phoneui_notification_call_display_dialog:
- * @proxy: A #PhoneuiNotification.
- * @dialog: Method parameter.
- * @cancellable: A #GCancellable or %NULL.
- * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL if you don't care about the result of the method invocation.
- * @user_data: Data to pass to @callback.
- *
- * Invokes the <literal>org.shr.phoneui.Notification.DisplayDialog()</literal>
- * D-Bus method on the remote object represented by @proxy.
- *
- * This is an asynchronous method. When the operation is finished,
- * callback will be invoked in the
- * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
- * of the thread you are calling this method from. You can then call
- * phoneui_notification_call_display_dialog_finish() to get the result of the operation.
- * See phoneui_notification_call_display_dialog_sync() for the synchronous version of this method.
+ * @proxy: A #PhoneuiNotificationProxy.
+ * @dialog: Argument to pass with the method invocation.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL.
+ * @user_data: User data to pass to @callback.
+ *
+ * Asynchronously invokes the <link linkend="gdbus-method-org-shr-phoneui-Notification.DisplayDialog">DisplayDialog()</link> D-Bus method on @proxy.
+ * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
+ * You can then call phoneui_notification_call_display_dialog_finish() to get the result of the operation.
+ *
+ * See phoneui_notification_call_display_dialog_sync() for the synchronous, blocking version of this method.
  */
-void phoneui_notification_call_display_dialog (
-        PhoneuiNotification *proxy,
-        gint dialog,
-        GCancellable *cancellable,
-        GAsyncReadyCallback callback,
-        gpointer user_data)
-{
-  GVariant *_params;
-  _params = g_variant_new ("(i)",
-                           dialog);
+void
+phoneui_notification_call_display_dialog (
+    PhoneuiNotification *proxy,
+    gint dialog,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data)
+{
   g_dbus_proxy_call (G_DBUS_PROXY (proxy),
-                     "DisplayDialog",
-                     _params,
-                     G_DBUS_CALL_FLAGS_NONE,
-                     -1,
-                     cancellable,
-                     callback,
-                     user_data);
+    "DisplayDialog",
+    g_variant_new ("(i)",
+                   dialog),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    callback,
+    user_data);
 }
 
 /**
  * phoneui_notification_call_display_dialog_finish:
- * @proxy: A #PhoneuiNotification.
- * @res: A #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_notification_call_display_dialog().
+ * @proxy: A #PhoneuiNotificationProxy.
+ * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_notification_call_display_dialog().
  * @error: Return location for error or %NULL.
  *
- * Finishes invoking the <literal>org.shr.phoneui.Notification.DisplayDialog()</literal>
- * D-Bus method on the remote object represented by @proxy.
+ * Finishes an operation started with phoneui_notification_call_display_dialog().
  *
- * Returns: %TRUE if the call succeeded, %FALSE if @error is set.
+ * Returns: %TRUE if the call succeded, %FALSE if @error is set.
  */
-gboolean phoneui_notification_call_display_dialog_finish (
-        PhoneuiNotification *proxy,
-        GAsyncResult *res,
-        GError **error)
-{
-  gboolean _ret = FALSE;
-  GVariant *_result;
-  _result = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
-  if (_result == NULL)
+gboolean
+phoneui_notification_call_display_dialog_finish (
+    PhoneuiNotification *proxy,
+    GAsyncResult *res,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
+  if (_ret == NULL)
     goto _out;
-  g_variant_unref (_result);
-  _ret = TRUE;
+  g_variant_get (_ret,
+                 "()");
+  g_variant_unref (_ret);
 _out:
-  return _ret;
+  return _ret != NULL;
 }
 
 /**
  * phoneui_notification_call_display_dialog_sync:
- * @proxy: A #PhoneuiNotification.
- * @dialog: Method parameter.
- * @cancellable: A #GCancellable or %NULL.
+ * @proxy: A #PhoneuiNotificationProxy.
+ * @dialog: Argument to pass with the method invocation.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
  * @error: Return location for error or %NULL.
  *
- * Synchronously invokes the <literal>org.shr.phoneui.Notification.DisplayDialog()</literal>
- * D-Bus method on the remote object represented by @proxy.
- * The calling thread is blocked until a reply is received. See
- * phoneui_notification_call_display_dialog() for the asynchronous version of this method.
+ * Synchronously invokes the <link linkend="gdbus-method-org-shr-phoneui-Notification.DisplayDialog">DisplayDialog()</link> D-Bus method on @proxy. The calling thread is blocked until a reply is received.
  *
- * Returns: %TRUE if the call succeeded, %FALSE if @error is set.
+ * See phoneui_notification_call_display_dialog() for the asynchronous version of this method.
+ *
+ * Returns: %TRUE if the call succeded, %FALSE if @error is set.
  */
-gboolean phoneui_notification_call_display_dialog_sync (
-        PhoneuiNotification *proxy,
-        gint dialog,
-        GCancellable *cancellable,
-        GError **error)
-{
-  gboolean _ret = FALSE;
-  GVariant *_params;
-  GVariant *_result;
-  _params = g_variant_new ("(i)",
-                           dialog);
-  _result = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
-                                   "DisplayDialog",
-                                   _params,
-                                   G_DBUS_CALL_FLAGS_NONE,
-                                   -1,
-                                   cancellable,
-                                   error);
-  if (_result == NULL)
+gboolean
+phoneui_notification_call_display_dialog_sync (
+    PhoneuiNotification *proxy,
+    gint dialog,
+    GCancellable *cancellable,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
+    "DisplayDialog",
+    g_variant_new ("(i)",
+                   dialog),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    error);
+  if (_ret == NULL)
     goto _out;
-  g_variant_unref (_result);
-  _ret = TRUE;
+  g_variant_get (_ret,
+                 "()");
+  g_variant_unref (_ret);
 _out:
-  return _ret;
+  return _ret != NULL;
 }
 
-
 /**
  * phoneui_notification_call_feedback_action:
- * @proxy: A #PhoneuiNotification.
- * @action: Method parameter.
- * @level: Method parameter.
- * @cancellable: A #GCancellable or %NULL.
- * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL if you don't care about the result of the method invocation.
- * @user_data: Data to pass to @callback.
- *
- * Invokes the <literal>org.shr.phoneui.Notification.FeedbackAction()</literal>
- * D-Bus method on the remote object represented by @proxy.
- *
- * This is an asynchronous method. When the operation is finished,
- * callback will be invoked in the
- * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
- * of the thread you are calling this method from. You can then call
- * phoneui_notification_call_feedback_action_finish() to get the result of the operation.
- * See phoneui_notification_call_feedback_action_sync() for the synchronous version of this method.
+ * @proxy: A #PhoneuiNotificationProxy.
+ * @action: Argument to pass with the method invocation.
+ * @level: Argument to pass with the method invocation.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL.
+ * @user_data: User data to pass to @callback.
+ *
+ * Asynchronously invokes the <link linkend="gdbus-method-org-shr-phoneui-Notification.FeedbackAction">FeedbackAction()</link> D-Bus method on @proxy.
+ * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
+ * You can then call phoneui_notification_call_feedback_action_finish() to get the result of the operation.
+ *
+ * See phoneui_notification_call_feedback_action_sync() for the synchronous, blocking version of this method.
  */
-void phoneui_notification_call_feedback_action (
-        PhoneuiNotification *proxy,
-        const gchar *action,
-        const gchar *level,
-        GCancellable *cancellable,
-        GAsyncReadyCallback callback,
-        gpointer user_data)
-{
-  GVariant *_params;
-  _params = g_variant_new ("(ss)",
-                           action,
-                           level);
+void
+phoneui_notification_call_feedback_action (
+    PhoneuiNotification *proxy,
+    const gchar *action,
+    const gchar *level,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data)
+{
   g_dbus_proxy_call (G_DBUS_PROXY (proxy),
-                     "FeedbackAction",
-                     _params,
-                     G_DBUS_CALL_FLAGS_NONE,
-                     -1,
-                     cancellable,
-                     callback,
-                     user_data);
+    "FeedbackAction",
+    g_variant_new ("(ss)",
+                   action,
+                   level),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    callback,
+    user_data);
 }
 
 /**
  * phoneui_notification_call_feedback_action_finish:
- * @proxy: A #PhoneuiNotification.
- * @res: A #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_notification_call_feedback_action().
+ * @proxy: A #PhoneuiNotificationProxy.
+ * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_notification_call_feedback_action().
  * @error: Return location for error or %NULL.
  *
- * Finishes invoking the <literal>org.shr.phoneui.Notification.FeedbackAction()</literal>
- * D-Bus method on the remote object represented by @proxy.
+ * Finishes an operation started with phoneui_notification_call_feedback_action().
  *
- * Returns: %TRUE if the call succeeded, %FALSE if @error is set.
+ * Returns: %TRUE if the call succeded, %FALSE if @error is set.
  */
-gboolean phoneui_notification_call_feedback_action_finish (
-        PhoneuiNotification *proxy,
-        GAsyncResult *res,
-        GError **error)
-{
-  gboolean _ret = FALSE;
-  GVariant *_result;
-  _result = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
-  if (_result == NULL)
+gboolean
+phoneui_notification_call_feedback_action_finish (
+    PhoneuiNotification *proxy,
+    GAsyncResult *res,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
+  if (_ret == NULL)
     goto _out;
-  g_variant_unref (_result);
-  _ret = TRUE;
+  g_variant_get (_ret,
+                 "()");
+  g_variant_unref (_ret);
 _out:
-  return _ret;
+  return _ret != NULL;
 }
 
 /**
  * phoneui_notification_call_feedback_action_sync:
- * @proxy: A #PhoneuiNotification.
- * @action: Method parameter.
- * @level: Method parameter.
- * @cancellable: A #GCancellable or %NULL.
+ * @proxy: A #PhoneuiNotificationProxy.
+ * @action: Argument to pass with the method invocation.
+ * @level: Argument to pass with the method invocation.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
  * @error: Return location for error or %NULL.
  *
- * Synchronously invokes the <literal>org.shr.phoneui.Notification.FeedbackAction()</literal>
- * D-Bus method on the remote object represented by @proxy.
- * The calling thread is blocked until a reply is received. See
- * phoneui_notification_call_feedback_action() for the asynchronous version of this method.
+ * Synchronously invokes the <link linkend="gdbus-method-org-shr-phoneui-Notification.FeedbackAction">FeedbackAction()</link> D-Bus method on @proxy. The calling thread is blocked until a reply is received.
  *
- * Returns: %TRUE if the call succeeded, %FALSE if @error is set.
+ * See phoneui_notification_call_feedback_action() for the asynchronous version of this method.
+ *
+ * Returns: %TRUE if the call succeded, %FALSE if @error is set.
  */
-gboolean phoneui_notification_call_feedback_action_sync (
-        PhoneuiNotification *proxy,
-        const gchar *action,
-        const gchar *level,
-        GCancellable *cancellable,
-        GError **error)
-{
-  gboolean _ret = FALSE;
-  GVariant *_params;
-  GVariant *_result;
-  _params = g_variant_new ("(ss)",
-                           action,
-                           level);
-  _result = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
-                                   "FeedbackAction",
-                                   _params,
-                                   G_DBUS_CALL_FLAGS_NONE,
-                                   -1,
-                                   cancellable,
-                                   error);
-  if (_result == NULL)
+gboolean
+phoneui_notification_call_feedback_action_sync (
+    PhoneuiNotification *proxy,
+    const gchar *action,
+    const gchar *level,
+    GCancellable *cancellable,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
+    "FeedbackAction",
+    g_variant_new ("(ss)",
+                   action,
+                   level),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    error);
+  if (_ret == NULL)
     goto _out;
-  g_variant_unref (_result);
-  _ret = TRUE;
+  g_variant_get (_ret,
+                 "()");
+  g_variant_unref (_ret);
 _out:
-  return _ret;
+  return _ret != NULL;
 }
 
-
 /**
  * phoneui_notification_complete_display_sim_auth:
  * @object: A #PhoneuiNotification.
- * @invocation: A #GDBusMethodInvocation.
+ * @invocation: (transfer full): A #GDBusMethodInvocation.
  *
- * Completes handling the <literal>org.shr.phoneui.Notification.DisplaySimAuth()</literal>
- * D-Bus method invocation by returning a value.
- *
- * If you want to return an error, use g_dbus_method_invocation_return_error()
- * or similar instead.
+ * Helper function used in service implementations to finish handling invocations of the <link linkend="gdbus-method-org-shr-phoneui-Notification.DisplaySimAuth">DisplaySimAuth()</link> D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.
  *
  * This method will free @invocation, you cannot use it afterwards.
  */
-void phoneui_notification_complete_display_sim_auth (
-        PhoneuiNotification *object,
-        GDBusMethodInvocation *invocation)
+void
+phoneui_notification_complete_display_sim_auth (
+    PhoneuiNotification *object,
+    GDBusMethodInvocation *invocation)
 {
-  g_dbus_method_invocation_return_value (invocation, NULL);
+  g_dbus_method_invocation_return_value (invocation,
+    g_variant_new ("()"));
 }
 
-
 /**
  * phoneui_notification_complete_hide_sim_auth:
  * @object: A #PhoneuiNotification.
- * @invocation: A #GDBusMethodInvocation.
+ * @invocation: (transfer full): A #GDBusMethodInvocation.
  *
- * Completes handling the <literal>org.shr.phoneui.Notification.HideSimAuth()</literal>
- * D-Bus method invocation by returning a value.
- *
- * If you want to return an error, use g_dbus_method_invocation_return_error()
- * or similar instead.
+ * Helper function used in service implementations to finish handling invocations of the <link linkend="gdbus-method-org-shr-phoneui-Notification.HideSimAuth">HideSimAuth()</link> D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.
  *
  * This method will free @invocation, you cannot use it afterwards.
  */
-void phoneui_notification_complete_hide_sim_auth (
-        PhoneuiNotification *object,
-        GDBusMethodInvocation *invocation)
+void
+phoneui_notification_complete_hide_sim_auth (
+    PhoneuiNotification *object,
+    GDBusMethodInvocation *invocation)
 {
-  g_dbus_method_invocation_return_value (invocation, NULL);
+  g_dbus_method_invocation_return_value (invocation,
+    g_variant_new ("()"));
 }
 
-
 /**
  * phoneui_notification_complete_display_ussd:
  * @object: A #PhoneuiNotification.
- * @invocation: A #GDBusMethodInvocation.
+ * @invocation: (transfer full): A #GDBusMethodInvocation.
  *
- * Completes handling the <literal>org.shr.phoneui.Notification.DisplayUssd()</literal>
- * D-Bus method invocation by returning a value.
- *
- * If you want to return an error, use g_dbus_method_invocation_return_error()
- * or similar instead.
+ * Helper function used in service implementations to finish handling invocations of the <link linkend="gdbus-method-org-shr-phoneui-Notification.DisplayUssd">DisplayUssd()</link> D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.
  *
  * This method will free @invocation, you cannot use it afterwards.
  */
-void phoneui_notification_complete_display_ussd (
-        PhoneuiNotification *object,
-        GDBusMethodInvocation *invocation)
+void
+phoneui_notification_complete_display_ussd (
+    PhoneuiNotification *object,
+    GDBusMethodInvocation *invocation)
 {
-  g_dbus_method_invocation_return_value (invocation, NULL);
+  g_dbus_method_invocation_return_value (invocation,
+    g_variant_new ("()"));
 }
 
-
 /**
  * phoneui_notification_complete_display_dialog:
  * @object: A #PhoneuiNotification.
- * @invocation: A #GDBusMethodInvocation.
+ * @invocation: (transfer full): A #GDBusMethodInvocation.
  *
- * Completes handling the <literal>org.shr.phoneui.Notification.DisplayDialog()</literal>
- * D-Bus method invocation by returning a value.
- *
- * If you want to return an error, use g_dbus_method_invocation_return_error()
- * or similar instead.
+ * Helper function used in service implementations to finish handling invocations of the <link linkend="gdbus-method-org-shr-phoneui-Notification.DisplayDialog">DisplayDialog()</link> D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.
  *
  * This method will free @invocation, you cannot use it afterwards.
  */
-void phoneui_notification_complete_display_dialog (
-        PhoneuiNotification *object,
-        GDBusMethodInvocation *invocation)
+void
+phoneui_notification_complete_display_dialog (
+    PhoneuiNotification *object,
+    GDBusMethodInvocation *invocation)
 {
-  g_dbus_method_invocation_return_value (invocation, NULL);
+  g_dbus_method_invocation_return_value (invocation,
+    g_variant_new ("()"));
 }
 
-
 /**
  * phoneui_notification_complete_feedback_action:
  * @object: A #PhoneuiNotification.
- * @invocation: A #GDBusMethodInvocation.
+ * @invocation: (transfer full): A #GDBusMethodInvocation.
  *
- * Completes handling the <literal>org.shr.phoneui.Notification.FeedbackAction()</literal>
- * D-Bus method invocation by returning a value.
- *
- * If you want to return an error, use g_dbus_method_invocation_return_error()
- * or similar instead.
+ * Helper function used in service implementations to finish handling invocations of the <link linkend="gdbus-method-org-shr-phoneui-Notification.FeedbackAction">FeedbackAction()</link> D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.
  *
  * This method will free @invocation, you cannot use it afterwards.
  */
-void phoneui_notification_complete_feedback_action (
-        PhoneuiNotification *object,
-        GDBusMethodInvocation *invocation)
+void
+phoneui_notification_complete_feedback_action (
+    PhoneuiNotification *object,
+    GDBusMethodInvocation *invocation)
 {
-  g_dbus_method_invocation_return_value (invocation, NULL);
+  g_dbus_method_invocation_return_value (invocation,
+    g_variant_new ("()"));
 }
 
+/* ------------------------------------------------------------------------ */
 
-static const GDBusArgInfo phoneui_notification_method_in_DisplaySimAuth_status =
-{
-  -1,
-  "status",
-  "i",
-  (GDBusAnnotationInfo **) NULL
-};
-static const GDBusArgInfo * const phoneui_notification_method_in_DisplaySimAuth_arg_pointers[] =
-{
-  &phoneui_notification_method_in_DisplaySimAuth_status,
-  NULL
-};
-
-static const GDBusAnnotationInfo DisplaySimAuth_method_annotations_annotation_0 = {
-  -1,
-  "org.freedesktop.DBus.GLib.Async",
-  "true",
-};
+/**
+ * PhoneuiNotificationProxy:
+ *
+ * The #PhoneuiNotificationProxy structure contains only private data and should only be accessed using the provided API.
+ */
 
-static const GDBusAnnotationInfo *DisplaySimAuth_method_annotations[] = {
-  &DisplaySimAuth_method_annotations_annotation_0,
-  NULL
-};
+/**
+ * PhoneuiNotificationProxyClass:
+ * @parent_class: The parent class.
+ *
+ * Class structure for #PhoneuiNotificationProxy.
+ */
 
-static const GDBusMethodInfo phoneui_notification_method_DisplaySimAuth =
+static void
+phoneui_notification_proxy_iface_init (PhoneuiNotificationIface *iface)
 {
-  -1,
-  "DisplaySimAuth",
-  (GDBusArgInfo **) &phoneui_notification_method_in_DisplaySimAuth_arg_pointers,
-  (GDBusArgInfo **) NULL,
-  (GDBusAnnotationInfo **) DisplaySimAuth_method_annotations,
-};
+}
 
-static const GDBusArgInfo phoneui_notification_method_in_HideSimAuth_status =
+#define phoneui_notification_proxy_get_type phoneui_notification_proxy_get_type
+G_DEFINE_TYPE_WITH_CODE (PhoneuiNotificationProxy, phoneui_notification_proxy, G_TYPE_DBUS_PROXY,
+                         G_IMPLEMENT_INTERFACE (TYPE_PHONEUI_NOTIFICATION, phoneui_notification_proxy_iface_init));
+#undef phoneui_notification_proxy_get_type
+
+static void
+phoneui_notification_proxy_get_property (GObject      *object,
+  guint         prop_id,
+  GValue       *value,
+  GParamSpec   *pspec)
 {
-  -1,
-  "status",
-  "i",
-  (GDBusAnnotationInfo **) NULL
-};
-static const GDBusArgInfo * const phoneui_notification_method_in_HideSimAuth_arg_pointers[] =
-{
-  &phoneui_notification_method_in_HideSimAuth_status,
-  NULL
-};
-
-static const GDBusAnnotationInfo HideSimAuth_method_annotations_annotation_0 = {
-  -1,
-  "org.freedesktop.DBus.GLib.Async",
-  "true",
-};
-
-static const GDBusAnnotationInfo *HideSimAuth_method_annotations[] = {
-  &HideSimAuth_method_annotations_annotation_0,
-  NULL
-};
-
-static const GDBusMethodInfo phoneui_notification_method_HideSimAuth =
-{
-  -1,
-  "HideSimAuth",
-  (GDBusArgInfo **) &phoneui_notification_method_in_HideSimAuth_arg_pointers,
-  (GDBusArgInfo **) NULL,
-  (GDBusAnnotationInfo **) HideSimAuth_method_annotations,
-};
-
-static const GDBusArgInfo phoneui_notification_method_in_DisplayUssd_mode =
-{
-  -1,
-  "mode",
-  "i",
-  (GDBusAnnotationInfo **) NULL
-};
-static const GDBusArgInfo phoneui_notification_method_in_DisplayUssd_message =
-{
-  -1,
-  "message",
-  "s",
-  (GDBusAnnotationInfo **) NULL
-};
-static const GDBusArgInfo * const phoneui_notification_method_in_DisplayUssd_arg_pointers[] =
-{
-  &phoneui_notification_method_in_DisplayUssd_mode,
-  &phoneui_notification_method_in_DisplayUssd_message,
-  NULL
-};
-
-static const GDBusAnnotationInfo DisplayUssd_method_annotations_annotation_0 = {
-  -1,
-  "org.freedesktop.DBus.GLib.Async",
-  "true",
-};
-
-static const GDBusAnnotationInfo *DisplayUssd_method_annotations[] = {
-  &DisplayUssd_method_annotations_annotation_0,
-  NULL
-};
-
-static const GDBusMethodInfo phoneui_notification_method_DisplayUssd =
-{
-  -1,
-  "DisplayUssd",
-  (GDBusArgInfo **) &phoneui_notification_method_in_DisplayUssd_arg_pointers,
-  (GDBusArgInfo **) NULL,
-  (GDBusAnnotationInfo **) DisplayUssd_method_annotations,
-};
-
-static const GDBusArgInfo phoneui_notification_method_in_DisplayDialog_dialog =
-{
-  -1,
-  "dialog",
-  "i",
-  (GDBusAnnotationInfo **) NULL
-};
-static const GDBusArgInfo * const phoneui_notification_method_in_DisplayDialog_arg_pointers[] =
-{
-  &phoneui_notification_method_in_DisplayDialog_dialog,
-  NULL
-};
-
-static const GDBusAnnotationInfo DisplayDialog_method_annotations_annotation_0 = {
-  -1,
-  "org.freedesktop.DBus.GLib.Async",
-  "true",
-};
-
-static const GDBusAnnotationInfo *DisplayDialog_method_annotations[] = {
-  &DisplayDialog_method_annotations_annotation_0,
-  NULL
-};
-
-static const GDBusMethodInfo phoneui_notification_method_DisplayDialog =
-{
-  -1,
-  "DisplayDialog",
-  (GDBusArgInfo **) &phoneui_notification_method_in_DisplayDialog_arg_pointers,
-  (GDBusArgInfo **) NULL,
-  (GDBusAnnotationInfo **) DisplayDialog_method_annotations,
-};
-
-static const GDBusArgInfo phoneui_notification_method_in_FeedbackAction_action =
-{
-  -1,
-  "action",
-  "s",
-  (GDBusAnnotationInfo **) NULL
-};
-static const GDBusArgInfo phoneui_notification_method_in_FeedbackAction_level =
-{
-  -1,
-  "level",
-  "s",
-  (GDBusAnnotationInfo **) NULL
-};
-static const GDBusArgInfo * const phoneui_notification_method_in_FeedbackAction_arg_pointers[] =
-{
-  &phoneui_notification_method_in_FeedbackAction_action,
-  &phoneui_notification_method_in_FeedbackAction_level,
-  NULL
-};
-
-static const GDBusAnnotationInfo FeedbackAction_method_annotations_annotation_0 = {
-  -1,
-  "org.freedesktop.DBus.GLib.Async",
-  "true",
-};
-
-static const GDBusAnnotationInfo *FeedbackAction_method_annotations[] = {
-  &FeedbackAction_method_annotations_annotation_0,
-  NULL
-};
-
-static const GDBusMethodInfo phoneui_notification_method_FeedbackAction =
-{
-  -1,
-  "FeedbackAction",
-  (GDBusArgInfo **) &phoneui_notification_method_in_FeedbackAction_arg_pointers,
-  (GDBusArgInfo **) NULL,
-  (GDBusAnnotationInfo **) FeedbackAction_method_annotations,
-};
-
-static const GDBusMethodInfo * const phoneui_notification_method_info_pointers[] =
-{
-  &phoneui_notification_method_DisplaySimAuth,
-  &phoneui_notification_method_HideSimAuth,
-  &phoneui_notification_method_DisplayUssd,
-  &phoneui_notification_method_DisplayDialog,
-  &phoneui_notification_method_FeedbackAction,
-  NULL
-};
-
-static const GDBusInterfaceInfo _phoneui_notification_interface_info =
-{
-  -1,
-  "org.shr.phoneui.Notification",
-  (GDBusMethodInfo **) &phoneui_notification_method_info_pointers,
-  (GDBusSignalInfo **) NULL,
-  (GDBusPropertyInfo **) NULL,
-  (GDBusAnnotationInfo **) NULL
-};
-
-static void
-handle_method_call_real (GDBusConnection       *connection,
-                         const gchar           *sender,
-                         const gchar           *object_path,
-                         const gchar           *interface_name,
-                         const gchar           *method_name,
-                         GVariant              *parameters,
-                         GDBusMethodInvocation *invocation,
-                         gpointer               user_data)
-{
-  guint method_id;
-  method_id = lookup_method_id_from_method_name (method_name);
-  switch (method_id)
-    {
-    case __DISPLAY_SIM_AUTH_METHOD:
-      {
-        PhoneuiNotification *object = PHONEUI_NOTIFICATION (user_data);
-        gboolean handled;
-        gint arg_status;
-        g_variant_get (parameters,
-                       "(i)",
-                       &arg_status);
-        g_signal_emit (object,
-                       signals[method_id],
-                       0, invocation, arg_status, &handled);
-        if (!handled)
-          goto not_implemented;
-      }
-      break;
-
-    case __HIDE_SIM_AUTH_METHOD:
-      {
-        PhoneuiNotification *object = PHONEUI_NOTIFICATION (user_data);
-        gboolean handled;
-        gint arg_status;
-        g_variant_get (parameters,
-                       "(i)",
-                       &arg_status);
-        g_signal_emit (object,
-                       signals[method_id],
-                       0, invocation, arg_status, &handled);
-        if (!handled)
-          goto not_implemented;
-      }
-      break;
-
-    case __DISPLAY_USSD_METHOD:
-      {
-        PhoneuiNotification *object = PHONEUI_NOTIFICATION (user_data);
-        gboolean handled;
-        gint arg_mode;
-        const gchar *arg_message;
-        g_variant_get (parameters,
-                       "(i&s)",
-                       &arg_mode,
-                       &arg_message);
-        g_signal_emit (object,
-                       signals[method_id],
-                       0, invocation, arg_mode, arg_message, &handled);
-        if (!handled)
-          goto not_implemented;
-      }
-      break;
-
-    case __DISPLAY_DIALOG_METHOD:
-      {
-        PhoneuiNotification *object = PHONEUI_NOTIFICATION (user_data);
-        gboolean handled;
-        gint arg_dialog;
-        g_variant_get (parameters,
-                       "(i)",
-                       &arg_dialog);
-        g_signal_emit (object,
-                       signals[method_id],
-                       0, invocation, arg_dialog, &handled);
-        if (!handled)
-          goto not_implemented;
-      }
-      break;
-
-    case __FEEDBACK_ACTION_METHOD:
-      {
-        PhoneuiNotification *object = PHONEUI_NOTIFICATION (user_data);
-        gboolean handled;
-        const gchar *arg_action;
-        const gchar *arg_level;
-        g_variant_get (parameters,
-                       "(&s&s)",
-                       &arg_action,
-                       &arg_level);
-        g_signal_emit (object,
-                       signals[method_id],
-                       0, invocation, arg_action, arg_level, &handled);
-        if (!handled)
-          goto not_implemented;
-      }
-      break;
-
-    default:
-not_implemented:
-      g_dbus_method_invocation_return_error (invocation,
-                                             G_DBUS_ERROR,
-                                             G_DBUS_ERROR_NOT_SUPPORTED,
-                                             "Method `%s' is not implemented",
-                                             method_name);
-      break;
-    }
-};
-
-typedef struct
-{
-  GDBusMethodInvocation *invocation;
-  gpointer               user_data;
-} HandleMethodInThreadData;
-
-static gboolean
-handle_method_call_in_thread_func (GIOSchedulerJob *job,
-                                   GCancellable    *cancellable,
-                                   gpointer         user_data)
-{
-  HandleMethodInThreadData *data = user_data;
-
-  handle_method_call_real (g_dbus_method_invocation_get_connection (data->invocation),
-                           g_dbus_method_invocation_get_sender (data->invocation),
-                           g_dbus_method_invocation_get_object_path (data->invocation),
-                           g_dbus_method_invocation_get_interface_name (data->invocation),
-                           g_dbus_method_invocation_get_method_name (data->invocation),
-                           g_dbus_method_invocation_get_parameters (data->invocation),
-                           data->invocation,
-                           data->user_data);
-  return FALSE; /* job is complete */
-}
-
-static void
-handle_method_call (GDBusConnection       *connection,
-                    const gchar           *sender,
-                    const gchar           *object_path,
-                    const gchar           *interface_name,
-                    const gchar           *method_name,
-                    GVariant              *parameters,
-                    GDBusMethodInvocation *invocation,
-                    gpointer               user_data)
-{
-  GDBusInterface *interface = G_DBUS_INTERFACE (user_data);
-  GDBusInterfaceFlags flags;
-
-  flags = g_dbus_interface_get_flags (interface);
-  if (flags & G_DBUS_INTERFACE_FLAGS_RUN_IN_THREAD)
-    {
-      HandleMethodInThreadData *data;
-      data = g_new0 (HandleMethodInThreadData, 1);
-      data->invocation = invocation;
-      data->user_data = user_data;
-      g_io_scheduler_push_job (handle_method_call_in_thread_func,
-                               data,
-                               g_free, /* since we don't need refs on objects */
-                               G_PRIORITY_DEFAULT,
-                               NULL); /* GCancellable* */
-    }
-  else
-    {
-      handle_method_call_real (connection,
-                               sender,
-                               object_path,
-                               interface_name,
-                               method_name,
-                               parameters,
-                               invocation,
-                               user_data);
-    }
-}
-
-static GVariant *
-get_property (GDBusConnection  *connection,
-              const gchar      *sender,
-              const gchar      *object_path,
-              const gchar      *interface_name,
-              const gchar      *property_name,
-              GError          **error,
-              gpointer          user_data)
-{
-  GVariant *ret;
-  guint prop_id;
-  prop_id = lookup_property_id_from_property_name (property_name);
-  ret = NULL;
-  switch (prop_id)
-    {
-    default:
-      g_assert_not_reached ();
-      break;
-    }
-
-  if (ret == NULL)
-    {
-      GVariant *untrusted_empty;
-      GDBusPropertyInfo *property_info;
-      const GVariantType *type;
-      property_info = g_dbus_interface_info_lookup_property ((GDBusInterfaceInfo *) &_phoneui_notification_interface_info, property_name);
-      type = G_VARIANT_TYPE (property_info->signature);
-      untrusted_empty = g_variant_new_from_data (type, NULL, 0, FALSE, NULL, NULL);
-      ret = g_variant_get_normal_form (untrusted_empty);
-      g_variant_unref (untrusted_empty);
-    }
-
-  return ret;
-};
-
-static gboolean
-set_property (GDBusConnection  *connection,
-              const gchar      *sender,
-              const gchar      *object_path,
-              const gchar      *interface_name,
-              const gchar      *property_name,
-              GVariant         *value,
-              GError          **error,
-              gpointer          user_data)
-{
-  gboolean ret;
-  guint prop_id;
-  prop_id = lookup_property_id_from_property_name (property_name);
-  ret = TRUE;
-  switch (prop_id)
-    {
-    default:
-      g_set_error (error,
-                   G_DBUS_ERROR,
-                   G_DBUS_ERROR_NOT_SUPPORTED,
-                   "This implementation does not support property `%s'",
-                   property_name);
-      ret = FALSE;
-      break;
-    }
-
-  return ret;
-};
-
-static const GDBusInterfaceVTable phoneui_notification_interface_vtable =
-{
-  handle_method_call,
-  get_property,
-  set_property,
-};
-
-/* ---------------------------------------------------------------------- */
-
-typedef struct {
-  gpointer data;
-  gsize size;
-} _VariantBlob;
-
-static void
-_variant_blob_free (_VariantBlob *blob)
-{
-  g_free (blob->data);
-  g_free (blob);
-}
-
-static _VariantBlob *
-_variant_blob_new (GVariant *value)
-{
-  _VariantBlob *blob;
-  blob = g_new0 (_VariantBlob, 1);
-  blob->size = g_variant_get_size (value);
-  blob->data = g_malloc (blob->size);
-  g_variant_store (value, blob->data);
-  return blob;
-}
-
-static gboolean
-_variant_blob_equal (_VariantBlob *a,
-                    _VariantBlob *b)
-{
-  return (a->size == b->size) && (memcmp (a->data, b->data, a->size) == 0);
-}
-/* ---------------------------------------------------------------------- */
-
-static gboolean
-emit_notifications_in_idle (gpointer user_data)
-{
-  GObject *object = G_OBJECT (user_data);
-  GDBusConnection *connection;
-  const gchar *path;
-  GHashTable *notification_queue;
-  GHashTableIter iter;
-  const gchar *property_name;
-  GVariant *value;
-  GVariantBuilder builder;
-  GVariantBuilder invalidated_builder;
-  GHashTable *pvc;
-  gboolean has_changes;
-
-  notification_queue = g_object_get_data (object, "gdbus-codegen-notification-queue");
-  path = g_object_get_data (object, "gdbus-codegen-path");
-  connection = g_object_get_data (object, "gdbus-codegen-connection");
-  pvc = g_object_get_data (object, "gdbus-codegen-pvc");
-  g_assert (notification_queue != NULL && path != NULL && connection != NULL && pvc != NULL);
-
-  g_variant_builder_init (&builder, G_VARIANT_TYPE ("a{sv}"));
-  g_variant_builder_init (&invalidated_builder, G_VARIANT_TYPE ("as"));
-  g_hash_table_iter_init (&iter, notification_queue);
-  has_changes = FALSE;
-  while (g_hash_table_iter_next (&iter, (gpointer) &property_name, (gpointer) &value))
-    {
-      _VariantBlob *cached_blob;
-      _VariantBlob *blob;
-      cached_blob = g_hash_table_lookup (pvc, property_name);
-      blob = _variant_blob_new (value);
-      if (cached_blob == NULL || !_variant_blob_equal (cached_blob, blob))
-        {
-          g_hash_table_insert (pvc, (gpointer) property_name, blob);
-          g_variant_builder_add (&builder, "{sv}", property_name, value);
-          has_changes = TRUE;
-        }
-      else
-        {
-          _variant_blob_free (blob);
-        }
-    }
-
-  if (has_changes)
-    {
-      g_dbus_connection_emit_signal (connection,
-                                     NULL,
-                                     path,
-                                     "org.freedesktop.DBus.Properties",
-                                     "PropertiesChanged",
-                                     g_variant_new ("(sa{sv}as)",
-                                                    "org.shr.phoneui.Notification",
-                                                    &builder,
-                                                    &invalidated_builder),
-                                     NULL);
-    }
-  else
-    {
-      g_variant_builder_clear (&builder);
-      g_variant_builder_clear (&invalidated_builder);
-    }
-
-  g_hash_table_remove_all (notification_queue);
-  g_object_set_data (object, "gdbus-codegen-notification-idle-source", NULL);
-  return FALSE;
-}
-
-static void
-queue_notification (GObject     *object,
-                    const gchar *property_name,
-                    GVariant    *value)
-{
-  GHashTable *notification_queue;
-  GSource *idle_source;
-  notification_queue = g_object_get_data (object, "gdbus-codegen-notification-queue");
-  if (notification_queue == NULL)
-    {
-      notification_queue = g_hash_table_new_full (g_str_hash, g_str_equal, NULL, (GDestroyNotify) g_variant_unref);
-      g_object_set_data_full (object, "gdbus-codegen-notification-queue", notification_queue, (GDestroyNotify) g_hash_table_unref);
-    }
-  g_hash_table_insert (notification_queue, (gpointer) property_name, (gpointer) value); /* adopts value */
-  idle_source = g_object_get_data (object, "gdbus-codegen-notification-idle-source");
-  if (idle_source == NULL)
-    {
-      idle_source = g_idle_source_new ();
-      g_source_set_priority (idle_source, G_PRIORITY_DEFAULT);
-      g_source_set_callback (idle_source,
-                             emit_notifications_in_idle,
-                             g_object_ref (object),
-                             (GDestroyNotify) g_object_unref);
-      g_source_attach (idle_source, g_main_context_get_thread_default ());
-      g_source_unref (idle_source);
-      g_object_set_data (object, "gdbus-codegen-notification-idle-source", idle_source);
-    }
 }
 
 static void
-phoneui_notification_flush (GDBusInterface *_object)
+phoneui_notification_proxy_set_property (GObject      *object,
+  guint         prop_id,
+  const GValue *value,
+  GParamSpec   *pspec)
 {
-  PhoneuiNotification *object = PHONEUI_NOTIFICATION (_object);
-  GSource *idle_source;
-  idle_source = g_object_get_data (G_OBJECT (object), "gdbus-codegen-notification-idle-source");
-  if (idle_source != NULL)
-    {
-      emit_notifications_in_idle (object);
-      g_source_destroy (idle_source);
-    }
 }
 
 static void
-on_notify (GObject    *object,
-           GParamSpec *pspec,
-           gpointer    user_data)
-{
-  GDBusConnection *connection;
-  const gchar *path;
-  GVariant *value;
-  const gchar *property_name;
-
-  path = g_object_get_data (object, "gdbus-codegen-path");
-  connection = g_object_get_data (object, "gdbus-codegen-connection");
-  if (connection == NULL || path == NULL)
-    goto out;
-  property_name = lookup_property_name_from_property_gname (pspec->name);
-  if (property_name == NULL)
-    goto out;
-
-  value = get_property (connection, NULL, path, "org.shr.phoneui.Notification", property_name, NULL, object);
-  if (value != NULL)
-    {
-      if (g_variant_is_floating (value))
-        g_variant_ref_sink (value);
-      queue_notification (object, property_name, value);
-    }
-out:
-  ;
-}
-
-static void
-on_object_unregistered (GObject *object)
-{
-  GSource *idle_source;
-  idle_source = g_object_get_data (G_OBJECT (object), "gdbus-codegen-notification-idle-source");
-  if (idle_source != NULL)
-    g_source_destroy (idle_source);
-  g_object_set_data (G_OBJECT (object), "gdbus-codegen-notification-idle-source", NULL);
-  g_object_set_data (G_OBJECT (object), "gdbus-codegen-path", NULL);
-  g_object_set_data (G_OBJECT (object), "gdbus-codegen-connection", NULL);
-  g_signal_handlers_disconnect_by_func (object, on_notify, NULL);
-}
-
-static guint
-phoneui_notification_register_object (GDBusInterface *_object,
-           GDBusConnection *connection,
-           const gchar *object_path,
-           GError **error)
-{
-  PhoneuiNotification *object = PHONEUI_NOTIFICATION (_object);
-  GHashTable *pvc;
-  guint n;
-
-  pvc = g_hash_table_new_full (g_str_hash, g_str_equal, NULL, (GDestroyNotify) _variant_blob_free);
-  if (_phoneui_notification_interface_info.properties != NULL)
-    {
-      for (n = 0; _phoneui_notification_interface_info.properties[n] != NULL; n++)
-        {
-          GDBusPropertyInfo *prop_info = _phoneui_notification_interface_info.properties[n];
-          if (prop_info->flags & G_DBUS_PROPERTY_INFO_FLAGS_READABLE)
-            {
-              GVariant *value;
-              value = get_property (connection, NULL, object_path, "org.shr.phoneui.Notification", prop_info->name, NULL, object);
-              if (value != NULL)
-                {
-                  if (g_variant_is_floating (value))
-                    g_variant_ref_sink (value);
-                  g_hash_table_insert (pvc, prop_info->name, _variant_blob_new (value));
-                  g_variant_unref (value);
-                }
-            }
-        }
-    }
-
-  g_object_set_data_full (G_OBJECT (object), "gdbus-codegen-path", (gpointer) g_strdup (object_path), g_free);
-  g_object_set_data (G_OBJECT (object), "gdbus-codegen-connection", (gpointer) connection);
-  g_object_set_data_full (G_OBJECT (object), "gdbus-codegen-pvc", (gpointer) pvc, (GDestroyNotify) g_hash_table_unref);
-  g_signal_connect (object, "notify", G_CALLBACK (on_notify), NULL);
-  return g_dbus_connection_register_object (connection,
-          object_path,
-          (GDBusInterfaceInfo *) &_phoneui_notification_interface_info,
-          &phoneui_notification_interface_vtable,
-          object,
-          (GDestroyNotify) on_object_unregistered,
-          error);
-}
-
-/**
- * phoneui_notification_interface_info:
- *
- * Gets interface description for the <literal>org.shr.phoneui.Notification</literal> D-Bus interface.
- *
- * Returns: A #GDBusInterfaceInfo. Do not free, the object is statically allocated.
- */
-GDBusInterfaceInfo *
-phoneui_notification_interface_info (void)
-{
-  return (GDBusInterfaceInfo *) &_phoneui_notification_interface_info;
-}
-
-static GDBusInterfaceInfo *
-phoneui_notification_g_dbus_interface_interface_info (GDBusInterface *object)
-{
-  return phoneui_notification_interface_info ();
-}
-
-static GVariant *
-phoneui_notification_get_properties (GDBusInterface *object)
-{
-  GDBusConnection *connection;
-  const gchar *object_path;
-  GVariantBuilder builder;
+phoneui_notification_proxy_g_signal (GDBusProxy *proxy,
+  const gchar *sender_name,
+  const gchar *signal_name,
+  GVariant *parameters)
+{
+  _ExtendedGDBusSignalInfo *info;
+  GVariantIter iter;
+  GVariant *child;
+  GValue *paramv;
+  guint num_params;
   guint n;
-
-  g_variant_builder_init (&builder, G_VARIANT_TYPE ("a{sv}"));
-
-  if (_phoneui_notification_interface_info.properties == NULL)
-    goto out;
-
-  connection = g_object_get_data (G_OBJECT (object), "gdbus-codegen-connection");
-  object_path = g_object_get_data (G_OBJECT (object), "gdbus-codegen-path");
-
-  for (n = 0; _phoneui_notification_interface_info.properties[n] != NULL; n++)
+  guint signal_id;
+  info = (_ExtendedGDBusSignalInfo *) g_dbus_interface_info_lookup_signal ((GDBusInterfaceInfo *) &_phoneui_notification_interface_info, signal_name);
+  if (info == NULL)
+    return;
+  num_params = g_variant_n_children (parameters);
+  paramv = g_new0 (GValue, num_params + 1);
+  g_value_init (&paramv[0], TYPE_PHONEUI_NOTIFICATION);
+  g_value_set_object (&paramv[0], proxy);
+  g_variant_iter_init (&iter, parameters);
+  n = 1;
+  while ((child = g_variant_iter_next_value (&iter)) != NULL)
     {
-      GDBusPropertyInfo *prop_info = _phoneui_notification_interface_info.properties[n];
-      if (prop_info->flags & G_DBUS_PROPERTY_INFO_FLAGS_READABLE)
+      _ExtendedGDBusArgInfo *arg_info = (_ExtendedGDBusArgInfo *) info->parent_struct.args[n - 1];
+      if (arg_info->use_gvariant)
         {
-          GVariant *value;
-          value = get_property (connection, NULL, object_path, "org.shr.phoneui.Notification", prop_info->name, NULL, object);
-          if (value != NULL)
-            {
-              if (g_variant_is_floating (value))
-                g_variant_ref_sink (value);
-              g_variant_builder_add (&builder, "{sv}", prop_info->name, value);
-              g_variant_unref (value);
-            }
+          g_value_init (&paramv[n], G_TYPE_VARIANT);
+          g_value_set_variant (&paramv[n], child);
+          n++;
         }
+      else
+        g_dbus_gvariant_to_gvalue (child, &paramv[n++]);
+      g_variant_unref (child);
     }
-out:
-  return g_variant_builder_end (&builder);
-}
-
-
-/* ---------------------------------------------------------------------- */
-
-static void proxy_iface_init (PhoneuiNotificationIface *iface);
-
-G_DEFINE_TYPE_WITH_CODE (PhoneuiNotificationProxy, phoneui_notification_proxy, G_TYPE_DBUS_PROXY,
-                         G_IMPLEMENT_INTERFACE (TYPE_PHONEUI_NOTIFICATION, proxy_iface_init));
-
-static void
-phoneui_notification_proxy_init (PhoneuiNotificationProxy *proxy)
-{
-  g_dbus_proxy_set_interface_info (G_DBUS_PROXY (proxy),
-                                   (GDBusInterfaceInfo *) &_phoneui_notification_interface_info);
-}
-
-static void
-g_signal (GDBusProxy  *proxy,
-          const gchar *sender_name,
-          const gchar *signal_name,
-          GVariant    *parameters)
-{
-  guint signal_id;
-  signal_id = lookup_signal_id_from_signal_name (signal_name);
-  switch (signal_id)
-    {
-    }
-}
-
-static void
-phoneui_notification_proxy_get_property (GObject      *object,
-                       guint         prop_id,
-                       GValue       *value,
-                       GParamSpec   *pspec)
-{
-  G_GNUC_UNUSED GVariant *cached;
-  switch (prop_id)
-    {
-
-    default:
-      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
-      break;
-    }
-}
-
-static void
-property_set_cb (GDBusProxy   *proxy,
-                 GAsyncResult *res,
-                 gpointer      user_data)
-{
-  const gchar *property_name = user_data;
-  GError *error;
-  GVariant *result;
-
-  error = NULL;
-  result = g_dbus_proxy_call_finish (proxy, res, &error);
-  if (result == NULL)
-    {
-      g_warning ("Error setting property `%s': %s", property_name, error->message);
-      g_error_free (error);
-    }
-  else
-    {
-      g_variant_unref (result);
-    }
-}
-
-static void
-phoneui_notification_proxy_set_property (GObject      *object,
-                       guint         prop_id,
-                       const GValue *value,
-                       GParamSpec   *pspec)
-{
-  GVariant *new_value;
-  const gchar *property_name;
-  new_value = NULL;
-  property_name = NULL;
-  switch (prop_id)
-    {
-
-    default:
-      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
-      break;
-    }
-
-  if (new_value != NULL)
-    {
-      g_variant_ref_sink (new_value);
-      g_dbus_proxy_call (G_DBUS_PROXY (object),
-                         "org.freedesktop.DBus.Properties.Set",
-                         g_variant_new ("(ssv)",
-                                        "org.shr.phoneui.Notification",
-                                        property_name,
-                                        new_value),
-                         G_DBUS_CALL_FLAGS_NONE,
-                         -1,
-                         NULL,
-                         (GAsyncReadyCallback) property_set_cb,
-                         (gpointer) property_name);
-      g_variant_unref (new_value);
-    }
-
+  signal_id = g_signal_lookup (info->signal_name, TYPE_PHONEUI_NOTIFICATION);
+  g_signal_emitv (paramv, signal_id, 0, NULL);
+  for (n = 0; n < num_params + 1; n++)
+    g_value_unset (&paramv[n]);
+  g_free (paramv);
 }
 
 static void
-g_properties_changed (GDBusProxy         *proxy,
-                      GVariant           *changed_properties,
-                      const gchar* const *invalidated_properties)
+phoneui_notification_proxy_g_properties_changed (GDBusProxy *proxy,
+  GVariant *changed_properties,
+  const gchar *const *invalidated_properties)
 {
   guint n;
   const gchar *key;
   GVariantIter *iter;
-  const gchar *gname;
-
+  _ExtendedGDBusPropertyInfo *info;
   g_variant_get (changed_properties, "a{sv}", &iter);
   while (g_variant_iter_next (iter, "{&sv}", &key, NULL))
     {
-      gname = lookup_property_gname_from_property_name (key);
-      if (gname != NULL)
-        g_object_notify (G_OBJECT (proxy), gname);
+      info = (_ExtendedGDBusPropertyInfo *) g_dbus_interface_info_lookup_property ((GDBusInterfaceInfo *) &_phoneui_notification_interface_info, key);
+      if (info != NULL)
+        g_object_notify (G_OBJECT (proxy), info->hyphen_name);
     }
-
+  g_variant_iter_free (iter);
   for (n = 0; invalidated_properties[n] != NULL; n++)
     {
-      gname = lookup_property_gname_from_property_name (invalidated_properties[n]);
-      if (gname != NULL)
-        g_object_notify (G_OBJECT (proxy), gname);
+      info = (_ExtendedGDBusPropertyInfo *) g_dbus_interface_info_lookup_property ((GDBusInterfaceInfo *) &_phoneui_notification_interface_info, invalidated_properties[n]);
+      if (info != NULL)
+        g_object_notify (G_OBJECT (proxy), info->hyphen_name);
     }
+}
 
+static void
+phoneui_notification_proxy_init (PhoneuiNotificationProxy *proxy)
+{
+  g_dbus_proxy_set_interface_info (G_DBUS_PROXY (proxy), phoneui_notification_interface_info ());
 }
 
 static void
@@ -1837,74 +1291,62 @@ phoneui_notification_proxy_class_init (PhoneuiNotificationProxyClass *klass)
   gobject_class->set_property = phoneui_notification_proxy_set_property;
 
   proxy_class = G_DBUS_PROXY_CLASS (klass);
-  proxy_class->g_signal = g_signal;
-  proxy_class->g_properties_changed = g_properties_changed;
-
-}
+  proxy_class->g_signal = phoneui_notification_proxy_g_signal;
+  proxy_class->g_properties_changed = phoneui_notification_proxy_g_properties_changed;
 
-static void
-proxy_iface_init (PhoneuiNotificationIface *iface)
-{
 }
 
-
 /**
  * phoneui_notification_proxy_new:
  * @connection: A #GDBusConnection.
- * @flags: Flags used when constructing the proxy.
- * @name: A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.
+ * @flags: Flags from the #GDBusProxyFlags enumeration.
+ * @name: (allow-none): A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.
  * @object_path: An object path.
- * @cancellable: A #GCancellable or %NULL.
- * @callback: Callback function to invoke when the proxy is ready.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @callback: A #GAsyncReadyCallback to call when the request is satisfied.
  * @user_data: User data to pass to @callback.
  *
- * Like g_dbus_proxy_new() but returns a #PhoneuiNotificationProxy.
+ * Asynchronously creates a proxy for the D-Bus interface <link linkend="gdbus-interface-org-shr-phoneui-Notification.top_of_page">org.shr.phoneui.Notification</link>. See g_dbus_proxy_new() for more details.
  *
- * This is a failable asynchronous constructor - when the proxy is ready, callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this function from. You can then call phoneui_notification_proxy_new_finish() to get the result. See phoneui_notification_proxy_new_sync() for the synchronous version.
+ * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
+ * You can then call phoneui_notification_proxy_new_finish() to get the result of the operation.
+ *
+ * See phoneui_notification_proxy_new_sync() for the synchronous, blocking version of this constructor.
  */
-void phoneui_notification_proxy_new (GDBusConnection     *connection,
-                   GDBusProxyFlags      flags,
-                   const gchar         *name,
-                   const gchar         *object_path,
-                   GCancellable        *cancellable,
-                   GAsyncReadyCallback  callback,
-                   gpointer             user_data)
-{
-  g_async_initable_new_async (TYPE_PHONEUI_NOTIFICATION_PROXY,
-                              G_PRIORITY_DEFAULT,
-                              cancellable,
-                              callback,
-                              user_data,
-                              "g-flags", flags,
-                              "g-name", name,
-                              "g-connection", connection,
-                              "g-object-path", object_path,
-                              "g-interface-name", "org.shr.phoneui.Notification",
-                              NULL);
+void
+phoneui_notification_proxy_new (
+    GDBusConnection     *connection,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GAsyncReadyCallback  callback,
+    gpointer             user_data)
+{
+  g_async_initable_new_async (TYPE_PHONEUI_NOTIFICATION_PROXY, G_PRIORITY_DEFAULT, cancellable, callback, user_data, "g-flags", flags, "g-name", name, "g-connection", connection, "g-object-path", object_path, "g-interface-name", "org.shr.phoneui.Notification", NULL);
 }
 
 /**
  * phoneui_notification_proxy_new_finish:
- * @res: A #GAsyncResult obtained from the #GAsyncReadyCallback function passed to phoneui_notification_proxy_new().
- * @error: Return location for error or %NULL.
+ * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_notification_proxy_new().
+ * @error: Return location for error or %NULL
  *
- * Finishes creating a #PhoneuiNotificationProxy.
+ * Finishes an operation started with phoneui_notification_proxy_new().
  *
- * Returns: A #PhoneuiNotificationProxy or %NULL if @error is set. Free with g_object_unref().
+ * Returns: (transfer full) (type PhoneuiNotificationProxy): The constructed proxy object or %NULL if @error is set.
  */
-PhoneuiNotification *phoneui_notification_proxy_new_finish (GAsyncResult  *res,
-                        GError       **error)
+PhoneuiNotification *
+phoneui_notification_proxy_new_finish (
+    GAsyncResult        *res,
+    GError             **error)
 {
-  GObject *object;
+  GObject *ret;
   GObject *source_object;
   source_object = g_async_result_get_source_object (res);
-  g_assert (source_object != NULL);
-  object = g_async_initable_new_finish (G_ASYNC_INITABLE (source_object),
-                                        res,
-                                        error);
+  ret = g_async_initable_new_finish (G_ASYNC_INITABLE (source_object), res, error);
   g_object_unref (source_object);
-  if (object != NULL)
-    return PHONEUI_NOTIFICATION (object);
+  if (ret != NULL)
+    return PHONEUI_NOTIFICATION (ret);
   else
     return NULL;
 }
@@ -1912,37 +1354,33 @@ PhoneuiNotification *phoneui_notification_proxy_new_finish (GAsyncResult  *res,
 /**
  * phoneui_notification_proxy_new_sync:
  * @connection: A #GDBusConnection.
- * @flags: Flags used when constructing the proxy.
- * @name: A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.
+ * @flags: Flags from the #GDBusProxyFlags enumeration.
+ * @name: (allow-none): A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.
  * @object_path: An object path.
- * @cancellable: A #GCancellable or %NULL.
- * @error: Return location for error or %NULL.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @error: Return location for error or %NULL
+ *
+ * Synchronously creates a proxy for the D-Bus interface <link linkend="gdbus-interface-org-shr-phoneui-Notification.top_of_page">org.shr.phoneui.Notification</link>. See g_dbus_proxy_new_sync() for more details.
  *
- * Like g_dbus_proxy_new_sync() but returns a #PhoneuiNotificationProxy.
+ * The calling thread is blocked until a reply is received.
  *
- * This is a synchronous failable constructor - the calling thread is blocked until the object is ready. See phoneui_notification_proxy_new() for the asynchronous version.
+ * See phoneui_notification_proxy_new() for the asynchronous version of this constructor.
  *
- * Returns: A #PhoneuiNotificationProxy or %NULL if error is set. Free with g_object_unref().
+ * Returns: (transfer full) (type PhoneuiNotificationProxy): The constructed proxy object or %NULL if @error is set.
  */
-PhoneuiNotification *phoneui_notification_proxy_new_sync (GDBusConnection     *connection,
-                       GDBusProxyFlags      flags,
-                       const gchar         *name,
-                       const gchar         *object_path,
-                       GCancellable        *cancellable,
-                       GError             **error)
-{
-  GInitable *initable;
-  initable = g_initable_new (TYPE_PHONEUI_NOTIFICATION_PROXY,
-                             cancellable,
-                             error,
-                             "g-flags", flags,
-                             "g-name", name,
-                             "g-connection", connection,
-                             "g-object-path", object_path,
-                             "g-interface-name", "org.shr.phoneui.Notification",
-                             NULL);
-  if (initable != NULL)
-    return PHONEUI_NOTIFICATION (initable);
+PhoneuiNotification *
+phoneui_notification_proxy_new_sync (
+    GDBusConnection     *connection,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GError             **error)
+{
+  GInitable *ret;
+  ret = g_initable_new (TYPE_PHONEUI_NOTIFICATION_PROXY, cancellable, error, "g-flags", flags, "g-name", name, "g-connection", connection, "g-object-path", object_path, "g-interface-name", "org.shr.phoneui.Notification", NULL);
+  if (ret != NULL)
+    return PHONEUI_NOTIFICATION (ret);
   else
     return NULL;
 }
@@ -1951,60 +1389,54 @@ PhoneuiNotification *phoneui_notification_proxy_new_sync (GDBusConnection     *c
 /**
  * phoneui_notification_proxy_new_for_bus:
  * @bus_type: A #GBusType.
- * @flags: Flags used when constructing the proxy.
+ * @flags: Flags from the #GDBusProxyFlags enumeration.
  * @name: A bus name (well-known or unique).
  * @object_path: An object path.
- * @cancellable: A #GCancellable or %NULL.
- * @callback: Callback function to invoke when the proxy is ready.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @callback: A #GAsyncReadyCallback to call when the request is satisfied.
  * @user_data: User data to pass to @callback.
  *
- * Like g_dbus_proxy_new_for_bus() but returns a #PhoneuiNotificationProxy.
+ * Like phoneui_notification_proxy_new() but takes a #GBusType instead of a #GDBusConnection.
+ *
+ * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
+ * You can then call phoneui_notification_proxy_new_for_bus_finish() to get the result of the operation.
  *
- * This is a failable asynchronous constructor - when the proxy is ready, callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this function from. You can then call phoneui_notification_proxy_new_for_bus_finish() to get the result. See phoneui_notification_proxy_new_for_bus_sync() for the synchronous version.
+ * See phoneui_notification_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.
  */
-void phoneui_notification_proxy_new_for_bus (GBusType             bus_type,
-                           GDBusProxyFlags      flags,
-                           const gchar         *name,
-                           const gchar         *object_path,
-                           GCancellable        *cancellable,
-                           GAsyncReadyCallback  callback,
-                           gpointer             user_data)
-{
-  g_async_initable_new_async (TYPE_PHONEUI_NOTIFICATION_PROXY,
-                              G_PRIORITY_DEFAULT,
-                              cancellable,
-                              callback,
-                              user_data,
-                              "g-flags", flags,
-                              "g-name", name,
-                              "g-bus-type", bus_type,
-                              "g-object-path", object_path,
-                              "g-interface-name", "org.shr.phoneui.Notification",
-                              NULL);
+void
+phoneui_notification_proxy_new_for_bus (
+    GBusType             bus_type,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GAsyncReadyCallback  callback,
+    gpointer             user_data)
+{
+  g_async_initable_new_async (TYPE_PHONEUI_NOTIFICATION_PROXY, G_PRIORITY_DEFAULT, cancellable, callback, user_data, "g-flags", flags, "g-name", name, "g-bus-type", bus_type, "g-object-path", object_path, "g-interface-name", "org.shr.phoneui.Notification", NULL);
 }
 
 /**
  * phoneui_notification_proxy_new_for_bus_finish:
- * @res: A #GAsyncResult obtained from the #GAsyncReadyCallback function passed to phoneui_notification_proxy_new_for_bus().
- * @error: Return location for error or %NULL.
+ * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_notification_proxy_new_for_bus().
+ * @error: Return location for error or %NULL
  *
- * Finishes creating a #PhoneuiNotificationProxy.
+ * Finishes an operation started with phoneui_notification_proxy_new_for_bus().
  *
- * Returns: A #PhoneuiNotificationProxy or %NULL if @error is set. Free with g_object_unref().
+ * Returns: (transfer full) (type PhoneuiNotificationProxy): The constructed proxy object or %NULL if @error is set.
  */
-PhoneuiNotification *phoneui_notification_proxy_new_for_bus_finish (GAsyncResult  *res,
-                                GError       **error)
+PhoneuiNotification *
+phoneui_notification_proxy_new_for_bus_finish (
+    GAsyncResult        *res,
+    GError             **error)
 {
-  GObject *object;
+  GObject *ret;
   GObject *source_object;
   source_object = g_async_result_get_source_object (res);
-  g_assert (source_object != NULL);
-  object = g_async_initable_new_finish (G_ASYNC_INITABLE (source_object),
-                                        res,
-                                        error);
+  ret = g_async_initable_new_finish (G_ASYNC_INITABLE (source_object), res, error);
   g_object_unref (source_object);
-  if (object != NULL)
-    return PHONEUI_NOTIFICATION (object);
+  if (ret != NULL)
+    return PHONEUI_NOTIFICATION (ret);
   else
     return NULL;
 }
@@ -2012,163 +1444,321 @@ PhoneuiNotification *phoneui_notification_proxy_new_for_bus_finish (GAsyncResult
 /**
  * phoneui_notification_proxy_new_for_bus_sync:
  * @bus_type: A #GBusType.
- * @flags: Flags used when constructing the proxy.
+ * @flags: Flags from the #GDBusProxyFlags enumeration.
  * @name: A bus name (well-known or unique).
  * @object_path: An object path.
- * @cancellable: A #GCancellable or %NULL.
- * @error: Return location for error or %NULL.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @error: Return location for error or %NULL
+ *
+ * Like phoneui_notification_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.
  *
- * Like g_dbus_proxy_new_for_bus_sync() but returns a #PhoneuiNotificationProxy.
+ * The calling thread is blocked until a reply is received.
  *
- * This is a synchronous failable constructor - the calling thread is blocked until the object is ready. See phoneui_notification_proxy_new_for_bus() for the asynchronous version.
+ * See phoneui_notification_proxy_new_for_bus() for the asynchronous version of this constructor.
  *
- * Returns: A #PhoneuiNotificationProxy or %NULL if error is set. Free with g_object_unref().
+ * Returns: (transfer full) (type PhoneuiNotificationProxy): The constructed proxy object or %NULL if @error is set.
  */
-PhoneuiNotification *phoneui_notification_proxy_new_for_bus_sync (GBusType             bus_type,
-                               GDBusProxyFlags      flags,
-                               const gchar         *name,
-                               const gchar         *object_path,
-                               GCancellable        *cancellable,
-                               GError             **error)
-{
-  GInitable *initable;
-  initable = g_initable_new (TYPE_PHONEUI_NOTIFICATION_PROXY,
-                             cancellable,
-                             error,
-                             "g-flags", flags,
-                             "g-name", name,
-                             "g-bus-type", bus_type,
-                             "g-object-path", object_path,
-                             "g-interface-name", "org.shr.phoneui.Notification",
-                             NULL);
-  if (initable != NULL)
-    return PHONEUI_NOTIFICATION (initable);
+PhoneuiNotification *
+phoneui_notification_proxy_new_for_bus_sync (
+    GBusType             bus_type,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GError             **error)
+{
+  GInitable *ret;
+  ret = g_initable_new (TYPE_PHONEUI_NOTIFICATION_PROXY, cancellable, error, "g-flags", flags, "g-name", name, "g-bus-type", bus_type, "g-object-path", object_path, "g-interface-name", "org.shr.phoneui.Notification", NULL);
+  if (ret != NULL)
+    return PHONEUI_NOTIFICATION (ret);
   else
     return NULL;
 }
 
 
-/* ---------------------------------------------------------------------- */
+/* ------------------------------------------------------------------------ */
+
+/**
+ * PhoneuiNotificationSkeleton:
+ *
+ * The #PhoneuiNotificationSkeleton structure contains only private data and should only be accessed using the provided API.
+ */
 
-struct _PhoneuiNotificationStubPrivate
+/**
+ * PhoneuiNotificationSkeletonClass:
+ * @parent_class: The parent class.
+ *
+ * Class structure for #PhoneuiNotificationSkeleton.
+ */
+
+struct _PhoneuiNotificationSkeletonPrivate
 {
-  GDBusObject *enclosing_object;
-  GDBusInterfaceFlags flags;
+  GValueArray *properties;
+  GList *changed_properties;
+  GSource *changed_properties_idle_source;
+  GMainContext *context;
 };
 
-static void stub_iface_init (PhoneuiNotificationIface *iface);
+static void
+_phoneui_notification_skeleton_handle_method_call (
+  GDBusConnection *connection,
+  const gchar *sender,
+  const gchar *object_path,
+  const gchar *interface_name,
+  const gchar *method_name,
+  GVariant *parameters,
+  GDBusMethodInvocation *invocation,
+  gpointer user_data)
+{
+  PhoneuiNotificationSkeleton *skeleton = PHONEUI_NOTIFICATION_SKELETON (user_data);
+  _ExtendedGDBusMethodInfo *info;
+  GVariantIter iter;
+  GVariant *child;
+  GValue *paramv;
+  guint num_params;
+  guint n;
+  guint signal_id;
+  GValue return_value = {0};
+  info = (_ExtendedGDBusMethodInfo *) g_dbus_method_invocation_get_method_info (invocation);
+  g_assert (info != NULL);
+  num_params = g_variant_n_children (parameters);
+  paramv = g_new0 (GValue, num_params + 2);
+  g_value_init (&paramv[0], TYPE_PHONEUI_NOTIFICATION);
+  g_value_set_object (&paramv[0], skeleton);
+  g_value_init (&paramv[1], G_TYPE_DBUS_METHOD_INVOCATION);
+  g_value_set_object (&paramv[1], invocation);
+  g_variant_iter_init (&iter, parameters);
+  n = 2;
+  while ((child = g_variant_iter_next_value (&iter)) != NULL)
+    {
+      _ExtendedGDBusArgInfo *arg_info = (_ExtendedGDBusArgInfo *) info->parent_struct.in_args[n - 2];
+      if (arg_info->use_gvariant)
+        {
+          g_value_init (&paramv[n], G_TYPE_VARIANT);
+          g_value_set_variant (&paramv[n], child);
+          n++;
+        }
+      else
+        g_dbus_gvariant_to_gvalue (child, &paramv[n++]);
+      g_variant_unref (child);
+    }
+  signal_id = g_signal_lookup (info->signal_name, TYPE_PHONEUI_NOTIFICATION);
+  g_value_init (&return_value, G_TYPE_BOOLEAN);
+  g_signal_emitv (paramv, signal_id, 0, &return_value);
+  if (!g_value_get_boolean (&return_value))
+    g_dbus_method_invocation_return_error (invocation, G_DBUS_ERROR, G_DBUS_ERROR_UNKNOWN_METHOD, "Method %s is not implemented on interface %s", method_name, interface_name);
+  g_value_unset (&return_value);
+  for (n = 0; n < num_params + 2; n++)
+    g_value_unset (&paramv[n]);
+  g_free (paramv);
+}
+
+static GVariant *
+_phoneui_notification_skeleton_handle_get_property (
+  GDBusConnection *connection,
+  const gchar *sender,
+  const gchar *object_path,
+  const gchar *interface_name,
+  const gchar *property_name,
+  GError **error,
+  gpointer user_data)
+{
+  PhoneuiNotificationSkeleton *skeleton = PHONEUI_NOTIFICATION_SKELETON (user_data);
+  GValue value = {0};
+  GParamSpec *pspec;
+  _ExtendedGDBusPropertyInfo *info;
+  GVariant *ret;
+  ret = NULL;
+  info = (_ExtendedGDBusPropertyInfo *) g_dbus_interface_info_lookup_property ((GDBusInterfaceInfo *) &_phoneui_notification_interface_info, property_name);
+  g_assert (info != NULL);
+  pspec = g_object_class_find_property (G_OBJECT_GET_CLASS (skeleton), info->hyphen_name);
+  if (pspec == NULL)
+    {
+      g_set_error (error, G_DBUS_ERROR, G_DBUS_ERROR_INVALID_ARGS, "No property with name %s", property_name);
+    }
+  else
+    {
+      g_value_init (&value, pspec->value_type);
+      g_object_get_property (G_OBJECT (skeleton), info->hyphen_name, &value);
+      ret = g_dbus_gvalue_to_gvariant (&value, G_VARIANT_TYPE (info->parent_struct.signature));
+      g_value_unset (&value);
+    }
+  return ret;
+}
 
-G_DEFINE_TYPE_WITH_CODE (PhoneuiNotificationStub, phoneui_notification_stub, G_TYPE_OBJECT,
-                         G_IMPLEMENT_INTERFACE (G_TYPE_DBUS_INTERFACE, dbus_iface_init)
-                         G_IMPLEMENT_INTERFACE (TYPE_PHONEUI_NOTIFICATION, stub_iface_init));
+static gboolean
+_phoneui_notification_skeleton_handle_set_property (
+  GDBusConnection *connection,
+  const gchar *sender,
+  const gchar *object_path,
+  const gchar *interface_name,
+  const gchar *property_name,
+  GVariant *variant,
+  GError **error,
+  gpointer user_data)
+{
+  PhoneuiNotificationSkeleton *skeleton = PHONEUI_NOTIFICATION_SKELETON (user_data);
+  GValue value = {0};
+  GParamSpec *pspec;
+  _ExtendedGDBusPropertyInfo *info;
+  gboolean ret;
+  ret = FALSE;
+  info = (_ExtendedGDBusPropertyInfo *) g_dbus_interface_info_lookup_property ((GDBusInterfaceInfo *) &_phoneui_notification_interface_info, property_name);
+  g_assert (info != NULL);
+  pspec = g_object_class_find_property (G_OBJECT_GET_CLASS (skeleton), info->hyphen_name);
+  if (pspec == NULL)
+    {
+      g_set_error (error, G_DBUS_ERROR, G_DBUS_ERROR_INVALID_ARGS, "No property with name %s", property_name);
+    }
+  else
+    {
+      if (info->use_gvariant)
+        g_value_set_variant (&value, variant);
+      else
+        g_dbus_gvariant_to_gvalue (variant, &value);
+      g_object_set_property (G_OBJECT (skeleton), info->hyphen_name, &value);
+      g_value_unset (&value);
+      ret = TRUE;
+    }
+  return ret;
+}
 
-static void
-phoneui_notification_stub_finalize (GObject *object)
+static const GDBusInterfaceVTable _phoneui_notification_skeleton_vtable =
 {
-  G_GNUC_UNUSED PhoneuiNotificationStub *stub = (PhoneuiNotificationStub *) object;
+  _phoneui_notification_skeleton_handle_method_call,
+  _phoneui_notification_skeleton_handle_get_property,
+  _phoneui_notification_skeleton_handle_set_property
+};
 
-  if (G_OBJECT_CLASS (phoneui_notification_stub_parent_class)->finalize != NULL)
-    G_OBJECT_CLASS (phoneui_notification_stub_parent_class)->finalize (object);
+static GDBusInterfaceInfo *
+phoneui_notification_skeleton_dbus_interface_get_info (GDBusInterfaceSkeleton *skeleton)
+{
+  return phoneui_notification_interface_info ();
 }
 
-static void
-phoneui_notification_stub_get_property (GObject      *object,
-                      guint         prop_id,
-                      GValue       *value,
-                      GParamSpec   *pspec)
+static GDBusInterfaceVTable *
+phoneui_notification_skeleton_dbus_interface_get_vtable (GDBusInterfaceSkeleton *skeleton)
 {
-  G_GNUC_UNUSED PhoneuiNotificationStub *stub = (PhoneuiNotificationStub *) object;
-  switch (prop_id)
-    {
-
-    default:
-      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
-      break;
-    }
+  return (GDBusInterfaceVTable *) &_phoneui_notification_skeleton_vtable;
 }
 
-static void
-phoneui_notification_stub_set_property (GObject      *object,
-                      guint         prop_id,
-                      const GValue *value,
-                      GParamSpec   *pspec)
+static GVariant *
+phoneui_notification_skeleton_dbus_interface_get_properties (GDBusInterfaceSkeleton *_skeleton)
 {
-  G_GNUC_UNUSED PhoneuiNotificationStub *stub = (PhoneuiNotificationStub *) object;
-  switch (prop_id)
-    {
+  PhoneuiNotificationSkeleton *skeleton = PHONEUI_NOTIFICATION_SKELETON (_skeleton);
 
-    default:
-      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
-      break;
+  GVariantBuilder builder;
+  guint n;
+  g_variant_builder_init (&builder, G_VARIANT_TYPE ("a{sv}"));
+  if (_phoneui_notification_interface_info.parent_struct.properties == NULL)
+    goto out;
+  for (n = 0; _phoneui_notification_interface_info.parent_struct.properties[n] != NULL; n++)
+    {
+      GDBusPropertyInfo *info = _phoneui_notification_interface_info.parent_struct.properties[n];
+      if (info->flags & G_DBUS_PROPERTY_INFO_FLAGS_READABLE)
+        {
+          GVariant *value;
+          value = _phoneui_notification_skeleton_handle_get_property (g_dbus_interface_skeleton_get_connection (G_DBUS_INTERFACE_SKELETON (skeleton)), NULL, g_dbus_interface_skeleton_get_object_path (G_DBUS_INTERFACE_SKELETON (skeleton)), "org.shr.phoneui.Notification", info->name, NULL, skeleton);
+          if (value != NULL)
+            {
+              if (g_variant_is_floating (value))
+                g_variant_ref_sink (value);
+              g_variant_builder_add (&builder, "{sv}", info->name, value);
+              g_variant_unref (value);
+            }
+        }
     }
+out:
+  return g_variant_builder_end (&builder);
 }
 
 static void
-phoneui_notification_stub_init (PhoneuiNotificationStub *stub)
+phoneui_notification_skeleton_dbus_interface_flush (GDBusInterfaceSkeleton *_skeleton)
 {
-  stub->priv = G_TYPE_INSTANCE_GET_PRIVATE (stub, TYPE_PHONEUI_NOTIFICATION_STUB, PhoneuiNotificationStubPrivate);
 }
 
 static void
-phoneui_notification_stub_class_init (PhoneuiNotificationStubClass *klass)
+phoneui_notification_skeleton_iface_init (PhoneuiNotificationIface *iface)
 {
-  GObjectClass *gobject_class;
-
-  gobject_class = G_OBJECT_CLASS (klass);
-  gobject_class->finalize     = phoneui_notification_stub_finalize;
-  gobject_class->get_property = phoneui_notification_stub_get_property;
-  gobject_class->set_property = phoneui_notification_stub_set_property;
-  g_type_class_add_private (klass, sizeof (PhoneuiNotificationStubPrivate));
 }
 
+#define phoneui_notification_skeleton_get_type phoneui_notification_skeleton_get_type
+G_DEFINE_TYPE_WITH_CODE (PhoneuiNotificationSkeleton, phoneui_notification_skeleton, G_TYPE_DBUS_INTERFACE_SKELETON,
+                         G_IMPLEMENT_INTERFACE (TYPE_PHONEUI_NOTIFICATION, phoneui_notification_skeleton_iface_init));
+#undef phoneui_notification_skeleton_get_type
+
 static void
-stub_iface_init (PhoneuiNotificationIface *iface)
+phoneui_notification_skeleton_finalize (GObject *object)
 {
+  PhoneuiNotificationSkeleton *skeleton = PHONEUI_NOTIFICATION_SKELETON (object);
+  g_list_foreach (skeleton->priv->changed_properties, (GFunc) _changed_property_free, NULL);
+  g_list_free (skeleton->priv->changed_properties);
+  if (skeleton->priv->changed_properties_idle_source != NULL)
+    g_source_destroy (skeleton->priv->changed_properties_idle_source);
+  if (skeleton->priv->context != NULL)
+    g_main_context_unref (skeleton->priv->context);
+  G_OBJECT_CLASS (phoneui_notification_skeleton_parent_class)->finalize (object);
 }
 
-/**
- * phoneui_notification_stub_new:
- *
- * Creates a new stub object that can be exported via g_dbus_interface_register_object().
- *
- * Returns: A #PhoneuiNotificationStub instance. Free with g_object_unref().
- */
-PhoneuiNotification *
-phoneui_notification_stub_new (void)
+static void
+phoneui_notification_skeleton_get_property (GObject      *object,
+  guint         prop_id,
+  GValue       *value,
+  GParamSpec   *pspec)
 {
-  return PHONEUI_NOTIFICATION (g_object_new (TYPE_PHONEUI_NOTIFICATION_STUB, NULL));
+  PhoneuiNotificationSkeleton *skeleton = PHONEUI_NOTIFICATION_SKELETON (object);
+  g_assert (prop_id - 1 >= 0 && prop_id - 1 < 0);
+  g_value_copy (&skeleton->priv->properties->values[prop_id - 1], value);
 }
 
-static GDBusObject *
-phoneui_notification_g_dbus_interface_get_object (GDBusInterface *interface)
+static void
+phoneui_notification_skeleton_set_property (GObject      *object,
+  guint         prop_id,
+  const GValue *value,
+  GParamSpec   *pspec)
 {
-  PhoneuiNotificationStub *stub = G_TYPE_CHECK_INSTANCE_CAST (interface, TYPE_PHONEUI_NOTIFICATION_STUB, PhoneuiNotificationStub);
-  if (stub->priv->enclosing_object != NULL)
-    return g_object_ref (stub->priv->enclosing_object);
-  else
-    return NULL;
 }
 
 static void
-phoneui_notification_g_dbus_interface_set_object (GDBusInterface *interface,
-                                GDBusObject    *object)
+phoneui_notification_skeleton_init (PhoneuiNotificationSkeleton *skeleton)
 {
-  PhoneuiNotificationStub *stub = G_TYPE_CHECK_INSTANCE_CAST (interface, TYPE_PHONEUI_NOTIFICATION_STUB, PhoneuiNotificationStub);
-  stub->priv->enclosing_object = object;
+  skeleton->priv = G_TYPE_INSTANCE_GET_PRIVATE (skeleton, TYPE_PHONEUI_NOTIFICATION_SKELETON, PhoneuiNotificationSkeletonPrivate);
+  skeleton->priv->context = g_main_context_get_thread_default ();
+  if (skeleton->priv->context != NULL)
+    g_main_context_ref (skeleton->priv->context);
 }
 
-static GDBusInterfaceFlags
-phoneui_notification_g_dbus_interface_get_flags (GDBusInterface *interface)
+static void
+phoneui_notification_skeleton_class_init (PhoneuiNotificationSkeletonClass *klass)
 {
-  PhoneuiNotificationStub *stub = G_TYPE_CHECK_INSTANCE_CAST (interface, TYPE_PHONEUI_NOTIFICATION_STUB, PhoneuiNotificationStub);
-  return stub->priv->flags;
+  GObjectClass *gobject_class;
+  GDBusInterfaceSkeletonClass *skeleton_class;
+
+  g_type_class_add_private (klass, sizeof (PhoneuiNotificationSkeletonPrivate));
+
+  gobject_class = G_OBJECT_CLASS (klass);
+  gobject_class->finalize = phoneui_notification_skeleton_finalize;
+  gobject_class->get_property = phoneui_notification_skeleton_get_property;
+  gobject_class->set_property = phoneui_notification_skeleton_set_property;
+
+
+  skeleton_class = G_DBUS_INTERFACE_SKELETON_CLASS (klass);
+  skeleton_class->get_info = phoneui_notification_skeleton_dbus_interface_get_info;
+  skeleton_class->get_properties = phoneui_notification_skeleton_dbus_interface_get_properties;
+  skeleton_class->flush = phoneui_notification_skeleton_dbus_interface_flush;
+  skeleton_class->get_vtable = phoneui_notification_skeleton_dbus_interface_get_vtable;
 }
 
-static void
-phoneui_notification_g_dbus_interface_set_flags (GDBusInterface      *interface,
-                               GDBusInterfaceFlags  flags)
+/**
+ * phoneui_notification_skeleton_new:
+ *
+ * Creates a skeleton object for the D-Bus interface <link linkend="gdbus-interface-org-shr-phoneui-Notification.top_of_page">org.shr.phoneui.Notification</link>.
+ *
+ * Returns: (transfer full) (type PhoneuiNotificationSkeleton): The skeleton object.
+ */
+PhoneuiNotification *
+phoneui_notification_skeleton_new (void)
 {
-  PhoneuiNotificationStub *stub = G_TYPE_CHECK_INSTANCE_CAST (interface, TYPE_PHONEUI_NOTIFICATION_STUB, PhoneuiNotificationStub);
-  stub->priv->flags = flags;
+  return PHONEUI_NOTIFICATION (g_object_new (TYPE_PHONEUI_NOTIFICATION_SKELETON, NULL));
 }
 
diff --git a/src/shr-phoneuinotification.h b/src/shr-phoneuinotification.h
index f46f8f9..9731c2c 100644
--- a/src/shr-phoneuinotification.h
+++ b/src/shr-phoneuinotification.h
@@ -1,355 +1,281 @@
-/* File:       shr-phoneuinotification.h
+/*
+ * Generated by gdbus-codegen 2.29.3. DO NOT EDIT.
  *
- * GType name: PhoneuiNotification
- * D-Bus name: org.shr.phoneui.Notification
- *
- * Generated by GDBus Binding Tool 0.1. DO NOT EDIT.
+ * The license of this code is the same as for the source it was derived from.
  */
 
-#ifndef __SHR_PHONEUI_NOTIFICATION_H__
-#define __SHR_PHONEUI_NOTIFICATION_H__
+#ifndef __SHR_PHONEUINOTIFICATION_H__
+#define __SHR_PHONEUINOTIFICATION_H__
 
 #include <gio/gio.h>
-#include <gdbusinterface.h>
-#include <gdbusobjectproxy.h>
-#include <gdbusproxymanager.h>
-#include <gdbusobject.h>
-#include <gdbusobjectmanager.h>
-#include <gdbuscodegen-enumtypes.h>
-#include <string.h>
-#include <shr-types.h>
 
 G_BEGIN_DECLS
 
-#define TYPE_PHONEUI_NOTIFICATION         (phoneui_notification_get_gtype ())
-#define PHONEUI_NOTIFICATION(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_PHONEUI_NOTIFICATION, PhoneuiNotification))
-#define IS_PHONEUI_NOTIFICATION(o)        (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_PHONEUI_NOTIFICATION))
-#define PHONEUI_NOTIFICATION_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE((o), TYPE_PHONEUI_NOTIFICATION, PhoneuiNotificationIface))
 
-/**
- * PhoneuiNotification:
- *
- * Opaque type representing a proxy or an exported object.
- */
-typedef struct _PhoneuiNotification PhoneuiNotification; /* Dummy typedef */
-/**
- * PhoneuiNotificationIface:
- * @parent_iface: The parent interface.
- * @handle_display_sim_auth: Handler for the #PhoneuiNotification::handle-display-sim-auth signal.
- * @handle_hide_sim_auth: Handler for the #PhoneuiNotification::handle-hide-sim-auth signal.
- * @handle_display_ussd: Handler for the #PhoneuiNotification::handle-display-ussd signal.
- * @handle_display_dialog: Handler for the #PhoneuiNotification::handle-display-dialog signal.
- * @handle_feedback_action: Handler for the #PhoneuiNotification::handle-feedback-action signal.
- *
- * Virtual table.
- */
-typedef struct _PhoneuiNotificationIface PhoneuiNotificationIface;
+/* ------------------------------------------------------------------------ */
+/* Declarations for org.shr.phoneui.Notification */
 
-GType phoneui_notification_get_gtype (void) G_GNUC_CONST;
-GDBusInterfaceInfo *phoneui_notification_interface_info (void);
+#define TYPE_PHONEUI_NOTIFICATION (phoneui_notification_get_type ())
+#define PHONEUI_NOTIFICATION(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_PHONEUI_NOTIFICATION, PhoneuiNotification))
+#define IS_PHONEUI_NOTIFICATION(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_PHONEUI_NOTIFICATION))
+#define PHONEUI_NOTIFICATION_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_PHONEUI_NOTIFICATION, PhoneuiNotification))
 
-/**
- * GET_PHONEUI_NOTIFICATION:
- * @object_proxy: A #GDBusObjectProxy.
- *
- * Convenience macro to get a #PhoneuiNotification interface proxy from @object_proxy.
- *
- * Returns: A #GDBusProxy object implementing the #PhoneuiNotification interface or %NULL if @object_proxy
- * does not implement the <literal>org.shr.phoneui.Notification</literal> D-Bus interface.
- * The returned reference must be released with g_object_unref().
- */
-#define GET_PHONEUI_NOTIFICATION(object_proxy) (g_dbus_object_proxy_lookup_with_typecheck (object_proxy, "org.shr.phoneui.Notification", TYPE_PHONEUI_NOTIFICATION))
+struct _PhoneuiNotification;
+typedef struct _PhoneuiNotification PhoneuiNotification;
+typedef struct _PhoneuiNotificationIface PhoneuiNotificationIface;
 
-/**
- * PEEK_PHONEUI_NOTIFICATION:
- * @object_proxy: A #GDBusObjectProxy.
- *
- * Like GET_PHONEUI_NOTIFICATION() but doesn't increase the reference count on the returned object.
- *
- * <note><para>This macro is not safe to use outside the thread where the #GDBusProxyManager for @object_proxy was constructed in.</para></note>
- *
- * Returns: A #GDBusProxy object implementing the #PhoneuiNotification interface or %NULL if @object_proxy
- * does not implement the <literal>org.shr.phoneui.Notification</literal> D-Bus interface.
- * Do not free the returned object, it is owned by @object_proxy..
- */
-#define PEEK_PHONEUI_NOTIFICATION(object_proxy) (g_dbus_object_proxy_peek_with_typecheck (object_proxy, "org.shr.phoneui.Notification", TYPE_PHONEUI_NOTIFICATION))
+struct _PhoneuiNotificationIface
+{
+  GTypeInterface parent_iface;
 
+  gboolean (*handle_display_dialog) (
+    PhoneuiNotification *object,
+    GDBusMethodInvocation *invocation,
+    gint dialog);
 
-/* ---------------------------------------------------------------------- */
+  gboolean (*handle_display_sim_auth) (
+    PhoneuiNotification *object,
+    GDBusMethodInvocation *invocation,
+    gint status);
 
-typedef struct _PhoneuiNotificationProxy PhoneuiNotificationProxy;
-typedef struct _PhoneuiNotificationProxyClass PhoneuiNotificationProxyClass;
+  gboolean (*handle_display_ussd) (
+    PhoneuiNotification *object,
+    GDBusMethodInvocation *invocation,
+    gint mode,
+    const gchar *message);
 
-/**
- * PhoneuiNotificationProxyPrivate:
- *
- * The #PhoneuiNotificationProxyPrivate structure contains only private data.
- */
-typedef struct _PhoneuiNotificationProxyPrivate PhoneuiNotificationProxyPrivate;
+  gboolean (*handle_feedback_action) (
+    PhoneuiNotification *object,
+    GDBusMethodInvocation *invocation,
+    const gchar *action,
+    const gchar *level);
 
-/**
- * PhoneuiNotificationProxy:
- *
- * The #PhoneuiNotificationProxy structure contains only private data and
- * should only be accessed using the provided API.
- */
-struct _PhoneuiNotificationProxy
-{
-  /*< private >*/
-  GDBusProxy parent_instance;
-  PhoneuiNotificationProxyPrivate *priv;
-};
+  gboolean (*handle_hide_sim_auth) (
+    PhoneuiNotification *object,
+    GDBusMethodInvocation *invocation,
+    gint status);
 
-/**
- * PhoneuiNotificationProxyClass:
- *
- * Class structure for #PhoneuiNotificationProxy.
- */
-struct _PhoneuiNotificationProxyClass
-{
-  /*< private >*/
-  GDBusProxyClass parent_class;
 };
 
-#define TYPE_PHONEUI_NOTIFICATION_PROXY (phoneui_notification_proxy_get_type ())
-GType phoneui_notification_proxy_get_type (void) G_GNUC_CONST;
-
-void phoneui_notification_proxy_new (GDBusConnection     *connection,
-                   GDBusProxyFlags      flags,
-                   const gchar         *name,
-                   const gchar         *object_path,
-                   GCancellable        *cancellable,
-                   GAsyncReadyCallback  callback,
-                   gpointer             user_data);
-PhoneuiNotification *phoneui_notification_proxy_new_finish (GAsyncResult  *res,
-                        GError       **error);
-PhoneuiNotification *phoneui_notification_proxy_new_sync (GDBusConnection     *connection,
-                       GDBusProxyFlags      flags,
-                       const gchar         *name,
-                       const gchar         *object_path,
-                       GCancellable        *cancellable,
-                       GError             **error);
-
-void phoneui_notification_proxy_new_for_bus (GBusType             bus_type,
-                           GDBusProxyFlags      flags,
-                           const gchar         *name,
-                           const gchar         *object_path,
-                           GCancellable        *cancellable,
-                           GAsyncReadyCallback  callback,
-                           gpointer             user_data);
-PhoneuiNotification *phoneui_notification_proxy_new_for_bus_finish (GAsyncResult  *res,
-                                 GError       **error);
-PhoneuiNotification *phoneui_notification_proxy_new_for_bus_sync (GBusType             bus_type,
-                               GDBusProxyFlags      flags,
-                               const gchar         *name,
-                               const gchar         *object_path,
-                               GCancellable        *cancellable,
-                               GError             **error);
-
-/* ---------------------------------------------------------------------- */
-
-typedef struct _PhoneuiNotificationStub PhoneuiNotificationStub;
-typedef struct _PhoneuiNotificationStubClass PhoneuiNotificationStubClass;
-
-/**
- * PhoneuiNotificationStubPrivate:
- *
- * The #PhoneuiNotificationStubPrivate structure contains only private data.
- */
-typedef struct _PhoneuiNotificationStubPrivate PhoneuiNotificationStubPrivate;
+GType phoneui_notification_get_type (void) G_GNUC_CONST;
 
-/**
- * PhoneuiNotificationStub:
- *
- * The #PhoneuiNotificationStub structure contains only private data and
- * should only be accessed using the provided API.
- */
-struct _PhoneuiNotificationStub
-{
-  /*< private >*/
-  GObject parent_instance;
-  PhoneuiNotificationStubPrivate *priv;
-};
+GDBusInterfaceInfo *phoneui_notification_interface_info (void);
 
-/**
- * PhoneuiNotificationStubClass:
- *
- * Class structure for #PhoneuiNotificationStub.
- */
-struct _PhoneuiNotificationStubClass
-{
-  /*< private >*/
-  GObjectClass parent_class;
-};
 
-#define TYPE_PHONEUI_NOTIFICATION_STUB (phoneui_notification_stub_get_type ())
-GType phoneui_notification_stub_get_type (void) G_GNUC_CONST;
+/* D-Bus method call completion functions: */
+void phoneui_notification_complete_display_sim_auth (
+    PhoneuiNotification *object,
+    GDBusMethodInvocation *invocation);
 
-PhoneuiNotification *phoneui_notification_stub_new (void);
+void phoneui_notification_complete_hide_sim_auth (
+    PhoneuiNotification *object,
+    GDBusMethodInvocation *invocation);
 
+void phoneui_notification_complete_display_ussd (
+    PhoneuiNotification *object,
+    GDBusMethodInvocation *invocation);
 
-struct _PhoneuiNotificationIface
-{
-  GTypeInterface parent_iface;
+void phoneui_notification_complete_display_dialog (
+    PhoneuiNotification *object,
+    GDBusMethodInvocation *invocation);
 
-  /* Signal handlers for handling D-Bus method calls: */
-  gboolean (*handle_display_sim_auth) (
-        PhoneuiNotification *object,
-        GDBusMethodInvocation *invocation,
-        gint status);
-  gboolean (*handle_hide_sim_auth) (
-        PhoneuiNotification *object,
-        GDBusMethodInvocation *invocation,
-        gint status);
-  gboolean (*handle_display_ussd) (
-        PhoneuiNotification *object,
-        GDBusMethodInvocation *invocation,
-        gint mode,
-        const gchar *message);
-  gboolean (*handle_display_dialog) (
-        PhoneuiNotification *object,
-        GDBusMethodInvocation *invocation,
-        gint dialog);
-  gboolean (*handle_feedback_action) (
-        PhoneuiNotification *object,
-        GDBusMethodInvocation *invocation,
-        const gchar *action,
-        const gchar *level);
-};
+void phoneui_notification_complete_feedback_action (
+    PhoneuiNotification *object,
+    GDBusMethodInvocation *invocation);
 
-/* C Bindings for properties */
 
 
-/* D-Bus Methods */
+/* D-Bus method calls: */
 void phoneui_notification_call_display_sim_auth (
-        PhoneuiNotification *proxy,
-        gint status,
-        GCancellable *cancellable,
-        GAsyncReadyCallback callback,
-        gpointer user_data);
+    PhoneuiNotification *proxy,
+    gint status,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data);
 
 gboolean phoneui_notification_call_display_sim_auth_finish (
-        PhoneuiNotification *proxy,
-        GAsyncResult *res,
-        GError **error);
+    PhoneuiNotification *proxy,
+    GAsyncResult *res,
+    GError **error);
 
 gboolean phoneui_notification_call_display_sim_auth_sync (
-        PhoneuiNotification *proxy,
-        gint status,
-        GCancellable *cancellable,
-        GError **error);
-
+    PhoneuiNotification *proxy,
+    gint status,
+    GCancellable *cancellable,
+    GError **error);
 
 void phoneui_notification_call_hide_sim_auth (
-        PhoneuiNotification *proxy,
-        gint status,
-        GCancellable *cancellable,
-        GAsyncReadyCallback callback,
-        gpointer user_data);
+    PhoneuiNotification *proxy,
+    gint status,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data);
 
 gboolean phoneui_notification_call_hide_sim_auth_finish (
-        PhoneuiNotification *proxy,
-        GAsyncResult *res,
-        GError **error);
+    PhoneuiNotification *proxy,
+    GAsyncResult *res,
+    GError **error);
 
 gboolean phoneui_notification_call_hide_sim_auth_sync (
-        PhoneuiNotification *proxy,
-        gint status,
-        GCancellable *cancellable,
-        GError **error);
-
+    PhoneuiNotification *proxy,
+    gint status,
+    GCancellable *cancellable,
+    GError **error);
 
 void phoneui_notification_call_display_ussd (
-        PhoneuiNotification *proxy,
-        gint mode,
-        const gchar *message,
-        GCancellable *cancellable,
-        GAsyncReadyCallback callback,
-        gpointer user_data);
+    PhoneuiNotification *proxy,
+    gint mode,
+    const gchar *message,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data);
 
 gboolean phoneui_notification_call_display_ussd_finish (
-        PhoneuiNotification *proxy,
-        GAsyncResult *res,
-        GError **error);
+    PhoneuiNotification *proxy,
+    GAsyncResult *res,
+    GError **error);
 
 gboolean phoneui_notification_call_display_ussd_sync (
-        PhoneuiNotification *proxy,
-        gint mode,
-        const gchar *message,
-        GCancellable *cancellable,
-        GError **error);
-
+    PhoneuiNotification *proxy,
+    gint mode,
+    const gchar *message,
+    GCancellable *cancellable,
+    GError **error);
 
 void phoneui_notification_call_display_dialog (
-        PhoneuiNotification *proxy,
-        gint dialog,
-        GCancellable *cancellable,
-        GAsyncReadyCallback callback,
-        gpointer user_data);
+    PhoneuiNotification *proxy,
+    gint dialog,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data);
 
 gboolean phoneui_notification_call_display_dialog_finish (
-        PhoneuiNotification *proxy,
-        GAsyncResult *res,
-        GError **error);
+    PhoneuiNotification *proxy,
+    GAsyncResult *res,
+    GError **error);
 
 gboolean phoneui_notification_call_display_dialog_sync (
-        PhoneuiNotification *proxy,
-        gint dialog,
-        GCancellable *cancellable,
-        GError **error);
-
+    PhoneuiNotification *proxy,
+    gint dialog,
+    GCancellable *cancellable,
+    GError **error);
 
 void phoneui_notification_call_feedback_action (
-        PhoneuiNotification *proxy,
-        const gchar *action,
-        const gchar *level,
-        GCancellable *cancellable,
-        GAsyncReadyCallback callback,
-        gpointer user_data);
+    PhoneuiNotification *proxy,
+    const gchar *action,
+    const gchar *level,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data);
 
 gboolean phoneui_notification_call_feedback_action_finish (
-        PhoneuiNotification *proxy,
-        GAsyncResult *res,
-        GError **error);
+    PhoneuiNotification *proxy,
+    GAsyncResult *res,
+    GError **error);
 
 gboolean phoneui_notification_call_feedback_action_sync (
-        PhoneuiNotification *proxy,
-        const gchar *action,
-        const gchar *level,
-        GCancellable *cancellable,
-        GError **error);
+    PhoneuiNotification *proxy,
+    const gchar *action,
+    const gchar *level,
+    GCancellable *cancellable,
+    GError **error);
 
 
 
-/* D-Bus Methods Completion Helpers */
-void phoneui_notification_complete_display_sim_auth (
-        PhoneuiNotification *object,
-        GDBusMethodInvocation *invocation);
-
+/* ---- */
 
-void phoneui_notification_complete_hide_sim_auth (
-        PhoneuiNotification *object,
-        GDBusMethodInvocation *invocation);
+#define TYPE_PHONEUI_NOTIFICATION_PROXY (phoneui_notification_proxy_get_type ())
+#define PHONEUI_NOTIFICATION_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_PHONEUI_NOTIFICATION_PROXY, PhoneuiNotificationProxy))
+#define PHONEUI_NOTIFICATION_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_PHONEUI_NOTIFICATION_PROXY, PhoneuiNotificationProxyClass))
+#define PHONEUI_NOTIFICATION_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_PHONEUI_NOTIFICATION_PROXY, PhoneuiNotificationProxyClass))
+#define IS_PHONEUI_NOTIFICATION_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_PHONEUI_NOTIFICATION_PROXY))
+#define IS_PHONEUI_NOTIFICATION_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_PHONEUI_NOTIFICATION_PROXY))
 
+typedef struct _PhoneuiNotificationProxy PhoneuiNotificationProxy;
+typedef struct _PhoneuiNotificationProxyClass PhoneuiNotificationProxyClass;
+typedef struct _PhoneuiNotificationProxyPrivate PhoneuiNotificationProxyPrivate;
 
-void phoneui_notification_complete_display_ussd (
-        PhoneuiNotification *object,
-        GDBusMethodInvocation *invocation);
+struct _PhoneuiNotificationProxy
+{
+  GDBusProxy parent_instance;
+  PhoneuiNotificationProxyPrivate *priv;
+};
 
+struct _PhoneuiNotificationProxyClass
+{
+  GDBusProxyClass parent_class;
+};
 
-void phoneui_notification_complete_display_dialog (
-        PhoneuiNotification *object,
-        GDBusMethodInvocation *invocation);
+GType phoneui_notification_proxy_get_type (void) G_GNUC_CONST;
 
+void phoneui_notification_proxy_new (
+    GDBusConnection     *connection,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GAsyncReadyCallback  callback,
+    gpointer             user_data);
+PhoneuiNotification *phoneui_notification_proxy_new_finish (
+    GAsyncResult        *res,
+    GError             **error);
+PhoneuiNotification *phoneui_notification_proxy_new_sync (
+    GDBusConnection     *connection,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GError             **error);
+
+void phoneui_notification_proxy_new_for_bus (
+    GBusType             bus_type,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GAsyncReadyCallback  callback,
+    gpointer             user_data);
+PhoneuiNotification *phoneui_notification_proxy_new_for_bus_finish (
+    GAsyncResult        *res,
+    GError             **error);
+PhoneuiNotification *phoneui_notification_proxy_new_for_bus_sync (
+    GBusType             bus_type,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GError             **error);
+
+
+/* ---- */
+
+#define TYPE_PHONEUI_NOTIFICATION_SKELETON (phoneui_notification_skeleton_get_type ())
+#define PHONEUI_NOTIFICATION_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_PHONEUI_NOTIFICATION_SKELETON, PhoneuiNotificationSkeleton))
+#define PHONEUI_NOTIFICATION_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_PHONEUI_NOTIFICATION_SKELETON, PhoneuiNotificationSkeletonClass))
+#define PHONEUI_NOTIFICATION_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_PHONEUI_NOTIFICATION_SKELETON, PhoneuiNotificationSkeletonClass))
+#define IS_PHONEUI_NOTIFICATION_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_PHONEUI_NOTIFICATION_SKELETON))
+#define IS_PHONEUI_NOTIFICATION_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_PHONEUI_NOTIFICATION_SKELETON))
+
+typedef struct _PhoneuiNotificationSkeleton PhoneuiNotificationSkeleton;
+typedef struct _PhoneuiNotificationSkeletonClass PhoneuiNotificationSkeletonClass;
+typedef struct _PhoneuiNotificationSkeletonPrivate PhoneuiNotificationSkeletonPrivate;
+
+struct _PhoneuiNotificationSkeleton
+{
+  GDBusInterfaceSkeleton parent_instance;
+  PhoneuiNotificationSkeletonPrivate *priv;
+};
 
-void phoneui_notification_complete_feedback_action (
-        PhoneuiNotification *object,
-        GDBusMethodInvocation *invocation);
+struct _PhoneuiNotificationSkeletonClass
+{
+  GDBusInterfaceSkeletonClass parent_class;
+};
 
+GType phoneui_notification_skeleton_get_type (void) G_GNUC_CONST;
 
+PhoneuiNotification *phoneui_notification_skeleton_new (void);
 
-/* D-Bus Signal Emission Helpers */
 
 G_END_DECLS
 
-#endif /* __SHR_PHONEUI_NOTIFICATION_H__ */
+#endif /* __SHR_PHONEUINOTIFICATION_H__ */
diff --git a/src/shr-phoneuiphonelog.c b/src/shr-phoneuiphonelog.c
index 9efa5fb..0318e62 100644
--- a/src/shr-phoneuiphonelog.c
+++ b/src/shr-phoneuiphonelog.c
@@ -1,938 +1,509 @@
-/* File:       shr-phoneuiphonelog.c
- *
- * GType name: PhoneuiPhoneLog
- * D-Bus name: org.shr.phoneui.PhoneLog
- *
- * Generated by GDBus Binding Tool 0.1. DO NOT EDIT.
- */
-
-/**
- * SECTION:shr-phoneuiphonelog
- * @title: PhoneuiPhoneLog
- * @short_description: Wraps the org.shr.phoneui.PhoneLog D-Bus interface
- * @include: gio/gio.h
- *
- * The abstract #PhoneuiPhoneLog interface type wraps the <literal>org.shr.phoneui.PhoneLog</literal> D-Bus interface. Two concrete implementations exists: #PhoneuiPhoneLogProxy (for client-side usage) and #PhoneuiPhoneLogStub (for service-side usage).
- *
- * This code was generated from the following D-Bus introspection XML:
- * <programlisting><![CDATA[
- * <interface name="org.shr.phoneui.PhoneLog">
- *   <method name="DisplayList">
- *     <annotation name="org.freedesktop.DBus.GLib.Async" value="true">
- *     </annotation>
- *     <arg type="a{sv}" name="filter" direction="in">
- *     </arg>
- *   </method>
- * </interface>
- * ]]></programlisting>
+/*
+ * Generated by gdbus-codegen 2.29.3. DO NOT EDIT.
  *
+ * The license of this code is the same as for the source it was derived from.
  */
 
-#include <shr-phoneuiphonelog.h>
-#include <shr-types.h>
-#include <shr-bindingsprivate.h>
-#include <shr-marshallers.h>
-
-static guint phoneui_phone_log_register_object (GDBusInterface *object,
-                    GDBusConnection *connection,
-                    const gchar *object_path,
-                    GError **error);
-static void phoneui_phone_log_flush (GDBusInterface *object);
-static GVariant *phoneui_phone_log_get_properties (GDBusInterface *object);
-static GDBusInterfaceInfo *phoneui_phone_log_g_dbus_interface_interface_info (GDBusInterface *object);
-static GDBusObject *phoneui_phone_log_g_dbus_interface_get_object (GDBusInterface *interface);
-static void phoneui_phone_log_g_dbus_interface_set_object (GDBusInterface *interface, GDBusObject *object);
-static GDBusInterfaceFlags phoneui_phone_log_g_dbus_interface_get_flags (GDBusInterface *interface);
-static void phoneui_phone_log_g_dbus_interface_set_flags (GDBusInterface *interface, GDBusInterfaceFlags flags);
-
-typedef PhoneuiPhoneLogIface PhoneuiPhoneLogInterface;
-#define phoneui_phone_log_get_type phoneui_phone_log_get_gtype
-G_DEFINE_INTERFACE (PhoneuiPhoneLog, phoneui_phone_log, G_TYPE_OBJECT);
-#undef phoneui_phone_log_get_type
-
-
-enum
-{
-  _0_SIGNAL,
-  __DISPLAY_LIST_METHOD,
-  __LAST_SIGNAL
-};
-
-static guint signals[__LAST_SIGNAL] = {0};
-
-
-enum
-{
-  PROP_0,
-};
-
-/* ------------------------------------------------------------------------- */
+#ifdef HAVE_CONFIG_H
+#  include "config.h"
+#endif
 
-/* Various lookup tables */
+#include "shr-phoneuiphonelog.h"
 
-static GHashTable *_method_name_to_id = NULL;
-static GHashTable *_signal_name_to_id = NULL;
-static GHashTable *_property_name_to_id = NULL;
-static GHashTable *_property_gname_to_name = NULL;
-static GHashTable *_property_name_to_gname = NULL;
-
-
-static guint
-lookup_method_id_from_method_name (const gchar *method_name)
+typedef struct
 {
-  return GPOINTER_TO_UINT (g_hash_table_lookup (_method_name_to_id, method_name));
-}
+  GDBusArgInfo parent_struct;
+  gboolean use_gvariant;
+} _ExtendedGDBusArgInfo;
 
-static guint
-lookup_signal_id_from_signal_name (const gchar *signal_name)
+typedef struct
 {
-  return GPOINTER_TO_UINT (g_hash_table_lookup (_signal_name_to_id, signal_name));
-}
+  GDBusMethodInfo parent_struct;
+  const gchar *signal_name;
+} _ExtendedGDBusMethodInfo;
 
-static guint
-lookup_property_id_from_property_name (const gchar *property_name)
+typedef struct
 {
-  return GPOINTER_TO_UINT (g_hash_table_lookup (_property_name_to_id, property_name));
-}
+  GDBusSignalInfo parent_struct;
+  const gchar *signal_name;
+} _ExtendedGDBusSignalInfo;
 
-static const gchar *
-lookup_property_name_from_property_gname (const gchar *property_gname)
+typedef struct
 {
-  return g_hash_table_lookup (_property_gname_to_name, property_gname);
-}
+  GDBusPropertyInfo parent_struct;
+  const gchar *hyphen_name;
+  gboolean use_gvariant;
+} _ExtendedGDBusPropertyInfo;
 
-static const gchar *
-lookup_property_gname_from_property_name (const gchar *property_name)
+typedef struct
 {
-  return g_hash_table_lookup (_property_name_to_gname, property_name);
-}
+  GDBusInterfaceInfo parent_struct;
+  const gchar *hyphen_name;
+} _ExtendedGDBusInterfaceInfo;
 
-/* ------------------------------------------------------------------------- */
-static void dbus_iface_init (GDBusInterfaceIface *iface)
+typedef struct
 {
-  iface->get_info = phoneui_phone_log_g_dbus_interface_interface_info;
-  iface->get_properties = phoneui_phone_log_get_properties;
-  iface->flush = phoneui_phone_log_flush;
-  iface->register_object = phoneui_phone_log_register_object;
-  iface->set_object = phoneui_phone_log_g_dbus_interface_set_object;
-  iface->get_object = phoneui_phone_log_g_dbus_interface_get_object;
-  iface->set_flags = phoneui_phone_log_g_dbus_interface_set_flags;
-  iface->get_flags = phoneui_phone_log_g_dbus_interface_get_flags;
-}
+  const _ExtendedGDBusPropertyInfo *info;
+  guint prop_id;
+  GValue orig_value; /* the value before the change */
+} ChangedProperty;
 
 static void
-phoneui_phone_log_default_init (PhoneuiPhoneLogIface *iface)
+_changed_property_free (ChangedProperty *data)
 {
-
-  /* Build lookup structures */
-  _method_name_to_id = g_hash_table_new (g_str_hash, g_str_equal);
-  _signal_name_to_id = g_hash_table_new (g_str_hash, g_str_equal);
-  _property_name_to_id = g_hash_table_new (g_str_hash, g_str_equal);
-  _property_gname_to_name = g_hash_table_new (g_str_hash, g_str_equal);
-  _property_name_to_gname = g_hash_table_new (g_str_hash, g_str_equal);
-  g_hash_table_insert (_method_name_to_id, "DisplayList", GUINT_TO_POINTER (__DISPLAY_LIST_METHOD));
-
-  /* GObject signals definitions for D-Bus signals: */
-
-  /* GObject signals definitions for D-Bus methods: */
-  /**
-   * PhoneuiPhoneLog::handle-display-list:
-   * @object: The exported object emitting the signal.
-   * @invocation: A #GDBusMethodInvocation object that can be used to return a value or error.
-   * @filter: Parameter.
-   *
-   * On exported objects, this signal is emitted when a remote process (identified by @invocation) invokes the <literal>org.shr.phoneui.PhoneLog.DisplayList()</literal> D-Bus method on @object. Use phoneui_phone_log_complete_display_list() to return a value or g_dbus_method_invocation_return_error() to return an error.
-   *
-   * The signal is emitted in the
-   * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
-   * of the thread that @object was registered in.
-   *
-   * On proxies, this signal is never emitted.
-   *
-   * Returns: %TRUE if you want to handle the method call (will stop further handlers from being called), %FALSE otherwise.
-   */
-  signals[__DISPLAY_LIST_METHOD] =
-    g_signal_new ("handle-display-list",
-                  G_TYPE_FROM_INTERFACE (iface),
-                  G_SIGNAL_RUN_LAST,
-                  G_STRUCT_OFFSET (PhoneuiPhoneLogIface, handle_display_list),
-                  g_signal_accumulator_true_handled,
-                  NULL,
-                  _shr_gdbus_cclosure_marshaller_BOOLEAN__OBJECT_VARIANT,
-                  G_TYPE_BOOLEAN,
-                  2,
-                  G_TYPE_DBUS_METHOD_INVOCATION,
-                  G_TYPE_VARIANT);
-
-  /* GObject property definitions for D-Bus properties: */
+  g_value_unset (&data->orig_value);
+  g_free (data);
 }
 
-
-/* C Bindings for properties */
-
-/**
- * phoneui_phone_log_call_display_list:
- * @proxy: A #PhoneuiPhoneLog.
- * @filter: Method parameter.
- * @cancellable: A #GCancellable or %NULL.
- * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL if you don't care about the result of the method invocation.
- * @user_data: Data to pass to @callback.
- *
- * Invokes the <literal>org.shr.phoneui.PhoneLog.DisplayList()</literal>
- * D-Bus method on the remote object represented by @proxy.
- *
- * This is an asynchronous method. When the operation is finished,
- * callback will be invoked in the
- * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
- * of the thread you are calling this method from. You can then call
- * phoneui_phone_log_call_display_list_finish() to get the result of the operation.
- * See phoneui_phone_log_call_display_list_sync() for the synchronous version of this method.
- */
-void phoneui_phone_log_call_display_list (
-        PhoneuiPhoneLog *proxy,
-        GVariant *filter,
-        GCancellable *cancellable,
-        GAsyncReadyCallback callback,
-        gpointer user_data)
+static gboolean
+_g_strv_equal0 (gchar **a, gchar **b)
 {
-  GVariant *_params;
-  _params = g_variant_new ("(*)",
-                           filter);
-  g_dbus_proxy_call (G_DBUS_PROXY (proxy),
-                     "DisplayList",
-                     _params,
-                     G_DBUS_CALL_FLAGS_NONE,
-                     -1,
-                     cancellable,
-                     callback,
-                     user_data);
+  gboolean ret = FALSE;
+  guint n;
+  if (a == NULL && b == NULL)
+    {
+      ret = TRUE;
+      goto out;
+    }
+  if (a == NULL || b == NULL)
+    goto out;
+  if (g_strv_length (a) != g_strv_length (b))
+    goto out;
+  for (n = 0; a[n] != NULL; n++)
+    if (g_strcmp0 (a[n], b[n]) != 0)
+      goto out;
+  ret = TRUE;
+out:
+  return ret;
 }
 
-/**
- * phoneui_phone_log_call_display_list_finish:
- * @proxy: A #PhoneuiPhoneLog.
- * @res: A #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_phone_log_call_display_list().
- * @error: Return location for error or %NULL.
- *
- * Finishes invoking the <literal>org.shr.phoneui.PhoneLog.DisplayList()</literal>
- * D-Bus method on the remote object represented by @proxy.
- *
- * Returns: %TRUE if the call succeeded, %FALSE if @error is set.
- */
-gboolean phoneui_phone_log_call_display_list_finish (
-        PhoneuiPhoneLog *proxy,
-        GAsyncResult *res,
-        GError **error)
+static gboolean
+_g_variant_equal0 (GVariant *a, GVariant *b)
 {
-  gboolean _ret = FALSE;
-  GVariant *_result;
-  _result = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
-  if (_result == NULL)
-    goto _out;
-  g_variant_unref (_result);
-  _ret = TRUE;
-_out:
-  return _ret;
+  gboolean ret = FALSE;
+  if (a == NULL && b == NULL)
+    {
+      ret = TRUE;
+      goto out;
+    }
+  if (a == NULL || b == NULL)
+    goto out;
+  ret = g_variant_equal (a, b);
+out:
+  return ret;
 }
 
-/**
- * phoneui_phone_log_call_display_list_sync:
- * @proxy: A #PhoneuiPhoneLog.
- * @filter: Method parameter.
- * @cancellable: A #GCancellable or %NULL.
- * @error: Return location for error or %NULL.
- *
- * Synchronously invokes the <literal>org.shr.phoneui.PhoneLog.DisplayList()</literal>
- * D-Bus method on the remote object represented by @proxy.
- * The calling thread is blocked until a reply is received. See
- * phoneui_phone_log_call_display_list() for the asynchronous version of this method.
- *
- * Returns: %TRUE if the call succeeded, %FALSE if @error is set.
- */
-gboolean phoneui_phone_log_call_display_list_sync (
-        PhoneuiPhoneLog *proxy,
-        GVariant *filter,
-        GCancellable *cancellable,
-        GError **error)
+G_GNUC_UNUSED static gboolean
+_g_value_equal (const GValue *a, const GValue *b)
 {
-  gboolean _ret = FALSE;
-  GVariant *_params;
-  GVariant *_result;
-  _params = g_variant_new ("(*)",
-                           filter);
-  _result = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
-                                   "DisplayList",
-                                   _params,
-                                   G_DBUS_CALL_FLAGS_NONE,
-                                   -1,
-                                   cancellable,
-                                   error);
-  if (_result == NULL)
-    goto _out;
-  g_variant_unref (_result);
-  _ret = TRUE;
-_out:
-  return _ret;
+  gboolean ret = FALSE;
+  g_assert (G_VALUE_TYPE (a) == G_VALUE_TYPE (b));
+  switch (G_VALUE_TYPE (a))
+    {
+      case G_TYPE_BOOLEAN:
+        ret = (g_value_get_boolean (a) == g_value_get_boolean (b));
+        break;
+      case G_TYPE_UCHAR:
+        ret = (g_value_get_uchar (a) == g_value_get_uchar (b));
+        break;
+      case G_TYPE_INT:
+        ret = (g_value_get_int (a) == g_value_get_int (b));
+        break;
+      case G_TYPE_UINT:
+        ret = (g_value_get_uint (a) == g_value_get_uint (b));
+        break;
+      case G_TYPE_INT64:
+        ret = (g_value_get_int64 (a) == g_value_get_int64 (b));
+        break;
+      case G_TYPE_UINT64:
+        ret = (g_value_get_uint64 (a) == g_value_get_uint64 (b));
+        break;
+      case G_TYPE_DOUBLE:
+        ret = (g_value_get_double (a) == g_value_get_double (b));
+        break;
+      case G_TYPE_STRING:
+        ret = (g_strcmp0 (g_value_get_string (a), g_value_get_string (b)) == 0);
+        break;
+      case G_TYPE_VARIANT:
+        ret = _g_variant_equal0 (g_value_get_variant (a), g_value_get_variant (b));
+        break;
+      default:
+        if (G_VALUE_TYPE (a) == G_TYPE_STRV)
+          ret = _g_strv_equal0 (g_value_get_boxed (a), g_value_get_boxed (b));
+        else
+          g_critical ("_g_value_equal() does not handle type %s", g_type_name (G_VALUE_TYPE (a)));
+        break;
+    }
+  return ret;
 }
 
+/* ------------------------------------------------------------------------
+ * Code for interface org.shr.phoneui.PhoneLog
+ * ------------------------------------------------------------------------
+ */
 
 /**
- * phoneui_phone_log_complete_display_list:
- * @object: A #PhoneuiPhoneLog.
- * @invocation: A #GDBusMethodInvocation.
- *
- * Completes handling the <literal>org.shr.phoneui.PhoneLog.DisplayList()</literal>
- * D-Bus method invocation by returning a value.
- *
- * If you want to return an error, use g_dbus_method_invocation_return_error()
- * or similar instead.
+ * SECTION:PhoneuiPhoneLog
+ * @title: PhoneuiPhoneLog
+ * @short_description: Generated C code for the org.shr.phoneui.PhoneLog D-Bus interface
  *
- * This method will free @invocation, you cannot use it afterwards.
+ * This section contains code for working with the <link linkend="gdbus-interface-org-shr-phoneui-PhoneLog.top_of_page">org.shr.phoneui.PhoneLog</link> D-Bus interface in C.
  */
-void phoneui_phone_log_complete_display_list (
-        PhoneuiPhoneLog *object,
-        GDBusMethodInvocation *invocation)
-{
-  g_dbus_method_invocation_return_value (invocation, NULL);
-}
 
+/* ---- Introspection data for org.shr.phoneui.PhoneLog ---- */
 
-static const GDBusArgInfo phoneui_phone_log_method_in_DisplayList_filter =
+static const _ExtendedGDBusArgInfo _phoneui_phone_log_method_info_display_list_IN_ARG_filter =
 {
-  -1,
-  "filter",
-  "a{sv}",
-  (GDBusAnnotationInfo **) NULL
+  {
+    -1,
+    "filter",
+    "a{sv}",
+    NULL
+  },
+  FALSE
 };
-static const GDBusArgInfo * const phoneui_phone_log_method_in_DisplayList_arg_pointers[] =
+
+static const _ExtendedGDBusArgInfo * const _phoneui_phone_log_method_info_display_list_IN_ARG_pointers[] =
 {
-  &phoneui_phone_log_method_in_DisplayList_filter,
+  &_phoneui_phone_log_method_info_display_list_IN_ARG_filter,
   NULL
 };
 
-static const GDBusAnnotationInfo DisplayList_method_annotations_annotation_0 = {
+static const GDBusAnnotationInfo _phoneui_phone_log_method_display_list_annotation_info_0 =
+{
   -1,
   "org.freedesktop.DBus.GLib.Async",
   "true",
-};
-
-static const GDBusAnnotationInfo *DisplayList_method_annotations[] = {
-  &DisplayList_method_annotations_annotation_0,
   NULL
 };
 
-static const GDBusMethodInfo phoneui_phone_log_method_DisplayList =
-{
-  -1,
-  "DisplayList",
-  (GDBusArgInfo **) &phoneui_phone_log_method_in_DisplayList_arg_pointers,
-  (GDBusArgInfo **) NULL,
-  (GDBusAnnotationInfo **) DisplayList_method_annotations,
-};
-
-static const GDBusMethodInfo * const phoneui_phone_log_method_info_pointers[] =
+static const GDBusAnnotationInfo * const _phoneui_phone_log_method_display_list_annotation_info_pointers[] =
 {
-  &phoneui_phone_log_method_DisplayList,
+  &_phoneui_phone_log_method_display_list_annotation_info_0,
   NULL
 };
 
-static const GDBusInterfaceInfo _phoneui_phone_log_interface_info =
-{
-  -1,
-  "org.shr.phoneui.PhoneLog",
-  (GDBusMethodInfo **) &phoneui_phone_log_method_info_pointers,
-  (GDBusSignalInfo **) NULL,
-  (GDBusPropertyInfo **) NULL,
-  (GDBusAnnotationInfo **) NULL
-};
-
-static void
-handle_method_call_real (GDBusConnection       *connection,
-                         const gchar           *sender,
-                         const gchar           *object_path,
-                         const gchar           *interface_name,
-                         const gchar           *method_name,
-                         GVariant              *parameters,
-                         GDBusMethodInvocation *invocation,
-                         gpointer               user_data)
-{
-  guint method_id;
-  method_id = lookup_method_id_from_method_name (method_name);
-  switch (method_id)
-    {
-    case __DISPLAY_LIST_METHOD:
-      {
-        PhoneuiPhoneLog *object = PHONEUI_PHONE_LOG (user_data);
-        gboolean handled;
-        GVariant *arg_filter;
-        g_variant_get (parameters,
-                       "(*)",
-                       &arg_filter);
-        g_signal_emit (object,
-                       signals[method_id],
-                       0, invocation, arg_filter, &handled);
-        g_variant_unref ((gpointer) arg_filter);
-        if (!handled)
-          goto not_implemented;
-      }
-      break;
-
-    default:
-not_implemented:
-      g_dbus_method_invocation_return_error (invocation,
-                                             G_DBUS_ERROR,
-                                             G_DBUS_ERROR_NOT_SUPPORTED,
-                                             "Method `%s' is not implemented",
-                                             method_name);
-      break;
-    }
-};
-
-typedef struct
-{
-  GDBusMethodInvocation *invocation;
-  gpointer               user_data;
-} HandleMethodInThreadData;
-
-static gboolean
-handle_method_call_in_thread_func (GIOSchedulerJob *job,
-                                   GCancellable    *cancellable,
-                                   gpointer         user_data)
-{
-  HandleMethodInThreadData *data = user_data;
-
-  handle_method_call_real (g_dbus_method_invocation_get_connection (data->invocation),
-                           g_dbus_method_invocation_get_sender (data->invocation),
-                           g_dbus_method_invocation_get_object_path (data->invocation),
-                           g_dbus_method_invocation_get_interface_name (data->invocation),
-                           g_dbus_method_invocation_get_method_name (data->invocation),
-                           g_dbus_method_invocation_get_parameters (data->invocation),
-                           data->invocation,
-                           data->user_data);
-  return FALSE; /* job is complete */
-}
-
-static void
-handle_method_call (GDBusConnection       *connection,
-                    const gchar           *sender,
-                    const gchar           *object_path,
-                    const gchar           *interface_name,
-                    const gchar           *method_name,
-                    GVariant              *parameters,
-                    GDBusMethodInvocation *invocation,
-                    gpointer               user_data)
-{
-  GDBusInterface *interface = G_DBUS_INTERFACE (user_data);
-  GDBusInterfaceFlags flags;
-
-  flags = g_dbus_interface_get_flags (interface);
-  if (flags & G_DBUS_INTERFACE_FLAGS_RUN_IN_THREAD)
-    {
-      HandleMethodInThreadData *data;
-      data = g_new0 (HandleMethodInThreadData, 1);
-      data->invocation = invocation;
-      data->user_data = user_data;
-      g_io_scheduler_push_job (handle_method_call_in_thread_func,
-                               data,
-                               g_free, /* since we don't need refs on objects */
-                               G_PRIORITY_DEFAULT,
-                               NULL); /* GCancellable* */
-    }
-  else
-    {
-      handle_method_call_real (connection,
-                               sender,
-                               object_path,
-                               interface_name,
-                               method_name,
-                               parameters,
-                               invocation,
-                               user_data);
-    }
-}
-
-static GVariant *
-get_property (GDBusConnection  *connection,
-              const gchar      *sender,
-              const gchar      *object_path,
-              const gchar      *interface_name,
-              const gchar      *property_name,
-              GError          **error,
-              gpointer          user_data)
+static const _ExtendedGDBusMethodInfo _phoneui_phone_log_method_info_display_list =
 {
-  GVariant *ret;
-  guint prop_id;
-  prop_id = lookup_property_id_from_property_name (property_name);
-  ret = NULL;
-  switch (prop_id)
-    {
-    default:
-      g_assert_not_reached ();
-      break;
-    }
-
-  if (ret == NULL)
-    {
-      GVariant *untrusted_empty;
-      GDBusPropertyInfo *property_info;
-      const GVariantType *type;
-      property_info = g_dbus_interface_info_lookup_property ((GDBusInterfaceInfo *) &_phoneui_phone_log_interface_info, property_name);
-      type = G_VARIANT_TYPE (property_info->signature);
-      untrusted_empty = g_variant_new_from_data (type, NULL, 0, FALSE, NULL, NULL);
-      ret = g_variant_get_normal_form (untrusted_empty);
-      g_variant_unref (untrusted_empty);
-    }
-
-  return ret;
+  {
+    -1,
+    "DisplayList",
+    (GDBusArgInfo **) &_phoneui_phone_log_method_info_display_list_IN_ARG_pointers,
+    NULL,
+    (GDBusAnnotationInfo **) &_phoneui_phone_log_method_display_list_annotation_info_pointers
+  },
+  "handle-display-list"
 };
 
-static gboolean
-set_property (GDBusConnection  *connection,
-              const gchar      *sender,
-              const gchar      *object_path,
-              const gchar      *interface_name,
-              const gchar      *property_name,
-              GVariant         *value,
-              GError          **error,
-              gpointer          user_data)
+static const _ExtendedGDBusMethodInfo * const _phoneui_phone_log_method_info_pointers[] =
 {
-  gboolean ret;
-  guint prop_id;
-  prop_id = lookup_property_id_from_property_name (property_name);
-  ret = TRUE;
-  switch (prop_id)
-    {
-    default:
-      g_set_error (error,
-                   G_DBUS_ERROR,
-                   G_DBUS_ERROR_NOT_SUPPORTED,
-                   "This implementation does not support property `%s'",
-                   property_name);
-      ret = FALSE;
-      break;
-    }
-
-  return ret;
+  &_phoneui_phone_log_method_info_display_list,
+  NULL
 };
 
-static const GDBusInterfaceVTable phoneui_phone_log_interface_vtable =
-{
-  handle_method_call,
-  get_property,
-  set_property,
+static const _ExtendedGDBusInterfaceInfo _phoneui_phone_log_interface_info =
+{
+  {
+    -1,
+    "org.shr.phoneui.PhoneLog",
+    (GDBusMethodInfo **) &_phoneui_phone_log_method_info_pointers,
+    NULL,
+    NULL,
+    NULL
+  },
+  "phoneui-phone-log",
 };
 
-/* ---------------------------------------------------------------------- */
-
-typedef struct {
-  gpointer data;
-  gsize size;
-} _VariantBlob;
-
-static void
-_variant_blob_free (_VariantBlob *blob)
-{
-  g_free (blob->data);
-  g_free (blob);
-}
-
-static _VariantBlob *
-_variant_blob_new (GVariant *value)
-{
-  _VariantBlob *blob;
-  blob = g_new0 (_VariantBlob, 1);
-  blob->size = g_variant_get_size (value);
-  blob->data = g_malloc (blob->size);
-  g_variant_store (value, blob->data);
-  return blob;
-}
 
-static gboolean
-_variant_blob_equal (_VariantBlob *a,
-                    _VariantBlob *b)
+/**
+ * phoneui_phone_log_interface_info:
+ *
+ * Gets a machine-readable description of the <link linkend="gdbus-interface-org-shr-phoneui-PhoneLog.top_of_page">org.shr.phoneui.PhoneLog</link> D-Bus interface.
+ *
+ * Returns: (transfer none): A #GDBusInterfaceInfo. Do not free.
+ */
+GDBusInterfaceInfo *
+phoneui_phone_log_interface_info (void)
 {
-  return (a->size == b->size) && (memcmp (a->data, b->data, a->size) == 0);
+  return (GDBusInterfaceInfo *) &_phoneui_phone_log_interface_info;
 }
-/* ---------------------------------------------------------------------- */
-
-static gboolean
-emit_notifications_in_idle (gpointer user_data)
-{
-  GObject *object = G_OBJECT (user_data);
-  GDBusConnection *connection;
-  const gchar *path;
-  GHashTable *notification_queue;
-  GHashTableIter iter;
-  const gchar *property_name;
-  GVariant *value;
-  GVariantBuilder builder;
-  GVariantBuilder invalidated_builder;
-  GHashTable *pvc;
-  gboolean has_changes;
-
-  notification_queue = g_object_get_data (object, "gdbus-codegen-notification-queue");
-  path = g_object_get_data (object, "gdbus-codegen-path");
-  connection = g_object_get_data (object, "gdbus-codegen-connection");
-  pvc = g_object_get_data (object, "gdbus-codegen-pvc");
-  g_assert (notification_queue != NULL && path != NULL && connection != NULL && pvc != NULL);
-
-  g_variant_builder_init (&builder, G_VARIANT_TYPE ("a{sv}"));
-  g_variant_builder_init (&invalidated_builder, G_VARIANT_TYPE ("as"));
-  g_hash_table_iter_init (&iter, notification_queue);
-  has_changes = FALSE;
-  while (g_hash_table_iter_next (&iter, (gpointer) &property_name, (gpointer) &value))
-    {
-      _VariantBlob *cached_blob;
-      _VariantBlob *blob;
-      cached_blob = g_hash_table_lookup (pvc, property_name);
-      blob = _variant_blob_new (value);
-      if (cached_blob == NULL || !_variant_blob_equal (cached_blob, blob))
-        {
-          g_hash_table_insert (pvc, (gpointer) property_name, blob);
-          g_variant_builder_add (&builder, "{sv}", property_name, value);
-          has_changes = TRUE;
-        }
-      else
-        {
-          _variant_blob_free (blob);
-        }
-    }
 
-  if (has_changes)
-    {
-      g_dbus_connection_emit_signal (connection,
-                                     NULL,
-                                     path,
-                                     "org.freedesktop.DBus.Properties",
-                                     "PropertiesChanged",
-                                     g_variant_new ("(sa{sv}as)",
-                                                    "org.shr.phoneui.PhoneLog",
-                                                    &builder,
-                                                    &invalidated_builder),
-                                     NULL);
-    }
-  else
-    {
-      g_variant_builder_clear (&builder);
-      g_variant_builder_clear (&invalidated_builder);
-    }
 
-  g_hash_table_remove_all (notification_queue);
-  g_object_set_data (object, "gdbus-codegen-notification-idle-source", NULL);
-  return FALSE;
-}
 
-static void
-queue_notification (GObject     *object,
-                    const gchar *property_name,
-                    GVariant    *value)
-{
-  GHashTable *notification_queue;
-  GSource *idle_source;
-  notification_queue = g_object_get_data (object, "gdbus-codegen-notification-queue");
-  if (notification_queue == NULL)
-    {
-      notification_queue = g_hash_table_new_full (g_str_hash, g_str_equal, NULL, (GDestroyNotify) g_variant_unref);
-      g_object_set_data_full (object, "gdbus-codegen-notification-queue", notification_queue, (GDestroyNotify) g_hash_table_unref);
-    }
-  g_hash_table_insert (notification_queue, (gpointer) property_name, (gpointer) value); /* adopts value */
-  idle_source = g_object_get_data (object, "gdbus-codegen-notification-idle-source");
-  if (idle_source == NULL)
-    {
-      idle_source = g_idle_source_new ();
-      g_source_set_priority (idle_source, G_PRIORITY_DEFAULT);
-      g_source_set_callback (idle_source,
-                             emit_notifications_in_idle,
-                             g_object_ref (object),
-                             (GDestroyNotify) g_object_unref);
-      g_source_attach (idle_source, g_main_context_get_thread_default ());
-      g_source_unref (idle_source);
-      g_object_set_data (object, "gdbus-codegen-notification-idle-source", idle_source);
-    }
-}
+/**
+ * PhoneuiPhoneLog:
+ *
+ * Abstract interface type for the D-Bus interface <link linkend="gdbus-interface-org-shr-phoneui-PhoneLog.top_of_page">org.shr.phoneui.PhoneLog</link>.
+ */
 
-static void
-phoneui_phone_log_flush (GDBusInterface *_object)
-{
-  PhoneuiPhoneLog *object = PHONEUI_PHONE_LOG (_object);
-  GSource *idle_source;
-  idle_source = g_object_get_data (G_OBJECT (object), "gdbus-codegen-notification-idle-source");
-  if (idle_source != NULL)
-    {
-      emit_notifications_in_idle (object);
-      g_source_destroy (idle_source);
-    }
-}
+/**
+ * PhoneuiPhoneLogIface:
+ * @parent_iface: The parent interface.
+ * @handle_display_list: Handler for the #PhoneuiPhoneLog::handle-display-list signal.
+ *
+ * Virtual table for the D-Bus interface <link linkend="gdbus-interface-org-shr-phoneui-PhoneLog.top_of_page">org.shr.phoneui.PhoneLog</link>.
+ */
 
 static void
-on_notify (GObject    *object,
-           GParamSpec *pspec,
-           gpointer    user_data)
+phoneui_phone_log_default_init (PhoneuiPhoneLogIface *iface)
 {
-  GDBusConnection *connection;
-  const gchar *path;
-  GVariant *value;
-  const gchar *property_name;
-
-  path = g_object_get_data (object, "gdbus-codegen-path");
-  connection = g_object_get_data (object, "gdbus-codegen-connection");
-  if (connection == NULL || path == NULL)
-    goto out;
-  property_name = lookup_property_name_from_property_gname (pspec->name);
-  if (property_name == NULL)
-    goto out;
+  /* GObject signals for incoming D-Bus method calls: */
+  /**
+   * PhoneuiPhoneLog::handle-display-list:
+   * @object: A #PhoneuiPhoneLog.
+   * @invocation: A #GDBusMethodInvocation.
+   * @filter: Argument passed by remote caller.
+   *
+   * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-shr-phoneui-PhoneLog.DisplayList">DisplayList()</link> D-Bus method.
+   *
+   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phoneui_phone_log_complete_display_list() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
+   *
+   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
+   */
+  g_signal_new ("handle-display-list",
+    G_TYPE_FROM_INTERFACE (iface),
+    G_SIGNAL_RUN_LAST,
+    G_STRUCT_OFFSET (PhoneuiPhoneLogIface, handle_display_list),
+    g_signal_accumulator_true_handled,
+    NULL,
+    g_cclosure_marshal_generic,
+    G_TYPE_BOOLEAN,
+    2,
+    G_TYPE_DBUS_METHOD_INVOCATION, G_TYPE_VARIANT);
 
-  value = get_property (connection, NULL, path, "org.shr.phoneui.PhoneLog", property_name, NULL, object);
-  if (value != NULL)
-    {
-      if (g_variant_is_floating (value))
-        g_variant_ref_sink (value);
-      queue_notification (object, property_name, value);
-    }
-out:
-  ;
 }
 
-static void
-on_object_unregistered (GObject *object)
-{
-  GSource *idle_source;
-  idle_source = g_object_get_data (G_OBJECT (object), "gdbus-codegen-notification-idle-source");
-  if (idle_source != NULL)
-    g_source_destroy (idle_source);
-  g_object_set_data (G_OBJECT (object), "gdbus-codegen-notification-idle-source", NULL);
-  g_object_set_data (G_OBJECT (object), "gdbus-codegen-path", NULL);
-  g_object_set_data (G_OBJECT (object), "gdbus-codegen-connection", NULL);
-  g_signal_handlers_disconnect_by_func (object, on_notify, NULL);
-}
+typedef PhoneuiPhoneLogIface PhoneuiPhoneLogInterface;
+G_DEFINE_INTERFACE (PhoneuiPhoneLog, phoneui_phone_log, G_TYPE_OBJECT);
 
-static guint
-phoneui_phone_log_register_object (GDBusInterface *_object,
-           GDBusConnection *connection,
-           const gchar *object_path,
-           GError **error)
+/**
+ * phoneui_phone_log_call_display_list:
+ * @proxy: A #PhoneuiPhoneLogProxy.
+ * @filter: Argument to pass with the method invocation.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL.
+ * @user_data: User data to pass to @callback.
+ *
+ * Asynchronously invokes the <link linkend="gdbus-method-org-shr-phoneui-PhoneLog.DisplayList">DisplayList()</link> D-Bus method on @proxy.
+ * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
+ * You can then call phoneui_phone_log_call_display_list_finish() to get the result of the operation.
+ *
+ * See phoneui_phone_log_call_display_list_sync() for the synchronous, blocking version of this method.
+ */
+void
+phoneui_phone_log_call_display_list (
+    PhoneuiPhoneLog *proxy,
+    GVariant *filter,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data)
 {
-  PhoneuiPhoneLog *object = PHONEUI_PHONE_LOG (_object);
-  GHashTable *pvc;
-  guint n;
-
-  pvc = g_hash_table_new_full (g_str_hash, g_str_equal, NULL, (GDestroyNotify) _variant_blob_free);
-  if (_phoneui_phone_log_interface_info.properties != NULL)
-    {
-      for (n = 0; _phoneui_phone_log_interface_info.properties[n] != NULL; n++)
-        {
-          GDBusPropertyInfo *prop_info = _phoneui_phone_log_interface_info.properties[n];
-          if (prop_info->flags & G_DBUS_PROPERTY_INFO_FLAGS_READABLE)
-            {
-              GVariant *value;
-              value = get_property (connection, NULL, object_path, "org.shr.phoneui.PhoneLog", prop_info->name, NULL, object);
-              if (value != NULL)
-                {
-                  if (g_variant_is_floating (value))
-                    g_variant_ref_sink (value);
-                  g_hash_table_insert (pvc, prop_info->name, _variant_blob_new (value));
-                  g_variant_unref (value);
-                }
-            }
-        }
-    }
-
-  g_object_set_data_full (G_OBJECT (object), "gdbus-codegen-path", (gpointer) g_strdup (object_path), g_free);
-  g_object_set_data (G_OBJECT (object), "gdbus-codegen-connection", (gpointer) connection);
-  g_object_set_data_full (G_OBJECT (object), "gdbus-codegen-pvc", (gpointer) pvc, (GDestroyNotify) g_hash_table_unref);
-  g_signal_connect (object, "notify", G_CALLBACK (on_notify), NULL);
-  return g_dbus_connection_register_object (connection,
-          object_path,
-          (GDBusInterfaceInfo *) &_phoneui_phone_log_interface_info,
-          &phoneui_phone_log_interface_vtable,
-          object,
-          (GDestroyNotify) on_object_unregistered,
-          error);
+  g_dbus_proxy_call (G_DBUS_PROXY (proxy),
+    "DisplayList",
+    g_variant_new ("(@a{sv})",
+                   filter),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    callback,
+    user_data);
 }
 
 /**
- * phoneui_phone_log_interface_info:
+ * phoneui_phone_log_call_display_list_finish:
+ * @proxy: A #PhoneuiPhoneLogProxy.
+ * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_phone_log_call_display_list().
+ * @error: Return location for error or %NULL.
  *
- * Gets interface description for the <literal>org.shr.phoneui.PhoneLog</literal> D-Bus interface.
+ * Finishes an operation started with phoneui_phone_log_call_display_list().
  *
- * Returns: A #GDBusInterfaceInfo. Do not free, the object is statically allocated.
+ * Returns: %TRUE if the call succeded, %FALSE if @error is set.
  */
-GDBusInterfaceInfo *
-phoneui_phone_log_interface_info (void)
-{
-  return (GDBusInterfaceInfo *) &_phoneui_phone_log_interface_info;
+gboolean
+phoneui_phone_log_call_display_list_finish (
+    PhoneuiPhoneLog *proxy,
+    GAsyncResult *res,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
+  if (_ret == NULL)
+    goto _out;
+  g_variant_get (_ret,
+                 "()");
+  g_variant_unref (_ret);
+_out:
+  return _ret != NULL;
 }
 
-static GDBusInterfaceInfo *
-phoneui_phone_log_g_dbus_interface_interface_info (GDBusInterface *object)
-{
-  return phoneui_phone_log_interface_info ();
+/**
+ * phoneui_phone_log_call_display_list_sync:
+ * @proxy: A #PhoneuiPhoneLogProxy.
+ * @filter: Argument to pass with the method invocation.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @error: Return location for error or %NULL.
+ *
+ * Synchronously invokes the <link linkend="gdbus-method-org-shr-phoneui-PhoneLog.DisplayList">DisplayList()</link> D-Bus method on @proxy. The calling thread is blocked until a reply is received.
+ *
+ * See phoneui_phone_log_call_display_list() for the asynchronous version of this method.
+ *
+ * Returns: %TRUE if the call succeded, %FALSE if @error is set.
+ */
+gboolean
+phoneui_phone_log_call_display_list_sync (
+    PhoneuiPhoneLog *proxy,
+    GVariant *filter,
+    GCancellable *cancellable,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
+    "DisplayList",
+    g_variant_new ("(@a{sv})",
+                   filter),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    error);
+  if (_ret == NULL)
+    goto _out;
+  g_variant_get (_ret,
+                 "()");
+  g_variant_unref (_ret);
+_out:
+  return _ret != NULL;
 }
 
-static GVariant *
-phoneui_phone_log_get_properties (GDBusInterface *object)
+/**
+ * phoneui_phone_log_complete_display_list:
+ * @object: A #PhoneuiPhoneLog.
+ * @invocation: (transfer full): A #GDBusMethodInvocation.
+ *
+ * Helper function used in service implementations to finish handling invocations of the <link linkend="gdbus-method-org-shr-phoneui-PhoneLog.DisplayList">DisplayList()</link> D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.
+ *
+ * This method will free @invocation, you cannot use it afterwards.
+ */
+void
+phoneui_phone_log_complete_display_list (
+    PhoneuiPhoneLog *object,
+    GDBusMethodInvocation *invocation)
 {
-  GDBusConnection *connection;
-  const gchar *object_path;
-  GVariantBuilder builder;
-  guint n;
-
-  g_variant_builder_init (&builder, G_VARIANT_TYPE ("a{sv}"));
-
-  if (_phoneui_phone_log_interface_info.properties == NULL)
-    goto out;
-
-  connection = g_object_get_data (G_OBJECT (object), "gdbus-codegen-connection");
-  object_path = g_object_get_data (G_OBJECT (object), "gdbus-codegen-path");
-
-  for (n = 0; _phoneui_phone_log_interface_info.properties[n] != NULL; n++)
-    {
-      GDBusPropertyInfo *prop_info = _phoneui_phone_log_interface_info.properties[n];
-      if (prop_info->flags & G_DBUS_PROPERTY_INFO_FLAGS_READABLE)
-        {
-          GVariant *value;
-          value = get_property (connection, NULL, object_path, "org.shr.phoneui.PhoneLog", prop_info->name, NULL, object);
-          if (value != NULL)
-            {
-              if (g_variant_is_floating (value))
-                g_variant_ref_sink (value);
-              g_variant_builder_add (&builder, "{sv}", prop_info->name, value);
-              g_variant_unref (value);
-            }
-        }
-    }
-out:
-  return g_variant_builder_end (&builder);
+  g_dbus_method_invocation_return_value (invocation,
+    g_variant_new ("()"));
 }
 
+/* ------------------------------------------------------------------------ */
 
-/* ---------------------------------------------------------------------- */
-
-static void proxy_iface_init (PhoneuiPhoneLogIface *iface);
+/**
+ * PhoneuiPhoneLogProxy:
+ *
+ * The #PhoneuiPhoneLogProxy structure contains only private data and should only be accessed using the provided API.
+ */
 
-G_DEFINE_TYPE_WITH_CODE (PhoneuiPhoneLogProxy, phoneui_phone_log_proxy, G_TYPE_DBUS_PROXY,
-                         G_IMPLEMENT_INTERFACE (TYPE_PHONEUI_PHONE_LOG, proxy_iface_init));
+/**
+ * PhoneuiPhoneLogProxyClass:
+ * @parent_class: The parent class.
+ *
+ * Class structure for #PhoneuiPhoneLogProxy.
+ */
 
 static void
-phoneui_phone_log_proxy_init (PhoneuiPhoneLogProxy *proxy)
+phoneui_phone_log_proxy_iface_init (PhoneuiPhoneLogIface *iface)
 {
-  g_dbus_proxy_set_interface_info (G_DBUS_PROXY (proxy),
-                                   (GDBusInterfaceInfo *) &_phoneui_phone_log_interface_info);
 }
 
-static void
-g_signal (GDBusProxy  *proxy,
-          const gchar *sender_name,
-          const gchar *signal_name,
-          GVariant    *parameters)
-{
-  guint signal_id;
-  signal_id = lookup_signal_id_from_signal_name (signal_name);
-  switch (signal_id)
-    {
-    }
-}
+#define phoneui_phone_log_proxy_get_type phoneui_phone_log_proxy_get_type
+G_DEFINE_TYPE_WITH_CODE (PhoneuiPhoneLogProxy, phoneui_phone_log_proxy, G_TYPE_DBUS_PROXY,
+                         G_IMPLEMENT_INTERFACE (TYPE_PHONEUI_PHONE_LOG, phoneui_phone_log_proxy_iface_init));
+#undef phoneui_phone_log_proxy_get_type
 
 static void
 phoneui_phone_log_proxy_get_property (GObject      *object,
-                       guint         prop_id,
-                       GValue       *value,
-                       GParamSpec   *pspec)
+  guint         prop_id,
+  GValue       *value,
+  GParamSpec   *pspec)
 {
-  G_GNUC_UNUSED GVariant *cached;
-  switch (prop_id)
-    {
-
-    default:
-      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
-      break;
-    }
 }
 
 static void
-property_set_cb (GDBusProxy   *proxy,
-                 GAsyncResult *res,
-                 gpointer      user_data)
+phoneui_phone_log_proxy_set_property (GObject      *object,
+  guint         prop_id,
+  const GValue *value,
+  GParamSpec   *pspec)
 {
-  const gchar *property_name = user_data;
-  GError *error;
-  GVariant *result;
-
-  error = NULL;
-  result = g_dbus_proxy_call_finish (proxy, res, &error);
-  if (result == NULL)
-    {
-      g_warning ("Error setting property `%s': %s", property_name, error->message);
-      g_error_free (error);
-    }
-  else
-    {
-      g_variant_unref (result);
-    }
 }
 
 static void
-phoneui_phone_log_proxy_set_property (GObject      *object,
-                       guint         prop_id,
-                       const GValue *value,
-                       GParamSpec   *pspec)
-{
-  GVariant *new_value;
-  const gchar *property_name;
-  new_value = NULL;
-  property_name = NULL;
-  switch (prop_id)
-    {
-
-    default:
-      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
-      break;
-    }
-
-  if (new_value != NULL)
+phoneui_phone_log_proxy_g_signal (GDBusProxy *proxy,
+  const gchar *sender_name,
+  const gchar *signal_name,
+  GVariant *parameters)
+{
+  _ExtendedGDBusSignalInfo *info;
+  GVariantIter iter;
+  GVariant *child;
+  GValue *paramv;
+  guint num_params;
+  guint n;
+  guint signal_id;
+  info = (_ExtendedGDBusSignalInfo *) g_dbus_interface_info_lookup_signal ((GDBusInterfaceInfo *) &_phoneui_phone_log_interface_info, signal_name);
+  if (info == NULL)
+    return;
+  num_params = g_variant_n_children (parameters);
+  paramv = g_new0 (GValue, num_params + 1);
+  g_value_init (&paramv[0], TYPE_PHONEUI_PHONE_LOG);
+  g_value_set_object (&paramv[0], proxy);
+  g_variant_iter_init (&iter, parameters);
+  n = 1;
+  while ((child = g_variant_iter_next_value (&iter)) != NULL)
     {
-      g_variant_ref_sink (new_value);
-      g_dbus_proxy_call (G_DBUS_PROXY (object),
-                         "org.freedesktop.DBus.Properties.Set",
-                         g_variant_new ("(ssv)",
-                                        "org.shr.phoneui.PhoneLog",
-                                        property_name,
-                                        new_value),
-                         G_DBUS_CALL_FLAGS_NONE,
-                         -1,
-                         NULL,
-                         (GAsyncReadyCallback) property_set_cb,
-                         (gpointer) property_name);
-      g_variant_unref (new_value);
+      _ExtendedGDBusArgInfo *arg_info = (_ExtendedGDBusArgInfo *) info->parent_struct.args[n - 1];
+      if (arg_info->use_gvariant)
+        {
+          g_value_init (&paramv[n], G_TYPE_VARIANT);
+          g_value_set_variant (&paramv[n], child);
+          n++;
+        }
+      else
+        g_dbus_gvariant_to_gvalue (child, &paramv[n++]);
+      g_variant_unref (child);
     }
-
+  signal_id = g_signal_lookup (info->signal_name, TYPE_PHONEUI_PHONE_LOG);
+  g_signal_emitv (paramv, signal_id, 0, NULL);
+  for (n = 0; n < num_params + 1; n++)
+    g_value_unset (&paramv[n]);
+  g_free (paramv);
 }
 
 static void
-g_properties_changed (GDBusProxy         *proxy,
-                      GVariant           *changed_properties,
-                      const gchar* const *invalidated_properties)
+phoneui_phone_log_proxy_g_properties_changed (GDBusProxy *proxy,
+  GVariant *changed_properties,
+  const gchar *const *invalidated_properties)
 {
   guint n;
   const gchar *key;
   GVariantIter *iter;
-  const gchar *gname;
-
+  _ExtendedGDBusPropertyInfo *info;
   g_variant_get (changed_properties, "a{sv}", &iter);
   while (g_variant_iter_next (iter, "{&sv}", &key, NULL))
     {
-      gname = lookup_property_gname_from_property_name (key);
-      if (gname != NULL)
-        g_object_notify (G_OBJECT (proxy), gname);
+      info = (_ExtendedGDBusPropertyInfo *) g_dbus_interface_info_lookup_property ((GDBusInterfaceInfo *) &_phoneui_phone_log_interface_info, key);
+      if (info != NULL)
+        g_object_notify (G_OBJECT (proxy), info->hyphen_name);
     }
-
+  g_variant_iter_free (iter);
   for (n = 0; invalidated_properties[n] != NULL; n++)
     {
-      gname = lookup_property_gname_from_property_name (invalidated_properties[n]);
-      if (gname != NULL)
-        g_object_notify (G_OBJECT (proxy), gname);
+      info = (_ExtendedGDBusPropertyInfo *) g_dbus_interface_info_lookup_property ((GDBusInterfaceInfo *) &_phoneui_phone_log_interface_info, invalidated_properties[n]);
+      if (info != NULL)
+        g_object_notify (G_OBJECT (proxy), info->hyphen_name);
     }
+}
 
+static void
+phoneui_phone_log_proxy_init (PhoneuiPhoneLogProxy *proxy)
+{
+  g_dbus_proxy_set_interface_info (G_DBUS_PROXY (proxy), phoneui_phone_log_interface_info ());
 }
 
 static void
@@ -946,74 +517,62 @@ phoneui_phone_log_proxy_class_init (PhoneuiPhoneLogProxyClass *klass)
   gobject_class->set_property = phoneui_phone_log_proxy_set_property;
 
   proxy_class = G_DBUS_PROXY_CLASS (klass);
-  proxy_class->g_signal = g_signal;
-  proxy_class->g_properties_changed = g_properties_changed;
+  proxy_class->g_signal = phoneui_phone_log_proxy_g_signal;
+  proxy_class->g_properties_changed = phoneui_phone_log_proxy_g_properties_changed;
 
 }
 
-static void
-proxy_iface_init (PhoneuiPhoneLogIface *iface)
-{
-}
-
-
 /**
  * phoneui_phone_log_proxy_new:
  * @connection: A #GDBusConnection.
- * @flags: Flags used when constructing the proxy.
- * @name: A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.
+ * @flags: Flags from the #GDBusProxyFlags enumeration.
+ * @name: (allow-none): A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.
  * @object_path: An object path.
- * @cancellable: A #GCancellable or %NULL.
- * @callback: Callback function to invoke when the proxy is ready.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @callback: A #GAsyncReadyCallback to call when the request is satisfied.
  * @user_data: User data to pass to @callback.
  *
- * Like g_dbus_proxy_new() but returns a #PhoneuiPhoneLogProxy.
+ * Asynchronously creates a proxy for the D-Bus interface <link linkend="gdbus-interface-org-shr-phoneui-PhoneLog.top_of_page">org.shr.phoneui.PhoneLog</link>. See g_dbus_proxy_new() for more details.
+ *
+ * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
+ * You can then call phoneui_phone_log_proxy_new_finish() to get the result of the operation.
  *
- * This is a failable asynchronous constructor - when the proxy is ready, callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this function from. You can then call phoneui_phone_log_proxy_new_finish() to get the result. See phoneui_phone_log_proxy_new_sync() for the synchronous version.
+ * See phoneui_phone_log_proxy_new_sync() for the synchronous, blocking version of this constructor.
  */
-void phoneui_phone_log_proxy_new (GDBusConnection     *connection,
-                   GDBusProxyFlags      flags,
-                   const gchar         *name,
-                   const gchar         *object_path,
-                   GCancellable        *cancellable,
-                   GAsyncReadyCallback  callback,
-                   gpointer             user_data)
+void
+phoneui_phone_log_proxy_new (
+    GDBusConnection     *connection,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GAsyncReadyCallback  callback,
+    gpointer             user_data)
 {
-  g_async_initable_new_async (TYPE_PHONEUI_PHONE_LOG_PROXY,
-                              G_PRIORITY_DEFAULT,
-                              cancellable,
-                              callback,
-                              user_data,
-                              "g-flags", flags,
-                              "g-name", name,
-                              "g-connection", connection,
-                              "g-object-path", object_path,
-                              "g-interface-name", "org.shr.phoneui.PhoneLog",
-                              NULL);
+  g_async_initable_new_async (TYPE_PHONEUI_PHONE_LOG_PROXY, G_PRIORITY_DEFAULT, cancellable, callback, user_data, "g-flags", flags, "g-name", name, "g-connection", connection, "g-object-path", object_path, "g-interface-name", "org.shr.phoneui.PhoneLog", NULL);
 }
 
 /**
  * phoneui_phone_log_proxy_new_finish:
- * @res: A #GAsyncResult obtained from the #GAsyncReadyCallback function passed to phoneui_phone_log_proxy_new().
- * @error: Return location for error or %NULL.
+ * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_phone_log_proxy_new().
+ * @error: Return location for error or %NULL
  *
- * Finishes creating a #PhoneuiPhoneLogProxy.
+ * Finishes an operation started with phoneui_phone_log_proxy_new().
  *
- * Returns: A #PhoneuiPhoneLogProxy or %NULL if @error is set. Free with g_object_unref().
+ * Returns: (transfer full) (type PhoneuiPhoneLogProxy): The constructed proxy object or %NULL if @error is set.
  */
-PhoneuiPhoneLog *phoneui_phone_log_proxy_new_finish (GAsyncResult  *res,
-                        GError       **error)
+PhoneuiPhoneLog *
+phoneui_phone_log_proxy_new_finish (
+    GAsyncResult        *res,
+    GError             **error)
 {
-  GObject *object;
+  GObject *ret;
   GObject *source_object;
   source_object = g_async_result_get_source_object (res);
-  g_assert (source_object != NULL);
-  object = g_async_initable_new_finish (G_ASYNC_INITABLE (source_object),
-                                        res,
-                                        error);
+  ret = g_async_initable_new_finish (G_ASYNC_INITABLE (source_object), res, error);
   g_object_unref (source_object);
-  if (object != NULL)
-    return PHONEUI_PHONE_LOG (object);
+  if (ret != NULL)
+    return PHONEUI_PHONE_LOG (ret);
   else
     return NULL;
 }
@@ -1021,37 +580,33 @@ PhoneuiPhoneLog *phoneui_phone_log_proxy_new_finish (GAsyncResult  *res,
 /**
  * phoneui_phone_log_proxy_new_sync:
  * @connection: A #GDBusConnection.
- * @flags: Flags used when constructing the proxy.
- * @name: A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.
+ * @flags: Flags from the #GDBusProxyFlags enumeration.
+ * @name: (allow-none): A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.
  * @object_path: An object path.
- * @cancellable: A #GCancellable or %NULL.
- * @error: Return location for error or %NULL.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @error: Return location for error or %NULL
+ *
+ * Synchronously creates a proxy for the D-Bus interface <link linkend="gdbus-interface-org-shr-phoneui-PhoneLog.top_of_page">org.shr.phoneui.PhoneLog</link>. See g_dbus_proxy_new_sync() for more details.
  *
- * Like g_dbus_proxy_new_sync() but returns a #PhoneuiPhoneLogProxy.
+ * The calling thread is blocked until a reply is received.
  *
- * This is a synchronous failable constructor - the calling thread is blocked until the object is ready. See phoneui_phone_log_proxy_new() for the asynchronous version.
+ * See phoneui_phone_log_proxy_new() for the asynchronous version of this constructor.
  *
- * Returns: A #PhoneuiPhoneLogProxy or %NULL if error is set. Free with g_object_unref().
+ * Returns: (transfer full) (type PhoneuiPhoneLogProxy): The constructed proxy object or %NULL if @error is set.
  */
-PhoneuiPhoneLog *phoneui_phone_log_proxy_new_sync (GDBusConnection     *connection,
-                       GDBusProxyFlags      flags,
-                       const gchar         *name,
-                       const gchar         *object_path,
-                       GCancellable        *cancellable,
-                       GError             **error)
-{
-  GInitable *initable;
-  initable = g_initable_new (TYPE_PHONEUI_PHONE_LOG_PROXY,
-                             cancellable,
-                             error,
-                             "g-flags", flags,
-                             "g-name", name,
-                             "g-connection", connection,
-                             "g-object-path", object_path,
-                             "g-interface-name", "org.shr.phoneui.PhoneLog",
-                             NULL);
-  if (initable != NULL)
-    return PHONEUI_PHONE_LOG (initable);
+PhoneuiPhoneLog *
+phoneui_phone_log_proxy_new_sync (
+    GDBusConnection     *connection,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GError             **error)
+{
+  GInitable *ret;
+  ret = g_initable_new (TYPE_PHONEUI_PHONE_LOG_PROXY, cancellable, error, "g-flags", flags, "g-name", name, "g-connection", connection, "g-object-path", object_path, "g-interface-name", "org.shr.phoneui.PhoneLog", NULL);
+  if (ret != NULL)
+    return PHONEUI_PHONE_LOG (ret);
   else
     return NULL;
 }
@@ -1060,60 +615,54 @@ PhoneuiPhoneLog *phoneui_phone_log_proxy_new_sync (GDBusConnection     *connecti
 /**
  * phoneui_phone_log_proxy_new_for_bus:
  * @bus_type: A #GBusType.
- * @flags: Flags used when constructing the proxy.
+ * @flags: Flags from the #GDBusProxyFlags enumeration.
  * @name: A bus name (well-known or unique).
  * @object_path: An object path.
- * @cancellable: A #GCancellable or %NULL.
- * @callback: Callback function to invoke when the proxy is ready.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @callback: A #GAsyncReadyCallback to call when the request is satisfied.
  * @user_data: User data to pass to @callback.
  *
- * Like g_dbus_proxy_new_for_bus() but returns a #PhoneuiPhoneLogProxy.
+ * Like phoneui_phone_log_proxy_new() but takes a #GBusType instead of a #GDBusConnection.
+ *
+ * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
+ * You can then call phoneui_phone_log_proxy_new_for_bus_finish() to get the result of the operation.
  *
- * This is a failable asynchronous constructor - when the proxy is ready, callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this function from. You can then call phoneui_phone_log_proxy_new_for_bus_finish() to get the result. See phoneui_phone_log_proxy_new_for_bus_sync() for the synchronous version.
+ * See phoneui_phone_log_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.
  */
-void phoneui_phone_log_proxy_new_for_bus (GBusType             bus_type,
-                           GDBusProxyFlags      flags,
-                           const gchar         *name,
-                           const gchar         *object_path,
-                           GCancellable        *cancellable,
-                           GAsyncReadyCallback  callback,
-                           gpointer             user_data)
+void
+phoneui_phone_log_proxy_new_for_bus (
+    GBusType             bus_type,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GAsyncReadyCallback  callback,
+    gpointer             user_data)
 {
-  g_async_initable_new_async (TYPE_PHONEUI_PHONE_LOG_PROXY,
-                              G_PRIORITY_DEFAULT,
-                              cancellable,
-                              callback,
-                              user_data,
-                              "g-flags", flags,
-                              "g-name", name,
-                              "g-bus-type", bus_type,
-                              "g-object-path", object_path,
-                              "g-interface-name", "org.shr.phoneui.PhoneLog",
-                              NULL);
+  g_async_initable_new_async (TYPE_PHONEUI_PHONE_LOG_PROXY, G_PRIORITY_DEFAULT, cancellable, callback, user_data, "g-flags", flags, "g-name", name, "g-bus-type", bus_type, "g-object-path", object_path, "g-interface-name", "org.shr.phoneui.PhoneLog", NULL);
 }
 
 /**
  * phoneui_phone_log_proxy_new_for_bus_finish:
- * @res: A #GAsyncResult obtained from the #GAsyncReadyCallback function passed to phoneui_phone_log_proxy_new_for_bus().
- * @error: Return location for error or %NULL.
+ * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_phone_log_proxy_new_for_bus().
+ * @error: Return location for error or %NULL
  *
- * Finishes creating a #PhoneuiPhoneLogProxy.
+ * Finishes an operation started with phoneui_phone_log_proxy_new_for_bus().
  *
- * Returns: A #PhoneuiPhoneLogProxy or %NULL if @error is set. Free with g_object_unref().
+ * Returns: (transfer full) (type PhoneuiPhoneLogProxy): The constructed proxy object or %NULL if @error is set.
  */
-PhoneuiPhoneLog *phoneui_phone_log_proxy_new_for_bus_finish (GAsyncResult  *res,
-                                GError       **error)
+PhoneuiPhoneLog *
+phoneui_phone_log_proxy_new_for_bus_finish (
+    GAsyncResult        *res,
+    GError             **error)
 {
-  GObject *object;
+  GObject *ret;
   GObject *source_object;
   source_object = g_async_result_get_source_object (res);
-  g_assert (source_object != NULL);
-  object = g_async_initable_new_finish (G_ASYNC_INITABLE (source_object),
-                                        res,
-                                        error);
+  ret = g_async_initable_new_finish (G_ASYNC_INITABLE (source_object), res, error);
   g_object_unref (source_object);
-  if (object != NULL)
-    return PHONEUI_PHONE_LOG (object);
+  if (ret != NULL)
+    return PHONEUI_PHONE_LOG (ret);
   else
     return NULL;
 }
@@ -1121,163 +670,321 @@ PhoneuiPhoneLog *phoneui_phone_log_proxy_new_for_bus_finish (GAsyncResult  *res,
 /**
  * phoneui_phone_log_proxy_new_for_bus_sync:
  * @bus_type: A #GBusType.
- * @flags: Flags used when constructing the proxy.
+ * @flags: Flags from the #GDBusProxyFlags enumeration.
  * @name: A bus name (well-known or unique).
  * @object_path: An object path.
- * @cancellable: A #GCancellable or %NULL.
- * @error: Return location for error or %NULL.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @error: Return location for error or %NULL
+ *
+ * Like phoneui_phone_log_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.
  *
- * Like g_dbus_proxy_new_for_bus_sync() but returns a #PhoneuiPhoneLogProxy.
+ * The calling thread is blocked until a reply is received.
  *
- * This is a synchronous failable constructor - the calling thread is blocked until the object is ready. See phoneui_phone_log_proxy_new_for_bus() for the asynchronous version.
+ * See phoneui_phone_log_proxy_new_for_bus() for the asynchronous version of this constructor.
  *
- * Returns: A #PhoneuiPhoneLogProxy or %NULL if error is set. Free with g_object_unref().
+ * Returns: (transfer full) (type PhoneuiPhoneLogProxy): The constructed proxy object or %NULL if @error is set.
  */
-PhoneuiPhoneLog *phoneui_phone_log_proxy_new_for_bus_sync (GBusType             bus_type,
-                               GDBusProxyFlags      flags,
-                               const gchar         *name,
-                               const gchar         *object_path,
-                               GCancellable        *cancellable,
-                               GError             **error)
-{
-  GInitable *initable;
-  initable = g_initable_new (TYPE_PHONEUI_PHONE_LOG_PROXY,
-                             cancellable,
-                             error,
-                             "g-flags", flags,
-                             "g-name", name,
-                             "g-bus-type", bus_type,
-                             "g-object-path", object_path,
-                             "g-interface-name", "org.shr.phoneui.PhoneLog",
-                             NULL);
-  if (initable != NULL)
-    return PHONEUI_PHONE_LOG (initable);
+PhoneuiPhoneLog *
+phoneui_phone_log_proxy_new_for_bus_sync (
+    GBusType             bus_type,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GError             **error)
+{
+  GInitable *ret;
+  ret = g_initable_new (TYPE_PHONEUI_PHONE_LOG_PROXY, cancellable, error, "g-flags", flags, "g-name", name, "g-bus-type", bus_type, "g-object-path", object_path, "g-interface-name", "org.shr.phoneui.PhoneLog", NULL);
+  if (ret != NULL)
+    return PHONEUI_PHONE_LOG (ret);
   else
     return NULL;
 }
 
 
-/* ---------------------------------------------------------------------- */
+/* ------------------------------------------------------------------------ */
+
+/**
+ * PhoneuiPhoneLogSkeleton:
+ *
+ * The #PhoneuiPhoneLogSkeleton structure contains only private data and should only be accessed using the provided API.
+ */
+
+/**
+ * PhoneuiPhoneLogSkeletonClass:
+ * @parent_class: The parent class.
+ *
+ * Class structure for #PhoneuiPhoneLogSkeleton.
+ */
 
-struct _PhoneuiPhoneLogStubPrivate
+struct _PhoneuiPhoneLogSkeletonPrivate
 {
-  GDBusObject *enclosing_object;
-  GDBusInterfaceFlags flags;
+  GValueArray *properties;
+  GList *changed_properties;
+  GSource *changed_properties_idle_source;
+  GMainContext *context;
 };
 
-static void stub_iface_init (PhoneuiPhoneLogIface *iface);
+static void
+_phoneui_phone_log_skeleton_handle_method_call (
+  GDBusConnection *connection,
+  const gchar *sender,
+  const gchar *object_path,
+  const gchar *interface_name,
+  const gchar *method_name,
+  GVariant *parameters,
+  GDBusMethodInvocation *invocation,
+  gpointer user_data)
+{
+  PhoneuiPhoneLogSkeleton *skeleton = PHONEUI_PHONE_LOG_SKELETON (user_data);
+  _ExtendedGDBusMethodInfo *info;
+  GVariantIter iter;
+  GVariant *child;
+  GValue *paramv;
+  guint num_params;
+  guint n;
+  guint signal_id;
+  GValue return_value = {0};
+  info = (_ExtendedGDBusMethodInfo *) g_dbus_method_invocation_get_method_info (invocation);
+  g_assert (info != NULL);
+  num_params = g_variant_n_children (parameters);
+  paramv = g_new0 (GValue, num_params + 2);
+  g_value_init (&paramv[0], TYPE_PHONEUI_PHONE_LOG);
+  g_value_set_object (&paramv[0], skeleton);
+  g_value_init (&paramv[1], G_TYPE_DBUS_METHOD_INVOCATION);
+  g_value_set_object (&paramv[1], invocation);
+  g_variant_iter_init (&iter, parameters);
+  n = 2;
+  while ((child = g_variant_iter_next_value (&iter)) != NULL)
+    {
+      _ExtendedGDBusArgInfo *arg_info = (_ExtendedGDBusArgInfo *) info->parent_struct.in_args[n - 2];
+      if (arg_info->use_gvariant)
+        {
+          g_value_init (&paramv[n], G_TYPE_VARIANT);
+          g_value_set_variant (&paramv[n], child);
+          n++;
+        }
+      else
+        g_dbus_gvariant_to_gvalue (child, &paramv[n++]);
+      g_variant_unref (child);
+    }
+  signal_id = g_signal_lookup (info->signal_name, TYPE_PHONEUI_PHONE_LOG);
+  g_value_init (&return_value, G_TYPE_BOOLEAN);
+  g_signal_emitv (paramv, signal_id, 0, &return_value);
+  if (!g_value_get_boolean (&return_value))
+    g_dbus_method_invocation_return_error (invocation, G_DBUS_ERROR, G_DBUS_ERROR_UNKNOWN_METHOD, "Method %s is not implemented on interface %s", method_name, interface_name);
+  g_value_unset (&return_value);
+  for (n = 0; n < num_params + 2; n++)
+    g_value_unset (&paramv[n]);
+  g_free (paramv);
+}
 
-G_DEFINE_TYPE_WITH_CODE (PhoneuiPhoneLogStub, phoneui_phone_log_stub, G_TYPE_OBJECT,
-                         G_IMPLEMENT_INTERFACE (G_TYPE_DBUS_INTERFACE, dbus_iface_init)
-                         G_IMPLEMENT_INTERFACE (TYPE_PHONEUI_PHONE_LOG, stub_iface_init));
+static GVariant *
+_phoneui_phone_log_skeleton_handle_get_property (
+  GDBusConnection *connection,
+  const gchar *sender,
+  const gchar *object_path,
+  const gchar *interface_name,
+  const gchar *property_name,
+  GError **error,
+  gpointer user_data)
+{
+  PhoneuiPhoneLogSkeleton *skeleton = PHONEUI_PHONE_LOG_SKELETON (user_data);
+  GValue value = {0};
+  GParamSpec *pspec;
+  _ExtendedGDBusPropertyInfo *info;
+  GVariant *ret;
+  ret = NULL;
+  info = (_ExtendedGDBusPropertyInfo *) g_dbus_interface_info_lookup_property ((GDBusInterfaceInfo *) &_phoneui_phone_log_interface_info, property_name);
+  g_assert (info != NULL);
+  pspec = g_object_class_find_property (G_OBJECT_GET_CLASS (skeleton), info->hyphen_name);
+  if (pspec == NULL)
+    {
+      g_set_error (error, G_DBUS_ERROR, G_DBUS_ERROR_INVALID_ARGS, "No property with name %s", property_name);
+    }
+  else
+    {
+      g_value_init (&value, pspec->value_type);
+      g_object_get_property (G_OBJECT (skeleton), info->hyphen_name, &value);
+      ret = g_dbus_gvalue_to_gvariant (&value, G_VARIANT_TYPE (info->parent_struct.signature));
+      g_value_unset (&value);
+    }
+  return ret;
+}
 
-static void
-phoneui_phone_log_stub_finalize (GObject *object)
+static gboolean
+_phoneui_phone_log_skeleton_handle_set_property (
+  GDBusConnection *connection,
+  const gchar *sender,
+  const gchar *object_path,
+  const gchar *interface_name,
+  const gchar *property_name,
+  GVariant *variant,
+  GError **error,
+  gpointer user_data)
+{
+  PhoneuiPhoneLogSkeleton *skeleton = PHONEUI_PHONE_LOG_SKELETON (user_data);
+  GValue value = {0};
+  GParamSpec *pspec;
+  _ExtendedGDBusPropertyInfo *info;
+  gboolean ret;
+  ret = FALSE;
+  info = (_ExtendedGDBusPropertyInfo *) g_dbus_interface_info_lookup_property ((GDBusInterfaceInfo *) &_phoneui_phone_log_interface_info, property_name);
+  g_assert (info != NULL);
+  pspec = g_object_class_find_property (G_OBJECT_GET_CLASS (skeleton), info->hyphen_name);
+  if (pspec == NULL)
+    {
+      g_set_error (error, G_DBUS_ERROR, G_DBUS_ERROR_INVALID_ARGS, "No property with name %s", property_name);
+    }
+  else
+    {
+      if (info->use_gvariant)
+        g_value_set_variant (&value, variant);
+      else
+        g_dbus_gvariant_to_gvalue (variant, &value);
+      g_object_set_property (G_OBJECT (skeleton), info->hyphen_name, &value);
+      g_value_unset (&value);
+      ret = TRUE;
+    }
+  return ret;
+}
+
+static const GDBusInterfaceVTable _phoneui_phone_log_skeleton_vtable =
 {
-  G_GNUC_UNUSED PhoneuiPhoneLogStub *stub = (PhoneuiPhoneLogStub *) object;
+  _phoneui_phone_log_skeleton_handle_method_call,
+  _phoneui_phone_log_skeleton_handle_get_property,
+  _phoneui_phone_log_skeleton_handle_set_property
+};
 
-  if (G_OBJECT_CLASS (phoneui_phone_log_stub_parent_class)->finalize != NULL)
-    G_OBJECT_CLASS (phoneui_phone_log_stub_parent_class)->finalize (object);
+static GDBusInterfaceInfo *
+phoneui_phone_log_skeleton_dbus_interface_get_info (GDBusInterfaceSkeleton *skeleton)
+{
+  return phoneui_phone_log_interface_info ();
 }
 
-static void
-phoneui_phone_log_stub_get_property (GObject      *object,
-                      guint         prop_id,
-                      GValue       *value,
-                      GParamSpec   *pspec)
+static GDBusInterfaceVTable *
+phoneui_phone_log_skeleton_dbus_interface_get_vtable (GDBusInterfaceSkeleton *skeleton)
 {
-  G_GNUC_UNUSED PhoneuiPhoneLogStub *stub = (PhoneuiPhoneLogStub *) object;
-  switch (prop_id)
-    {
-
-    default:
-      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
-      break;
-    }
+  return (GDBusInterfaceVTable *) &_phoneui_phone_log_skeleton_vtable;
 }
 
-static void
-phoneui_phone_log_stub_set_property (GObject      *object,
-                      guint         prop_id,
-                      const GValue *value,
-                      GParamSpec   *pspec)
+static GVariant *
+phoneui_phone_log_skeleton_dbus_interface_get_properties (GDBusInterfaceSkeleton *_skeleton)
 {
-  G_GNUC_UNUSED PhoneuiPhoneLogStub *stub = (PhoneuiPhoneLogStub *) object;
-  switch (prop_id)
-    {
+  PhoneuiPhoneLogSkeleton *skeleton = PHONEUI_PHONE_LOG_SKELETON (_skeleton);
 
-    default:
-      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
-      break;
+  GVariantBuilder builder;
+  guint n;
+  g_variant_builder_init (&builder, G_VARIANT_TYPE ("a{sv}"));
+  if (_phoneui_phone_log_interface_info.parent_struct.properties == NULL)
+    goto out;
+  for (n = 0; _phoneui_phone_log_interface_info.parent_struct.properties[n] != NULL; n++)
+    {
+      GDBusPropertyInfo *info = _phoneui_phone_log_interface_info.parent_struct.properties[n];
+      if (info->flags & G_DBUS_PROPERTY_INFO_FLAGS_READABLE)
+        {
+          GVariant *value;
+          value = _phoneui_phone_log_skeleton_handle_get_property (g_dbus_interface_skeleton_get_connection (G_DBUS_INTERFACE_SKELETON (skeleton)), NULL, g_dbus_interface_skeleton_get_object_path (G_DBUS_INTERFACE_SKELETON (skeleton)), "org.shr.phoneui.PhoneLog", info->name, NULL, skeleton);
+          if (value != NULL)
+            {
+              if (g_variant_is_floating (value))
+                g_variant_ref_sink (value);
+              g_variant_builder_add (&builder, "{sv}", info->name, value);
+              g_variant_unref (value);
+            }
+        }
     }
+out:
+  return g_variant_builder_end (&builder);
 }
 
 static void
-phoneui_phone_log_stub_init (PhoneuiPhoneLogStub *stub)
+phoneui_phone_log_skeleton_dbus_interface_flush (GDBusInterfaceSkeleton *_skeleton)
 {
-  stub->priv = G_TYPE_INSTANCE_GET_PRIVATE (stub, TYPE_PHONEUI_PHONE_LOG_STUB, PhoneuiPhoneLogStubPrivate);
 }
 
 static void
-phoneui_phone_log_stub_class_init (PhoneuiPhoneLogStubClass *klass)
+phoneui_phone_log_skeleton_iface_init (PhoneuiPhoneLogIface *iface)
 {
-  GObjectClass *gobject_class;
-
-  gobject_class = G_OBJECT_CLASS (klass);
-  gobject_class->finalize     = phoneui_phone_log_stub_finalize;
-  gobject_class->get_property = phoneui_phone_log_stub_get_property;
-  gobject_class->set_property = phoneui_phone_log_stub_set_property;
-  g_type_class_add_private (klass, sizeof (PhoneuiPhoneLogStubPrivate));
 }
 
+#define phoneui_phone_log_skeleton_get_type phoneui_phone_log_skeleton_get_type
+G_DEFINE_TYPE_WITH_CODE (PhoneuiPhoneLogSkeleton, phoneui_phone_log_skeleton, G_TYPE_DBUS_INTERFACE_SKELETON,
+                         G_IMPLEMENT_INTERFACE (TYPE_PHONEUI_PHONE_LOG, phoneui_phone_log_skeleton_iface_init));
+#undef phoneui_phone_log_skeleton_get_type
+
 static void
-stub_iface_init (PhoneuiPhoneLogIface *iface)
+phoneui_phone_log_skeleton_finalize (GObject *object)
 {
+  PhoneuiPhoneLogSkeleton *skeleton = PHONEUI_PHONE_LOG_SKELETON (object);
+  g_list_foreach (skeleton->priv->changed_properties, (GFunc) _changed_property_free, NULL);
+  g_list_free (skeleton->priv->changed_properties);
+  if (skeleton->priv->changed_properties_idle_source != NULL)
+    g_source_destroy (skeleton->priv->changed_properties_idle_source);
+  if (skeleton->priv->context != NULL)
+    g_main_context_unref (skeleton->priv->context);
+  G_OBJECT_CLASS (phoneui_phone_log_skeleton_parent_class)->finalize (object);
 }
 
-/**
- * phoneui_phone_log_stub_new:
- *
- * Creates a new stub object that can be exported via g_dbus_interface_register_object().
- *
- * Returns: A #PhoneuiPhoneLogStub instance. Free with g_object_unref().
- */
-PhoneuiPhoneLog *
-phoneui_phone_log_stub_new (void)
+static void
+phoneui_phone_log_skeleton_get_property (GObject      *object,
+  guint         prop_id,
+  GValue       *value,
+  GParamSpec   *pspec)
 {
-  return PHONEUI_PHONE_LOG (g_object_new (TYPE_PHONEUI_PHONE_LOG_STUB, NULL));
+  PhoneuiPhoneLogSkeleton *skeleton = PHONEUI_PHONE_LOG_SKELETON (object);
+  g_assert (prop_id - 1 >= 0 && prop_id - 1 < 0);
+  g_value_copy (&skeleton->priv->properties->values[prop_id - 1], value);
 }
 
-static GDBusObject *
-phoneui_phone_log_g_dbus_interface_get_object (GDBusInterface *interface)
+static void
+phoneui_phone_log_skeleton_set_property (GObject      *object,
+  guint         prop_id,
+  const GValue *value,
+  GParamSpec   *pspec)
 {
-  PhoneuiPhoneLogStub *stub = G_TYPE_CHECK_INSTANCE_CAST (interface, TYPE_PHONEUI_PHONE_LOG_STUB, PhoneuiPhoneLogStub);
-  if (stub->priv->enclosing_object != NULL)
-    return g_object_ref (stub->priv->enclosing_object);
-  else
-    return NULL;
 }
 
 static void
-phoneui_phone_log_g_dbus_interface_set_object (GDBusInterface *interface,
-                                GDBusObject    *object)
+phoneui_phone_log_skeleton_init (PhoneuiPhoneLogSkeleton *skeleton)
 {
-  PhoneuiPhoneLogStub *stub = G_TYPE_CHECK_INSTANCE_CAST (interface, TYPE_PHONEUI_PHONE_LOG_STUB, PhoneuiPhoneLogStub);
-  stub->priv->enclosing_object = object;
+  skeleton->priv = G_TYPE_INSTANCE_GET_PRIVATE (skeleton, TYPE_PHONEUI_PHONE_LOG_SKELETON, PhoneuiPhoneLogSkeletonPrivate);
+  skeleton->priv->context = g_main_context_get_thread_default ();
+  if (skeleton->priv->context != NULL)
+    g_main_context_ref (skeleton->priv->context);
 }
 
-static GDBusInterfaceFlags
-phoneui_phone_log_g_dbus_interface_get_flags (GDBusInterface *interface)
+static void
+phoneui_phone_log_skeleton_class_init (PhoneuiPhoneLogSkeletonClass *klass)
 {
-  PhoneuiPhoneLogStub *stub = G_TYPE_CHECK_INSTANCE_CAST (interface, TYPE_PHONEUI_PHONE_LOG_STUB, PhoneuiPhoneLogStub);
-  return stub->priv->flags;
+  GObjectClass *gobject_class;
+  GDBusInterfaceSkeletonClass *skeleton_class;
+
+  g_type_class_add_private (klass, sizeof (PhoneuiPhoneLogSkeletonPrivate));
+
+  gobject_class = G_OBJECT_CLASS (klass);
+  gobject_class->finalize = phoneui_phone_log_skeleton_finalize;
+  gobject_class->get_property = phoneui_phone_log_skeleton_get_property;
+  gobject_class->set_property = phoneui_phone_log_skeleton_set_property;
+
+
+  skeleton_class = G_DBUS_INTERFACE_SKELETON_CLASS (klass);
+  skeleton_class->get_info = phoneui_phone_log_skeleton_dbus_interface_get_info;
+  skeleton_class->get_properties = phoneui_phone_log_skeleton_dbus_interface_get_properties;
+  skeleton_class->flush = phoneui_phone_log_skeleton_dbus_interface_flush;
+  skeleton_class->get_vtable = phoneui_phone_log_skeleton_dbus_interface_get_vtable;
 }
 
-static void
-phoneui_phone_log_g_dbus_interface_set_flags (GDBusInterface      *interface,
-                               GDBusInterfaceFlags  flags)
+/**
+ * phoneui_phone_log_skeleton_new:
+ *
+ * Creates a skeleton object for the D-Bus interface <link linkend="gdbus-interface-org-shr-phoneui-PhoneLog.top_of_page">org.shr.phoneui.PhoneLog</link>.
+ *
+ * Returns: (transfer full) (type PhoneuiPhoneLogSkeleton): The skeleton object.
+ */
+PhoneuiPhoneLog *
+phoneui_phone_log_skeleton_new (void)
 {
-  PhoneuiPhoneLogStub *stub = G_TYPE_CHECK_INSTANCE_CAST (interface, TYPE_PHONEUI_PHONE_LOG_STUB, PhoneuiPhoneLogStub);
-  stub->priv->flags = flags;
+  return PHONEUI_PHONE_LOG (g_object_new (TYPE_PHONEUI_PHONE_LOG_SKELETON, NULL));
 }
 
diff --git a/src/shr-phoneuiphonelog.h b/src/shr-phoneuiphonelog.h
index 9da7db8..7eedab4 100644
--- a/src/shr-phoneuiphonelog.h
+++ b/src/shr-phoneuiphonelog.h
@@ -1,233 +1,167 @@
-/* File:       shr-phoneuiphonelog.h
+/*
+ * Generated by gdbus-codegen 2.29.3. DO NOT EDIT.
  *
- * GType name: PhoneuiPhoneLog
- * D-Bus name: org.shr.phoneui.PhoneLog
- *
- * Generated by GDBus Binding Tool 0.1. DO NOT EDIT.
+ * The license of this code is the same as for the source it was derived from.
  */
 
-#ifndef __SHR_PHONEUI_PHONE_LOG_H__
-#define __SHR_PHONEUI_PHONE_LOG_H__
+#ifndef __SHR_PHONEUIPHONELOG_H__
+#define __SHR_PHONEUIPHONELOG_H__
 
 #include <gio/gio.h>
-#include <gdbusinterface.h>
-#include <gdbusobjectproxy.h>
-#include <gdbusproxymanager.h>
-#include <gdbusobject.h>
-#include <gdbusobjectmanager.h>
-#include <gdbuscodegen-enumtypes.h>
-#include <string.h>
-#include <shr-types.h>
 
 G_BEGIN_DECLS
 
-#define TYPE_PHONEUI_PHONE_LOG         (phoneui_phone_log_get_gtype ())
-#define PHONEUI_PHONE_LOG(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_PHONEUI_PHONE_LOG, PhoneuiPhoneLog))
-#define IS_PHONEUI_PHONE_LOG(o)        (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_PHONEUI_PHONE_LOG))
-#define PHONEUI_PHONE_LOG_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE((o), TYPE_PHONEUI_PHONE_LOG, PhoneuiPhoneLogIface))
 
-/**
- * PhoneuiPhoneLog:
- *
- * Opaque type representing a proxy or an exported object.
- */
-typedef struct _PhoneuiPhoneLog PhoneuiPhoneLog; /* Dummy typedef */
-/**
- * PhoneuiPhoneLogIface:
- * @parent_iface: The parent interface.
- * @handle_display_list: Handler for the #PhoneuiPhoneLog::handle-display-list signal.
- *
- * Virtual table.
- */
+/* ------------------------------------------------------------------------ */
+/* Declarations for org.shr.phoneui.PhoneLog */
+
+#define TYPE_PHONEUI_PHONE_LOG (phoneui_phone_log_get_type ())
+#define PHONEUI_PHONE_LOG(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_PHONEUI_PHONE_LOG, PhoneuiPhoneLog))
+#define IS_PHONEUI_PHONE_LOG(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_PHONEUI_PHONE_LOG))
+#define PHONEUI_PHONE_LOG_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_PHONEUI_PHONE_LOG, PhoneuiPhoneLog))
+
+struct _PhoneuiPhoneLog;
+typedef struct _PhoneuiPhoneLog PhoneuiPhoneLog;
 typedef struct _PhoneuiPhoneLogIface PhoneuiPhoneLogIface;
 
-GType phoneui_phone_log_get_gtype (void) G_GNUC_CONST;
+struct _PhoneuiPhoneLogIface
+{
+  GTypeInterface parent_iface;
+
+  gboolean (*handle_display_list) (
+    PhoneuiPhoneLog *object,
+    GDBusMethodInvocation *invocation,
+    GVariant *filter);
+
+};
+
+GType phoneui_phone_log_get_type (void) G_GNUC_CONST;
+
 GDBusInterfaceInfo *phoneui_phone_log_interface_info (void);
 
-/**
- * GET_PHONEUI_PHONE_LOG:
- * @object_proxy: A #GDBusObjectProxy.
- *
- * Convenience macro to get a #PhoneuiPhoneLog interface proxy from @object_proxy.
- *
- * Returns: A #GDBusProxy object implementing the #PhoneuiPhoneLog interface or %NULL if @object_proxy
- * does not implement the <literal>org.shr.phoneui.PhoneLog</literal> D-Bus interface.
- * The returned reference must be released with g_object_unref().
- */
-#define GET_PHONEUI_PHONE_LOG(object_proxy) (g_dbus_object_proxy_lookup_with_typecheck (object_proxy, "org.shr.phoneui.PhoneLog", TYPE_PHONEUI_PHONE_LOG))
 
-/**
- * PEEK_PHONEUI_PHONE_LOG:
- * @object_proxy: A #GDBusObjectProxy.
- *
- * Like GET_PHONEUI_PHONE_LOG() but doesn't increase the reference count on the returned object.
- *
- * <note><para>This macro is not safe to use outside the thread where the #GDBusProxyManager for @object_proxy was constructed in.</para></note>
- *
- * Returns: A #GDBusProxy object implementing the #PhoneuiPhoneLog interface or %NULL if @object_proxy
- * does not implement the <literal>org.shr.phoneui.PhoneLog</literal> D-Bus interface.
- * Do not free the returned object, it is owned by @object_proxy..
- */
-#define PEEK_PHONEUI_PHONE_LOG(object_proxy) (g_dbus_object_proxy_peek_with_typecheck (object_proxy, "org.shr.phoneui.PhoneLog", TYPE_PHONEUI_PHONE_LOG))
+/* D-Bus method call completion functions: */
+void phoneui_phone_log_complete_display_list (
+    PhoneuiPhoneLog *object,
+    GDBusMethodInvocation *invocation);
+
+
+
+/* D-Bus method calls: */
+void phoneui_phone_log_call_display_list (
+    PhoneuiPhoneLog *proxy,
+    GVariant *filter,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data);
+
+gboolean phoneui_phone_log_call_display_list_finish (
+    PhoneuiPhoneLog *proxy,
+    GAsyncResult *res,
+    GError **error);
+
+gboolean phoneui_phone_log_call_display_list_sync (
+    PhoneuiPhoneLog *proxy,
+    GVariant *filter,
+    GCancellable *cancellable,
+    GError **error);
 
 
-/* ---------------------------------------------------------------------- */
+
+/* ---- */
+
+#define TYPE_PHONEUI_PHONE_LOG_PROXY (phoneui_phone_log_proxy_get_type ())
+#define PHONEUI_PHONE_LOG_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_PHONEUI_PHONE_LOG_PROXY, PhoneuiPhoneLogProxy))
+#define PHONEUI_PHONE_LOG_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_PHONEUI_PHONE_LOG_PROXY, PhoneuiPhoneLogProxyClass))
+#define PHONEUI_PHONE_LOG_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_PHONEUI_PHONE_LOG_PROXY, PhoneuiPhoneLogProxyClass))
+#define IS_PHONEUI_PHONE_LOG_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_PHONEUI_PHONE_LOG_PROXY))
+#define IS_PHONEUI_PHONE_LOG_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_PHONEUI_PHONE_LOG_PROXY))
 
 typedef struct _PhoneuiPhoneLogProxy PhoneuiPhoneLogProxy;
 typedef struct _PhoneuiPhoneLogProxyClass PhoneuiPhoneLogProxyClass;
-
-/**
- * PhoneuiPhoneLogProxyPrivate:
- *
- * The #PhoneuiPhoneLogProxyPrivate structure contains only private data.
- */
 typedef struct _PhoneuiPhoneLogProxyPrivate PhoneuiPhoneLogProxyPrivate;
 
-/**
- * PhoneuiPhoneLogProxy:
- *
- * The #PhoneuiPhoneLogProxy structure contains only private data and
- * should only be accessed using the provided API.
- */
 struct _PhoneuiPhoneLogProxy
 {
-  /*< private >*/
   GDBusProxy parent_instance;
   PhoneuiPhoneLogProxyPrivate *priv;
 };
 
-/**
- * PhoneuiPhoneLogProxyClass:
- *
- * Class structure for #PhoneuiPhoneLogProxy.
- */
 struct _PhoneuiPhoneLogProxyClass
 {
-  /*< private >*/
   GDBusProxyClass parent_class;
 };
 
-#define TYPE_PHONEUI_PHONE_LOG_PROXY (phoneui_phone_log_proxy_get_type ())
 GType phoneui_phone_log_proxy_get_type (void) G_GNUC_CONST;
 
-void phoneui_phone_log_proxy_new (GDBusConnection     *connection,
-                   GDBusProxyFlags      flags,
-                   const gchar         *name,
-                   const gchar         *object_path,
-                   GCancellable        *cancellable,
-                   GAsyncReadyCallback  callback,
-                   gpointer             user_data);
-PhoneuiPhoneLog *phoneui_phone_log_proxy_new_finish (GAsyncResult  *res,
-                        GError       **error);
-PhoneuiPhoneLog *phoneui_phone_log_proxy_new_sync (GDBusConnection     *connection,
-                       GDBusProxyFlags      flags,
-                       const gchar         *name,
-                       const gchar         *object_path,
-                       GCancellable        *cancellable,
-                       GError             **error);
-
-void phoneui_phone_log_proxy_new_for_bus (GBusType             bus_type,
-                           GDBusProxyFlags      flags,
-                           const gchar         *name,
-                           const gchar         *object_path,
-                           GCancellable        *cancellable,
-                           GAsyncReadyCallback  callback,
-                           gpointer             user_data);
-PhoneuiPhoneLog *phoneui_phone_log_proxy_new_for_bus_finish (GAsyncResult  *res,
-                                 GError       **error);
-PhoneuiPhoneLog *phoneui_phone_log_proxy_new_for_bus_sync (GBusType             bus_type,
-                               GDBusProxyFlags      flags,
-                               const gchar         *name,
-                               const gchar         *object_path,
-                               GCancellable        *cancellable,
-                               GError             **error);
-
-/* ---------------------------------------------------------------------- */
-
-typedef struct _PhoneuiPhoneLogStub PhoneuiPhoneLogStub;
-typedef struct _PhoneuiPhoneLogStubClass PhoneuiPhoneLogStubClass;
-
-/**
- * PhoneuiPhoneLogStubPrivate:
- *
- * The #PhoneuiPhoneLogStubPrivate structure contains only private data.
- */
-typedef struct _PhoneuiPhoneLogStubPrivate PhoneuiPhoneLogStubPrivate;
-
-/**
- * PhoneuiPhoneLogStub:
- *
- * The #PhoneuiPhoneLogStub structure contains only private data and
- * should only be accessed using the provided API.
- */
-struct _PhoneuiPhoneLogStub
+void phoneui_phone_log_proxy_new (
+    GDBusConnection     *connection,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GAsyncReadyCallback  callback,
+    gpointer             user_data);
+PhoneuiPhoneLog *phoneui_phone_log_proxy_new_finish (
+    GAsyncResult        *res,
+    GError             **error);
+PhoneuiPhoneLog *phoneui_phone_log_proxy_new_sync (
+    GDBusConnection     *connection,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GError             **error);
+
+void phoneui_phone_log_proxy_new_for_bus (
+    GBusType             bus_type,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GAsyncReadyCallback  callback,
+    gpointer             user_data);
+PhoneuiPhoneLog *phoneui_phone_log_proxy_new_for_bus_finish (
+    GAsyncResult        *res,
+    GError             **error);
+PhoneuiPhoneLog *phoneui_phone_log_proxy_new_for_bus_sync (
+    GBusType             bus_type,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GError             **error);
+
+
+/* ---- */
+
+#define TYPE_PHONEUI_PHONE_LOG_SKELETON (phoneui_phone_log_skeleton_get_type ())
+#define PHONEUI_PHONE_LOG_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_PHONEUI_PHONE_LOG_SKELETON, PhoneuiPhoneLogSkeleton))
+#define PHONEUI_PHONE_LOG_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_PHONEUI_PHONE_LOG_SKELETON, PhoneuiPhoneLogSkeletonClass))
+#define PHONEUI_PHONE_LOG_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_PHONEUI_PHONE_LOG_SKELETON, PhoneuiPhoneLogSkeletonClass))
+#define IS_PHONEUI_PHONE_LOG_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_PHONEUI_PHONE_LOG_SKELETON))
+#define IS_PHONEUI_PHONE_LOG_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_PHONEUI_PHONE_LOG_SKELETON))
+
+typedef struct _PhoneuiPhoneLogSkeleton PhoneuiPhoneLogSkeleton;
+typedef struct _PhoneuiPhoneLogSkeletonClass PhoneuiPhoneLogSkeletonClass;
+typedef struct _PhoneuiPhoneLogSkeletonPrivate PhoneuiPhoneLogSkeletonPrivate;
+
+struct _PhoneuiPhoneLogSkeleton
 {
-  /*< private >*/
-  GObject parent_instance;
-  PhoneuiPhoneLogStubPrivate *priv;
+  GDBusInterfaceSkeleton parent_instance;
+  PhoneuiPhoneLogSkeletonPrivate *priv;
 };
 
-/**
- * PhoneuiPhoneLogStubClass:
- *
- * Class structure for #PhoneuiPhoneLogStub.
- */
-struct _PhoneuiPhoneLogStubClass
-{
-  /*< private >*/
-  GObjectClass parent_class;
-};
-
-#define TYPE_PHONEUI_PHONE_LOG_STUB (phoneui_phone_log_stub_get_type ())
-GType phoneui_phone_log_stub_get_type (void) G_GNUC_CONST;
-
-PhoneuiPhoneLog *phoneui_phone_log_stub_new (void);
-
-
-struct _PhoneuiPhoneLogIface
+struct _PhoneuiPhoneLogSkeletonClass
 {
-  GTypeInterface parent_iface;
-
-  /* Signal handlers for handling D-Bus method calls: */
-  gboolean (*handle_display_list) (
-        PhoneuiPhoneLog *object,
-        GDBusMethodInvocation *invocation,
-        GVariant *filter);
+  GDBusInterfaceSkeletonClass parent_class;
 };
 
-/* C Bindings for properties */
-
-
-/* D-Bus Methods */
-void phoneui_phone_log_call_display_list (
-        PhoneuiPhoneLog *proxy,
-        GVariant *filter,
-        GCancellable *cancellable,
-        GAsyncReadyCallback callback,
-        gpointer user_data);
-
-gboolean phoneui_phone_log_call_display_list_finish (
-        PhoneuiPhoneLog *proxy,
-        GAsyncResult *res,
-        GError **error);
-
-gboolean phoneui_phone_log_call_display_list_sync (
-        PhoneuiPhoneLog *proxy,
-        GVariant *filter,
-        GCancellable *cancellable,
-        GError **error);
-
-
-
-/* D-Bus Methods Completion Helpers */
-void phoneui_phone_log_complete_display_list (
-        PhoneuiPhoneLog *object,
-        GDBusMethodInvocation *invocation);
-
+GType phoneui_phone_log_skeleton_get_type (void) G_GNUC_CONST;
 
+PhoneuiPhoneLog *phoneui_phone_log_skeleton_new (void);
 
-/* D-Bus Signal Emission Helpers */
 
 G_END_DECLS
 
-#endif /* __SHR_PHONEUI_PHONE_LOG_H__ */
+#endif /* __SHR_PHONEUIPHONELOG_H__ */
diff --git a/src/shr-phoneuisettings.c b/src/shr-phoneuisettings.c
index 961761b..f78230e 100644
--- a/src/shr-phoneuisettings.c
+++ b/src/shr-phoneuisettings.c
@@ -1,1529 +1,1015 @@
-/* File:       shr-phoneuisettings.c
+/*
+ * Generated by gdbus-codegen 2.29.3. DO NOT EDIT.
  *
- * GType name: PhoneuiSettings
- * D-Bus name: org.shr.phoneui.Settings
- *
- * Generated by GDBus Binding Tool 0.1. DO NOT EDIT.
+ * The license of this code is the same as for the source it was derived from.
+ */
+
+#ifdef HAVE_CONFIG_H
+#  include "config.h"
+#endif
+
+#include "shr-phoneuisettings.h"
+
+typedef struct
+{
+  GDBusArgInfo parent_struct;
+  gboolean use_gvariant;
+} _ExtendedGDBusArgInfo;
+
+typedef struct
+{
+  GDBusMethodInfo parent_struct;
+  const gchar *signal_name;
+} _ExtendedGDBusMethodInfo;
+
+typedef struct
+{
+  GDBusSignalInfo parent_struct;
+  const gchar *signal_name;
+} _ExtendedGDBusSignalInfo;
+
+typedef struct
+{
+  GDBusPropertyInfo parent_struct;
+  const gchar *hyphen_name;
+  gboolean use_gvariant;
+} _ExtendedGDBusPropertyInfo;
+
+typedef struct
+{
+  GDBusInterfaceInfo parent_struct;
+  const gchar *hyphen_name;
+} _ExtendedGDBusInterfaceInfo;
+
+typedef struct
+{
+  const _ExtendedGDBusPropertyInfo *info;
+  guint prop_id;
+  GValue orig_value; /* the value before the change */
+} ChangedProperty;
+
+static void
+_changed_property_free (ChangedProperty *data)
+{
+  g_value_unset (&data->orig_value);
+  g_free (data);
+}
+
+static gboolean
+_g_strv_equal0 (gchar **a, gchar **b)
+{
+  gboolean ret = FALSE;
+  guint n;
+  if (a == NULL && b == NULL)
+    {
+      ret = TRUE;
+      goto out;
+    }
+  if (a == NULL || b == NULL)
+    goto out;
+  if (g_strv_length (a) != g_strv_length (b))
+    goto out;
+  for (n = 0; a[n] != NULL; n++)
+    if (g_strcmp0 (a[n], b[n]) != 0)
+      goto out;
+  ret = TRUE;
+out:
+  return ret;
+}
+
+static gboolean
+_g_variant_equal0 (GVariant *a, GVariant *b)
+{
+  gboolean ret = FALSE;
+  if (a == NULL && b == NULL)
+    {
+      ret = TRUE;
+      goto out;
+    }
+  if (a == NULL || b == NULL)
+    goto out;
+  ret = g_variant_equal (a, b);
+out:
+  return ret;
+}
+
+G_GNUC_UNUSED static gboolean
+_g_value_equal (const GValue *a, const GValue *b)
+{
+  gboolean ret = FALSE;
+  g_assert (G_VALUE_TYPE (a) == G_VALUE_TYPE (b));
+  switch (G_VALUE_TYPE (a))
+    {
+      case G_TYPE_BOOLEAN:
+        ret = (g_value_get_boolean (a) == g_value_get_boolean (b));
+        break;
+      case G_TYPE_UCHAR:
+        ret = (g_value_get_uchar (a) == g_value_get_uchar (b));
+        break;
+      case G_TYPE_INT:
+        ret = (g_value_get_int (a) == g_value_get_int (b));
+        break;
+      case G_TYPE_UINT:
+        ret = (g_value_get_uint (a) == g_value_get_uint (b));
+        break;
+      case G_TYPE_INT64:
+        ret = (g_value_get_int64 (a) == g_value_get_int64 (b));
+        break;
+      case G_TYPE_UINT64:
+        ret = (g_value_get_uint64 (a) == g_value_get_uint64 (b));
+        break;
+      case G_TYPE_DOUBLE:
+        ret = (g_value_get_double (a) == g_value_get_double (b));
+        break;
+      case G_TYPE_STRING:
+        ret = (g_strcmp0 (g_value_get_string (a), g_value_get_string (b)) == 0);
+        break;
+      case G_TYPE_VARIANT:
+        ret = _g_variant_equal0 (g_value_get_variant (a), g_value_get_variant (b));
+        break;
+      default:
+        if (G_VALUE_TYPE (a) == G_TYPE_STRV)
+          ret = _g_strv_equal0 (g_value_get_boxed (a), g_value_get_boxed (b));
+        else
+          g_critical ("_g_value_equal() does not handle type %s", g_type_name (G_VALUE_TYPE (a)));
+        break;
+    }
+  return ret;
+}
+
+/* ------------------------------------------------------------------------
+ * Code for interface org.shr.phoneui.Settings
+ * ------------------------------------------------------------------------
  */
 
 /**
- * SECTION:shr-phoneuisettings
+ * SECTION:PhoneuiSettings
  * @title: PhoneuiSettings
- * @short_description: Wraps the org.shr.phoneui.Settings D-Bus interface
- * @include: gio/gio.h
- *
- * The abstract #PhoneuiSettings interface type wraps the <literal>org.shr.phoneui.Settings</literal> D-Bus interface. Two concrete implementations exists: #PhoneuiSettingsProxy (for client-side usage) and #PhoneuiSettingsStub (for service-side usage).
- *
- * This code was generated from the following D-Bus introspection XML:
- * <programlisting><![CDATA[
- * <interface name="org.shr.phoneui.Settings">
- *   <method name="DisplayQuickSettings">
- *     <annotation name="org.freedesktop.DBus.GLib.Async" value="true">
- *     </annotation>
- *   </method>
- *   <method name="DisplaySimManager">
- *     <annotation name="org.freedesktop.DBus.GLib.Async" value="true">
- *     </annotation>
- *   </method>
- *   <method name="SetMessageReceipt">
- *     <annotation name="org.freedesktop.DBus.GLib.Async" value="true">
- *     </annotation>
- *     <arg type="b" name="message_receipt" direction="in">
- *     </arg>
- *   </method>
- *   <method name="GetMessageReceipt">
- *     <annotation name="org.freedesktop.DBus.GLib.Async" value="true">
- *     </annotation>
- *     <arg type="b" name="message_receipt" direction="out">
- *     </arg>
- *   </method>
- * </interface>
- * ]]></programlisting>
+ * @short_description: Generated C code for the org.shr.phoneui.Settings D-Bus interface
  *
+ * This section contains code for working with the <link linkend="gdbus-interface-org-shr-phoneui-Settings.top_of_page">org.shr.phoneui.Settings</link> D-Bus interface in C.
  */
 
-#include <shr-phoneuisettings.h>
-#include <shr-types.h>
-#include <shr-bindingsprivate.h>
-#include <shr-marshallers.h>
-
-static guint phoneui_settings_register_object (GDBusInterface *object,
-                    GDBusConnection *connection,
-                    const gchar *object_path,
-                    GError **error);
-static void phoneui_settings_flush (GDBusInterface *object);
-static GVariant *phoneui_settings_get_properties (GDBusInterface *object);
-static GDBusInterfaceInfo *phoneui_settings_g_dbus_interface_interface_info (GDBusInterface *object);
-static GDBusObject *phoneui_settings_g_dbus_interface_get_object (GDBusInterface *interface);
-static void phoneui_settings_g_dbus_interface_set_object (GDBusInterface *interface, GDBusObject *object);
-static GDBusInterfaceFlags phoneui_settings_g_dbus_interface_get_flags (GDBusInterface *interface);
-static void phoneui_settings_g_dbus_interface_set_flags (GDBusInterface *interface, GDBusInterfaceFlags flags);
+/* ---- Introspection data for org.shr.phoneui.Settings ---- */
 
-typedef PhoneuiSettingsIface PhoneuiSettingsInterface;
-#define phoneui_settings_get_type phoneui_settings_get_gtype
-G_DEFINE_INTERFACE (PhoneuiSettings, phoneui_settings, G_TYPE_OBJECT);
-#undef phoneui_settings_get_type
+static const GDBusAnnotationInfo _phoneui_settings_method_display_quick_settings_annotation_info_0 =
+{
+  -1,
+  "org.freedesktop.DBus.GLib.Async",
+  "true",
+  NULL
+};
+
+static const GDBusAnnotationInfo * const _phoneui_settings_method_display_quick_settings_annotation_info_pointers[] =
+{
+  &_phoneui_settings_method_display_quick_settings_annotation_info_0,
+  NULL
+};
+
+static const _ExtendedGDBusMethodInfo _phoneui_settings_method_info_display_quick_settings =
+{
+  {
+    -1,
+    "DisplayQuickSettings",
+    NULL,
+    NULL,
+    (GDBusAnnotationInfo **) &_phoneui_settings_method_display_quick_settings_annotation_info_pointers
+  },
+  "handle-display-quick-settings"
+};
+
+static const GDBusAnnotationInfo _phoneui_settings_method_display_sim_manager_annotation_info_0 =
+{
+  -1,
+  "org.freedesktop.DBus.GLib.Async",
+  "true",
+  NULL
+};
 
+static const GDBusAnnotationInfo * const _phoneui_settings_method_display_sim_manager_annotation_info_pointers[] =
+{
+  &_phoneui_settings_method_display_sim_manager_annotation_info_0,
+  NULL
+};
 
-enum
+static const _ExtendedGDBusMethodInfo _phoneui_settings_method_info_display_sim_manager =
 {
-  _0_SIGNAL,
-  __DISPLAY_QUICK_SETTINGS_METHOD,
-  __DISPLAY_SIM_MANAGER_METHOD,
-  __SET_MESSAGE_RECEIPT_METHOD,
-  __GET_MESSAGE_RECEIPT_METHOD,
-  __LAST_SIGNAL
+  {
+    -1,
+    "DisplaySimManager",
+    NULL,
+    NULL,
+    (GDBusAnnotationInfo **) &_phoneui_settings_method_display_sim_manager_annotation_info_pointers
+  },
+  "handle-display-sim-manager"
 };
 
-static guint signals[__LAST_SIGNAL] = {0};
+static const _ExtendedGDBusArgInfo _phoneui_settings_method_info_set_message_receipt_IN_ARG_message_receipt =
+{
+  {
+    -1,
+    "message_receipt",
+    "b",
+    NULL
+  },
+  FALSE
+};
 
+static const _ExtendedGDBusArgInfo * const _phoneui_settings_method_info_set_message_receipt_IN_ARG_pointers[] =
+{
+  &_phoneui_settings_method_info_set_message_receipt_IN_ARG_message_receipt,
+  NULL
+};
 
-enum
+static const GDBusAnnotationInfo _phoneui_settings_method_set_message_receipt_annotation_info_0 =
 {
-  PROP_0,
+  -1,
+  "org.freedesktop.DBus.GLib.Async",
+  "true",
+  NULL
 };
 
-/* ------------------------------------------------------------------------- */
+static const GDBusAnnotationInfo * const _phoneui_settings_method_set_message_receipt_annotation_info_pointers[] =
+{
+  &_phoneui_settings_method_set_message_receipt_annotation_info_0,
+  NULL
+};
 
-/* Various lookup tables */
+static const _ExtendedGDBusMethodInfo _phoneui_settings_method_info_set_message_receipt =
+{
+  {
+    -1,
+    "SetMessageReceipt",
+    (GDBusArgInfo **) &_phoneui_settings_method_info_set_message_receipt_IN_ARG_pointers,
+    NULL,
+    (GDBusAnnotationInfo **) &_phoneui_settings_method_set_message_receipt_annotation_info_pointers
+  },
+  "handle-set-message-receipt"
+};
 
-static GHashTable *_method_name_to_id = NULL;
-static GHashTable *_signal_name_to_id = NULL;
-static GHashTable *_property_name_to_id = NULL;
-static GHashTable *_property_gname_to_name = NULL;
-static GHashTable *_property_name_to_gname = NULL;
+static const _ExtendedGDBusArgInfo _phoneui_settings_method_info_get_message_receipt_OUT_ARG_message_receipt =
+{
+  {
+    -1,
+    "message_receipt",
+    "b",
+    NULL
+  },
+  FALSE
+};
 
+static const _ExtendedGDBusArgInfo * const _phoneui_settings_method_info_get_message_receipt_OUT_ARG_pointers[] =
+{
+  &_phoneui_settings_method_info_get_message_receipt_OUT_ARG_message_receipt,
+  NULL
+};
 
-static guint
-lookup_method_id_from_method_name (const gchar *method_name)
+static const GDBusAnnotationInfo _phoneui_settings_method_get_message_receipt_annotation_info_0 =
 {
-  return GPOINTER_TO_UINT (g_hash_table_lookup (_method_name_to_id, method_name));
-}
+  -1,
+  "org.freedesktop.DBus.GLib.Async",
+  "true",
+  NULL
+};
 
-static guint
-lookup_signal_id_from_signal_name (const gchar *signal_name)
+static const GDBusAnnotationInfo * const _phoneui_settings_method_get_message_receipt_annotation_info_pointers[] =
 {
-  return GPOINTER_TO_UINT (g_hash_table_lookup (_signal_name_to_id, signal_name));
-}
+  &_phoneui_settings_method_get_message_receipt_annotation_info_0,
+  NULL
+};
 
-static guint
-lookup_property_id_from_property_name (const gchar *property_name)
+static const _ExtendedGDBusMethodInfo _phoneui_settings_method_info_get_message_receipt =
 {
-  return GPOINTER_TO_UINT (g_hash_table_lookup (_property_name_to_id, property_name));
-}
+  {
+    -1,
+    "GetMessageReceipt",
+    NULL,
+    (GDBusArgInfo **) &_phoneui_settings_method_info_get_message_receipt_OUT_ARG_pointers,
+    (GDBusAnnotationInfo **) &_phoneui_settings_method_get_message_receipt_annotation_info_pointers
+  },
+  "handle-get-message-receipt"
+};
 
-static const gchar *
-lookup_property_name_from_property_gname (const gchar *property_gname)
+static const _ExtendedGDBusMethodInfo * const _phoneui_settings_method_info_pointers[] =
 {
-  return g_hash_table_lookup (_property_gname_to_name, property_gname);
-}
+  &_phoneui_settings_method_info_display_quick_settings,
+  &_phoneui_settings_method_info_display_sim_manager,
+  &_phoneui_settings_method_info_set_message_receipt,
+  &_phoneui_settings_method_info_get_message_receipt,
+  NULL
+};
 
-static const gchar *
-lookup_property_gname_from_property_name (const gchar *property_name)
+static const _ExtendedGDBusInterfaceInfo _phoneui_settings_interface_info =
 {
-  return g_hash_table_lookup (_property_name_to_gname, property_name);
-}
+  {
+    -1,
+    "org.shr.phoneui.Settings",
+    (GDBusMethodInfo **) &_phoneui_settings_method_info_pointers,
+    NULL,
+    NULL,
+    NULL
+  },
+  "phoneui-settings",
+};
 
-/* ------------------------------------------------------------------------- */
-static void dbus_iface_init (GDBusInterfaceIface *iface)
-{
-  iface->get_info = phoneui_settings_g_dbus_interface_interface_info;
-  iface->get_properties = phoneui_settings_get_properties;
-  iface->flush = phoneui_settings_flush;
-  iface->register_object = phoneui_settings_register_object;
-  iface->set_object = phoneui_settings_g_dbus_interface_set_object;
-  iface->get_object = phoneui_settings_g_dbus_interface_get_object;
-  iface->set_flags = phoneui_settings_g_dbus_interface_set_flags;
-  iface->get_flags = phoneui_settings_g_dbus_interface_get_flags;
-}
 
-static void
-phoneui_settings_default_init (PhoneuiSettingsIface *iface)
+/**
+ * phoneui_settings_interface_info:
+ *
+ * Gets a machine-readable description of the <link linkend="gdbus-interface-org-shr-phoneui-Settings.top_of_page">org.shr.phoneui.Settings</link> D-Bus interface.
+ *
+ * Returns: (transfer none): A #GDBusInterfaceInfo. Do not free.
+ */
+GDBusInterfaceInfo *
+phoneui_settings_interface_info (void)
 {
+  return (GDBusInterfaceInfo *) &_phoneui_settings_interface_info;
+}
+
+
 
-  /* Build lookup structures */
-  _method_name_to_id = g_hash_table_new (g_str_hash, g_str_equal);
-  _signal_name_to_id = g_hash_table_new (g_str_hash, g_str_equal);
-  _property_name_to_id = g_hash_table_new (g_str_hash, g_str_equal);
-  _property_gname_to_name = g_hash_table_new (g_str_hash, g_str_equal);
-  _property_name_to_gname = g_hash_table_new (g_str_hash, g_str_equal);
-  g_hash_table_insert (_method_name_to_id, "DisplayQuickSettings", GUINT_TO_POINTER (__DISPLAY_QUICK_SETTINGS_METHOD));
-  g_hash_table_insert (_method_name_to_id, "DisplaySimManager", GUINT_TO_POINTER (__DISPLAY_SIM_MANAGER_METHOD));
-  g_hash_table_insert (_method_name_to_id, "SetMessageReceipt", GUINT_TO_POINTER (__SET_MESSAGE_RECEIPT_METHOD));
-  g_hash_table_insert (_method_name_to_id, "GetMessageReceipt", GUINT_TO_POINTER (__GET_MESSAGE_RECEIPT_METHOD));
+/**
+ * PhoneuiSettings:
+ *
+ * Abstract interface type for the D-Bus interface <link linkend="gdbus-interface-org-shr-phoneui-Settings.top_of_page">org.shr.phoneui.Settings</link>.
+ */
 
-  /* GObject signals definitions for D-Bus signals: */
+/**
+ * PhoneuiSettingsIface:
+ * @parent_iface: The parent interface.
+ * @handle_display_quick_settings: Handler for the #PhoneuiSettings::handle-display-quick-settings signal.
+ * @handle_display_sim_manager: Handler for the #PhoneuiSettings::handle-display-sim-manager signal.
+ * @handle_get_message_receipt: Handler for the #PhoneuiSettings::handle-get-message-receipt signal.
+ * @handle_set_message_receipt: Handler for the #PhoneuiSettings::handle-set-message-receipt signal.
+ *
+ * Virtual table for the D-Bus interface <link linkend="gdbus-interface-org-shr-phoneui-Settings.top_of_page">org.shr.phoneui.Settings</link>.
+ */
 
-  /* GObject signals definitions for D-Bus methods: */
+static void
+phoneui_settings_default_init (PhoneuiSettingsIface *iface)
+{
+  /* GObject signals for incoming D-Bus method calls: */
   /**
    * PhoneuiSettings::handle-display-quick-settings:
-   * @object: The exported object emitting the signal.
-   * @invocation: A #GDBusMethodInvocation object that can be used to return a value or error.
-   *
-   * On exported objects, this signal is emitted when a remote process (identified by @invocation) invokes the <literal>org.shr.phoneui.Settings.DisplayQuickSettings()</literal> D-Bus method on @object. Use phoneui_settings_complete_display_quick_settings() to return a value or g_dbus_method_invocation_return_error() to return an error.
+   * @object: A #PhoneuiSettings.
+   * @invocation: A #GDBusMethodInvocation.
    *
-   * The signal is emitted in the
-   * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
-   * of the thread that @object was registered in.
+   * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-shr-phoneui-Settings.DisplayQuickSettings">DisplayQuickSettings()</link> D-Bus method.
    *
-   * On proxies, this signal is never emitted.
+   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phoneui_settings_complete_display_quick_settings() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
    *
-   * Returns: %TRUE if you want to handle the method call (will stop further handlers from being called), %FALSE otherwise.
+   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
    */
-  signals[__DISPLAY_QUICK_SETTINGS_METHOD] =
-    g_signal_new ("handle-display-quick-settings",
-                  G_TYPE_FROM_INTERFACE (iface),
-                  G_SIGNAL_RUN_LAST,
-                  G_STRUCT_OFFSET (PhoneuiSettingsIface, handle_display_quick_settings),
-                  g_signal_accumulator_true_handled,
-                  NULL,
-                  _shr_gdbus_cclosure_marshaller_BOOLEAN__OBJECT,
-                  G_TYPE_BOOLEAN,
-                  1,
-                  G_TYPE_DBUS_METHOD_INVOCATION);
+  g_signal_new ("handle-display-quick-settings",
+    G_TYPE_FROM_INTERFACE (iface),
+    G_SIGNAL_RUN_LAST,
+    G_STRUCT_OFFSET (PhoneuiSettingsIface, handle_display_quick_settings),
+    g_signal_accumulator_true_handled,
+    NULL,
+    g_cclosure_marshal_generic,
+    G_TYPE_BOOLEAN,
+    1,
+    G_TYPE_DBUS_METHOD_INVOCATION);
+
   /**
    * PhoneuiSettings::handle-display-sim-manager:
-   * @object: The exported object emitting the signal.
-   * @invocation: A #GDBusMethodInvocation object that can be used to return a value or error.
-   *
-   * On exported objects, this signal is emitted when a remote process (identified by @invocation) invokes the <literal>org.shr.phoneui.Settings.DisplaySimManager()</literal> D-Bus method on @object. Use phoneui_settings_complete_display_sim_manager() to return a value or g_dbus_method_invocation_return_error() to return an error.
+   * @object: A #PhoneuiSettings.
+   * @invocation: A #GDBusMethodInvocation.
    *
-   * The signal is emitted in the
-   * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
-   * of the thread that @object was registered in.
+   * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-shr-phoneui-Settings.DisplaySimManager">DisplaySimManager()</link> D-Bus method.
    *
-   * On proxies, this signal is never emitted.
+   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phoneui_settings_complete_display_sim_manager() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
    *
-   * Returns: %TRUE if you want to handle the method call (will stop further handlers from being called), %FALSE otherwise.
+   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
    */
-  signals[__DISPLAY_SIM_MANAGER_METHOD] =
-    g_signal_new ("handle-display-sim-manager",
-                  G_TYPE_FROM_INTERFACE (iface),
-                  G_SIGNAL_RUN_LAST,
-                  G_STRUCT_OFFSET (PhoneuiSettingsIface, handle_display_sim_manager),
-                  g_signal_accumulator_true_handled,
-                  NULL,
-                  _shr_gdbus_cclosure_marshaller_BOOLEAN__OBJECT,
-                  G_TYPE_BOOLEAN,
-                  1,
-                  G_TYPE_DBUS_METHOD_INVOCATION);
+  g_signal_new ("handle-display-sim-manager",
+    G_TYPE_FROM_INTERFACE (iface),
+    G_SIGNAL_RUN_LAST,
+    G_STRUCT_OFFSET (PhoneuiSettingsIface, handle_display_sim_manager),
+    g_signal_accumulator_true_handled,
+    NULL,
+    g_cclosure_marshal_generic,
+    G_TYPE_BOOLEAN,
+    1,
+    G_TYPE_DBUS_METHOD_INVOCATION);
+
   /**
    * PhoneuiSettings::handle-set-message-receipt:
-   * @object: The exported object emitting the signal.
-   * @invocation: A #GDBusMethodInvocation object that can be used to return a value or error.
-   * @message_receipt: Parameter.
-   *
-   * On exported objects, this signal is emitted when a remote process (identified by @invocation) invokes the <literal>org.shr.phoneui.Settings.SetMessageReceipt()</literal> D-Bus method on @object. Use phoneui_settings_complete_set_message_receipt() to return a value or g_dbus_method_invocation_return_error() to return an error.
+   * @object: A #PhoneuiSettings.
+   * @invocation: A #GDBusMethodInvocation.
+   * @message_receipt: Argument passed by remote caller.
    *
-   * The signal is emitted in the
-   * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
-   * of the thread that @object was registered in.
+   * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-shr-phoneui-Settings.SetMessageReceipt">SetMessageReceipt()</link> D-Bus method.
    *
-   * On proxies, this signal is never emitted.
+   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phoneui_settings_complete_set_message_receipt() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
    *
-   * Returns: %TRUE if you want to handle the method call (will stop further handlers from being called), %FALSE otherwise.
+   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
    */
-  signals[__SET_MESSAGE_RECEIPT_METHOD] =
-    g_signal_new ("handle-set-message-receipt",
-                  G_TYPE_FROM_INTERFACE (iface),
-                  G_SIGNAL_RUN_LAST,
-                  G_STRUCT_OFFSET (PhoneuiSettingsIface, handle_set_message_receipt),
-                  g_signal_accumulator_true_handled,
-                  NULL,
-                  _shr_gdbus_cclosure_marshaller_BOOLEAN__OBJECT_BOOLEAN,
-                  G_TYPE_BOOLEAN,
-                  2,
-                  G_TYPE_DBUS_METHOD_INVOCATION,
-                  G_TYPE_BOOLEAN);
+  g_signal_new ("handle-set-message-receipt",
+    G_TYPE_FROM_INTERFACE (iface),
+    G_SIGNAL_RUN_LAST,
+    G_STRUCT_OFFSET (PhoneuiSettingsIface, handle_set_message_receipt),
+    g_signal_accumulator_true_handled,
+    NULL,
+    g_cclosure_marshal_generic,
+    G_TYPE_BOOLEAN,
+    2,
+    G_TYPE_DBUS_METHOD_INVOCATION, G_TYPE_BOOLEAN);
+
   /**
    * PhoneuiSettings::handle-get-message-receipt:
-   * @object: The exported object emitting the signal.
-   * @invocation: A #GDBusMethodInvocation object that can be used to return a value or error.
-   *
-   * On exported objects, this signal is emitted when a remote process (identified by @invocation) invokes the <literal>org.shr.phoneui.Settings.GetMessageReceipt()</literal> D-Bus method on @object. Use phoneui_settings_complete_get_message_receipt() to return a value or g_dbus_method_invocation_return_error() to return an error.
+   * @object: A #PhoneuiSettings.
+   * @invocation: A #GDBusMethodInvocation.
    *
-   * The signal is emitted in the
-   * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
-   * of the thread that @object was registered in.
+   * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-shr-phoneui-Settings.GetMessageReceipt">GetMessageReceipt()</link> D-Bus method.
    *
-   * On proxies, this signal is never emitted.
+   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call phoneui_settings_complete_get_message_receipt() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
    *
-   * Returns: %TRUE if you want to handle the method call (will stop further handlers from being called), %FALSE otherwise.
+   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
    */
-  signals[__GET_MESSAGE_RECEIPT_METHOD] =
-    g_signal_new ("handle-get-message-receipt",
-                  G_TYPE_FROM_INTERFACE (iface),
-                  G_SIGNAL_RUN_LAST,
-                  G_STRUCT_OFFSET (PhoneuiSettingsIface, handle_get_message_receipt),
-                  g_signal_accumulator_true_handled,
-                  NULL,
-                  _shr_gdbus_cclosure_marshaller_BOOLEAN__OBJECT,
-                  G_TYPE_BOOLEAN,
-                  1,
-                  G_TYPE_DBUS_METHOD_INVOCATION);
-
-  /* GObject property definitions for D-Bus properties: */
-}
+  g_signal_new ("handle-get-message-receipt",
+    G_TYPE_FROM_INTERFACE (iface),
+    G_SIGNAL_RUN_LAST,
+    G_STRUCT_OFFSET (PhoneuiSettingsIface, handle_get_message_receipt),
+    g_signal_accumulator_true_handled,
+    NULL,
+    g_cclosure_marshal_generic,
+    G_TYPE_BOOLEAN,
+    1,
+    G_TYPE_DBUS_METHOD_INVOCATION);
 
+}
 
-/* C Bindings for properties */
+typedef PhoneuiSettingsIface PhoneuiSettingsInterface;
+G_DEFINE_INTERFACE (PhoneuiSettings, phoneui_settings, G_TYPE_OBJECT);
 
 /**
  * phoneui_settings_call_display_quick_settings:
- * @proxy: A #PhoneuiSettings.
- * @cancellable: A #GCancellable or %NULL.
- * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL if you don't care about the result of the method invocation.
- * @user_data: Data to pass to @callback.
- *
- * Invokes the <literal>org.shr.phoneui.Settings.DisplayQuickSettings()</literal>
- * D-Bus method on the remote object represented by @proxy.
- *
- * This is an asynchronous method. When the operation is finished,
- * callback will be invoked in the
- * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
- * of the thread you are calling this method from. You can then call
- * phoneui_settings_call_display_quick_settings_finish() to get the result of the operation.
- * See phoneui_settings_call_display_quick_settings_sync() for the synchronous version of this method.
+ * @proxy: A #PhoneuiSettingsProxy.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL.
+ * @user_data: User data to pass to @callback.
+ *
+ * Asynchronously invokes the <link linkend="gdbus-method-org-shr-phoneui-Settings.DisplayQuickSettings">DisplayQuickSettings()</link> D-Bus method on @proxy.
+ * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
+ * You can then call phoneui_settings_call_display_quick_settings_finish() to get the result of the operation.
+ *
+ * See phoneui_settings_call_display_quick_settings_sync() for the synchronous, blocking version of this method.
  */
-void phoneui_settings_call_display_quick_settings (
-        PhoneuiSettings *proxy,
-        GCancellable *cancellable,
-        GAsyncReadyCallback callback,
-        gpointer user_data)
-{
-  GVariant *_params;
-  _params = NULL;
+void
+phoneui_settings_call_display_quick_settings (
+    PhoneuiSettings *proxy,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data)
+{
   g_dbus_proxy_call (G_DBUS_PROXY (proxy),
-                     "DisplayQuickSettings",
-                     _params,
-                     G_DBUS_CALL_FLAGS_NONE,
-                     -1,
-                     cancellable,
-                     callback,
-                     user_data);
+    "DisplayQuickSettings",
+    g_variant_new ("()"),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    callback,
+    user_data);
 }
 
 /**
  * phoneui_settings_call_display_quick_settings_finish:
- * @proxy: A #PhoneuiSettings.
- * @res: A #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_settings_call_display_quick_settings().
+ * @proxy: A #PhoneuiSettingsProxy.
+ * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_settings_call_display_quick_settings().
  * @error: Return location for error or %NULL.
  *
- * Finishes invoking the <literal>org.shr.phoneui.Settings.DisplayQuickSettings()</literal>
- * D-Bus method on the remote object represented by @proxy.
+ * Finishes an operation started with phoneui_settings_call_display_quick_settings().
  *
- * Returns: %TRUE if the call succeeded, %FALSE if @error is set.
+ * Returns: %TRUE if the call succeded, %FALSE if @error is set.
  */
-gboolean phoneui_settings_call_display_quick_settings_finish (
-        PhoneuiSettings *proxy,
-        GAsyncResult *res,
-        GError **error)
-{
-  gboolean _ret = FALSE;
-  GVariant *_result;
-  _result = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
-  if (_result == NULL)
+gboolean
+phoneui_settings_call_display_quick_settings_finish (
+    PhoneuiSettings *proxy,
+    GAsyncResult *res,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
+  if (_ret == NULL)
     goto _out;
-  g_variant_unref (_result);
-  _ret = TRUE;
+  g_variant_get (_ret,
+                 "()");
+  g_variant_unref (_ret);
 _out:
-  return _ret;
+  return _ret != NULL;
 }
 
 /**
  * phoneui_settings_call_display_quick_settings_sync:
- * @proxy: A #PhoneuiSettings.
- * @cancellable: A #GCancellable or %NULL.
+ * @proxy: A #PhoneuiSettingsProxy.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
  * @error: Return location for error or %NULL.
  *
- * Synchronously invokes the <literal>org.shr.phoneui.Settings.DisplayQuickSettings()</literal>
- * D-Bus method on the remote object represented by @proxy.
- * The calling thread is blocked until a reply is received. See
- * phoneui_settings_call_display_quick_settings() for the asynchronous version of this method.
+ * Synchronously invokes the <link linkend="gdbus-method-org-shr-phoneui-Settings.DisplayQuickSettings">DisplayQuickSettings()</link> D-Bus method on @proxy. The calling thread is blocked until a reply is received.
  *
- * Returns: %TRUE if the call succeeded, %FALSE if @error is set.
+ * See phoneui_settings_call_display_quick_settings() for the asynchronous version of this method.
+ *
+ * Returns: %TRUE if the call succeded, %FALSE if @error is set.
  */
-gboolean phoneui_settings_call_display_quick_settings_sync (
-        PhoneuiSettings *proxy,
-        GCancellable *cancellable,
-        GError **error)
-{
-  gboolean _ret = FALSE;
-  GVariant *_params;
-  GVariant *_result;
-  _params = NULL;
-  _result = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
-                                   "DisplayQuickSettings",
-                                   _params,
-                                   G_DBUS_CALL_FLAGS_NONE,
-                                   -1,
-                                   cancellable,
-                                   error);
-  if (_result == NULL)
+gboolean
+phoneui_settings_call_display_quick_settings_sync (
+    PhoneuiSettings *proxy,
+    GCancellable *cancellable,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
+    "DisplayQuickSettings",
+    g_variant_new ("()"),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    error);
+  if (_ret == NULL)
     goto _out;
-  g_variant_unref (_result);
-  _ret = TRUE;
+  g_variant_get (_ret,
+                 "()");
+  g_variant_unref (_ret);
 _out:
-  return _ret;
+  return _ret != NULL;
 }
 
-
 /**
  * phoneui_settings_call_display_sim_manager:
- * @proxy: A #PhoneuiSettings.
- * @cancellable: A #GCancellable or %NULL.
- * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL if you don't care about the result of the method invocation.
- * @user_data: Data to pass to @callback.
- *
- * Invokes the <literal>org.shr.phoneui.Settings.DisplaySimManager()</literal>
- * D-Bus method on the remote object represented by @proxy.
- *
- * This is an asynchronous method. When the operation is finished,
- * callback will be invoked in the
- * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
- * of the thread you are calling this method from. You can then call
- * phoneui_settings_call_display_sim_manager_finish() to get the result of the operation.
- * See phoneui_settings_call_display_sim_manager_sync() for the synchronous version of this method.
+ * @proxy: A #PhoneuiSettingsProxy.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL.
+ * @user_data: User data to pass to @callback.
+ *
+ * Asynchronously invokes the <link linkend="gdbus-method-org-shr-phoneui-Settings.DisplaySimManager">DisplaySimManager()</link> D-Bus method on @proxy.
+ * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
+ * You can then call phoneui_settings_call_display_sim_manager_finish() to get the result of the operation.
+ *
+ * See phoneui_settings_call_display_sim_manager_sync() for the synchronous, blocking version of this method.
  */
-void phoneui_settings_call_display_sim_manager (
-        PhoneuiSettings *proxy,
-        GCancellable *cancellable,
-        GAsyncReadyCallback callback,
-        gpointer user_data)
-{
-  GVariant *_params;
-  _params = NULL;
+void
+phoneui_settings_call_display_sim_manager (
+    PhoneuiSettings *proxy,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data)
+{
   g_dbus_proxy_call (G_DBUS_PROXY (proxy),
-                     "DisplaySimManager",
-                     _params,
-                     G_DBUS_CALL_FLAGS_NONE,
-                     -1,
-                     cancellable,
-                     callback,
-                     user_data);
+    "DisplaySimManager",
+    g_variant_new ("()"),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    callback,
+    user_data);
 }
 
 /**
  * phoneui_settings_call_display_sim_manager_finish:
- * @proxy: A #PhoneuiSettings.
- * @res: A #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_settings_call_display_sim_manager().
+ * @proxy: A #PhoneuiSettingsProxy.
+ * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_settings_call_display_sim_manager().
  * @error: Return location for error or %NULL.
  *
- * Finishes invoking the <literal>org.shr.phoneui.Settings.DisplaySimManager()</literal>
- * D-Bus method on the remote object represented by @proxy.
+ * Finishes an operation started with phoneui_settings_call_display_sim_manager().
  *
- * Returns: %TRUE if the call succeeded, %FALSE if @error is set.
+ * Returns: %TRUE if the call succeded, %FALSE if @error is set.
  */
-gboolean phoneui_settings_call_display_sim_manager_finish (
-        PhoneuiSettings *proxy,
-        GAsyncResult *res,
-        GError **error)
-{
-  gboolean _ret = FALSE;
-  GVariant *_result;
-  _result = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
-  if (_result == NULL)
+gboolean
+phoneui_settings_call_display_sim_manager_finish (
+    PhoneuiSettings *proxy,
+    GAsyncResult *res,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
+  if (_ret == NULL)
     goto _out;
-  g_variant_unref (_result);
-  _ret = TRUE;
+  g_variant_get (_ret,
+                 "()");
+  g_variant_unref (_ret);
 _out:
-  return _ret;
+  return _ret != NULL;
 }
 
 /**
  * phoneui_settings_call_display_sim_manager_sync:
- * @proxy: A #PhoneuiSettings.
- * @cancellable: A #GCancellable or %NULL.
+ * @proxy: A #PhoneuiSettingsProxy.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
  * @error: Return location for error or %NULL.
  *
- * Synchronously invokes the <literal>org.shr.phoneui.Settings.DisplaySimManager()</literal>
- * D-Bus method on the remote object represented by @proxy.
- * The calling thread is blocked until a reply is received. See
- * phoneui_settings_call_display_sim_manager() for the asynchronous version of this method.
+ * Synchronously invokes the <link linkend="gdbus-method-org-shr-phoneui-Settings.DisplaySimManager">DisplaySimManager()</link> D-Bus method on @proxy. The calling thread is blocked until a reply is received.
  *
- * Returns: %TRUE if the call succeeded, %FALSE if @error is set.
+ * See phoneui_settings_call_display_sim_manager() for the asynchronous version of this method.
+ *
+ * Returns: %TRUE if the call succeded, %FALSE if @error is set.
  */
-gboolean phoneui_settings_call_display_sim_manager_sync (
-        PhoneuiSettings *proxy,
-        GCancellable *cancellable,
-        GError **error)
-{
-  gboolean _ret = FALSE;
-  GVariant *_params;
-  GVariant *_result;
-  _params = NULL;
-  _result = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
-                                   "DisplaySimManager",
-                                   _params,
-                                   G_DBUS_CALL_FLAGS_NONE,
-                                   -1,
-                                   cancellable,
-                                   error);
-  if (_result == NULL)
+gboolean
+phoneui_settings_call_display_sim_manager_sync (
+    PhoneuiSettings *proxy,
+    GCancellable *cancellable,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
+    "DisplaySimManager",
+    g_variant_new ("()"),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    error);
+  if (_ret == NULL)
     goto _out;
-  g_variant_unref (_result);
-  _ret = TRUE;
+  g_variant_get (_ret,
+                 "()");
+  g_variant_unref (_ret);
 _out:
-  return _ret;
+  return _ret != NULL;
 }
 
-
 /**
  * phoneui_settings_call_set_message_receipt:
- * @proxy: A #PhoneuiSettings.
- * @message_receipt: Method parameter.
- * @cancellable: A #GCancellable or %NULL.
- * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL if you don't care about the result of the method invocation.
- * @user_data: Data to pass to @callback.
- *
- * Invokes the <literal>org.shr.phoneui.Settings.SetMessageReceipt()</literal>
- * D-Bus method on the remote object represented by @proxy.
- *
- * This is an asynchronous method. When the operation is finished,
- * callback will be invoked in the
- * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
- * of the thread you are calling this method from. You can then call
- * phoneui_settings_call_set_message_receipt_finish() to get the result of the operation.
- * See phoneui_settings_call_set_message_receipt_sync() for the synchronous version of this method.
+ * @proxy: A #PhoneuiSettingsProxy.
+ * @message_receipt: Argument to pass with the method invocation.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL.
+ * @user_data: User data to pass to @callback.
+ *
+ * Asynchronously invokes the <link linkend="gdbus-method-org-shr-phoneui-Settings.SetMessageReceipt">SetMessageReceipt()</link> D-Bus method on @proxy.
+ * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
+ * You can then call phoneui_settings_call_set_message_receipt_finish() to get the result of the operation.
+ *
+ * See phoneui_settings_call_set_message_receipt_sync() for the synchronous, blocking version of this method.
  */
-void phoneui_settings_call_set_message_receipt (
-        PhoneuiSettings *proxy,
-        gboolean message_receipt,
-        GCancellable *cancellable,
-        GAsyncReadyCallback callback,
-        gpointer user_data)
-{
-  GVariant *_params;
-  _params = g_variant_new ("(b)",
-                           message_receipt);
+void
+phoneui_settings_call_set_message_receipt (
+    PhoneuiSettings *proxy,
+    gboolean message_receipt,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data)
+{
   g_dbus_proxy_call (G_DBUS_PROXY (proxy),
-                     "SetMessageReceipt",
-                     _params,
-                     G_DBUS_CALL_FLAGS_NONE,
-                     -1,
-                     cancellable,
-                     callback,
-                     user_data);
+    "SetMessageReceipt",
+    g_variant_new ("(b)",
+                   message_receipt),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    callback,
+    user_data);
 }
 
 /**
  * phoneui_settings_call_set_message_receipt_finish:
- * @proxy: A #PhoneuiSettings.
- * @res: A #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_settings_call_set_message_receipt().
+ * @proxy: A #PhoneuiSettingsProxy.
+ * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_settings_call_set_message_receipt().
  * @error: Return location for error or %NULL.
  *
- * Finishes invoking the <literal>org.shr.phoneui.Settings.SetMessageReceipt()</literal>
- * D-Bus method on the remote object represented by @proxy.
+ * Finishes an operation started with phoneui_settings_call_set_message_receipt().
  *
- * Returns: %TRUE if the call succeeded, %FALSE if @error is set.
+ * Returns: %TRUE if the call succeded, %FALSE if @error is set.
  */
-gboolean phoneui_settings_call_set_message_receipt_finish (
-        PhoneuiSettings *proxy,
-        GAsyncResult *res,
-        GError **error)
-{
-  gboolean _ret = FALSE;
-  GVariant *_result;
-  _result = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
-  if (_result == NULL)
+gboolean
+phoneui_settings_call_set_message_receipt_finish (
+    PhoneuiSettings *proxy,
+    GAsyncResult *res,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
+  if (_ret == NULL)
     goto _out;
-  g_variant_unref (_result);
-  _ret = TRUE;
+  g_variant_get (_ret,
+                 "()");
+  g_variant_unref (_ret);
 _out:
-  return _ret;
+  return _ret != NULL;
 }
 
 /**
  * phoneui_settings_call_set_message_receipt_sync:
- * @proxy: A #PhoneuiSettings.
- * @message_receipt: Method parameter.
- * @cancellable: A #GCancellable or %NULL.
+ * @proxy: A #PhoneuiSettingsProxy.
+ * @message_receipt: Argument to pass with the method invocation.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
  * @error: Return location for error or %NULL.
  *
- * Synchronously invokes the <literal>org.shr.phoneui.Settings.SetMessageReceipt()</literal>
- * D-Bus method on the remote object represented by @proxy.
- * The calling thread is blocked until a reply is received. See
- * phoneui_settings_call_set_message_receipt() for the asynchronous version of this method.
+ * Synchronously invokes the <link linkend="gdbus-method-org-shr-phoneui-Settings.SetMessageReceipt">SetMessageReceipt()</link> D-Bus method on @proxy. The calling thread is blocked until a reply is received.
  *
- * Returns: %TRUE if the call succeeded, %FALSE if @error is set.
+ * See phoneui_settings_call_set_message_receipt() for the asynchronous version of this method.
+ *
+ * Returns: %TRUE if the call succeded, %FALSE if @error is set.
  */
-gboolean phoneui_settings_call_set_message_receipt_sync (
-        PhoneuiSettings *proxy,
-        gboolean message_receipt,
-        GCancellable *cancellable,
-        GError **error)
-{
-  gboolean _ret = FALSE;
-  GVariant *_params;
-  GVariant *_result;
-  _params = g_variant_new ("(b)",
-                           message_receipt);
-  _result = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
-                                   "SetMessageReceipt",
-                                   _params,
-                                   G_DBUS_CALL_FLAGS_NONE,
-                                   -1,
-                                   cancellable,
-                                   error);
-  if (_result == NULL)
+gboolean
+phoneui_settings_call_set_message_receipt_sync (
+    PhoneuiSettings *proxy,
+    gboolean message_receipt,
+    GCancellable *cancellable,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
+    "SetMessageReceipt",
+    g_variant_new ("(b)",
+                   message_receipt),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    error);
+  if (_ret == NULL)
     goto _out;
-  g_variant_unref (_result);
-  _ret = TRUE;
+  g_variant_get (_ret,
+                 "()");
+  g_variant_unref (_ret);
 _out:
-  return _ret;
+  return _ret != NULL;
 }
 
-
 /**
  * phoneui_settings_call_get_message_receipt:
- * @proxy: A #PhoneuiSettings.
- * @cancellable: A #GCancellable or %NULL.
- * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL if you don't care about the result of the method invocation.
- * @user_data: Data to pass to @callback.
- *
- * Invokes the <literal>org.shr.phoneui.Settings.GetMessageReceipt()</literal>
- * D-Bus method on the remote object represented by @proxy.
- *
- * This is an asynchronous method. When the operation is finished,
- * callback will be invoked in the
- * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
- * of the thread you are calling this method from. You can then call
- * phoneui_settings_call_get_message_receipt_finish() to get the result of the operation.
- * See phoneui_settings_call_get_message_receipt_sync() for the synchronous version of this method.
+ * @proxy: A #PhoneuiSettingsProxy.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL.
+ * @user_data: User data to pass to @callback.
+ *
+ * Asynchronously invokes the <link linkend="gdbus-method-org-shr-phoneui-Settings.GetMessageReceipt">GetMessageReceipt()</link> D-Bus method on @proxy.
+ * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
+ * You can then call phoneui_settings_call_get_message_receipt_finish() to get the result of the operation.
+ *
+ * See phoneui_settings_call_get_message_receipt_sync() for the synchronous, blocking version of this method.
  */
-void phoneui_settings_call_get_message_receipt (
-        PhoneuiSettings *proxy,
-        GCancellable *cancellable,
-        GAsyncReadyCallback callback,
-        gpointer user_data)
-{
-  GVariant *_params;
-  _params = NULL;
+void
+phoneui_settings_call_get_message_receipt (
+    PhoneuiSettings *proxy,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data)
+{
   g_dbus_proxy_call (G_DBUS_PROXY (proxy),
-                     "GetMessageReceipt",
-                     _params,
-                     G_DBUS_CALL_FLAGS_NONE,
-                     -1,
-                     cancellable,
-                     callback,
-                     user_data);
+    "GetMessageReceipt",
+    g_variant_new ("()"),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    callback,
+    user_data);
 }
 
 /**
  * phoneui_settings_call_get_message_receipt_finish:
- * @proxy: A #PhoneuiSettings.
- * @out_message_receipt: Return location for out parameter or %NULL.
- * @res: A #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_settings_call_get_message_receipt().
+ * @proxy: A #PhoneuiSettingsProxy.
+ * @out_message_receipt: (out): Return location for return parameter or %NULL to ignore.
+ * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_settings_call_get_message_receipt().
  * @error: Return location for error or %NULL.
  *
- * Finishes invoking the <literal>org.shr.phoneui.Settings.GetMessageReceipt()</literal>
- * D-Bus method on the remote object represented by @proxy.
+ * Finishes an operation started with phoneui_settings_call_get_message_receipt().
  *
- * Returns: %TRUE if the call succeeded, %FALSE if @error is set.
+ * Returns: %TRUE if the call succeded, %FALSE if @error is set.
  */
-gboolean phoneui_settings_call_get_message_receipt_finish (
-        PhoneuiSettings *proxy,
-        gboolean *out_message_receipt,
-        GAsyncResult *res,
-        GError **error)
-{
-  gboolean _ret = FALSE;
-  GVariant *_result;
-  _result = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
-  if (_result == NULL)
+gboolean
+phoneui_settings_call_get_message_receipt_finish (
+    PhoneuiSettings *proxy,
+    gboolean *out_message_receipt,
+    GAsyncResult *res,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
+  if (_ret == NULL)
     goto _out;
-  {
-    g_variant_get (_result,
-                   "(b)",
-                   out_message_receipt);
-  }
-  g_variant_unref (_result);
-  _ret = TRUE;
+  g_variant_get (_ret,
+                 "(b)",
+                 out_message_receipt);
+  g_variant_unref (_ret);
 _out:
-  return _ret;
+  return _ret != NULL;
 }
 
 /**
  * phoneui_settings_call_get_message_receipt_sync:
- * @proxy: A #PhoneuiSettings.
- * @out_message_receipt: Return location for out parameter or %NULL.
- * @cancellable: A #GCancellable or %NULL.
+ * @proxy: A #PhoneuiSettingsProxy.
+ * @out_message_receipt: (out): Return location for return parameter or %NULL to ignore.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
  * @error: Return location for error or %NULL.
  *
- * Synchronously invokes the <literal>org.shr.phoneui.Settings.GetMessageReceipt()</literal>
- * D-Bus method on the remote object represented by @proxy.
- * The calling thread is blocked until a reply is received. See
- * phoneui_settings_call_get_message_receipt() for the asynchronous version of this method.
+ * Synchronously invokes the <link linkend="gdbus-method-org-shr-phoneui-Settings.GetMessageReceipt">GetMessageReceipt()</link> D-Bus method on @proxy. The calling thread is blocked until a reply is received.
+ *
+ * See phoneui_settings_call_get_message_receipt() for the asynchronous version of this method.
  *
- * Returns: %TRUE if the call succeeded, %FALSE if @error is set.
+ * Returns: %TRUE if the call succeded, %FALSE if @error is set.
  */
-gboolean phoneui_settings_call_get_message_receipt_sync (
-        PhoneuiSettings *proxy,
-        gboolean *out_message_receipt,
-        GCancellable *cancellable,
-        GError **error)
-{
-  gboolean _ret = FALSE;
-  GVariant *_params;
-  GVariant *_result;
-  _params = NULL;
-  _result = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
-                                   "GetMessageReceipt",
-                                   _params,
-                                   G_DBUS_CALL_FLAGS_NONE,
-                                   -1,
-                                   cancellable,
-                                   error);
-  if (_result == NULL)
+gboolean
+phoneui_settings_call_get_message_receipt_sync (
+    PhoneuiSettings *proxy,
+    gboolean *out_message_receipt,
+    GCancellable *cancellable,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
+    "GetMessageReceipt",
+    g_variant_new ("()"),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    error);
+  if (_ret == NULL)
     goto _out;
-  {
-    g_variant_get (_result,
-                   "(b)",
-                   out_message_receipt);
-  }
-  g_variant_unref (_result);
-  _ret = TRUE;
+  g_variant_get (_ret,
+                 "(b)",
+                 out_message_receipt);
+  g_variant_unref (_ret);
 _out:
-  return _ret;
+  return _ret != NULL;
 }
 
-
 /**
  * phoneui_settings_complete_display_quick_settings:
  * @object: A #PhoneuiSettings.
- * @invocation: A #GDBusMethodInvocation.
+ * @invocation: (transfer full): A #GDBusMethodInvocation.
  *
- * Completes handling the <literal>org.shr.phoneui.Settings.DisplayQuickSettings()</literal>
- * D-Bus method invocation by returning a value.
- *
- * If you want to return an error, use g_dbus_method_invocation_return_error()
- * or similar instead.
+ * Helper function used in service implementations to finish handling invocations of the <link linkend="gdbus-method-org-shr-phoneui-Settings.DisplayQuickSettings">DisplayQuickSettings()</link> D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.
  *
  * This method will free @invocation, you cannot use it afterwards.
  */
-void phoneui_settings_complete_display_quick_settings (
-        PhoneuiSettings *object,
-        GDBusMethodInvocation *invocation)
+void
+phoneui_settings_complete_display_quick_settings (
+    PhoneuiSettings *object,
+    GDBusMethodInvocation *invocation)
 {
-  g_dbus_method_invocation_return_value (invocation, NULL);
+  g_dbus_method_invocation_return_value (invocation,
+    g_variant_new ("()"));
 }
 
-
 /**
  * phoneui_settings_complete_display_sim_manager:
  * @object: A #PhoneuiSettings.
- * @invocation: A #GDBusMethodInvocation.
+ * @invocation: (transfer full): A #GDBusMethodInvocation.
  *
- * Completes handling the <literal>org.shr.phoneui.Settings.DisplaySimManager()</literal>
- * D-Bus method invocation by returning a value.
- *
- * If you want to return an error, use g_dbus_method_invocation_return_error()
- * or similar instead.
+ * Helper function used in service implementations to finish handling invocations of the <link linkend="gdbus-method-org-shr-phoneui-Settings.DisplaySimManager">DisplaySimManager()</link> D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.
  *
  * This method will free @invocation, you cannot use it afterwards.
  */
-void phoneui_settings_complete_display_sim_manager (
-        PhoneuiSettings *object,
-        GDBusMethodInvocation *invocation)
+void
+phoneui_settings_complete_display_sim_manager (
+    PhoneuiSettings *object,
+    GDBusMethodInvocation *invocation)
 {
-  g_dbus_method_invocation_return_value (invocation, NULL);
+  g_dbus_method_invocation_return_value (invocation,
+    g_variant_new ("()"));
 }
 
-
 /**
  * phoneui_settings_complete_set_message_receipt:
  * @object: A #PhoneuiSettings.
- * @invocation: A #GDBusMethodInvocation.
+ * @invocation: (transfer full): A #GDBusMethodInvocation.
  *
- * Completes handling the <literal>org.shr.phoneui.Settings.SetMessageReceipt()</literal>
- * D-Bus method invocation by returning a value.
- *
- * If you want to return an error, use g_dbus_method_invocation_return_error()
- * or similar instead.
+ * Helper function used in service implementations to finish handling invocations of the <link linkend="gdbus-method-org-shr-phoneui-Settings.SetMessageReceipt">SetMessageReceipt()</link> D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.
  *
  * This method will free @invocation, you cannot use it afterwards.
  */
-void phoneui_settings_complete_set_message_receipt (
-        PhoneuiSettings *object,
-        GDBusMethodInvocation *invocation)
+void
+phoneui_settings_complete_set_message_receipt (
+    PhoneuiSettings *object,
+    GDBusMethodInvocation *invocation)
 {
-  g_dbus_method_invocation_return_value (invocation, NULL);
+  g_dbus_method_invocation_return_value (invocation,
+    g_variant_new ("()"));
 }
 
-
 /**
  * phoneui_settings_complete_get_message_receipt:
  * @object: A #PhoneuiSettings.
- * @invocation: A #GDBusMethodInvocation.
- * @message_receipt: Value to return.
+ * @invocation: (transfer full): A #GDBusMethodInvocation.
+ * @message_receipt: Parameter to return.
  *
- * Completes handling the <literal>org.shr.phoneui.Settings.GetMessageReceipt()</literal>
- * D-Bus method invocation by returning a value.
- *
- * If you want to return an error, use g_dbus_method_invocation_return_error()
- * or similar instead.
+ * Helper function used in service implementations to finish handling invocations of the <link linkend="gdbus-method-org-shr-phoneui-Settings.GetMessageReceipt">GetMessageReceipt()</link> D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.
  *
  * This method will free @invocation, you cannot use it afterwards.
  */
-void phoneui_settings_complete_get_message_receipt (
-        PhoneuiSettings *object,
-        GDBusMethodInvocation *invocation,
-        gboolean message_receipt)
-{
-  GVariant *_params;
-  _params = g_variant_new ("(b)",
-                           message_receipt);
-  g_dbus_method_invocation_return_value (invocation, _params);
+void
+phoneui_settings_complete_get_message_receipt (
+    PhoneuiSettings *object,
+    GDBusMethodInvocation *invocation,
+    gboolean message_receipt)
+{
+  g_dbus_method_invocation_return_value (invocation,
+    g_variant_new ("(b)",
+                   message_receipt));
 }
 
+/* ------------------------------------------------------------------------ */
 
-static const GDBusAnnotationInfo DisplayQuickSettings_method_annotations_annotation_0 = {
-  -1,
-  "org.freedesktop.DBus.GLib.Async",
-  "true",
-};
+/**
+ * PhoneuiSettingsProxy:
+ *
+ * The #PhoneuiSettingsProxy structure contains only private data and should only be accessed using the provided API.
+ */
 
-static const GDBusAnnotationInfo *DisplayQuickSettings_method_annotations[] = {
-  &DisplayQuickSettings_method_annotations_annotation_0,
-  NULL
-};
+/**
+ * PhoneuiSettingsProxyClass:
+ * @parent_class: The parent class.
+ *
+ * Class structure for #PhoneuiSettingsProxy.
+ */
 
-static const GDBusMethodInfo phoneui_settings_method_DisplayQuickSettings =
+static void
+phoneui_settings_proxy_iface_init (PhoneuiSettingsIface *iface)
 {
-  -1,
-  "DisplayQuickSettings",
-  (GDBusArgInfo **) NULL,
-  (GDBusArgInfo **) NULL,
-  (GDBusAnnotationInfo **) DisplayQuickSettings_method_annotations,
-};
-
-static const GDBusAnnotationInfo DisplaySimManager_method_annotations_annotation_0 = {
-  -1,
-  "org.freedesktop.DBus.GLib.Async",
-  "true",
-};
+}
 
-static const GDBusAnnotationInfo *DisplaySimManager_method_annotations[] = {
-  &DisplaySimManager_method_annotations_annotation_0,
-  NULL
-};
+#define phoneui_settings_proxy_get_type phoneui_settings_proxy_get_type
+G_DEFINE_TYPE_WITH_CODE (PhoneuiSettingsProxy, phoneui_settings_proxy, G_TYPE_DBUS_PROXY,
+                         G_IMPLEMENT_INTERFACE (TYPE_PHONEUI_SETTINGS, phoneui_settings_proxy_iface_init));
+#undef phoneui_settings_proxy_get_type
 
-static const GDBusMethodInfo phoneui_settings_method_DisplaySimManager =
+static void
+phoneui_settings_proxy_get_property (GObject      *object,
+  guint         prop_id,
+  GValue       *value,
+  GParamSpec   *pspec)
 {
-  -1,
-  "DisplaySimManager",
-  (GDBusArgInfo **) NULL,
-  (GDBusArgInfo **) NULL,
-  (GDBusAnnotationInfo **) DisplaySimManager_method_annotations,
-};
+}
 
-static const GDBusArgInfo phoneui_settings_method_in_SetMessageReceipt_message_receipt =
-{
-  -1,
-  "message_receipt",
-  "b",
-  (GDBusAnnotationInfo **) NULL
-};
-static const GDBusArgInfo * const phoneui_settings_method_in_SetMessageReceipt_arg_pointers[] =
+static void
+phoneui_settings_proxy_set_property (GObject      *object,
+  guint         prop_id,
+  const GValue *value,
+  GParamSpec   *pspec)
 {
-  &phoneui_settings_method_in_SetMessageReceipt_message_receipt,
-  NULL
-};
-
-static const GDBusAnnotationInfo SetMessageReceipt_method_annotations_annotation_0 = {
-  -1,
-  "org.freedesktop.DBus.GLib.Async",
-  "true",
-};
+}
 
-static const GDBusAnnotationInfo *SetMessageReceipt_method_annotations[] = {
-  &SetMessageReceipt_method_annotations_annotation_0,
-  NULL
-};
+static void
+phoneui_settings_proxy_g_signal (GDBusProxy *proxy,
+  const gchar *sender_name,
+  const gchar *signal_name,
+  GVariant *parameters)
+{
+  _ExtendedGDBusSignalInfo *info;
+  GVariantIter iter;
+  GVariant *child;
+  GValue *paramv;
+  guint num_params;
+  guint n;
+  guint signal_id;
+  info = (_ExtendedGDBusSignalInfo *) g_dbus_interface_info_lookup_signal ((GDBusInterfaceInfo *) &_phoneui_settings_interface_info, signal_name);
+  if (info == NULL)
+    return;
+  num_params = g_variant_n_children (parameters);
+  paramv = g_new0 (GValue, num_params + 1);
+  g_value_init (&paramv[0], TYPE_PHONEUI_SETTINGS);
+  g_value_set_object (&paramv[0], proxy);
+  g_variant_iter_init (&iter, parameters);
+  n = 1;
+  while ((child = g_variant_iter_next_value (&iter)) != NULL)
+    {
+      _ExtendedGDBusArgInfo *arg_info = (_ExtendedGDBusArgInfo *) info->parent_struct.args[n - 1];
+      if (arg_info->use_gvariant)
+        {
+          g_value_init (&paramv[n], G_TYPE_VARIANT);
+          g_value_set_variant (&paramv[n], child);
+          n++;
+        }
+      else
+        g_dbus_gvariant_to_gvalue (child, &paramv[n++]);
+      g_variant_unref (child);
+    }
+  signal_id = g_signal_lookup (info->signal_name, TYPE_PHONEUI_SETTINGS);
+  g_signal_emitv (paramv, signal_id, 0, NULL);
+  for (n = 0; n < num_params + 1; n++)
+    g_value_unset (&paramv[n]);
+  g_free (paramv);
+}
 
-static const GDBusMethodInfo phoneui_settings_method_SetMessageReceipt =
+static void
+phoneui_settings_proxy_g_properties_changed (GDBusProxy *proxy,
+  GVariant *changed_properties,
+  const gchar *const *invalidated_properties)
 {
-  -1,
-  "SetMessageReceipt",
-  (GDBusArgInfo **) &phoneui_settings_method_in_SetMessageReceipt_arg_pointers,
-  (GDBusArgInfo **) NULL,
-  (GDBusAnnotationInfo **) SetMessageReceipt_method_annotations,
-};
-
-static const GDBusArgInfo phoneui_settings_method_out_GetMessageReceipt_message_receipt =
-{
-  -1,
-  "message_receipt",
-  "b",
-  (GDBusAnnotationInfo **) NULL
-};
-static const GDBusArgInfo * const phoneui_settings_method_out_GetMessageReceipt_arg_pointers[] =
-{
-  &phoneui_settings_method_out_GetMessageReceipt_message_receipt,
-  NULL
-};
-
-static const GDBusAnnotationInfo GetMessageReceipt_method_annotations_annotation_0 = {
-  -1,
-  "org.freedesktop.DBus.GLib.Async",
-  "true",
-};
-
-static const GDBusAnnotationInfo *GetMessageReceipt_method_annotations[] = {
-  &GetMessageReceipt_method_annotations_annotation_0,
-  NULL
-};
-
-static const GDBusMethodInfo phoneui_settings_method_GetMessageReceipt =
-{
-  -1,
-  "GetMessageReceipt",
-  (GDBusArgInfo **) NULL,
-  (GDBusArgInfo **) &phoneui_settings_method_out_GetMessageReceipt_arg_pointers,
-  (GDBusAnnotationInfo **) GetMessageReceipt_method_annotations,
-};
-
-static const GDBusMethodInfo * const phoneui_settings_method_info_pointers[] =
-{
-  &phoneui_settings_method_DisplayQuickSettings,
-  &phoneui_settings_method_DisplaySimManager,
-  &phoneui_settings_method_SetMessageReceipt,
-  &phoneui_settings_method_GetMessageReceipt,
-  NULL
-};
-
-static const GDBusInterfaceInfo _phoneui_settings_interface_info =
-{
-  -1,
-  "org.shr.phoneui.Settings",
-  (GDBusMethodInfo **) &phoneui_settings_method_info_pointers,
-  (GDBusSignalInfo **) NULL,
-  (GDBusPropertyInfo **) NULL,
-  (GDBusAnnotationInfo **) NULL
-};
-
-static void
-handle_method_call_real (GDBusConnection       *connection,
-                         const gchar           *sender,
-                         const gchar           *object_path,
-                         const gchar           *interface_name,
-                         const gchar           *method_name,
-                         GVariant              *parameters,
-                         GDBusMethodInvocation *invocation,
-                         gpointer               user_data)
-{
-  guint method_id;
-  method_id = lookup_method_id_from_method_name (method_name);
-  switch (method_id)
-    {
-    case __DISPLAY_QUICK_SETTINGS_METHOD:
-      {
-        PhoneuiSettings *object = PHONEUI_SETTINGS (user_data);
-        gboolean handled;
-        g_signal_emit (object,
-                       signals[method_id],
-                       0, invocation, &handled);
-        if (!handled)
-          goto not_implemented;
-      }
-      break;
-
-    case __DISPLAY_SIM_MANAGER_METHOD:
-      {
-        PhoneuiSettings *object = PHONEUI_SETTINGS (user_data);
-        gboolean handled;
-        g_signal_emit (object,
-                       signals[method_id],
-                       0, invocation, &handled);
-        if (!handled)
-          goto not_implemented;
-      }
-      break;
-
-    case __SET_MESSAGE_RECEIPT_METHOD:
-      {
-        PhoneuiSettings *object = PHONEUI_SETTINGS (user_data);
-        gboolean handled;
-        gboolean arg_message_receipt;
-        g_variant_get (parameters,
-                       "(b)",
-                       &arg_message_receipt);
-        g_signal_emit (object,
-                       signals[method_id],
-                       0, invocation, arg_message_receipt, &handled);
-        if (!handled)
-          goto not_implemented;
-      }
-      break;
-
-    case __GET_MESSAGE_RECEIPT_METHOD:
-      {
-        PhoneuiSettings *object = PHONEUI_SETTINGS (user_data);
-        gboolean handled;
-        g_signal_emit (object,
-                       signals[method_id],
-                       0, invocation, &handled);
-        if (!handled)
-          goto not_implemented;
-      }
-      break;
-
-    default:
-not_implemented:
-      g_dbus_method_invocation_return_error (invocation,
-                                             G_DBUS_ERROR,
-                                             G_DBUS_ERROR_NOT_SUPPORTED,
-                                             "Method `%s' is not implemented",
-                                             method_name);
-      break;
-    }
-};
-
-typedef struct
-{
-  GDBusMethodInvocation *invocation;
-  gpointer               user_data;
-} HandleMethodInThreadData;
-
-static gboolean
-handle_method_call_in_thread_func (GIOSchedulerJob *job,
-                                   GCancellable    *cancellable,
-                                   gpointer         user_data)
-{
-  HandleMethodInThreadData *data = user_data;
-
-  handle_method_call_real (g_dbus_method_invocation_get_connection (data->invocation),
-                           g_dbus_method_invocation_get_sender (data->invocation),
-                           g_dbus_method_invocation_get_object_path (data->invocation),
-                           g_dbus_method_invocation_get_interface_name (data->invocation),
-                           g_dbus_method_invocation_get_method_name (data->invocation),
-                           g_dbus_method_invocation_get_parameters (data->invocation),
-                           data->invocation,
-                           data->user_data);
-  return FALSE; /* job is complete */
-}
-
-static void
-handle_method_call (GDBusConnection       *connection,
-                    const gchar           *sender,
-                    const gchar           *object_path,
-                    const gchar           *interface_name,
-                    const gchar           *method_name,
-                    GVariant              *parameters,
-                    GDBusMethodInvocation *invocation,
-                    gpointer               user_data)
-{
-  GDBusInterface *interface = G_DBUS_INTERFACE (user_data);
-  GDBusInterfaceFlags flags;
-
-  flags = g_dbus_interface_get_flags (interface);
-  if (flags & G_DBUS_INTERFACE_FLAGS_RUN_IN_THREAD)
-    {
-      HandleMethodInThreadData *data;
-      data = g_new0 (HandleMethodInThreadData, 1);
-      data->invocation = invocation;
-      data->user_data = user_data;
-      g_io_scheduler_push_job (handle_method_call_in_thread_func,
-                               data,
-                               g_free, /* since we don't need refs on objects */
-                               G_PRIORITY_DEFAULT,
-                               NULL); /* GCancellable* */
-    }
-  else
-    {
-      handle_method_call_real (connection,
-                               sender,
-                               object_path,
-                               interface_name,
-                               method_name,
-                               parameters,
-                               invocation,
-                               user_data);
-    }
-}
-
-static GVariant *
-get_property (GDBusConnection  *connection,
-              const gchar      *sender,
-              const gchar      *object_path,
-              const gchar      *interface_name,
-              const gchar      *property_name,
-              GError          **error,
-              gpointer          user_data)
-{
-  GVariant *ret;
-  guint prop_id;
-  prop_id = lookup_property_id_from_property_name (property_name);
-  ret = NULL;
-  switch (prop_id)
-    {
-    default:
-      g_assert_not_reached ();
-      break;
-    }
-
-  if (ret == NULL)
-    {
-      GVariant *untrusted_empty;
-      GDBusPropertyInfo *property_info;
-      const GVariantType *type;
-      property_info = g_dbus_interface_info_lookup_property ((GDBusInterfaceInfo *) &_phoneui_settings_interface_info, property_name);
-      type = G_VARIANT_TYPE (property_info->signature);
-      untrusted_empty = g_variant_new_from_data (type, NULL, 0, FALSE, NULL, NULL);
-      ret = g_variant_get_normal_form (untrusted_empty);
-      g_variant_unref (untrusted_empty);
-    }
-
-  return ret;
-};
-
-static gboolean
-set_property (GDBusConnection  *connection,
-              const gchar      *sender,
-              const gchar      *object_path,
-              const gchar      *interface_name,
-              const gchar      *property_name,
-              GVariant         *value,
-              GError          **error,
-              gpointer          user_data)
-{
-  gboolean ret;
-  guint prop_id;
-  prop_id = lookup_property_id_from_property_name (property_name);
-  ret = TRUE;
-  switch (prop_id)
-    {
-    default:
-      g_set_error (error,
-                   G_DBUS_ERROR,
-                   G_DBUS_ERROR_NOT_SUPPORTED,
-                   "This implementation does not support property `%s'",
-                   property_name);
-      ret = FALSE;
-      break;
-    }
-
-  return ret;
-};
-
-static const GDBusInterfaceVTable phoneui_settings_interface_vtable =
-{
-  handle_method_call,
-  get_property,
-  set_property,
-};
-
-/* ---------------------------------------------------------------------- */
-
-typedef struct {
-  gpointer data;
-  gsize size;
-} _VariantBlob;
-
-static void
-_variant_blob_free (_VariantBlob *blob)
-{
-  g_free (blob->data);
-  g_free (blob);
-}
-
-static _VariantBlob *
-_variant_blob_new (GVariant *value)
-{
-  _VariantBlob *blob;
-  blob = g_new0 (_VariantBlob, 1);
-  blob->size = g_variant_get_size (value);
-  blob->data = g_malloc (blob->size);
-  g_variant_store (value, blob->data);
-  return blob;
-}
-
-static gboolean
-_variant_blob_equal (_VariantBlob *a,
-                    _VariantBlob *b)
-{
-  return (a->size == b->size) && (memcmp (a->data, b->data, a->size) == 0);
-}
-/* ---------------------------------------------------------------------- */
-
-static gboolean
-emit_notifications_in_idle (gpointer user_data)
-{
-  GObject *object = G_OBJECT (user_data);
-  GDBusConnection *connection;
-  const gchar *path;
-  GHashTable *notification_queue;
-  GHashTableIter iter;
-  const gchar *property_name;
-  GVariant *value;
-  GVariantBuilder builder;
-  GVariantBuilder invalidated_builder;
-  GHashTable *pvc;
-  gboolean has_changes;
-
-  notification_queue = g_object_get_data (object, "gdbus-codegen-notification-queue");
-  path = g_object_get_data (object, "gdbus-codegen-path");
-  connection = g_object_get_data (object, "gdbus-codegen-connection");
-  pvc = g_object_get_data (object, "gdbus-codegen-pvc");
-  g_assert (notification_queue != NULL && path != NULL && connection != NULL && pvc != NULL);
-
-  g_variant_builder_init (&builder, G_VARIANT_TYPE ("a{sv}"));
-  g_variant_builder_init (&invalidated_builder, G_VARIANT_TYPE ("as"));
-  g_hash_table_iter_init (&iter, notification_queue);
-  has_changes = FALSE;
-  while (g_hash_table_iter_next (&iter, (gpointer) &property_name, (gpointer) &value))
-    {
-      _VariantBlob *cached_blob;
-      _VariantBlob *blob;
-      cached_blob = g_hash_table_lookup (pvc, property_name);
-      blob = _variant_blob_new (value);
-      if (cached_blob == NULL || !_variant_blob_equal (cached_blob, blob))
-        {
-          g_hash_table_insert (pvc, (gpointer) property_name, blob);
-          g_variant_builder_add (&builder, "{sv}", property_name, value);
-          has_changes = TRUE;
-        }
-      else
-        {
-          _variant_blob_free (blob);
-        }
-    }
-
-  if (has_changes)
-    {
-      g_dbus_connection_emit_signal (connection,
-                                     NULL,
-                                     path,
-                                     "org.freedesktop.DBus.Properties",
-                                     "PropertiesChanged",
-                                     g_variant_new ("(sa{sv}as)",
-                                                    "org.shr.phoneui.Settings",
-                                                    &builder,
-                                                    &invalidated_builder),
-                                     NULL);
-    }
-  else
-    {
-      g_variant_builder_clear (&builder);
-      g_variant_builder_clear (&invalidated_builder);
-    }
-
-  g_hash_table_remove_all (notification_queue);
-  g_object_set_data (object, "gdbus-codegen-notification-idle-source", NULL);
-  return FALSE;
-}
-
-static void
-queue_notification (GObject     *object,
-                    const gchar *property_name,
-                    GVariant    *value)
-{
-  GHashTable *notification_queue;
-  GSource *idle_source;
-  notification_queue = g_object_get_data (object, "gdbus-codegen-notification-queue");
-  if (notification_queue == NULL)
-    {
-      notification_queue = g_hash_table_new_full (g_str_hash, g_str_equal, NULL, (GDestroyNotify) g_variant_unref);
-      g_object_set_data_full (object, "gdbus-codegen-notification-queue", notification_queue, (GDestroyNotify) g_hash_table_unref);
-    }
-  g_hash_table_insert (notification_queue, (gpointer) property_name, (gpointer) value); /* adopts value */
-  idle_source = g_object_get_data (object, "gdbus-codegen-notification-idle-source");
-  if (idle_source == NULL)
-    {
-      idle_source = g_idle_source_new ();
-      g_source_set_priority (idle_source, G_PRIORITY_DEFAULT);
-      g_source_set_callback (idle_source,
-                             emit_notifications_in_idle,
-                             g_object_ref (object),
-                             (GDestroyNotify) g_object_unref);
-      g_source_attach (idle_source, g_main_context_get_thread_default ());
-      g_source_unref (idle_source);
-      g_object_set_data (object, "gdbus-codegen-notification-idle-source", idle_source);
-    }
-}
-
-static void
-phoneui_settings_flush (GDBusInterface *_object)
-{
-  PhoneuiSettings *object = PHONEUI_SETTINGS (_object);
-  GSource *idle_source;
-  idle_source = g_object_get_data (G_OBJECT (object), "gdbus-codegen-notification-idle-source");
-  if (idle_source != NULL)
-    {
-      emit_notifications_in_idle (object);
-      g_source_destroy (idle_source);
-    }
-}
-
-static void
-on_notify (GObject    *object,
-           GParamSpec *pspec,
-           gpointer    user_data)
-{
-  GDBusConnection *connection;
-  const gchar *path;
-  GVariant *value;
-  const gchar *property_name;
-
-  path = g_object_get_data (object, "gdbus-codegen-path");
-  connection = g_object_get_data (object, "gdbus-codegen-connection");
-  if (connection == NULL || path == NULL)
-    goto out;
-  property_name = lookup_property_name_from_property_gname (pspec->name);
-  if (property_name == NULL)
-    goto out;
-
-  value = get_property (connection, NULL, path, "org.shr.phoneui.Settings", property_name, NULL, object);
-  if (value != NULL)
-    {
-      if (g_variant_is_floating (value))
-        g_variant_ref_sink (value);
-      queue_notification (object, property_name, value);
-    }
-out:
-  ;
-}
-
-static void
-on_object_unregistered (GObject *object)
-{
-  GSource *idle_source;
-  idle_source = g_object_get_data (G_OBJECT (object), "gdbus-codegen-notification-idle-source");
-  if (idle_source != NULL)
-    g_source_destroy (idle_source);
-  g_object_set_data (G_OBJECT (object), "gdbus-codegen-notification-idle-source", NULL);
-  g_object_set_data (G_OBJECT (object), "gdbus-codegen-path", NULL);
-  g_object_set_data (G_OBJECT (object), "gdbus-codegen-connection", NULL);
-  g_signal_handlers_disconnect_by_func (object, on_notify, NULL);
-}
-
-static guint
-phoneui_settings_register_object (GDBusInterface *_object,
-           GDBusConnection *connection,
-           const gchar *object_path,
-           GError **error)
-{
-  PhoneuiSettings *object = PHONEUI_SETTINGS (_object);
-  GHashTable *pvc;
-  guint n;
-
-  pvc = g_hash_table_new_full (g_str_hash, g_str_equal, NULL, (GDestroyNotify) _variant_blob_free);
-  if (_phoneui_settings_interface_info.properties != NULL)
-    {
-      for (n = 0; _phoneui_settings_interface_info.properties[n] != NULL; n++)
-        {
-          GDBusPropertyInfo *prop_info = _phoneui_settings_interface_info.properties[n];
-          if (prop_info->flags & G_DBUS_PROPERTY_INFO_FLAGS_READABLE)
-            {
-              GVariant *value;
-              value = get_property (connection, NULL, object_path, "org.shr.phoneui.Settings", prop_info->name, NULL, object);
-              if (value != NULL)
-                {
-                  if (g_variant_is_floating (value))
-                    g_variant_ref_sink (value);
-                  g_hash_table_insert (pvc, prop_info->name, _variant_blob_new (value));
-                  g_variant_unref (value);
-                }
-            }
-        }
-    }
-
-  g_object_set_data_full (G_OBJECT (object), "gdbus-codegen-path", (gpointer) g_strdup (object_path), g_free);
-  g_object_set_data (G_OBJECT (object), "gdbus-codegen-connection", (gpointer) connection);
-  g_object_set_data_full (G_OBJECT (object), "gdbus-codegen-pvc", (gpointer) pvc, (GDestroyNotify) g_hash_table_unref);
-  g_signal_connect (object, "notify", G_CALLBACK (on_notify), NULL);
-  return g_dbus_connection_register_object (connection,
-          object_path,
-          (GDBusInterfaceInfo *) &_phoneui_settings_interface_info,
-          &phoneui_settings_interface_vtable,
-          object,
-          (GDestroyNotify) on_object_unregistered,
-          error);
-}
-
-/**
- * phoneui_settings_interface_info:
- *
- * Gets interface description for the <literal>org.shr.phoneui.Settings</literal> D-Bus interface.
- *
- * Returns: A #GDBusInterfaceInfo. Do not free, the object is statically allocated.
- */
-GDBusInterfaceInfo *
-phoneui_settings_interface_info (void)
-{
-  return (GDBusInterfaceInfo *) &_phoneui_settings_interface_info;
-}
-
-static GDBusInterfaceInfo *
-phoneui_settings_g_dbus_interface_interface_info (GDBusInterface *object)
-{
-  return phoneui_settings_interface_info ();
-}
-
-static GVariant *
-phoneui_settings_get_properties (GDBusInterface *object)
-{
-  GDBusConnection *connection;
-  const gchar *object_path;
-  GVariantBuilder builder;
-  guint n;
-
-  g_variant_builder_init (&builder, G_VARIANT_TYPE ("a{sv}"));
-
-  if (_phoneui_settings_interface_info.properties == NULL)
-    goto out;
-
-  connection = g_object_get_data (G_OBJECT (object), "gdbus-codegen-connection");
-  object_path = g_object_get_data (G_OBJECT (object), "gdbus-codegen-path");
-
-  for (n = 0; _phoneui_settings_interface_info.properties[n] != NULL; n++)
-    {
-      GDBusPropertyInfo *prop_info = _phoneui_settings_interface_info.properties[n];
-      if (prop_info->flags & G_DBUS_PROPERTY_INFO_FLAGS_READABLE)
-        {
-          GVariant *value;
-          value = get_property (connection, NULL, object_path, "org.shr.phoneui.Settings", prop_info->name, NULL, object);
-          if (value != NULL)
-            {
-              if (g_variant_is_floating (value))
-                g_variant_ref_sink (value);
-              g_variant_builder_add (&builder, "{sv}", prop_info->name, value);
-              g_variant_unref (value);
-            }
-        }
-    }
-out:
-  return g_variant_builder_end (&builder);
-}
-
-
-/* ---------------------------------------------------------------------- */
-
-static void proxy_iface_init (PhoneuiSettingsIface *iface);
-
-G_DEFINE_TYPE_WITH_CODE (PhoneuiSettingsProxy, phoneui_settings_proxy, G_TYPE_DBUS_PROXY,
-                         G_IMPLEMENT_INTERFACE (TYPE_PHONEUI_SETTINGS, proxy_iface_init));
+  guint n;
+  const gchar *key;
+  GVariantIter *iter;
+  _ExtendedGDBusPropertyInfo *info;
+  g_variant_get (changed_properties, "a{sv}", &iter);
+  while (g_variant_iter_next (iter, "{&sv}", &key, NULL))
+    {
+      info = (_ExtendedGDBusPropertyInfo *) g_dbus_interface_info_lookup_property ((GDBusInterfaceInfo *) &_phoneui_settings_interface_info, key);
+      if (info != NULL)
+        g_object_notify (G_OBJECT (proxy), info->hyphen_name);
+    }
+  g_variant_iter_free (iter);
+  for (n = 0; invalidated_properties[n] != NULL; n++)
+    {
+      info = (_ExtendedGDBusPropertyInfo *) g_dbus_interface_info_lookup_property ((GDBusInterfaceInfo *) &_phoneui_settings_interface_info, invalidated_properties[n]);
+      if (info != NULL)
+        g_object_notify (G_OBJECT (proxy), info->hyphen_name);
+    }
+}
 
 static void
 phoneui_settings_proxy_init (PhoneuiSettingsProxy *proxy)
 {
-  g_dbus_proxy_set_interface_info (G_DBUS_PROXY (proxy),
-                                   (GDBusInterfaceInfo *) &_phoneui_settings_interface_info);
-}
-
-static void
-g_signal (GDBusProxy  *proxy,
-          const gchar *sender_name,
-          const gchar *signal_name,
-          GVariant    *parameters)
-{
-  guint signal_id;
-  signal_id = lookup_signal_id_from_signal_name (signal_name);
-  switch (signal_id)
-    {
-    }
-}
-
-static void
-phoneui_settings_proxy_get_property (GObject      *object,
-                       guint         prop_id,
-                       GValue       *value,
-                       GParamSpec   *pspec)
-{
-  G_GNUC_UNUSED GVariant *cached;
-  switch (prop_id)
-    {
-
-    default:
-      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
-      break;
-    }
-}
-
-static void
-property_set_cb (GDBusProxy   *proxy,
-                 GAsyncResult *res,
-                 gpointer      user_data)
-{
-  const gchar *property_name = user_data;
-  GError *error;
-  GVariant *result;
-
-  error = NULL;
-  result = g_dbus_proxy_call_finish (proxy, res, &error);
-  if (result == NULL)
-    {
-      g_warning ("Error setting property `%s': %s", property_name, error->message);
-      g_error_free (error);
-    }
-  else
-    {
-      g_variant_unref (result);
-    }
-}
-
-static void
-phoneui_settings_proxy_set_property (GObject      *object,
-                       guint         prop_id,
-                       const GValue *value,
-                       GParamSpec   *pspec)
-{
-  GVariant *new_value;
-  const gchar *property_name;
-  new_value = NULL;
-  property_name = NULL;
-  switch (prop_id)
-    {
-
-    default:
-      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
-      break;
-    }
-
-  if (new_value != NULL)
-    {
-      g_variant_ref_sink (new_value);
-      g_dbus_proxy_call (G_DBUS_PROXY (object),
-                         "org.freedesktop.DBus.Properties.Set",
-                         g_variant_new ("(ssv)",
-                                        "org.shr.phoneui.Settings",
-                                        property_name,
-                                        new_value),
-                         G_DBUS_CALL_FLAGS_NONE,
-                         -1,
-                         NULL,
-                         (GAsyncReadyCallback) property_set_cb,
-                         (gpointer) property_name);
-      g_variant_unref (new_value);
-    }
-
-}
-
-static void
-g_properties_changed (GDBusProxy         *proxy,
-                      GVariant           *changed_properties,
-                      const gchar* const *invalidated_properties)
-{
-  guint n;
-  const gchar *key;
-  GVariantIter *iter;
-  const gchar *gname;
-
-  g_variant_get (changed_properties, "a{sv}", &iter);
-  while (g_variant_iter_next (iter, "{&sv}", &key, NULL))
-    {
-      gname = lookup_property_gname_from_property_name (key);
-      if (gname != NULL)
-        g_object_notify (G_OBJECT (proxy), gname);
-    }
-
-  for (n = 0; invalidated_properties[n] != NULL; n++)
-    {
-      gname = lookup_property_gname_from_property_name (invalidated_properties[n]);
-      if (gname != NULL)
-        g_object_notify (G_OBJECT (proxy), gname);
-    }
-
+  g_dbus_proxy_set_interface_info (G_DBUS_PROXY (proxy), phoneui_settings_interface_info ());
 }
 
 static void
@@ -1537,74 +1023,62 @@ phoneui_settings_proxy_class_init (PhoneuiSettingsProxyClass *klass)
   gobject_class->set_property = phoneui_settings_proxy_set_property;
 
   proxy_class = G_DBUS_PROXY_CLASS (klass);
-  proxy_class->g_signal = g_signal;
-  proxy_class->g_properties_changed = g_properties_changed;
-
-}
+  proxy_class->g_signal = phoneui_settings_proxy_g_signal;
+  proxy_class->g_properties_changed = phoneui_settings_proxy_g_properties_changed;
 
-static void
-proxy_iface_init (PhoneuiSettingsIface *iface)
-{
 }
 
-
 /**
  * phoneui_settings_proxy_new:
  * @connection: A #GDBusConnection.
- * @flags: Flags used when constructing the proxy.
- * @name: A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.
+ * @flags: Flags from the #GDBusProxyFlags enumeration.
+ * @name: (allow-none): A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.
  * @object_path: An object path.
- * @cancellable: A #GCancellable or %NULL.
- * @callback: Callback function to invoke when the proxy is ready.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @callback: A #GAsyncReadyCallback to call when the request is satisfied.
  * @user_data: User data to pass to @callback.
  *
- * Like g_dbus_proxy_new() but returns a #PhoneuiSettingsProxy.
+ * Asynchronously creates a proxy for the D-Bus interface <link linkend="gdbus-interface-org-shr-phoneui-Settings.top_of_page">org.shr.phoneui.Settings</link>. See g_dbus_proxy_new() for more details.
+ *
+ * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
+ * You can then call phoneui_settings_proxy_new_finish() to get the result of the operation.
  *
- * This is a failable asynchronous constructor - when the proxy is ready, callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this function from. You can then call phoneui_settings_proxy_new_finish() to get the result. See phoneui_settings_proxy_new_sync() for the synchronous version.
+ * See phoneui_settings_proxy_new_sync() for the synchronous, blocking version of this constructor.
  */
-void phoneui_settings_proxy_new (GDBusConnection     *connection,
-                   GDBusProxyFlags      flags,
-                   const gchar         *name,
-                   const gchar         *object_path,
-                   GCancellable        *cancellable,
-                   GAsyncReadyCallback  callback,
-                   gpointer             user_data)
-{
-  g_async_initable_new_async (TYPE_PHONEUI_SETTINGS_PROXY,
-                              G_PRIORITY_DEFAULT,
-                              cancellable,
-                              callback,
-                              user_data,
-                              "g-flags", flags,
-                              "g-name", name,
-                              "g-connection", connection,
-                              "g-object-path", object_path,
-                              "g-interface-name", "org.shr.phoneui.Settings",
-                              NULL);
+void
+phoneui_settings_proxy_new (
+    GDBusConnection     *connection,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GAsyncReadyCallback  callback,
+    gpointer             user_data)
+{
+  g_async_initable_new_async (TYPE_PHONEUI_SETTINGS_PROXY, G_PRIORITY_DEFAULT, cancellable, callback, user_data, "g-flags", flags, "g-name", name, "g-connection", connection, "g-object-path", object_path, "g-interface-name", "org.shr.phoneui.Settings", NULL);
 }
 
 /**
  * phoneui_settings_proxy_new_finish:
- * @res: A #GAsyncResult obtained from the #GAsyncReadyCallback function passed to phoneui_settings_proxy_new().
- * @error: Return location for error or %NULL.
+ * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_settings_proxy_new().
+ * @error: Return location for error or %NULL
  *
- * Finishes creating a #PhoneuiSettingsProxy.
+ * Finishes an operation started with phoneui_settings_proxy_new().
  *
- * Returns: A #PhoneuiSettingsProxy or %NULL if @error is set. Free with g_object_unref().
+ * Returns: (transfer full) (type PhoneuiSettingsProxy): The constructed proxy object or %NULL if @error is set.
  */
-PhoneuiSettings *phoneui_settings_proxy_new_finish (GAsyncResult  *res,
-                        GError       **error)
+PhoneuiSettings *
+phoneui_settings_proxy_new_finish (
+    GAsyncResult        *res,
+    GError             **error)
 {
-  GObject *object;
+  GObject *ret;
   GObject *source_object;
   source_object = g_async_result_get_source_object (res);
-  g_assert (source_object != NULL);
-  object = g_async_initable_new_finish (G_ASYNC_INITABLE (source_object),
-                                        res,
-                                        error);
+  ret = g_async_initable_new_finish (G_ASYNC_INITABLE (source_object), res, error);
   g_object_unref (source_object);
-  if (object != NULL)
-    return PHONEUI_SETTINGS (object);
+  if (ret != NULL)
+    return PHONEUI_SETTINGS (ret);
   else
     return NULL;
 }
@@ -1612,37 +1086,33 @@ PhoneuiSettings *phoneui_settings_proxy_new_finish (GAsyncResult  *res,
 /**
  * phoneui_settings_proxy_new_sync:
  * @connection: A #GDBusConnection.
- * @flags: Flags used when constructing the proxy.
- * @name: A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.
+ * @flags: Flags from the #GDBusProxyFlags enumeration.
+ * @name: (allow-none): A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.
  * @object_path: An object path.
- * @cancellable: A #GCancellable or %NULL.
- * @error: Return location for error or %NULL.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @error: Return location for error or %NULL
+ *
+ * Synchronously creates a proxy for the D-Bus interface <link linkend="gdbus-interface-org-shr-phoneui-Settings.top_of_page">org.shr.phoneui.Settings</link>. See g_dbus_proxy_new_sync() for more details.
  *
- * Like g_dbus_proxy_new_sync() but returns a #PhoneuiSettingsProxy.
+ * The calling thread is blocked until a reply is received.
  *
- * This is a synchronous failable constructor - the calling thread is blocked until the object is ready. See phoneui_settings_proxy_new() for the asynchronous version.
+ * See phoneui_settings_proxy_new() for the asynchronous version of this constructor.
  *
- * Returns: A #PhoneuiSettingsProxy or %NULL if error is set. Free with g_object_unref().
+ * Returns: (transfer full) (type PhoneuiSettingsProxy): The constructed proxy object or %NULL if @error is set.
  */
-PhoneuiSettings *phoneui_settings_proxy_new_sync (GDBusConnection     *connection,
-                       GDBusProxyFlags      flags,
-                       const gchar         *name,
-                       const gchar         *object_path,
-                       GCancellable        *cancellable,
-                       GError             **error)
-{
-  GInitable *initable;
-  initable = g_initable_new (TYPE_PHONEUI_SETTINGS_PROXY,
-                             cancellable,
-                             error,
-                             "g-flags", flags,
-                             "g-name", name,
-                             "g-connection", connection,
-                             "g-object-path", object_path,
-                             "g-interface-name", "org.shr.phoneui.Settings",
-                             NULL);
-  if (initable != NULL)
-    return PHONEUI_SETTINGS (initable);
+PhoneuiSettings *
+phoneui_settings_proxy_new_sync (
+    GDBusConnection     *connection,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GError             **error)
+{
+  GInitable *ret;
+  ret = g_initable_new (TYPE_PHONEUI_SETTINGS_PROXY, cancellable, error, "g-flags", flags, "g-name", name, "g-connection", connection, "g-object-path", object_path, "g-interface-name", "org.shr.phoneui.Settings", NULL);
+  if (ret != NULL)
+    return PHONEUI_SETTINGS (ret);
   else
     return NULL;
 }
@@ -1651,60 +1121,54 @@ PhoneuiSettings *phoneui_settings_proxy_new_sync (GDBusConnection     *connectio
 /**
  * phoneui_settings_proxy_new_for_bus:
  * @bus_type: A #GBusType.
- * @flags: Flags used when constructing the proxy.
+ * @flags: Flags from the #GDBusProxyFlags enumeration.
  * @name: A bus name (well-known or unique).
  * @object_path: An object path.
- * @cancellable: A #GCancellable or %NULL.
- * @callback: Callback function to invoke when the proxy is ready.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @callback: A #GAsyncReadyCallback to call when the request is satisfied.
  * @user_data: User data to pass to @callback.
  *
- * Like g_dbus_proxy_new_for_bus() but returns a #PhoneuiSettingsProxy.
+ * Like phoneui_settings_proxy_new() but takes a #GBusType instead of a #GDBusConnection.
+ *
+ * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
+ * You can then call phoneui_settings_proxy_new_for_bus_finish() to get the result of the operation.
  *
- * This is a failable asynchronous constructor - when the proxy is ready, callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this function from. You can then call phoneui_settings_proxy_new_for_bus_finish() to get the result. See phoneui_settings_proxy_new_for_bus_sync() for the synchronous version.
+ * See phoneui_settings_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.
  */
-void phoneui_settings_proxy_new_for_bus (GBusType             bus_type,
-                           GDBusProxyFlags      flags,
-                           const gchar         *name,
-                           const gchar         *object_path,
-                           GCancellable        *cancellable,
-                           GAsyncReadyCallback  callback,
-                           gpointer             user_data)
-{
-  g_async_initable_new_async (TYPE_PHONEUI_SETTINGS_PROXY,
-                              G_PRIORITY_DEFAULT,
-                              cancellable,
-                              callback,
-                              user_data,
-                              "g-flags", flags,
-                              "g-name", name,
-                              "g-bus-type", bus_type,
-                              "g-object-path", object_path,
-                              "g-interface-name", "org.shr.phoneui.Settings",
-                              NULL);
+void
+phoneui_settings_proxy_new_for_bus (
+    GBusType             bus_type,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GAsyncReadyCallback  callback,
+    gpointer             user_data)
+{
+  g_async_initable_new_async (TYPE_PHONEUI_SETTINGS_PROXY, G_PRIORITY_DEFAULT, cancellable, callback, user_data, "g-flags", flags, "g-name", name, "g-bus-type", bus_type, "g-object-path", object_path, "g-interface-name", "org.shr.phoneui.Settings", NULL);
 }
 
 /**
  * phoneui_settings_proxy_new_for_bus_finish:
- * @res: A #GAsyncResult obtained from the #GAsyncReadyCallback function passed to phoneui_settings_proxy_new_for_bus().
- * @error: Return location for error or %NULL.
+ * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to phoneui_settings_proxy_new_for_bus().
+ * @error: Return location for error or %NULL
  *
- * Finishes creating a #PhoneuiSettingsProxy.
+ * Finishes an operation started with phoneui_settings_proxy_new_for_bus().
  *
- * Returns: A #PhoneuiSettingsProxy or %NULL if @error is set. Free with g_object_unref().
+ * Returns: (transfer full) (type PhoneuiSettingsProxy): The constructed proxy object or %NULL if @error is set.
  */
-PhoneuiSettings *phoneui_settings_proxy_new_for_bus_finish (GAsyncResult  *res,
-                                GError       **error)
+PhoneuiSettings *
+phoneui_settings_proxy_new_for_bus_finish (
+    GAsyncResult        *res,
+    GError             **error)
 {
-  GObject *object;
+  GObject *ret;
   GObject *source_object;
   source_object = g_async_result_get_source_object (res);
-  g_assert (source_object != NULL);
-  object = g_async_initable_new_finish (G_ASYNC_INITABLE (source_object),
-                                        res,
-                                        error);
+  ret = g_async_initable_new_finish (G_ASYNC_INITABLE (source_object), res, error);
   g_object_unref (source_object);
-  if (object != NULL)
-    return PHONEUI_SETTINGS (object);
+  if (ret != NULL)
+    return PHONEUI_SETTINGS (ret);
   else
     return NULL;
 }
@@ -1712,163 +1176,321 @@ PhoneuiSettings *phoneui_settings_proxy_new_for_bus_finish (GAsyncResult  *res,
 /**
  * phoneui_settings_proxy_new_for_bus_sync:
  * @bus_type: A #GBusType.
- * @flags: Flags used when constructing the proxy.
+ * @flags: Flags from the #GDBusProxyFlags enumeration.
  * @name: A bus name (well-known or unique).
  * @object_path: An object path.
- * @cancellable: A #GCancellable or %NULL.
- * @error: Return location for error or %NULL.
+ * @cancellable: (allow-none): A #GCancellable or %NULL.
+ * @error: Return location for error or %NULL
  *
- * Like g_dbus_proxy_new_for_bus_sync() but returns a #PhoneuiSettingsProxy.
+ * Like phoneui_settings_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.
  *
- * This is a synchronous failable constructor - the calling thread is blocked until the object is ready. See phoneui_settings_proxy_new_for_bus() for the asynchronous version.
+ * The calling thread is blocked until a reply is received.
  *
- * Returns: A #PhoneuiSettingsProxy or %NULL if error is set. Free with g_object_unref().
+ * See phoneui_settings_proxy_new_for_bus() for the asynchronous version of this constructor.
+ *
+ * Returns: (transfer full) (type PhoneuiSettingsProxy): The constructed proxy object or %NULL if @error is set.
  */
-PhoneuiSettings *phoneui_settings_proxy_new_for_bus_sync (GBusType             bus_type,
-                               GDBusProxyFlags      flags,
-                               const gchar         *name,
-                               const gchar         *object_path,
-                               GCancellable        *cancellable,
-                               GError             **error)
-{
-  GInitable *initable;
-  initable = g_initable_new (TYPE_PHONEUI_SETTINGS_PROXY,
-                             cancellable,
-                             error,
-                             "g-flags", flags,
-                             "g-name", name,
-                             "g-bus-type", bus_type,
-                             "g-object-path", object_path,
-                             "g-interface-name", "org.shr.phoneui.Settings",
-                             NULL);
-  if (initable != NULL)
-    return PHONEUI_SETTINGS (initable);
+PhoneuiSettings *
+phoneui_settings_proxy_new_for_bus_sync (
+    GBusType             bus_type,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GError             **error)
+{
+  GInitable *ret;
+  ret = g_initable_new (TYPE_PHONEUI_SETTINGS_PROXY, cancellable, error, "g-flags", flags, "g-name", name, "g-bus-type", bus_type, "g-object-path", object_path, "g-interface-name", "org.shr.phoneui.Settings", NULL);
+  if (ret != NULL)
+    return PHONEUI_SETTINGS (ret);
   else
     return NULL;
 }
 
 
-/* ---------------------------------------------------------------------- */
+/* ------------------------------------------------------------------------ */
 
-struct _PhoneuiSettingsStubPrivate
+/**
+ * PhoneuiSettingsSkeleton:
+ *
+ * The #PhoneuiSettingsSkeleton structure contains only private data and should only be accessed using the provided API.
+ */
+
+/**
+ * PhoneuiSettingsSkeletonClass:
+ * @parent_class: The parent class.
+ *
+ * Class structure for #PhoneuiSettingsSkeleton.
+ */
+
+struct _PhoneuiSettingsSkeletonPrivate
 {
-  GDBusObject *enclosing_object;
-  GDBusInterfaceFlags flags;
+  GValueArray *properties;
+  GList *changed_properties;
+  GSource *changed_properties_idle_source;
+  GMainContext *context;
 };
 
-static void stub_iface_init (PhoneuiSettingsIface *iface);
+static void
+_phoneui_settings_skeleton_handle_method_call (
+  GDBusConnection *connection,
+  const gchar *sender,
+  const gchar *object_path,
+  const gchar *interface_name,
+  const gchar *method_name,
+  GVariant *parameters,
+  GDBusMethodInvocation *invocation,
+  gpointer user_data)
+{
+  PhoneuiSettingsSkeleton *skeleton = PHONEUI_SETTINGS_SKELETON (user_data);
+  _ExtendedGDBusMethodInfo *info;
+  GVariantIter iter;
+  GVariant *child;
+  GValue *paramv;
+  guint num_params;
+  guint n;
+  guint signal_id;
+  GValue return_value = {0};
+  info = (_ExtendedGDBusMethodInfo *) g_dbus_method_invocation_get_method_info (invocation);
+  g_assert (info != NULL);
+  num_params = g_variant_n_children (parameters);
+  paramv = g_new0 (GValue, num_params + 2);
+  g_value_init (&paramv[0], TYPE_PHONEUI_SETTINGS);
+  g_value_set_object (&paramv[0], skeleton);
+  g_value_init (&paramv[1], G_TYPE_DBUS_METHOD_INVOCATION);
+  g_value_set_object (&paramv[1], invocation);
+  g_variant_iter_init (&iter, parameters);
+  n = 2;
+  while ((child = g_variant_iter_next_value (&iter)) != NULL)
+    {
+      _ExtendedGDBusArgInfo *arg_info = (_ExtendedGDBusArgInfo *) info->parent_struct.in_args[n - 2];
+      if (arg_info->use_gvariant)
+        {
+          g_value_init (&paramv[n], G_TYPE_VARIANT);
+          g_value_set_variant (&paramv[n], child);
+          n++;
+        }
+      else
+        g_dbus_gvariant_to_gvalue (child, &paramv[n++]);
+      g_variant_unref (child);
+    }
+  signal_id = g_signal_lookup (info->signal_name, TYPE_PHONEUI_SETTINGS);
+  g_value_init (&return_value, G_TYPE_BOOLEAN);
+  g_signal_emitv (paramv, signal_id, 0, &return_value);
+  if (!g_value_get_boolean (&return_value))
+    g_dbus_method_invocation_return_error (invocation, G_DBUS_ERROR, G_DBUS_ERROR_UNKNOWN_METHOD, "Method %s is not implemented on interface %s", method_name, interface_name);
+  g_value_unset (&return_value);
+  for (n = 0; n < num_params + 2; n++)
+    g_value_unset (&paramv[n]);
+  g_free (paramv);
+}
 
-G_DEFINE_TYPE_WITH_CODE (PhoneuiSettingsStub, phoneui_settings_stub, G_TYPE_OBJECT,
-                         G_IMPLEMENT_INTERFACE (G_TYPE_DBUS_INTERFACE, dbus_iface_init)
-                         G_IMPLEMENT_INTERFACE (TYPE_PHONEUI_SETTINGS, stub_iface_init));
+static GVariant *
+_phoneui_settings_skeleton_handle_get_property (
+  GDBusConnection *connection,
+  const gchar *sender,
+  const gchar *object_path,
+  const gchar *interface_name,
+  const gchar *property_name,
+  GError **error,
+  gpointer user_data)
+{
+  PhoneuiSettingsSkeleton *skeleton = PHONEUI_SETTINGS_SKELETON (user_data);
+  GValue value = {0};
+  GParamSpec *pspec;
+  _ExtendedGDBusPropertyInfo *info;
+  GVariant *ret;
+  ret = NULL;
+  info = (_ExtendedGDBusPropertyInfo *) g_dbus_interface_info_lookup_property ((GDBusInterfaceInfo *) &_phoneui_settings_interface_info, property_name);
+  g_assert (info != NULL);
+  pspec = g_object_class_find_property (G_OBJECT_GET_CLASS (skeleton), info->hyphen_name);
+  if (pspec == NULL)
+    {
+      g_set_error (error, G_DBUS_ERROR, G_DBUS_ERROR_INVALID_ARGS, "No property with name %s", property_name);
+    }
+  else
+    {
+      g_value_init (&value, pspec->value_type);
+      g_object_get_property (G_OBJECT (skeleton), info->hyphen_name, &value);
+      ret = g_dbus_gvalue_to_gvariant (&value, G_VARIANT_TYPE (info->parent_struct.signature));
+      g_value_unset (&value);
+    }
+  return ret;
+}
 
-static void
-phoneui_settings_stub_finalize (GObject *object)
+static gboolean
+_phoneui_settings_skeleton_handle_set_property (
+  GDBusConnection *connection,
+  const gchar *sender,
+  const gchar *object_path,
+  const gchar *interface_name,
+  const gchar *property_name,
+  GVariant *variant,
+  GError **error,
+  gpointer user_data)
+{
+  PhoneuiSettingsSkeleton *skeleton = PHONEUI_SETTINGS_SKELETON (user_data);
+  GValue value = {0};
+  GParamSpec *pspec;
+  _ExtendedGDBusPropertyInfo *info;
+  gboolean ret;
+  ret = FALSE;
+  info = (_ExtendedGDBusPropertyInfo *) g_dbus_interface_info_lookup_property ((GDBusInterfaceInfo *) &_phoneui_settings_interface_info, property_name);
+  g_assert (info != NULL);
+  pspec = g_object_class_find_property (G_OBJECT_GET_CLASS (skeleton), info->hyphen_name);
+  if (pspec == NULL)
+    {
+      g_set_error (error, G_DBUS_ERROR, G_DBUS_ERROR_INVALID_ARGS, "No property with name %s", property_name);
+    }
+  else
+    {
+      if (info->use_gvariant)
+        g_value_set_variant (&value, variant);
+      else
+        g_dbus_gvariant_to_gvalue (variant, &value);
+      g_object_set_property (G_OBJECT (skeleton), info->hyphen_name, &value);
+      g_value_unset (&value);
+      ret = TRUE;
+    }
+  return ret;
+}
+
+static const GDBusInterfaceVTable _phoneui_settings_skeleton_vtable =
 {
-  G_GNUC_UNUSED PhoneuiSettingsStub *stub = (PhoneuiSettingsStub *) object;
+  _phoneui_settings_skeleton_handle_method_call,
+  _phoneui_settings_skeleton_handle_get_property,
+  _phoneui_settings_skeleton_handle_set_property
+};
 
-  if (G_OBJECT_CLASS (phoneui_settings_stub_parent_class)->finalize != NULL)
-    G_OBJECT_CLASS (phoneui_settings_stub_parent_class)->finalize (object);
+static GDBusInterfaceInfo *
+phoneui_settings_skeleton_dbus_interface_get_info (GDBusInterfaceSkeleton *skeleton)
+{
+  return phoneui_settings_interface_info ();
 }
 
-static void
-phoneui_settings_stub_get_property (GObject      *object,
-                      guint         prop_id,
-                      GValue       *value,
-                      GParamSpec   *pspec)
+static GDBusInterfaceVTable *
+phoneui_settings_skeleton_dbus_interface_get_vtable (GDBusInterfaceSkeleton *skeleton)
 {
-  G_GNUC_UNUSED PhoneuiSettingsStub *stub = (PhoneuiSettingsStub *) object;
-  switch (prop_id)
-    {
-
-    default:
-      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
-      break;
-    }
+  return (GDBusInterfaceVTable *) &_phoneui_settings_skeleton_vtable;
 }
 
-static void
-phoneui_settings_stub_set_property (GObject      *object,
-                      guint         prop_id,
-                      const GValue *value,
-                      GParamSpec   *pspec)
+static GVariant *
+phoneui_settings_skeleton_dbus_interface_get_properties (GDBusInterfaceSkeleton *_skeleton)
 {
-  G_GNUC_UNUSED PhoneuiSettingsStub *stub = (PhoneuiSettingsStub *) object;
-  switch (prop_id)
-    {
+  PhoneuiSettingsSkeleton *skeleton = PHONEUI_SETTINGS_SKELETON (_skeleton);
 
-    default:
-      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
-      break;
+  GVariantBuilder builder;
+  guint n;
+  g_variant_builder_init (&builder, G_VARIANT_TYPE ("a{sv}"));
+  if (_phoneui_settings_interface_info.parent_struct.properties == NULL)
+    goto out;
+  for (n = 0; _phoneui_settings_interface_info.parent_struct.properties[n] != NULL; n++)
+    {
+      GDBusPropertyInfo *info = _phoneui_settings_interface_info.parent_struct.properties[n];
+      if (info->flags & G_DBUS_PROPERTY_INFO_FLAGS_READABLE)
+        {
+          GVariant *value;
+          value = _phoneui_settings_skeleton_handle_get_property (g_dbus_interface_skeleton_get_connection (G_DBUS_INTERFACE_SKELETON (skeleton)), NULL, g_dbus_interface_skeleton_get_object_path (G_DBUS_INTERFACE_SKELETON (skeleton)), "org.shr.phoneui.Settings", info->name, NULL, skeleton);
+          if (value != NULL)
+            {
+              if (g_variant_is_floating (value))
+                g_variant_ref_sink (value);
+              g_variant_builder_add (&builder, "{sv}", info->name, value);
+              g_variant_unref (value);
+            }
+        }
     }
+out:
+  return g_variant_builder_end (&builder);
 }
 
 static void
-phoneui_settings_stub_init (PhoneuiSettingsStub *stub)
+phoneui_settings_skeleton_dbus_interface_flush (GDBusInterfaceSkeleton *_skeleton)
 {
-  stub->priv = G_TYPE_INSTANCE_GET_PRIVATE (stub, TYPE_PHONEUI_SETTINGS_STUB, PhoneuiSettingsStubPrivate);
 }
 
 static void
-phoneui_settings_stub_class_init (PhoneuiSettingsStubClass *klass)
+phoneui_settings_skeleton_iface_init (PhoneuiSettingsIface *iface)
 {
-  GObjectClass *gobject_class;
-
-  gobject_class = G_OBJECT_CLASS (klass);
-  gobject_class->finalize     = phoneui_settings_stub_finalize;
-  gobject_class->get_property = phoneui_settings_stub_get_property;
-  gobject_class->set_property = phoneui_settings_stub_set_property;
-  g_type_class_add_private (klass, sizeof (PhoneuiSettingsStubPrivate));
 }
 
+#define phoneui_settings_skeleton_get_type phoneui_settings_skeleton_get_type
+G_DEFINE_TYPE_WITH_CODE (PhoneuiSettingsSkeleton, phoneui_settings_skeleton, G_TYPE_DBUS_INTERFACE_SKELETON,
+                         G_IMPLEMENT_INTERFACE (TYPE_PHONEUI_SETTINGS, phoneui_settings_skeleton_iface_init));
+#undef phoneui_settings_skeleton_get_type
+
 static void
-stub_iface_init (PhoneuiSettingsIface *iface)
-{
+phoneui_settings_skeleton_finalize (GObject *object)
+{
+  PhoneuiSettingsSkeleton *skeleton = PHONEUI_SETTINGS_SKELETON (object);
+  g_list_foreach (skeleton->priv->changed_properties, (GFunc) _changed_property_free, NULL);
+  g_list_free (skeleton->priv->changed_properties);
+  if (skeleton->priv->changed_properties_idle_source != NULL)
+    g_source_destroy (skeleton->priv->changed_properties_idle_source);
+  if (skeleton->priv->context != NULL)
+    g_main_context_unref (skeleton->priv->context);
+  G_OBJECT_CLASS (phoneui_settings_skeleton_parent_class)->finalize (object);
 }
 
-/**
- * phoneui_settings_stub_new:
- *
- * Creates a new stub object that can be exported via g_dbus_interface_register_object().
- *
- * Returns: A #PhoneuiSettingsStub instance. Free with g_object_unref().
- */
-PhoneuiSettings *
-phoneui_settings_stub_new (void)
-{
-  return PHONEUI_SETTINGS (g_object_new (TYPE_PHONEUI_SETTINGS_STUB, NULL));
+static void
+phoneui_settings_skeleton_get_property (GObject      *object,
+  guint         prop_id,
+  GValue       *value,
+  GParamSpec   *pspec)
+{
+  PhoneuiSettingsSkeleton *skeleton = PHONEUI_SETTINGS_SKELETON (object);
+  g_assert (prop_id - 1 >= 0 && prop_id - 1 < 0);
+  g_value_copy (&skeleton->priv->properties->values[prop_id - 1], value);
 }
 
-static GDBusObject *
-phoneui_settings_g_dbus_interface_get_object (GDBusInterface *interface)
+static void
+phoneui_settings_skeleton_set_property (GObject      *object,
+  guint         prop_id,
+  const GValue *value,
+  GParamSpec   *pspec)
 {
-  PhoneuiSettingsStub *stub = G_TYPE_CHECK_INSTANCE_CAST (interface, TYPE_PHONEUI_SETTINGS_STUB, PhoneuiSettingsStub);
-  if (stub->priv->enclosing_object != NULL)
-    return g_object_ref (stub->priv->enclosing_object);
-  else
-    return NULL;
 }
 
 static void
-phoneui_settings_g_dbus_interface_set_object (GDBusInterface *interface,
-                                GDBusObject    *object)
+phoneui_settings_skeleton_init (PhoneuiSettingsSkeleton *skeleton)
 {
-  PhoneuiSettingsStub *stub = G_TYPE_CHECK_INSTANCE_CAST (interface, TYPE_PHONEUI_SETTINGS_STUB, PhoneuiSettingsStub);
-  stub->priv->enclosing_object = object;
+  skeleton->priv = G_TYPE_INSTANCE_GET_PRIVATE (skeleton, TYPE_PHONEUI_SETTINGS_SKELETON, PhoneuiSettingsSkeletonPrivate);
+  skeleton->priv->context = g_main_context_get_thread_default ();
+  if (skeleton->priv->context != NULL)
+    g_main_context_ref (skeleton->priv->context);
 }
 
-static GDBusInterfaceFlags
-phoneui_settings_g_dbus_interface_get_flags (GDBusInterface *interface)
+static void
+phoneui_settings_skeleton_class_init (PhoneuiSettingsSkeletonClass *klass)
 {
-  PhoneuiSettingsStub *stub = G_TYPE_CHECK_INSTANCE_CAST (interface, TYPE_PHONEUI_SETTINGS_STUB, PhoneuiSettingsStub);
-  return stub->priv->flags;
+  GObjectClass *gobject_class;
+  GDBusInterfaceSkeletonClass *skeleton_class;
+
+  g_type_class_add_private (klass, sizeof (PhoneuiSettingsSkeletonPrivate));
+
+  gobject_class = G_OBJECT_CLASS (klass);
+  gobject_class->finalize = phoneui_settings_skeleton_finalize;
+  gobject_class->get_property = phoneui_settings_skeleton_get_property;
+  gobject_class->set_property = phoneui_settings_skeleton_set_property;
+
+
+  skeleton_class = G_DBUS_INTERFACE_SKELETON_CLASS (klass);
+  skeleton_class->get_info = phoneui_settings_skeleton_dbus_interface_get_info;
+  skeleton_class->get_properties = phoneui_settings_skeleton_dbus_interface_get_properties;
+  skeleton_class->flush = phoneui_settings_skeleton_dbus_interface_flush;
+  skeleton_class->get_vtable = phoneui_settings_skeleton_dbus_interface_get_vtable;
 }
 
-static void
-phoneui_settings_g_dbus_interface_set_flags (GDBusInterface      *interface,
-                               GDBusInterfaceFlags  flags)
+/**
+ * phoneui_settings_skeleton_new:
+ *
+ * Creates a skeleton object for the D-Bus interface <link linkend="gdbus-interface-org-shr-phoneui-Settings.top_of_page">org.shr.phoneui.Settings</link>.
+ *
+ * Returns: (transfer full) (type PhoneuiSettingsSkeleton): The skeleton object.
+ */
+PhoneuiSettings *
+phoneui_settings_skeleton_new (void)
 {
-  PhoneuiSettingsStub *stub = G_TYPE_CHECK_INSTANCE_CAST (interface, TYPE_PHONEUI_SETTINGS_STUB, PhoneuiSettingsStub);
-  stub->priv->flags = flags;
+  return PHONEUI_SETTINGS (g_object_new (TYPE_PHONEUI_SETTINGS_SKELETON, NULL));
 }
 
diff --git a/src/shr-phoneuisettings.h b/src/shr-phoneuisettings.h
index b432259..9e412a0 100644
--- a/src/shr-phoneuisettings.h
+++ b/src/shr-phoneuisettings.h
@@ -1,314 +1,242 @@
-/* File:       shr-phoneuisettings.h
+/*
+ * Generated by gdbus-codegen 2.29.3. DO NOT EDIT.
  *
- * GType name: PhoneuiSettings
- * D-Bus name: org.shr.phoneui.Settings
- *
- * Generated by GDBus Binding Tool 0.1. DO NOT EDIT.
+ * The license of this code is the same as for the source it was derived from.
  */
 
-#ifndef __SHR_PHONEUI_SETTINGS_H__
-#define __SHR_PHONEUI_SETTINGS_H__
+#ifndef __SHR_PHONEUISETTINGS_H__
+#define __SHR_PHONEUISETTINGS_H__
 
 #include <gio/gio.h>
-#include <gdbusinterface.h>
-#include <gdbusobjectproxy.h>
-#include <gdbusproxymanager.h>
-#include <gdbusobject.h>
-#include <gdbusobjectmanager.h>
-#include <gdbuscodegen-enumtypes.h>
-#include <string.h>
-#include <shr-types.h>
 
 G_BEGIN_DECLS
 
-#define TYPE_PHONEUI_SETTINGS         (phoneui_settings_get_gtype ())
-#define PHONEUI_SETTINGS(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_PHONEUI_SETTINGS, PhoneuiSettings))
-#define IS_PHONEUI_SETTINGS(o)        (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_PHONEUI_SETTINGS))
-#define PHONEUI_SETTINGS_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE((o), TYPE_PHONEUI_SETTINGS, PhoneuiSettingsIface))
-
-/**
- * PhoneuiSettings:
- *
- * Opaque type representing a proxy or an exported object.
- */
-typedef struct _PhoneuiSettings PhoneuiSettings; /* Dummy typedef */
-/**
- * PhoneuiSettingsIface:
- * @parent_iface: The parent interface.
- * @handle_display_quick_settings: Handler for the #PhoneuiSettings::handle-display-quick-settings signal.
- * @handle_display_sim_manager: Handler for the #PhoneuiSettings::handle-display-sim-manager signal.
- * @handle_set_message_receipt: Handler for the #PhoneuiSettings::handle-set-message-receipt signal.
- * @handle_get_message_receipt: Handler for the #PhoneuiSettings::handle-get-message-receipt signal.
- *
- * Virtual table.
- */
-typedef struct _PhoneuiSettingsIface PhoneuiSettingsIface;
 
-GType phoneui_settings_get_gtype (void) G_GNUC_CONST;
-GDBusInterfaceInfo *phoneui_settings_interface_info (void);
+/* ------------------------------------------------------------------------ */
+/* Declarations for org.shr.phoneui.Settings */
 
-/**
- * GET_PHONEUI_SETTINGS:
- * @object_proxy: A #GDBusObjectProxy.
- *
- * Convenience macro to get a #PhoneuiSettings interface proxy from @object_proxy.
- *
- * Returns: A #GDBusProxy object implementing the #PhoneuiSettings interface or %NULL if @object_proxy
- * does not implement the <literal>org.shr.phoneui.Settings</literal> D-Bus interface.
- * The returned reference must be released with g_object_unref().
- */
-#define GET_PHONEUI_SETTINGS(object_proxy) (g_dbus_object_proxy_lookup_with_typecheck (object_proxy, "org.shr.phoneui.Settings", TYPE_PHONEUI_SETTINGS))
+#define TYPE_PHONEUI_SETTINGS (phoneui_settings_get_type ())
+#define PHONEUI_SETTINGS(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_PHONEUI_SETTINGS, PhoneuiSettings))
+#define IS_PHONEUI_SETTINGS(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_PHONEUI_SETTINGS))
+#define PHONEUI_SETTINGS_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_PHONEUI_SETTINGS, PhoneuiSettings))
 
-/**
- * PEEK_PHONEUI_SETTINGS:
- * @object_proxy: A #GDBusObjectProxy.
- *
- * Like GET_PHONEUI_SETTINGS() but doesn't increase the reference count on the returned object.
- *
- * <note><para>This macro is not safe to use outside the thread where the #GDBusProxyManager for @object_proxy was constructed in.</para></note>
- *
- * Returns: A #GDBusProxy object implementing the #PhoneuiSettings interface or %NULL if @object_proxy
- * does not implement the <literal>org.shr.phoneui.Settings</literal> D-Bus interface.
- * Do not free the returned object, it is owned by @object_proxy..
- */
-#define PEEK_PHONEUI_SETTINGS(object_proxy) (g_dbus_object_proxy_peek_with_typecheck (object_proxy, "org.shr.phoneui.Settings", TYPE_PHONEUI_SETTINGS))
+struct _PhoneuiSettings;
+typedef struct _PhoneuiSettings PhoneuiSettings;
+typedef struct _PhoneuiSettingsIface PhoneuiSettingsIface;
 
+struct _PhoneuiSettingsIface
+{
+  GTypeInterface parent_iface;
 
-/* ---------------------------------------------------------------------- */
+  gboolean (*handle_display_quick_settings) (
+    PhoneuiSettings *object,
+    GDBusMethodInvocation *invocation);
 
-typedef struct _PhoneuiSettingsProxy PhoneuiSettingsProxy;
-typedef struct _PhoneuiSettingsProxyClass PhoneuiSettingsProxyClass;
+  gboolean (*handle_display_sim_manager) (
+    PhoneuiSettings *object,
+    GDBusMethodInvocation *invocation);
 
-/**
- * PhoneuiSettingsProxyPrivate:
- *
- * The #PhoneuiSettingsProxyPrivate structure contains only private data.
- */
-typedef struct _PhoneuiSettingsProxyPrivate PhoneuiSettingsProxyPrivate;
+  gboolean (*handle_get_message_receipt) (
+    PhoneuiSettings *object,
+    GDBusMethodInvocation *invocation);
 
-/**
- * PhoneuiSettingsProxy:
- *
- * The #PhoneuiSettingsProxy structure contains only private data and
- * should only be accessed using the provided API.
- */
-struct _PhoneuiSettingsProxy
-{
-  /*< private >*/
-  GDBusProxy parent_instance;
-  PhoneuiSettingsProxyPrivate *priv;
-};
+  gboolean (*handle_set_message_receipt) (
+    PhoneuiSettings *object,
+    GDBusMethodInvocation *invocation,
+    gboolean message_receipt);
 
-/**
- * PhoneuiSettingsProxyClass:
- *
- * Class structure for #PhoneuiSettingsProxy.
- */
-struct _PhoneuiSettingsProxyClass
-{
-  /*< private >*/
-  GDBusProxyClass parent_class;
 };
 
-#define TYPE_PHONEUI_SETTINGS_PROXY (phoneui_settings_proxy_get_type ())
-GType phoneui_settings_proxy_get_type (void) G_GNUC_CONST;
+GType phoneui_settings_get_type (void) G_GNUC_CONST;
 
-void phoneui_settings_proxy_new (GDBusConnection     *connection,
-                   GDBusProxyFlags      flags,
-                   const gchar         *name,
-                   const gchar         *object_path,
-                   GCancellable        *cancellable,
-                   GAsyncReadyCallback  callback,
-                   gpointer             user_data);
-PhoneuiSettings *phoneui_settings_proxy_new_finish (GAsyncResult  *res,
-                        GError       **error);
-PhoneuiSettings *phoneui_settings_proxy_new_sync (GDBusConnection     *connection,
-                       GDBusProxyFlags      flags,
-                       const gchar         *name,
-                       const gchar         *object_path,
-                       GCancellable        *cancellable,
-                       GError             **error);
-
-void phoneui_settings_proxy_new_for_bus (GBusType             bus_type,
-                           GDBusProxyFlags      flags,
-                           const gchar         *name,
-                           const gchar         *object_path,
-                           GCancellable        *cancellable,
-                           GAsyncReadyCallback  callback,
-                           gpointer             user_data);
-PhoneuiSettings *phoneui_settings_proxy_new_for_bus_finish (GAsyncResult  *res,
-                                 GError       **error);
-PhoneuiSettings *phoneui_settings_proxy_new_for_bus_sync (GBusType             bus_type,
-                               GDBusProxyFlags      flags,
-                               const gchar         *name,
-                               const gchar         *object_path,
-                               GCancellable        *cancellable,
-                               GError             **error);
-
-/* ---------------------------------------------------------------------- */
-
-typedef struct _PhoneuiSettingsStub PhoneuiSettingsStub;
-typedef struct _PhoneuiSettingsStubClass PhoneuiSettingsStubClass;
-
-/**
- * PhoneuiSettingsStubPrivate:
- *
- * The #PhoneuiSettingsStubPrivate structure contains only private data.
- */
-typedef struct _PhoneuiSettingsStubPrivate PhoneuiSettingsStubPrivate;
-
-/**
- * PhoneuiSettingsStub:
- *
- * The #PhoneuiSettingsStub structure contains only private data and
- * should only be accessed using the provided API.
- */
-struct _PhoneuiSettingsStub
-{
-  /*< private >*/
-  GObject parent_instance;
-  PhoneuiSettingsStubPrivate *priv;
-};
-
-/**
- * PhoneuiSettingsStubClass:
- *
- * Class structure for #PhoneuiSettingsStub.
- */
-struct _PhoneuiSettingsStubClass
-{
-  /*< private >*/
-  GObjectClass parent_class;
-};
+GDBusInterfaceInfo *phoneui_settings_interface_info (void);
 
-#define TYPE_PHONEUI_SETTINGS_STUB (phoneui_settings_stub_get_type ())
-GType phoneui_settings_stub_get_type (void) G_GNUC_CONST;
 
-PhoneuiSettings *phoneui_settings_stub_new (void);
+/* D-Bus method call completion functions: */
+void phoneui_settings_complete_display_quick_settings (
+    PhoneuiSettings *object,
+    GDBusMethodInvocation *invocation);
 
+void phoneui_settings_complete_display_sim_manager (
+    PhoneuiSettings *object,
+    GDBusMethodInvocation *invocation);
 
-struct _PhoneuiSettingsIface
-{
-  GTypeInterface parent_iface;
+void phoneui_settings_complete_set_message_receipt (
+    PhoneuiSettings *object,
+    GDBusMethodInvocation *invocation);
 
-  /* Signal handlers for handling D-Bus method calls: */
-  gboolean (*handle_display_quick_settings) (
-        PhoneuiSettings *object,
-        GDBusMethodInvocation *invocation);
-  gboolean (*handle_display_sim_manager) (
-        PhoneuiSettings *object,
-        GDBusMethodInvocation *invocation);
-  gboolean (*handle_set_message_receipt) (
-        PhoneuiSettings *object,
-        GDBusMethodInvocation *invocation,
-        gboolean message_receipt);
-  gboolean (*handle_get_message_receipt) (
-        PhoneuiSettings *object,
-        GDBusMethodInvocation *invocation);
-};
+void phoneui_settings_complete_get_message_receipt (
+    PhoneuiSettings *object,
+    GDBusMethodInvocation *invocation,
+    gboolean message_receipt);
 
-/* C Bindings for properties */
 
 
-/* D-Bus Methods */
+/* D-Bus method calls: */
 void phoneui_settings_call_display_quick_settings (
-        PhoneuiSettings *proxy,
-        GCancellable *cancellable,
-        GAsyncReadyCallback callback,
-        gpointer user_data);
+    PhoneuiSettings *proxy,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data);
 
 gboolean phoneui_settings_call_display_quick_settings_finish (
-        PhoneuiSettings *proxy,
-        GAsyncResult *res,
-        GError **error);
+    PhoneuiSettings *proxy,
+    GAsyncResult *res,
+    GError **error);
 
 gboolean phoneui_settings_call_display_quick_settings_sync (
-        PhoneuiSettings *proxy,
-        GCancellable *cancellable,
-        GError **error);
-
+    PhoneuiSettings *proxy,
+    GCancellable *cancellable,
+    GError **error);
 
 void phoneui_settings_call_display_sim_manager (
-        PhoneuiSettings *proxy,
-        GCancellable *cancellable,
-        GAsyncReadyCallback callback,
-        gpointer user_data);
+    PhoneuiSettings *proxy,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data);
 
 gboolean phoneui_settings_call_display_sim_manager_finish (
-        PhoneuiSettings *proxy,
-        GAsyncResult *res,
-        GError **error);
+    PhoneuiSettings *proxy,
+    GAsyncResult *res,
+    GError **error);
 
 gboolean phoneui_settings_call_display_sim_manager_sync (
-        PhoneuiSettings *proxy,
-        GCancellable *cancellable,
-        GError **error);
-
+    PhoneuiSettings *proxy,
+    GCancellable *cancellable,
+    GError **error);
 
 void phoneui_settings_call_set_message_receipt (
-        PhoneuiSettings *proxy,
-        gboolean message_receipt,
-        GCancellable *cancellable,
-        GAsyncReadyCallback callback,
-        gpointer user_data);
+    PhoneuiSettings *proxy,
+    gboolean message_receipt,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data);
 
 gboolean phoneui_settings_call_set_message_receipt_finish (
-        PhoneuiSettings *proxy,
-        GAsyncResult *res,
-        GError **error);
+    PhoneuiSettings *proxy,
+    GAsyncResult *res,
+    GError **error);
 
 gboolean phoneui_settings_call_set_message_receipt_sync (
-        PhoneuiSettings *proxy,
-        gboolean message_receipt,
-        GCancellable *cancellable,
-        GError **error);
-
+    PhoneuiSettings *proxy,
+    gboolean message_receipt,
+    GCancellable *cancellable,
+    GError **error);
 
 void phoneui_settings_call_get_message_receipt (
-        PhoneuiSettings *proxy,
-        GCancellable *cancellable,
-        GAsyncReadyCallback callback,
-        gpointer user_data);
+    PhoneuiSettings *proxy,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data);
 
 gboolean phoneui_settings_call_get_message_receipt_finish (
-        PhoneuiSettings *proxy,
-        gboolean *out_message_receipt,
-        GAsyncResult *res,
-        GError **error);
+    PhoneuiSettings *proxy,
+    gboolean *out_message_receipt,
+    GAsyncResult *res,
+    GError **error);
 
 gboolean phoneui_settings_call_get_message_receipt_sync (
-        PhoneuiSettings *proxy,
-        gboolean *out_message_receipt,
-        GCancellable *cancellable,
-        GError **error);
+    PhoneuiSettings *proxy,
+    gboolean *out_message_receipt,
+    GCancellable *cancellable,
+    GError **error);
 
 
 
-/* D-Bus Methods Completion Helpers */
-void phoneui_settings_complete_display_quick_settings (
-        PhoneuiSettings *object,
-        GDBusMethodInvocation *invocation);
+/* ---- */
 
+#define TYPE_PHONEUI_SETTINGS_PROXY (phoneui_settings_proxy_get_type ())
+#define PHONEUI_SETTINGS_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_PHONEUI_SETTINGS_PROXY, PhoneuiSettingsProxy))
+#define PHONEUI_SETTINGS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_PHONEUI_SETTINGS_PROXY, PhoneuiSettingsProxyClass))
+#define PHONEUI_SETTINGS_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_PHONEUI_SETTINGS_PROXY, PhoneuiSettingsProxyClass))
+#define IS_PHONEUI_SETTINGS_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_PHONEUI_SETTINGS_PROXY))
+#define IS_PHONEUI_SETTINGS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_PHONEUI_SETTINGS_PROXY))
 
-void phoneui_settings_complete_display_sim_manager (
-        PhoneuiSettings *object,
-        GDBusMethodInvocation *invocation);
+typedef struct _PhoneuiSettingsProxy PhoneuiSettingsProxy;
+typedef struct _PhoneuiSettingsProxyClass PhoneuiSettingsProxyClass;
+typedef struct _PhoneuiSettingsProxyPrivate PhoneuiSettingsProxyPrivate;
 
+struct _PhoneuiSettingsProxy
+{
+  GDBusProxy parent_instance;
+  PhoneuiSettingsProxyPrivate *priv;
+};
 
-void phoneui_settings_complete_set_message_receipt (
-        PhoneuiSettings *object,
-        GDBusMethodInvocation *invocation);
+struct _PhoneuiSettingsProxyClass
+{
+  GDBusProxyClass parent_class;
+};
 
+GType phoneui_settings_proxy_get_type (void) G_GNUC_CONST;
 
-void phoneui_settings_complete_get_message_receipt (
-        PhoneuiSettings *object,
-        GDBusMethodInvocation *invocation,
-        gboolean message_receipt);
+void phoneui_settings_proxy_new (
+    GDBusConnection     *connection,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GAsyncReadyCallback  callback,
+    gpointer             user_data);
+PhoneuiSettings *phoneui_settings_proxy_new_finish (
+    GAsyncResult        *res,
+    GError             **error);
+PhoneuiSettings *phoneui_settings_proxy_new_sync (
+    GDBusConnection     *connection,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GError             **error);
+
+void phoneui_settings_proxy_new_for_bus (
+    GBusType             bus_type,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GAsyncReadyCallback  callback,
+    gpointer             user_data);
+PhoneuiSettings *phoneui_settings_proxy_new_for_bus_finish (
+    GAsyncResult        *res,
+    GError             **error);
+PhoneuiSettings *phoneui_settings_proxy_new_for_bus_sync (
+    GBusType             bus_type,
+    GDBusProxyFlags      flags,
+    const gchar         *name,
+    const gchar         *object_path,
+    GCancellable        *cancellable,
+    GError             **error);
+
+
+/* ---- */
+
+#define TYPE_PHONEUI_SETTINGS_SKELETON (phoneui_settings_skeleton_get_type ())
+#define PHONEUI_SETTINGS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_PHONEUI_SETTINGS_SKELETON, PhoneuiSettingsSkeleton))
+#define PHONEUI_SETTINGS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_PHONEUI_SETTINGS_SKELETON, PhoneuiSettingsSkeletonClass))
+#define PHONEUI_SETTINGS_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_PHONEUI_SETTINGS_SKELETON, PhoneuiSettingsSkeletonClass))
+#define IS_PHONEUI_SETTINGS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_PHONEUI_SETTINGS_SKELETON))
+#define IS_PHONEUI_SETTINGS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_PHONEUI_SETTINGS_SKELETON))
+
+typedef struct _PhoneuiSettingsSkeleton PhoneuiSettingsSkeleton;
+typedef struct _PhoneuiSettingsSkeletonClass PhoneuiSettingsSkeletonClass;
+typedef struct _PhoneuiSettingsSkeletonPrivate PhoneuiSettingsSkeletonPrivate;
+
+struct _PhoneuiSettingsSkeleton
+{
+  GDBusInterfaceSkeleton parent_instance;
+  PhoneuiSettingsSkeletonPrivate *priv;
+};
+
+struct _PhoneuiSettingsSkeletonClass
+{
+  GDBusInterfaceSkeletonClass parent_class;
+};
 
+GType phoneui_settings_skeleton_get_type (void) G_GNUC_CONST;
 
+PhoneuiSettings *phoneui_settings_skeleton_new (void);
 
-/* D-Bus Signal Emission Helpers */
 
 G_END_DECLS
 
-#endif /* __SHR_PHONEUI_SETTINGS_H__ */
+#endif /* __SHR_PHONEUISETTINGS_H__ */
diff --git a/src/shr-proxymanager.c b/src/shr-proxymanager.c
deleted file mode 100644
index 30bfce6..0000000
--- a/src/shr-proxymanager.c
+++ /dev/null
@@ -1,273 +0,0 @@
-/* File:       shr-proxymanager.c
- *
- * Generated by GDBus Binding Tool 0.1. DO NOT EDIT.
- */
-
-#include "shr-bindings.h"
-
-/**
- * SECTION:shr-proxymanager
- * @title: ProxyManager
- * @short_description: Proxy Manager
- * @include: gio/gio.h
- *
- * A #GDBusProxyManager subclass with a #GDBusProxyTypeFunc that
- * maps to proxy types in these generated bindings.
- */
-
-/* Currently unused */
-struct _ProxyManagerPrivate
-{
-};
-
-G_DEFINE_TYPE (ProxyManager, proxy_manager, G_TYPE_DBUS_PROXY_MANAGER);
-
-static GObjectConstructParam *
-find_construct_property (guint                  n_construct_properties,
-                         GObjectConstructParam *construct_properties,
-                         const gchar           *name)
-{
-  guint n;
-  for (n = 0; n < n_construct_properties; n++)
-    if (g_strcmp0 (g_param_spec_get_name (construct_properties[n].pspec), name) == 0)
-      return &construct_properties[n];
-  return NULL;
-}
-
-static GObject *
-proxy_manager_constructor (
-    GType                  type,
-    guint                  n_construct_properties,
-    GObjectConstructParam *construct_properties)
-{
-  GObjectConstructParam *cp;
-  cp = find_construct_property (n_construct_properties, construct_properties, "get-proxy-type-func");
-  if (g_value_get_pointer (cp->value) == NULL)
-    g_value_set_pointer (cp->value, proxy_manager_get_type_func ());
-  return G_OBJECT_CLASS (proxy_manager_parent_class)->constructor (
-    type,
-    n_construct_properties,
-    construct_properties);
-}
-
-static void
-proxy_manager_init (ProxyManager *manager)
-{
-}
-
-static void
-proxy_manager_class_init (ProxyManagerClass *klass)
-{
-  GObjectClass *gobject_class;
-
-  gobject_class = G_OBJECT_CLASS (klass);
-  gobject_class->constructor = proxy_manager_constructor;
-}
-
-static GType
-proxy_manager_type_func (
-    GDBusProxyManager *manager,
-    const gchar *object_path,
-    const gchar *interface_name,
-    gpointer user_data)
-{
-  GType ret;
-
-  ret = G_TYPE_DBUS_PROXY;
-  if (g_strcmp0 (interface_name, "org.shr.phonefso.Usage") == 0)
-    ret = TYPE_PHONEFSO_USAGE_PROXY;
-  else if (g_strcmp0 (interface_name, "org.shr.phoneui.CallManagement") == 0)
-    ret = TYPE_PHONEUI_CALL_MANAGEMENT_PROXY;
-  else if (g_strcmp0 (interface_name, "org.shr.phoneui.Contacts") == 0)
-    ret = TYPE_PHONEUI_CONTACTS_PROXY;
-  else if (g_strcmp0 (interface_name, "org.shr.phoneui.Dialer") == 0)
-    ret = TYPE_PHONEUI_DIALER_PROXY;
-  else if (g_strcmp0 (interface_name, "org.shr.phoneui.IdleScreen") == 0)
-    ret = TYPE_PHONEUI_IDLE_SCREEN_PROXY;
-  else if (g_strcmp0 (interface_name, "org.shr.phoneui.Messages") == 0)
-    ret = TYPE_PHONEUI_MESSAGES_PROXY;
-  else if (g_strcmp0 (interface_name, "org.shr.phoneui.Notification") == 0)
-    ret = TYPE_PHONEUI_NOTIFICATION_PROXY;
-  else if (g_strcmp0 (interface_name, "org.shr.phoneui.PhoneLog") == 0)
-    ret = TYPE_PHONEUI_PHONE_LOG_PROXY;
-  else if (g_strcmp0 (interface_name, "org.shr.phoneui.Settings") == 0)
-    ret = TYPE_PHONEUI_SETTINGS_PROXY;
-
-  return ret;
-}
-
-/**
- * proxy_manager_get_type_func:
- *
- * Gets a function pointer that can be used for mapping interface names
- * to #GDBusProxy<!-- -->-derived types.
- *
- * Returns: A #GDBusProxyTypeFunc.
- */
-GDBusProxyTypeFunc
-proxy_manager_get_type_func (void)
-{
-  return proxy_manager_type_func;
-}
-
-/**
- * proxy_manager_new_sync:
- * @connection: A #GDBusConnection.
- * @flags: Zero or more flags from the #GDBusProxyManagerFlags enumeration.
- * @name: The owner of the control object (unique or well-known name).
- * @object_path: The object path of the control object.
- * @cancellable: A #GCancellable or %NULL
- * @error: Return location for error or %NULL.
- *
- * Like g_dbus_proxy_manager_new_sync() but without needing to specify
- * a #GDBusProxyTypeFunc.
-
- * This is a synchronous failable constructor - the calling thread is
- * blocked until a reply is received. See proxy_manager_new()
- * for the asynchronous version.
- *
- * Returns: A #GDBusProxyManager object or %NULL if @error is
- * set. Free with g_object_unref().
- */
-GDBusProxyManager *
-proxy_manager_new_sync (
-    GDBusConnection        *connection,
-    GDBusProxyManagerFlags  flags,
-    const gchar            *name,
-    const gchar            *object_path,
-    GCancellable           *cancellable,
-    GError                **error)
-{
-  return g_dbus_proxy_manager_new_sync (connection, flags, name, object_path,  proxy_manager_type_func, NULL, cancellable, error);
-}
-
-/**
- * proxy_manager_new:
- * @connection: A #GDBusConnection.
- * @flags: Zero or more flags from the #GDBusProxyManagerFlags enumeration.
- * @name: The owner of the control object (unique or well-known name).
- * @object_path: The object path of the control object.
- * @cancellable: A #GCancellable or %NULL
- * @callback: A #GAsyncReadyCallback to call when the request is satisfied.
- * @user_data: The data to pass to @callback.
- *
- * Like g_dbus_proxy_manager_new() but without needing to specify a #GDBusProxyTypeFunc.
- *
- * This is an asynchronous failable constructor. When the result is
- * ready, @callback will be invoked in the
- * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
- * of the thread you are calling this method from. You can
- * then call proxy_manager_new_finish() to get the result. See
- * proxy_manager_new_sync() for the synchronous version.
- */
-void
-proxy_manager_new (
-    GDBusConnection        *connection,
-    GDBusProxyManagerFlags  flags,
-    const gchar            *name,
-    const gchar            *object_path,
-    GCancellable           *cancellable,
-    GAsyncReadyCallback     callback,
-    gpointer                user_data)
-{
-  return g_dbus_proxy_manager_new (connection, flags, name, object_path, proxy_manager_type_func, NULL, cancellable, callback, user_data);
-}
-
-/**
- * proxy_manager_new_finish:
- * @res: A #GAsyncResult obtained from the #GAsyncReadyCallback passed to proxy_manager_new().
- * @error: Return location for error or %NULL.
- *
- * Finishes an operation started with proxy_manager_new().
- *
- * Returns: A #GDBusProxyManager object or %NULL if @error is
- * set. Free with g_object_unref().
- */
-GDBusProxyManager *
-proxy_manager_new_finish (
-    GAsyncResult   *res,
-    GError        **error)
-{
-  return g_dbus_proxy_manager_new_finish (res, error);
-}
-
-/**
- * proxy_manager_new_for_bus_sync:
- * @bus_type: A #GBusType.
- * @flags: Zero or more flags from the #GDBusProxyManagerFlags enumeration.
- * @name: The owner of the control object (unique or well-known name).
- * @object_path: The object path of the control object.
- * @cancellable: A #GCancellable or %NULL
- * @error: Return location for error or %NULL.
- *
- * Like proxy_manager_new_sync() but takes a #GBusType instead
- * of a #GDBusConnection.
- *
- * This is a synchronous failable constructor - the calling thread is
- * blocked until a reply is received. See proxy_manager_new_for_bus()
- * for the asynchronous version.
- *
- * Returns: A #GDBusProxyManager object or %NULL if @error is
- * set. Free with g_object_unref().
- */
-GDBusProxyManager *
-proxy_manager_new_for_bus_sync (
-    GBusType                bus_type,
-    GDBusProxyManagerFlags  flags,
-    const gchar            *name,
-    const gchar            *object_path,
-    GCancellable           *cancellable,
-    GError                **error)
-{
-  return g_dbus_proxy_manager_new_for_bus_sync (bus_type, flags, name, object_path,  proxy_manager_type_func, NULL, cancellable, error);
-}
-
-/**
- * proxy_manager_new_for_bus:
- * @bus_type: A #GBusType.
- * @flags: Zero or more flags from the #GDBusProxyManagerFlags enumeration.
- * @name: The owner of the control object (unique or well-known name).
- * @object_path: The object path of the control object.
- * @cancellable: A #GCancellable or %NULL
- * @callback: A #GAsyncReadyCallback to call when the request is satisfied.
- * @user_data: The data to pass to @callback.
- *
- * Like proxy_manager_new() but takes a #GBusType instead of a
- * #GDBusConnection.
- *
- * This is an asynchronous failable constructor. When the result is
- * ready, @callback will be invoked in the
- * <link linkend="g-main-context-push-thread-default">thread-default main loop</link>
- * of the thread you are calling this method from. You can
- * then call proxy_manager_new_for_bus_finish() to get the result. See
- * proxy_manager_new_for_bus_sync() for the synchronous version.
- */
-void
-proxy_manager_new_for_bus (GBusType                bus_type,
-    GDBusProxyManagerFlags  flags,
-    const gchar            *name,
-    const gchar            *object_path,
-    GCancellable           *cancellable,
-    GAsyncReadyCallback     callback,
-    gpointer                user_data)
-{
-  return g_dbus_proxy_manager_new_for_bus (bus_type, flags, name, object_path,  proxy_manager_type_func, NULL, cancellable, callback, user_data);
-}
-
-/**
- * proxy_manager_new_for_bus_finish:
- * @res: A #GAsyncResult obtained from the #GAsyncReadyCallback passed to proxy_manager_new_for_bus().
- * @error: Return location for error or %NULL.
- *
- * Finishes an operation started with proxy_manager_new_for_bus().
- *
- * Returns: A #GDBusProxyManager object or %NULL if @error is
- * set. Free with g_object_unref().
- */
-GDBusProxyManager *
-proxy_manager_new_for_bus_finish (GAsyncResult   *res,
-                                     GError        **error)
-{
-  return g_dbus_proxy_manager_new_for_bus_finish (res, error);
-}
-
diff --git a/src/shr-proxymanager.h b/src/shr-proxymanager.h
deleted file mode 100644
index 7c92626..0000000
--- a/src/shr-proxymanager.h
+++ /dev/null
@@ -1,99 +0,0 @@
-/* File:       shr-proxymanager.h
- *
- * Generated by GDBus Binding Tool 0.1. DO NOT EDIT.
- */
-
-#ifndef __SHR_PROXY_MANAGER_H__
-#define __SHR_PROXY_MANAGER_H__
-
-#include <gdbusinterface.h>
-#include <gdbusobjectproxy.h>
-#include <gdbusproxymanager.h>
-#include <gdbusobject.h>
-#include <gdbusobjectmanager.h>
-#include <gdbuscodegen-enumtypes.h>
-#include <shr-types.h>
-
-G_BEGIN_DECLS
-
-#define TYPE_PROXY_MANAGER         (_proxy_manager_get_type ())
-#define PROXY_MANAGER(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_PROXY_MANAGER, ProxyManager))
-#define PROXY_MANAGER_CLASS(k)     (G_TYPE_CHECK_CLASS_CAST((k), TYPE_PROXY_MANAGER, ProxyManagerClass))
-#define PROXY_MANAGER_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_PROXY_MANAGER, ProxyManagerClass))
-#define IS_PROXY_MANAGER(o)        (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_PROXY_MANAGER))
-#define IS_PROXY_MANAGER_CLASS(k)  (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_PROXY_MANAGER))
-
-typedef struct _ProxyManager        ProxyManager;
-typedef struct _ProxyManagerClass   ProxyManagerClass;
-typedef struct _ProxyManagerPrivate ProxyManagerPrivate;
-
-/**
- * ProxyManager:
- *
- * The #ProxyManager structure contains private data and should
- * only be accessed using the provided API.
- */
-struct _ProxyManager
-{
-  /*< private >*/
-  GDBusProxyManager parent_instance;
-  ProxyManagerPrivate *priv;
-};
-
-/**
- * ProxyManagerClass:
- * @parent_class: The parent class.
- *
- * Class structure for #ProxyManager.
- */
-struct _ProxyManagerClass
-{
-  GDBusProxyManagerClass parent_class;
-  /*< private >*/
-};
-
-GType proxy_manager_get_type () G_GNUC_CONST;
-
-GDBusProxyTypeFunc proxy_manager_get_type_func (void);
-
-void proxy_manager_new (
-        GDBusConnection        *connection,
-        GDBusProxyManagerFlags  flags,
-        const gchar            *name,
-        const gchar            *object_path,
-        GCancellable           *cancellable,
-        GAsyncReadyCallback     callback,
-        gpointer                user_data);
-GDBusProxyManager *proxy_manager_new_finish (
-        GAsyncResult           *res,
-        GError                **error);
-GDBusProxyManager *proxy_manager_new_sync (
-        GDBusConnection        *connection,
-        GDBusProxyManagerFlags  flags,
-        const gchar            *name,
-        const gchar            *object_path,
-        GCancellable           *cancellable,
-        GError                **error);
-void proxy_manager_new_for_bus (
-        GBusType                bus_type,
-        GDBusProxyManagerFlags  flags,
-        const gchar            *name,
-        const gchar            *object_path,
-        GCancellable           *cancellable,
-        GAsyncReadyCallback     callback,
-        gpointer                user_data);
-GDBusProxyManager *proxy_manager_new_for_bus_finish (
-        GAsyncResult   *res,
-        GError        **error);
-GDBusProxyManager *proxy_manager_new_for_bus_sync (
-        GBusType                bus_type,
-        GDBusProxyManagerFlags  flags,
-        const gchar            *name,
-        const gchar            *object_path,
-        GCancellable           *cancellable,
-        GError                **error);
-
-G_END_DECLS
-
-#endif /* __SHR_PROXY_MANAGER_H__ */
-
diff --git a/src/shr-types.h b/src/shr-types.h
deleted file mode 100644
index 27bb788..0000000
--- a/src/shr-types.h
+++ /dev/null
@@ -1,12 +0,0 @@
-/* File:       shr-types.h
- *
- * Generated by GDBus Binding Tool 0.1. DO NOT EDIT.
- */
-
-#ifndef __SHR_TYPES_H__
-#define __SHR_TYPES_H__
-
-#include <gio/gio.h>
-
-
-#endif /* __SHR_TYPES_H__ */
-- 
1.7.5.rc3

